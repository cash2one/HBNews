//有些结构需要重用 db发给gs 然后gs发给user. 不要这样 不然就失去了 修改db而不修改c之间协议的能力！
//像game_element这个必须保持一致  定义在两份文件里面容易出错   而客户端又要求只要一个整体的协议
//所以只好在这里加载gsc的协议文件

import "gs_c_proto.proto";


//gs发给dbs的 有response和notify
enum e_msg_gs_dbs{
	e_msg_gs_dbs_min = 0 ;			//必须为0  从0开始 方便为了funcmap数组存储
	e_msg_gs_dbs_user_info_req = 1 ;	//拉取玩家信息
	e_msg_gs_dbs_user_info_op_req = 2 ;	//操作玩家信息
	e_msg_gs_dbs_user_info_new_create_req = 3;	//新建玩家信息请求
	e_msg_gs_dbs_user_new_mail_req = 4;	//新建邮件
	e_msg_gs_dbs_edit_name_req = 5;		//编辑名字
	e_msg_gs_dbs_user_new_arena_mail_req = 6;
	e_msg_gs_dbs_user_friend_op_req = 7;
	e_msg_gs_dbs_search_user_req = 8;
	e_msg_gs_dbs_friend_offline_req = 9;
	e_msg_gs_dbs_rank_req = 10;
	e_msg_gs_dbs_guild_op_req = 11;
	e_msg_gs_dbs_max = 12;
};

//dbs发给gs的 有response和notify
enum e_msg_dbs_gs{
	e_msg_dbs_gs_min = 0 ;				//必须为0  从0开始 方便为了funcmap数组存储
	e_msg_dbs_gs_user_info_res = 1;			//请求玩家信息响应
	e_msg_dbs_gs_user_info_op_res = 2 ;		//操作玩家信息响应
	e_msg_dbs_gs_user_info_new_create_res = 3;	//新建玩家信息响应
	e_msg_dbs_gs_user_new_mail_res = 4;		//新建邮件响应
	e_msg_dbs_gs_edit_name_res = 5;
	e_msg_dbs_gs_user_new_arena_mail_res = 6;
	e_msg_dbs_gs_user_friend_op_res = 7;
	e_msg_dbs_gs_search_user_res = 8;
	e_msg_dbs_gs_friend_offline_res = 9;
	e_msg_dbs_gs_rank_res = 10;
	e_msg_dbs_gs_guild_op_res = 11;
	e_msg_dbs_gs_max = 12;	
};


enum e_dbsgs_errorcode{
	e_dbsgs_errorcode_min	= 0 ;			//因为初始化就为0 所以这里作为初始化
	e_dbsgs_errorcode_success = 1 ;		//操作成功
	e_dbsgs_errorcode_unkown_error = 2 ;		//未知错误
	e_dbsgs_errorcode_user_info_not_exsit = 3 ;//玩家信息不存在 或者存在错误
	e_dbsgs_errorcode_user_info_has_error = 4; //玩家数据有问题
	e_dbsgs_errorcode_user_edit_same_name = 5; //同名错误
	e_dbsgs_errorcode_friend_add_confirm_reach_max = 6;//待确认列表到达上限
	e_dbsgs_errorcode_friend_num_reach_max = 7;	//好友数目达到上限	
	e_dbsgs_errorcode_max = 8;
};


//子任务加载dbserver使用！ 并且gs也可以使用
message db_user_sub_task{
    required uint32 sub_task_id = 1 [default = 0]; /** 子任务ID */
    required uint32 star = 2 [default = 0]; /** 最佳星级 */
    required uint32 last_enter_timestamp = 3 [default = 0];  /** 上一次进入时间 */
    required uint32 last_day_enter_num = 4 [default = 0];  /** 上次进入当日的进入次数 */
    required uint32 total_enter_num = 5 [default = 0];  /** 总共的进入次数 */
    required uint32 last_reset_time = 6 ;	//上一次挑战次数重置时间
    required uint32 last_day_reset_num = 7 ;	//上一日已经重置的次数
};

message db_user_sub_task_array {
    repeated db_user_sub_task items = 1;
};


message db_user_hero_equip{
	required uint32 equip_id = 1 [default = 0];
	required uint32 level = 2 [default = 0];
	//required uint32 quality = 3 [default = 0]; //不需要 和id绑定了！
};

message db_user_hero_skill{
	/*
	enum e_skill_type{
		BISHA = 1;	//必杀
		AOYI = 2 ;	//奥义
		PASSIVE1 = 3;	//被动技能
		PASSIVE2 = 4;	//被动技能
		PASSIVE3 = 5;	//被动技能
	};
	*/

	required user_hero_skill.e_skill_type type = 1;

	//去掉这个字段 按照枚举来 必杀 奥义 被动1 2 3  英雄的各个技能技能id 客户端也有配置
	//required uint32 skill_id = 2 ;	//类型为必杀和奥义的时候 这里填0即可  为被动时 填被动的技能ID
	
	required uint32 level = 2 ;	//技能等级 为0时表示未开启
};

message db_user_hero{
    /** 英雄id */
    required uint32 hero_id = 1 ;
    /** 星级 */
    required uint32 star = 2 ;
    /** 品质 */
    required uint32 quality = 3 ;
    /** 等级 */
    required uint32 level = 4 ;
    /** 当前经验 */
    required uint32 cur_exp = 5 ;
    /*获取时间*/
    required uint32 got_timestamp = 6 ;
    /** 装备 */
    repeated db_user_hero_equip equips = 7 ;
    /** 技能 */
    repeated db_user_hero_skill skills = 8 ;
};


//为了可以作为一个整体 放到strategy
message db_user_hero_array {
    repeated db_user_hero items = 1;
};

//邮件
message db_mail_attach
{
	required uint32 attach_id = 1;			//GS为其分配的id
	required struct_game_element element = 2;	//相关物品,金币，经验等	
}

message db_user_mail
{
	required uint32		mail_id = 1;			// 邮件id
	required uint32		send_time = 2;			// 发送时间
	required MAIL_TYPE	type = 3;			// 邮件类型
	optional string		content = 4;			// 具体内容
	required MAIL_STATUS	status = 5;			// 邮件状态
	repeated db_mail_attach	attachs = 6;			// 邮件奖励信息	
	
}

message db_user_mail_array
{
	repeated db_user_mail mails = 1;
}

message db_user_shop_buy
{
	//required uint32 user_id = 1;		//玩家id
	required struct_game_element.EELEMENTTYPE element_type = 1;
	required uint32	element_id = 2;
	required uint32	last_day_buy_num = 3;
	required uint32	last_buy_time = 4;
};

message db_user_shop_buy_array
{
	repeated db_user_shop_buy items = 1;
}

message db_user_shop_item
{
	//required uint32 user_id = 1;
	//required user_shop.ESHOPTYPE shop_type = 1;
	required uint32 pos = 1;
	required struct_game_element.EELEMENTTYPE element_type = 2;
	required uint32 element_id = 3;
	required uint32 element_num = 4;
	required struct_game_element.EELEMENTTYPE consume_type = 5;
	required uint32 consume_id = 6;
	required uint32 consume_num = 7;
	required user_shop_item.ESHOPITEMFLAG flag = 8;
	required uint32 is_sold = 9;
}

/*
message db_user_shop_item_array
{
	repeated db_user_shop_item items = 1;
}
*/

message db_user_shop
{
	//required uint32 user_id;//玩家id
	required user_shop.ESHOPTYPE shop_type = 1;
	required uint32 last_auto_refresh_time = 2;		//最后一次自动刷新商店的时间 手动的时间不需要存储
	required uint32 last_manual_refresh_time = 3;		//上一次的手动刷新时间
	required uint32 last_day_manual_refresh_num = 4;	//最后一次刷新商店的那天 当天已经手动刷新了多少次
	//required uint32 total_manual_refresh_num = 4;		//历史累积手动刷新了多少次
	required uint32 random_open_start_timestamp = 5;	//不满足vip和运营开放时，随机开启商店时 商店开放的起始时间
	required uint32 random_open_end_timestamp = 6;		//不满足vip和运营开放时，随机开启商店时 商店开放的结束时间
	repeated db_user_shop_item items = 7;			//商店道具
};

message db_user_shop_array
{
	repeated db_user_shop items = 1;
}

message db_user_mission_event
{
	enum MISSION_EVENT_TYPE//(将此结构与客户端的结构分开，因为有些类型只在服务器使用， ！！！其中客户端用到的必须保持一直)
	{
		min = 0;
		SKILL_LEVEL_UP = 1;			
		RECHARGE = 2;				//充值
		COMMON_FB_COMPLETE = 3;			//完成副本
		COMMON_FB_ALL_THROUGH = 4;		//通关副本(SUB_TYPE表示副本ID)
		COMMON_FB_ALL_THROUGH_THREE_STAR = 5;	//三星通关副本(SUB_TYPE表示副本ID) 
		EQUIP_LEVEL_UP = 6;			//装备升级
		RECHARGE_MISSION_MONTH_CARD1 = 7;	//月卡1充值
		GIVE_FRIEND_HEALTH = 8;			//赠送好友体力
		HERO_COLLECT = 9;			//英雄收集
		HEALTH_MEAL = 10;			//体力套餐
		GET_REWARD = 11;			//任务领取
		RECHARGE_MISSION_MONTH_CARD2 = 12;	//月卡2充值
		MISSION_MAIN = 13;			//主线任务
		MISSION_FREE = 14;			//自由任务
		ACTIVITY = 15;				//活动
		JI_TAN = 16;				//祭坛抽奖
		ARENA_CHALLENGE = 17;			//竞技场挑战
		SHI_LIAN_TA = 18;			//试练塔
		CRUSADE = 19;				//远征
		LEVEL_UP = 20;				//等级提升
		BUY_GOLD = 21;				
		FB_FAIL = 22;				//副本挑战失败
		COMPLETE_CHAPTER_ALL_FB_THREE_STAR = 23;//三星通关特定章节所有副本(主线和支线，要求据点是大点)（sub_type表示哪一章节）
		ARENA_RANK_TOP = 24;			//竞技场头名奖励
		COMPLETE_CHAPTER_FB = 25;		//完成特定章节副本多少次(sub_type表示哪一个章节)
		
		//以下是服务器用到的枚举
		Buy_Health = 1000;
		Buy_Skill_Point = 1001;
		Login = 1002;				//登陆
		Del_Friend = 1003;			//删除好友
		Hero_Life = 1004;			//英雄复活（远征）
		Crusade_Reset = 1005;			//远征重置
		Crusade_Promote_Reward = 1006;	//提升奖励
		Crusade_Refresh_Buff = 1007;
		max = 1008;
	};
	
	enum MISSION_EVENT_SUB_TYPE
	{
		MIN = 0;
		NONE = 1;			//无子类型
		HERO_QUALITY_GREEN = 2;		//英雄绿色品质
		HERO_QUALITY_BLUE = 3;		//英雄蓝色品质
		HERO_STAR_FOUR = 4;		//四星英雄
		HERO_STAR_THREE = 5;		//三星英雄
		PLAYER_LEVEL = 6;		//普通等级
		VIP_LEVEL = 7;			//VIP等级
		HUAXIA = 8;			//华夏副本
		MAX = 9;
	};

	required MISSION_EVENT_TYPE mission_event_type = 1;		//任务事件类型
	required uint32 mission_event_sub_type = 2;	//任务时间子类型
	//(注:如果mission_event_type:月卡 last_update_timestamp:累计重置达到月卡1或者月卡2要求的数目时的时间 total_value:表示月卡累计充值数目，当其到达要求时将其值置0
	//	  mission_event_type:体力套餐 last_update_timestamp:上一次体力套餐领取时间
	//        mission_event_type:任务领取 mission_event_sub_type：任务id last_update_timestamp:任务领取时间)
	//	  mission_event_type:累计充值 total_value:玩家累计充值 
	optional uint32 last_update_timestamp = 3;	
	optional uint32 last_day_value = 4;		//最后一次发生任务事件时当天的该事件发生多少次
	optional uint32 total_value = 5;		//历史累计事件发生数量
}
//竞技场挑战记录
message db_user_arena_log{
	required bool is_attacker_win = 1;//挑战方是否获胜
	required uint32 time = 2;//挑战发起时间

	//我的信息
	required bool is_me_attacker = 3;// 我是否是挑战发起者
	required uint32 me_rank = 4;//我的排名
	
	//显示对手信息
	required uint32 match_user_id = 5;
	required uint32 match_rank = 6;
	required uint32 match_power = 7;
	required string match_name = 8;
	required uint32 match_level = 9;
	message db_user_arena_log_hero{
		required uint32 hero_id = 1;//id
		required uint32 quality = 2;//品质
		required uint32 level = 3;//等级
		required uint32 star = 4;//星级
	};
	repeated db_user_arena_log_hero match_heros = 10;//对手的出阵英雄信息
};

message db_user_mission_event_array
{
	repeated db_user_mission_event events = 1;
}

message db_user_mission_chain
{
	required uint32 mission_chain_id = 1;		//任务链id
	required uint32 last_get_reward_mission_id = 2;	//该任务链中最后领取奖励的任务id
	required uint32 last_get_reward_timestamp = 3;	//最后领取时间
}

message db_user_mission_chain_array
{
	repeated db_user_mission_chain chains = 1;
}

//玩家自己的竞技场信息
message db_user_arena{
	//这里只存储部分信息 很多其他信息 gs在启动时初始化竞技场已经得到了！
	required uint32 rank = 1;//排名
	required uint32 score = 2;//竞技场积分
	required uint32 last_challenge_time = 3;//上一次的挑战时间
	required uint32 last_day_challenge_num = 4;//last_challenge_time当天已经挑战的次数
	required uint32 history_highest_rank = 5;//历史最高排名
	repeated uint32 heros = 6;//防守英雄id
	required uint32 last_time_buy_arena_challenge = 7;	//上次购买挑战次数的时间
	required uint32 last_day_buy_arena_challenge_num = 8;	//上次当日购买挑战次数的次数，上限在sys_vip表
	repeated db_user_arena_log logs = 9;//竞技场日志 最多十条
	//repeated user_arena_contestant matchs = 8;//对手 会刷新  不需要做存储每次都刷新和计算
};

message db_user_base_info{
	required uint32 user_id = 1;
	required string name = 2;
	required uint32 level = 3;
	required uint32 exp = 4;
	required uint32 vip = 5;
	required uint32 diamond = 6;
	required uint32 gold = 7;
	required uint32 health_cur = 8;
	required uint32 health_last_update_timestamp = 9;		//体力数据上次计算刷新的时间
	required uint32 skill_point = 10;
	required uint32 skill_point_last_update_timestamp = 11;		//技能点上次计算刷新的时间
	required uint32 invoke_gold_free_left_num = 12;	//上一次金币免费召唤当天剩余使用次数
	required uint32 invoke_gold_free_update_timestamp = 13;		//上一次金币免费召唤功能使用的时间，只要剩余次数还有 并且这个时间距离现在超过了cd时间 客户端和服务器就判定可以使用这个功能
	required uint32 invoke_gold_n_total_num = 14;			//总共金币十连抽召唤的次数
	required uint32 invoke_diamond_free_left_num = 15;		//上一次钻石免费召唤当天剩余使用次数
	required uint32 invoke_diamond_free_update_timestamp = 16;	//上一次钻石免费召唤 计算cd刷新的时间 ： 初始化的时候和满到不满的这个时间
	required uint32 invoke_diamond_n_total_num = 17;		//总共钻石十连抽召唤的次数
	required uint32 head_id = 18;		//头像id即英雄id
	required uint32 head_frame_id = 19;	//头像框id即道具id
	required uint32 friend_point = 20;	//友情点
	required string signature = 21;		//个性签名
	required uint32 fight_power = 22;	//战斗力
	required uint32 crusade_point = 23;	//远征币
};

message db_user_sign{
	required uint32 sign_1_times = 1;			//签到累计次数
	required string sign_n_reward_status = 2;		//累计签到奖励领取状态
	required uint32 last_sign_time = 3;			//最后签到时间	
	required uint32 add_signed_times = 4;			//当月已使用补签次数
}

message db_user_novice_guide_array{
	repeated uint32 guide_ids = 14;	//新手引导
}


//好友
message db_user_friend{
	message friend_info{
		required friend_base_info base_info = 1;
		required uint32 friend_give_timestamp = 2;	//朋友赠送给我的时间
		required uint32 me_give_timestamp = 3;		//我赠送朋友时间
	}

	repeated friend_info	friends = 1;		//好友列表
	repeated friend_base_info   applies = 2;	//好友申请列表
	repeated friend_base_info  confirms = 3;	//待确认确认列表
	repeated friend_base_info  recommends = 4;	//推荐好友(5个) 
}

//远征
message db_user_crusade{
	repeated user_crusade.crusade_hero me_heros = 1; //远征参战英雄(没参战的就不用发)
	repeated user_crusade.crusade_hero enemy_heros = 2;//敌人信息
	required uint32 wave = 3;			//远征达到哪一波
	
}

//这一部分的数据 是为了更快
message db_user_guild_info{
	required uint32 guild_id = 1;			//所属公会id, 如果没有 则为0  如果离会了则是上一个公会的id 然后保存离会时间 但是并不会清空id 除非转会才会改变！！！
	required e_guild_position position = 2;		//我的职位 如果退会了或者没有进会就是position == EOutsider
	required uint32 leave_time = 3;			//如果position == EOutsider 表示玩家已离会 则这里记录上一次的离会时间
	required uint32 coin = 4;			//公会代币 因为公会解散member会被删掉(只是离会member还不会删掉 可以做同意申请 时的时间判断？！) 所以这里需要有 从而能拿到  member上则不需要存储coin

	message struct_apply{
		required uint32 guild_id = 1;	//我申请的公会
		required uint32 time = 2;	//申请时间
	};

	repeated struct_apply applys = 5;

	//死去的那些英雄不需要存在gs的全局公会信息里
	message struct_boss_info{
		required uint32 boss_position = 1;	//boss
		required uint32 boss_lose_hp = 2;
		required uint32 last_reset_time = 3;	//死亡英雄重置时间
		required uint32 last_day_reset_num = 4;	//重置次数

		message struct_dead_hero{
			required uint32 hero_id = 1;		//英雄id
			required uint32 dead_time = 2;		//死亡时间 每天会复活
		};

		repeated struct_dead_hero dead_heros = 5;
	};

	repeated struct_boss_info bosses = 6;

	//其他的那些信息 不存储在玩家身上 是全局的信息！！
};

message db_user_info{
	required db_user_base_info user_base_info = 1;		//玩家基本信息
	optional db_user_sub_task_array sub_tasks = 2;		//子任务信息  独立出来一个类 也为了可以传给gs上的user的strategy 当然不独立的话也可以传容器指针
	optional db_user_hero_array heros = 3;			//为了可以作为一个整体 放到
	optional struct_game_element_array items   = 4;		//道具
	optional db_user_mail_array   mails_received = 5;	//邮箱(已接收)
	optional db_user_mail_array   mails_unreceived =6;	//邮箱(未接收)
	optional db_user_shop_array shops = 7;			//商店信息
	optional db_user_shop_buy_array buy_items = 8;		//已购买道具信息
	//optional db_user_shop_item_array shop_items = 9;	//各个商店的信息 已经包含在shops中！
	optional db_user_mission_event_array mission_events = 10;//任务事件信息
	optional db_user_mission_chain_array mission_chains = 11;//任务链信息
	optional db_user_arena arena = 12;			//玩家竞技场信息
	optional db_user_sign sign = 13;			//玩家签到
	optional db_user_novice_guide_array guide = 14;		//新手引导
	optional db_user_crusade user_crusade = 15;		//远征
	optional db_user_friend user_friend = 16;		//好友信息
	optional db_user_guild_info guild = 17;			//公会信息
};

//<<< common -----------

message gs_dbs_user_info_req
{
	required uint32 user_id = 1;		//user_id
	required bytes user_connect_id = 2;	//为了回调的时候 gs知道是哪个玩家链接
};

message dbs_gs_user_info_res
{
	required uint32 error_code = 1;
	required uint32 user_id = 2;		//user_id
	required bytes user_connect_id = 3;	//为了回调的时候 gs知道是哪个玩家链接  后续的协议都不需要这个字段 因为此后gs上已经把userid和链接 绑定起来了
	optional db_user_info user_info = 4;
};

//gs->dbs新创建玩家信息请求
message gs_dbs_user_info_new_create_req{
	required db_user_info user_info = 1;
};

//dbs->gs新创建玩家信息响应
message dbs_gs_user_info_new_create_res{
	required uint32 error_code = 1;
};


//gs->dbs玩家信息操作请求
message gs_dbs_user_info_op_req{
	enum EOPType{
		Add_Or_Update = 1;
		Delete = 2;
		Add = 3;
		Update = 4;
	};

	message struct_op_base_info{
		required EOPType op_type = 1;
		optional string name = 2;
		optional uint32 level = 3;
		optional uint32 exp = 4;
		optional uint32 vip = 5;
		optional uint32 diamond = 6;
		optional uint32 gold = 7;
		optional uint32 health_cur = 8;
		optional uint32 health_last_update_timestamp = 9;
		optional uint32 skill_point = 10;
		optional uint32 skill_point_update_timestamp = 11;
		optional uint32 invoke_gold_free_left_num = 12;	//上一次金币免费召唤当天剩余使用次数
		optional uint32 invoke_gold_free_update_timestamp = 13;		//上一次金币免费召唤 计算cd刷新的时间 ： 初始化的时候和满到不满的这个时间
		optional uint32 invoke_gold_n_total_num = 14;			//总共金币十连抽召唤的次数
		optional uint32 invoke_diamond_free_left_num = 15;	//上一次钻石免费召唤当天剩余使用次数
		optional uint32 invoke_diamond_free_update_timestamp = 16;	//上一次钻石免费召唤 计算cd刷新的时间 ： 初始化的时候和满到不满的这个时间
		optional uint32 invoke_diamond_n_total_num = 17;		//总共钻石十连抽召唤的次数
		optional uint32 head_id = 18;
		optional uint32 head_frame_id = 19;
		optional uint32 friend_point = 20;
		optional string signature = 21;
		optional uint32 fight_power = 22;
		optional uint32 crusade_point = 23;
	};

	message struct_op_sub_task{
		required EOPType op_type = 1;
		required uint32 sub_task_id = 2;	/** 子任务ID */
		optional uint32 star = 3;		/** [default = 0]星级 */
		optional uint32 last_enter_timestamp = 4;/**  [default = 0]进入时间 */
		optional uint32 last_day_enter_num = 5; ///**  [default = 0]上次进入当日的进入次数 */ 不需要 sql里面操作即可！ 
		optional uint32 total_enter_num = 6;	///**  [default = 0]总共的进入次数 */ 不需要 sql里面操作即可！
		optional uint32 last_reset_time = 7;	//上一次挑战次数重置时间
		optional uint32 last_day_reset_num = 8;	//上一日已经重置的次数
	};
	
	//邮件
	message struct_op_mail{
		optional uint32 mail_id = 1;
		required EOPType op_type = 2;
		optional db_user_mail mail = 3;//add
	};

	//英雄 只有Add操作的时候需要同时写入数据库 装备和技能信息
	//其他时候只需要写入英雄基本信息 装备和技能信息的更新下面有独立的操作
	//1.英雄完整信息创建
	message struct_new_hero{
		//required EOPType op_type = 1;//这个消息本身已经决定了是要创建 就不要操作了
		required db_user_hero hero = 1;
	};

	//2.英雄基本信息操作  修改 和 删除
	message struct_op_hero_base{
		required EOPType op_type = 1;
		required uint32 hero_id = 2 ;///** 英雄id */
		optional uint32 star = 3 ;///** 星级 */
		optional uint32 quality = 4 ;///** 品质 */
		optional uint32 level = 5 ;///** 等级 */
		optional uint32 cur_exp = 6 ;///** 当前经验 */
	};

	//英雄装备操作
	message struct_op_hero_equip{
		required EOPType op_type = 1;
		required uint32 hero_id = 2;
		required uint32 equip_id = 3;
		optional uint32 level = 4;		//如果这个填了 表示要装备升级
		optional uint32 evolution_equip_id = 5;	//如果这个填了 表示要装备进化
	};

	//英雄技能操作
	message struct_op_hero_skill{
		required EOPType op_type = 1;
		required uint32 hero_id = 2;
		//required db_user_hero_skill skill = 3;
		required user_hero_skill.e_skill_type type = 3;
		required uint32 level = 4 ;	//技能等级
	};
	
	//商店级操作 添加新商店 或者刷新商店
	message struct_op_shop{
		//required EOPType op_type = 1;//这个消息本身已经决定了是要创建 就不要操作了
		enum ESHOPOPType{
			min = 0;
			CREATE = 1;		//新建
			AUTO_REFRESH = 2;	//自动刷新
			MANUAL_REFRESH = 3;	//手动刷新
			RANDOM_REFRESH = 4;	//随机到商店时 这里只刷新原有商店开放时间， 刷新创建则是复用的CREATE <-- RANDOM_UPDATE的时候也有可能会回AUTO_REFRESH 那时就用AUTO_REFRESH标识附带更新random time了！
			max = 5;
		};

		required ESHOPOPType shop_op_type = 1;
		required db_user_shop shop = 2;
	};

	//商店物品级操作， 一般为卖出， 此时 修改商店物品信息
	message struct_op_shop_item{
		//required EOPType op_type = 1;//这个消息本身已经决定了行为 就需要这个定义了
		
		//>>>> 修改商店物品信息 用的
		required user_shop.ESHOPTYPE shop_type = 1;
		//required uint32 pos = 2;
		required db_user_shop_item item = 2; // 实际上更新操作只有售出 可以优化为只传pos过来！
	};

	/* 只有添加和更新 所以直接重用
	message struct_op_buy_shop_item{
		//required EOPType op_type = 1;//这个消息本身已经决定了行为 就需要这个定义了
		//>>>> 购买信息 用的
		required struct_game_element.EELEMENTTYPE element_type = 1;
		required uint32	element_id = 2;
		required uint32	last_day_buy_num = 3;
		required uint32	last_buy_time = 4;
	};
	*/

	message struct_op_mission{
		optional db_user_mission_event mission_event = 1;//任务事件更新
		optional db_user_mission_chain mission_chain = 2;//任务链更新	
	}

	//添加
	message struct_new_arena{
		required uint32 rank = 1;			//这个字段只作添加玩家信息时使用 更新时不在这里！ 在struct_op_arena_challenge请求里面用存储过程修改！
		required uint32 score = 2;			//竞技场积分
		required uint32 last_challenge_time = 3;	//上一次的挑战时间
		required uint32 last_day_challenge_num = 4;	//last_challenge_time当天已经挑战的次数
		required uint32 history_highest_rank = 5;	//历史最高排名
		repeated uint32 heros = 6;			//防守英雄id， 全量更新
		required uint32 last_time_buy_arena_challenge = 7;	//上次购买挑战次数的时间
		required uint32 last_day_buy_arena_challenge_num = 8;	//上次当日购买挑战次数的次数，上限在sys_vip表
	};
	
	//修改新的竞技场参战者信息  没有删除，
	//只给挑战者修改排名
	message struct_op_arena{
		required EOPType op_type = 1;			//操作类型 只有更新 暂时没有删除
		optional uint32 rank = 2;			//这个字段只作添加玩家信息时使用 更新时不在这里！ 在struct_op_arena_challenge请求里面用存储过程修改！
		optional uint32 score = 3;			//竞技场积分
		optional uint32 last_challenge_time = 4;	//上一次的挑战时间
		optional uint32 last_day_challenge_num = 5;	//last_challenge_time当天已经挑战的次数
		optional uint32 history_highest_rank = 6;	//历史最高排名
		repeated uint32 heros = 7;			//防守英雄id， 全量更新
		optional uint32 last_time_buy_arena_challenge = 8;	//上次购买挑战次数的时间
		optional uint32 last_day_buy_arena_challenge_num = 9;	//上次当日购买挑战次数的次数，上限在sys_vip表
	};

	/*
	//更新队伍信息 队伍信息全部发过来 如果玩家记录不存在
	message struct_op_arena_team{
		repeated uint32 heros = 1;//新的队伍英雄id
	};
	*/
	
	//struct_op_arena不能置空队伍 由这里做
	message struct_clear_arena_team{
	};

	//添加竞技场挑战结果 给内存双方添加日志 并只给被挑战者修改名次
	//给db 添加一条日志 并只给被挑战者修改名次
	message struct_op_arena_challenge{
		//>>>user_arena_log和user_arena用到的
		required uint32 attacker_user_id = 1;//挑战者user_id
		required uint32 attacker_rank = 2;//挑战者排名
		required uint32 attacker_power = 3;//挑战者此次挑战的战斗力
		required string attacker_name = 4;
		required uint32 attacker_level = 5;

		/*
		required uint32 attacker_hero_id1 = 6;
		required uint32 attacker_hero_quality1 = 7;
		required uint32 attacker_hero_id2 = 8;
		required uint32 attacker_hero_quality2 = 9;
		required uint32 attacker_hero_id3 = 10;
		required uint32 attacker_hero_quality3 = 11;
		required uint32 attacker_hero_id4 = 12;
		required uint32 attacker_hero_quality4 = 13;
		required uint32 attacker_hero_id5 = 14;
		required uint32 attacker_hero_quality5 = 15;
		*/


		repeated db_user_arena_log.db_user_arena_log_hero attacker_heros = 6;

		required uint32 defender_user_id = 7;//防守者user_id
		required uint32 defender_rank = 8;//防守者排名
		required uint32 defender_power = 9;//防守者战斗力
		required string defender_name = 10;
		required uint32 defender_level = 11;
		
		/*
		required uint32 defender_hero_id1 = 21;
		required uint32 defender_hero_quality1 = 22;
		required uint32 defender_hero_id2 = 23;
		required uint32 defender_hero_quality2 = 24;
		required uint32 defender_hero_id3 = 25;
		required uint32 defender_hero_quality3 = 26;
		required uint32 defender_hero_id4 = 27;
		required uint32 defender_hero_quality4 = 28;
		required uint32 defender_hero_id5 = 29;
		required uint32 defender_hero_quality5 = 30;
		*/

		repeated db_user_arena_log.db_user_arena_log_hero defender_heros = 12;

		required uint32 is_win = 13;//挑战者是否获胜
		required uint32 time = 14;//挑战发起时间
		//<<< user_arena_log用到的
		
		//>>>user_arena用到的
		//required uint32 attacker_last_day_challenge_num = 33;
		//以下为获胜时才用到的值
		optional uint32 score = 15;//获胜时的积分 目前用不到
		//获胜并且历史排名有提高时才用到 通过数据库来操作！
		//optional uint32 history_highest_rank = 35;//
	};
	
	message struct_op_sign
	{
		required EOPType op_type = 1;
		optional uint32 sign_1_times = 2;			//签到累计次数
		optional string sign_n_reward_status = 3;		//累计签到奖励领取状态
		optional uint32 last_sign_time = 4;			//最后签到时间	
		optional uint32 add_signed_times = 5;			//使用不签次数
	}
	
	message struct_new_sign{
		required uint32 sign_1_times = 1;			//签到累计次数
		required string sign_n_reward_status = 2;		//累计签到奖励领取状态
		required uint32 last_sign_time = 3;			//最后签到时间	
		required uint32 add_signed_times = 4;			//使用不签次数
	}	
	
	message struct_op_novice_guide{
		required EOPType op_type = 1;
		required uint32 guide_id = 2;
	}
	
	message struct_new_user_statis{
		required uint32 level = 1;		//事件触发时的等级(当事件是等级提升时是提升后的的等级)
		optional uint32 fight_power = 2;	//玩家战力
		required uint32 vip = 3;
		required uint32 occur_time = 4;		//事件发生的时间
		required uint32 event_type = 5;		//事件类型
		required uint32 cur_id = 6;		//id(统计类型不同代表不同的id)
	}
	
	message struct_new_mail{
		required db_user_mail mail = 1;		//邮件主体
	}
	
	message struct_op_friend{
		enum OP_TYPE{
			GET_ELEMENT1 = 1;		//领取物品
			GET_ELEMENTN = 2;		//全部领取
			GIVE_ELEMENT1 = 3;		//赠送物品
			GIVE_ELEMENTN = 4;		//全部赠送物品
			GIVE_UP_APPLY1 = 5;		//取消申请
			GIVE_UP_APPLYN = 6;		//取消全部申请
			AFFIRM_AGREE1 = 7;		//确认申请
			AFFIRM_AGREEN = 8;		//全部确认
			AFFIRM_REFUSE1 = 9;		//拒绝确认
			AFFIRM_REFUSEN = 10;		//全部拒绝确认
			ADD_FRIEND_GS_ONLINE = 11;	//添加好友（该好友gs在线，直接跟新到内存和数据库）
			//ADD_FRIEND_GS_NOT_ONLINE = 12;	//添加好友 (gs不在线，需要查询数据库看玩家的待确认列表是否已满，如果没满同步，满了返回错误码到GS)
			DEL_FRIEND = 12;		//删除好友
			DEL_RECOMMEND_FRIEND = 13;	//删除推荐好友
		}
		required OP_TYPE op_type = 1;
		optional uint32 friend_id = 2;
		optional friend_base_info base_info = 3;
	}

	message struct_op_crusade{
		enum CRUSADE_OP_TYPE{
			CRUSADE_END = 1;//远征结束(敌人信息直接用这个替换,自己信息没有则添加，有则直接替换)
			HERO_LIFE = 2;	//英雄复活(直接将英雄从列表中删除)
			RESET = 3;	//远征重置(敌人，自己英雄删除 ,重置波数为1，EEventType_Crusade_Hero_Life， EEventType_Crusade_Refresh_Buff， EEventType_Crusade_Promote_Reward事件删除)
		}
		message crusade_end{
			repeated user_crusade.crusade_hero me_heros = 2;//我的英雄信息
			repeated user_crusade.crusade_hero enemy_heros = 3;//敌人信息
			required uint32 wave = 4;			//远征达到哪一波
		}
		required CRUSADE_OP_TYPE op_type = 1;		//add_or_update 对于
		optional crusade_end end = 2;	//CRUSADE_END
		optional uint32 hero_id = 3;	//HERO_LIFE
		
	}
	
	required uint32 user_id = 1 ;			//用户id
	optional struct_op_base_info base_info = 2;	//用户基本信息操作
	optional struct_op_sub_task sub_task = 3;		//子任务操作
	
	//英雄 只有Add操作的时候需要同时写入数据库 装备和技能信息
	//其他时候只需要写入英雄基本信息 装备和技能信息的更新 下面有独立的操作
	repeated struct_new_hero new_heros = 4;			//创建新英雄 英雄的完整信息！
	repeated struct_op_hero_base heros_base = 5;		//英雄基本信息操作
	repeated struct_op_hero_equip hero_equips = 6;		//英雄装备操作
	repeated struct_op_hero_skill hero_skills = 7;		//英雄技能操作
	repeated struct_game_element items = 8;			//道具
	repeated struct_op_mail op_mails = 9;			//邮件
	repeated struct_op_shop shops = 10;			//商店创建或者刷新
	repeated struct_op_shop_item shop_items = 11;		//商店道具购买相关  更新 user_shop_item表
	repeated db_user_shop_buy buy_items = 12;		//更新购买信息	更新 user_buy_item表

	optional struct_new_arena new_arena = 13;		//新增加玩家竞技场信息 rank的添加在这里
	optional struct_op_arena op_arena = 14;			//修改玩家竞技场信息  修改不在这里！因此不要设置
	optional struct_clear_arena_team clear_arena_team = 15;	//清空竞技场出战英雄 <-- 如果是修改则使用上面的那个来操作防守英雄
	optional struct_op_arena_challenge arena_challenge = 16;//竞技场挑战结果 防守者的排名如果变动在这里修改
	repeated struct_op_mission missions = 17;	//任务信息
	optional struct_op_sign sign = 18;		//签到
	optional struct_new_sign new_sign = 19;		//新建签到信息
	optional struct_op_novice_guide novice_guide = 20;	//新手引导
	optional struct_new_user_statis new_user_statis = 21;		//玩家成长信息
	optional struct_new_mail new_mail = 22;		//数据库邮件请求
	repeated struct_op_friend op_friends = 23;	//好友操作
	optional struct_op_crusade op_crusade = 24;		//远征
};

//dbs->gs玩家信息操作响应
message dbs_gs_user_info_op_res{
	required uint32 error_code = 1;
};

message gs_dbs_user_new_mail_req{
	repeated uint32 send_user_ids = 1;	//发送的玩家(如果不填，表示全服)
	required db_user_mail mail = 2;		//邮件主体
}

message dbs_gs_user_new_mail_res{
	required uint32 error_code = 1;
	repeated uint32 user_ids = 2;		//发送的玩家id
	repeated uint32 mail_ids = 3;		//发送的邮件id
	repeated uint32 mail_attach_ids = 4;	//附件id
	required db_user_mail mail = 5;		//发送的邮件
}


message arena_mail{
	required uint32 user_id = 1;
	required db_user_mail mail = 2;
}
message gs_dbs_user_new_arena_mail_req{
	
	repeated arena_mail mails = 1;
}

message dbs_gs_user_new_arena_mail_res{
	required int32 error_code = 1;
	repeated arena_mail mails = 2;
}

//修改名字
message gs_dbs_edit_name_req{
	required uint32 user_id = 1;
	required string name = 2;
}

message dbs_gs_edit_name_res{
	required uint32 error_code = 1;
	required uint32 user_id = 2;//为了回调知道哪个用户
	optional string name = 3;
}

//好友
message gs_dbs_user_friend_op_req{
	enum OP_TYPE{
		FRIEND_GIVE_ELEMENT = 1;	//好友赠送物品
		FRIEND_GIVE_UP_APPLY = 2;	//好友取消申请
		FRIEND_AFFIRM_AGREE = 3;	//好友确认申请(在线走此时已经确定不会超出数据范围，不在线走gs_dbs_friend_offline_req)
		FRIEND_AFFIRM_REFUSE = 4;	//好友拒绝申请
		FRIEND_DEL_FRIEND = 5;		//好友删除好友
		FRIEND_ADD_FRIEND = 6;		//添加好友(在线走此时已经确定不会超出数据范围，不在线走gs_dbs_friend_offline_req)
	}
	required OP_TYPE op_type = 1;
	required uint32 user_id = 2;
	optional uint32 friend_user_id = 3;
	optional friend_base_info base_info = 4;
}

message dbs_gs_user_friend_op_res{
	required uint32 error_code = 1;
}

//搜索玩家
message gs_dbs_search_user_req{
	required uint32 user_id = 1;
	optional uint32 search_id = 2;
	optional string search_name = 3;
}

message dbs_gs_search_user_res{
	required uint32 error_code = 1;
	required uint32 user_id = 2;//回调玩家id
	optional friend_base_info base_info = 3;
}

//邀请好友，不在线，db那边判断如果对方待确认列表不满，直接同步，如果满了返回错误码到GS GS再将结果返回客户端
message gs_dbs_friend_offline_req{
	enum OP_TYPE{
		ADD_FRIEND = 1;//添加好友
		AFFIRM_AGREE1 = 2;//确认好友
		AFFIRM_AGREEN = 3;//全部确认
	}
	required OP_TYPE op_type = 1;
	required uint32 user_id = 2;
	optional uint32 friend_id = 3;
	optional friend_base_info friend_info = 4;
	optional friend_base_info me_info = 5;
	repeated uint32 affirm_ids = 6;		//待确认的id集合
}

message dbs_gs_friend_offline_res{
	required uint32 error_code = 1;
	required gs_dbs_friend_offline_req.OP_TYPE op_type = 2;
	required uint32 user_id = 3;
	optional friend_base_info info = 4;
	repeated uint32 affirm_ids = 5;
}

message gs_dbs_rank_req{
}

message dbs_gs_rank_res{
	message rank_brief_info{
		required uint32 rank = 1;
		required uint32 user_id = 2;
	}
	
	message rank_info{
		required uint32 user_id = 1;
		required uint32 head_id = 2;
		required uint32 head_frame_id =3;
		required uint32 level = 4;
		required string name = 5;
		required uint32 vip = 6;
		required uint32 fight_power = 7;
	}
	required uint32 error_code = 1;
	repeated rank_brief_info level_brief_ranks = 2;//等级排行(全部)
	repeated rank_brief_info fight_power_brief_ranks = 3;//战斗力排行(全部)
	
	repeated rank_info level_ranks = 4;//等级排行(前50 详细)
	repeated rank_info fight_power_ranks = 5;//战斗力排行(前50 详细)
	repeated rank_info arena_ranks = 6;	//竞技场排行(前50 详细) 因为GS上的竞技场缺少必须信息
}

//gs->dbs玩家行会操作请求
message gs_dbs_guild_op_req{
//>>>>>>>>>>>>>>>>>>>>>>>>>>guild操作

	//没有读取 因为gs在初始化的时候会自己来读取
	
	//添加
	message struct_new_guild{
		required string id = 1;
		required string name = 2;		//公会名字
		required uint32 creator_user_id = 3;	//创建者
		required uint32 create_time = 4;	//创建时间
		required uint32 president_user_id = 5;	//当前会长
		required e_apply_switch_status status = 6;		//公会当前状态 0关闭招募 1.加入需申请 2.自由加入
		required uint32 flag = 7;		//公会标志旗帜
		//required uint32 level = 8;		//公会等级 由公会经验值也就是贡献度决定
		required uint32 contribution_point = 9;	//公会当前经验值 也叫公会总活跃度 贡献度
		required uint32 coin = 10;		//公会货币
		required string announcement = 11;	//公告
	};

	//也会修改db_user_info里面的guild部分！
	message struct_update_guild{
		required uint32 guild_id = 1;		//公会id
		optional string name = 2;		//公会名字
		optional uint32 president_user_id = 3;	//当前会长
		optional e_apply_switch_status status = 4;		//公会当前状态 0关闭招募 1.加入需申请 2.自由加入
		optional uint32 flag = 5;		//公会标志旗帜
		//optional uint32 level = 6;		//公会等级 由公会经验值也就是贡献度决定
		optional uint32 contribution_point = 6;	//公会当前经验值 也叫公会总活跃度 贡献度
		optional uint32 coin = 7;		//公会货币
		optional string announcement = 8;	//公告
		//optional uint32 max_boss_position = 10;	//当前已开启的最大boss位置  不需要存储 直接根据
	};
	
	//此命令会更新所有有效（已提前离会的不更新信息）成员（其实只有自己）的信息 但不删成员记录 因为代币保留  不会删掉公会记录（是设置status为disband状态！） 删除所有申请记录
	//删除boss信息 删除攻击者信息 删除死亡英雄数据
	//清空攻击者 和 死亡英雄
	////db那边清理内存中 会员的玩家 身上清空攻击者 和 死亡英雄  还有数据库中的
	message struct_delete_guild{
		required uint32 guild_id = 1;		//公会id
		//required uint32 time = 2;		//解散的时间  不需要直接设置为0
	};
//<<<<<<<<<<<<<<<<<<<<<<<<<< guild相关操作


//>>>>>>>>>>>>>>>>>>>>>>>>>>member相关操作
	//新增加公会加入申请
	message struct_new_apply{
		repeated uint32 guild_ids = 1;		//要假如的公会id
		required uint32 user_id = 2;		//玩家id
		required uint32 time = 3;		//申请时间
		//required uint32 status = 4;		//申请状态 0已提交未处理 1同意 2拒绝    实际上没有必要了 因为一经操作 就删除了
	};

	//实际上没有必要更新了 因为一经操作 就删除了
	message struct_delete_apply{
		enum EOPType{
			G1_A1 = 1;//公会删除一个玩家的申请 guild_id user_id必填
			G1_AN = 2;//公会删除所有对它的玩家申请  guild_id必填 user_id不填
			A1_GN = 3;//删除某玩家身上所有的公会申请 user_id必填 guild_id不填
		};

		required EOPType op_type = 1;		
		optional uint32 guild_id = 2;		//公会id
		optional uint32 user_id = 3;		//玩家id
	};
	
	//新增加公会成员 //转会也可以通过这个来操作！
	//实际上如果已经存在记录 则由gs那端判断 并且走更新流程
	message struct_new_member{
		required uint32 user_id = 1;	
		required uint32 guild_id = 2;			
		required e_guild_position position = 3;		//职位 1普通成员 2副会长
		required uint32 join_time = 4;
		//required uint32 is_leaving = 5;		//1已离开 要等24小时才能再进入新公会
		required uint32 leave_time = 5;
		required uint32 contribution_point = 6;	//公会成员活跃度 贡献度
		required uint32 coin = 7;		//公会成员货币
	};

	//转会也可以通过这个来操作！
	//玩家离会时 玩家身上的死亡英雄需要清空 以免带入下一个公会   db里的死亡英雄信息在玩家离会操作db命令上做掉
	message struct_update_member{
		//required uint32 guild_id = 1;			
		required uint32 user_id = 1;			//可选 如果不设置 则只有解散公会的时候会这么用 只更新position和leavetime！	
		optional e_guild_position position = 2;		//职位 1普通成员 2副会长
		optional uint32 join_time = 3;
		//optional uint32 is_leaving = 4;		//1已离开 要等24小时才能再进入新公会
		optional uint32 leave_time = 4;
		optional uint32 contribution_point = 5;	//公会成员活跃度 贡献度
		optional uint32 coin = 6;		//公会成员货币

		optional uint32 new_guild_id = 7;	//可选 玩家转会时新的公会 此时user_id必须要被设置！	
	};

	/*//不会用到这个 即使被踢时不需要保存时间 但是个人的公会代币还是要保存的
	//删除成员 解散公会也会用到这个
	message struct_delete_member{
		enum EOPType{
			ONE = 1;
			ALL = 2;
		};

		required EOPType op_type = 1;		
		required uint32 guild_id = 2;		//公会id
		optional uint32 user_id = 3;		//玩家id
	};
	*/

//<<<<<<<<<<<<<<<<<<<<<<<<<< member相关操作

//>>>>>>>>>>>>>>>>>>>>>>>>>> boss相关操作

	//激活新boss！
	message struct_new_boss{
		required uint32 guild_id = 1;		//
		required uint32 position = 2;
		//required uint32 boss_id = 3;
		//required uint32 status = 3;		//不需要 存在就是被激活了 是否已经被激活 0没有激活 1已经有
		//required uint32 level = 5;		//boss的等级 用来给计算血量和攻击
		required uint32 lose_hp = 3;		//已经丢失的生命值
		required uint32 killer_user_id = 4;	//被谁补刀的
		//required string killer_name = 5;	
		//required uint32 killer_head_id = 6;
		//required uint32 killer_head_frame_id = 7;
		required uint32 killed_num = 5;		//被击杀的次数 为了判断是否下一个boss可以开启
	};

	//更新boss 或者复活boss！
	message struct_update_boss{
		required uint32 guild_id = 1;		//
		required uint32 position = 2;
		//optional uint32 boss_id = 3;
		//optional uint32 status = 3;		//不需要 存在就是被激活了  是否已经被激活 0没有激活 1已经有
		//optional uint32 level = 5;		//boss的等级 用来给计算血量和攻击
		optional uint32 lose_hp = 3;		//已经丢失的生命值
		optional uint32 killer_user_id = 4;	//被谁补刀的
		//optional string killer_name = 5;	
		//optional uint32 killer_head_id = 6;
		//optional uint32 killer_head_frame_id = 7;
		optional uint32 killed_num = 5;		//被击杀的次数 为了判断是否下一个boss可以开启
	};

	//添加boss攻击者数据
	//如果记录已经存在 则需要在gs那一段判断 然后走更新流程
	//这个也做 更新boss攻击者数据
	message struct_new_boss_attacker{
		required uint32 user_id = 1;
		required uint32 boss_position = 2;
		required uint32 boss_lose_hp = 3;
		required uint32 last_reset_time = 4;
		required uint32 last_day_reset_num = 5;
	};

	/*//全部交由上面 省去逻辑层判断是否首次
	message struct_update_boss_attacker{
		required uint32 user_id = 1;
		required uint32 boss_position = 2;
		optional uint32 boss_lose_hp = 3;
		optional uint32 last_reset_time = 4;
		optional uint32 last_day_reset_num = 5;
	};
	*/
	
	//删除boss攻击者数据 删除死亡英雄数据
	//可以删一个会员 对一个boss的
	//可以删一个会员 对所有boss的
	//可以删所有会员 对一个boss的
	//可以删所有会员 对所有boss的
	message struct_delete_boss_attacker{
		enum EOPType{
			M1_B1 = 1;//可以删一个会员 对一个boss的
			M1_BN = 2;//可以删一个会员 对所有boss的
			MN_B1 = 3;//可以删所有会员 对一个boss的  user_id不用设置 position需要设置
			MN_BN = 4;//可以删所有会员 对所有boss的  解散公会时做的 但是这里并不会用到 而是在struct_delete_guild的时候做
		};

		required EOPType op_type = 1;
		optional uint32 user_id = 2;
		optional uint32 boss_position = 3;
		optional uint32 guild_id = 4;
	};

	//
	message struct_new_dead_hero{
		required uint32 user_id = 1;
		required uint32 boss_position = 2;
		repeated uint32 heros_id = 3;
		required uint32 dead_time = 4;
	};

	//1.刷新boss的时候 会删除死于此boss下的所有会员的英雄
	//2.会员手动重置 会重置自己手上的死于某boss下的所有英雄
	message struct_delete_dead_hero{
		enum EOPType{
			M1 = 1;//死于此boss下的一个会员的英雄  会员重置英雄
			MN = 2;//死于此boss下的所有会员的英雄	会长复活boss
		};

		required EOPType op_type = 1;
		required uint32 boss_position = 2;
		optional uint32 user_id = 3;
		optional uint32 guild_id = 4;
	};


//<<<<<<<<<<<<<<<<<<<<<<<<<< boss相关操作
	optional struct_new_guild		new_guild = 1;
	optional struct_update_guild		update_guild = 2;
	optional struct_delete_guild		delete_guild = 3;

	optional struct_new_apply		new_apply = 4;
	optional struct_delete_apply		delete_apply = 5;
	optional struct_new_member		new_member = 6;
	repeated struct_update_member		update_members = 7;//会长转让的时候 就有两个位置需要更新
	//optional struct_delete_member		delete_member = 8;	//不会用到这个 即使被踢时不需要保存时间 但是个人的公会代币还是要保存的
	optional struct_new_boss		new_boss = 9;
	optional struct_update_boss		update_boss = 10;
	optional struct_new_boss_attacker	new_boss_attacker = 11;
	//optional struct_update_boss_attacker	update_boss_attacker = 12;
	optional struct_delete_boss_attacker	delete_boss_attacker = 13;
	optional struct_new_dead_hero		new_dead_hero = 14;
	optional struct_delete_dead_hero	delete_dead_hero = 15;
};


message dbs_gs_guild_op_res{
	required int32 error_code = 1;
}