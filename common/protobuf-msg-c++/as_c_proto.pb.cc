// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: as_c_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "as_c_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* c_as_register_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_as_register_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* as_c_register_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  as_c_register_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_as_login_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_as_login_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* area_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* area_EAreaStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* area_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  area_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* as_c_login_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  as_c_login_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_as_login_if_no_register_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_as_login_if_no_register_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* as_c_login_if_no_register_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  as_c_login_if_no_register_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_as_enter_area_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_as_enter_area_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* as_c_enter_area_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  as_c_enter_area_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_as_logout_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_as_logout_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* as_c_logout_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  as_c_logout_res_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* e_asc_proto_version_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_msg_c_as_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_msg_as_c_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_asc_errorcode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_as_5fc_5fproto_2eproto() {
  protobuf_AddDesc_as_5fc_5fproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "as_c_proto.proto");
  GOOGLE_CHECK(file != NULL);
  c_as_register_req_descriptor_ = file->message_type(0);
  static const int c_as_register_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_register_req, plantform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_register_req, plantform_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_register_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_register_req, password_),
  };
  c_as_register_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_as_register_req_descriptor_,
      c_as_register_req::default_instance_,
      c_as_register_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_register_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_register_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_as_register_req));
  as_c_register_res_descriptor_ = file->message_type(1);
  static const int as_c_register_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_register_res, error_code_),
  };
  as_c_register_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      as_c_register_res_descriptor_,
      as_c_register_res::default_instance_,
      as_c_register_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_register_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_register_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(as_c_register_res));
  c_as_login_req_descriptor_ = file->message_type(2);
  static const int c_as_login_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_login_req, plantform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_login_req, plantform_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_login_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_login_req, password_),
  };
  c_as_login_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_as_login_req_descriptor_,
      c_as_login_req::default_instance_,
      c_as_login_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_login_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_login_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_as_login_req));
  area_descriptor_ = file->message_type(3);
  static const int area_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area, status_),
  };
  area_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_descriptor_,
      area::default_instance_,
      area_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area));
  area_EAreaStatus_descriptor_ = area_descriptor_->enum_type(0);
  area_list_descriptor_ = file->message_type(4);
  static const int area_list_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list, areas_),
  };
  area_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      area_list_descriptor_,
      area_list::default_instance_,
      area_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(area_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(area_list));
  as_c_login_res_descriptor_ = file->message_type(5);
  static const int as_c_login_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_login_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_login_res, areas_),
  };
  as_c_login_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      as_c_login_res_descriptor_,
      as_c_login_res::default_instance_,
      as_c_login_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_login_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_login_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(as_c_login_res));
  c_as_login_if_no_register_req_descriptor_ = file->message_type(6);
  static const int c_as_login_if_no_register_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_login_if_no_register_req, plantform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_login_if_no_register_req, plantform_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_login_if_no_register_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_login_if_no_register_req, password_),
  };
  c_as_login_if_no_register_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_as_login_if_no_register_req_descriptor_,
      c_as_login_if_no_register_req::default_instance_,
      c_as_login_if_no_register_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_login_if_no_register_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_login_if_no_register_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_as_login_if_no_register_req));
  as_c_login_if_no_register_res_descriptor_ = file->message_type(7);
  static const int as_c_login_if_no_register_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_login_if_no_register_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_login_if_no_register_res, areas_),
  };
  as_c_login_if_no_register_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      as_c_login_if_no_register_res_descriptor_,
      as_c_login_if_no_register_res::default_instance_,
      as_c_login_if_no_register_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_login_if_no_register_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_login_if_no_register_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(as_c_login_if_no_register_res));
  c_as_enter_area_req_descriptor_ = file->message_type(8);
  static const int c_as_enter_area_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_enter_area_req, area_id_),
  };
  c_as_enter_area_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_as_enter_area_req_descriptor_,
      c_as_enter_area_req::default_instance_,
      c_as_enter_area_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_enter_area_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_enter_area_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_as_enter_area_req));
  as_c_enter_area_res_descriptor_ = file->message_type(9);
  static const int as_c_enter_area_res_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_enter_area_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_enter_area_res, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_enter_area_res, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_enter_area_res, token_),
  };
  as_c_enter_area_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      as_c_enter_area_res_descriptor_,
      as_c_enter_area_res::default_instance_,
      as_c_enter_area_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_enter_area_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_enter_area_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(as_c_enter_area_res));
  c_as_logout_req_descriptor_ = file->message_type(10);
  static const int c_as_logout_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_logout_req, plantform_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_logout_req, plantform_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_logout_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_logout_req, password_),
  };
  c_as_logout_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_as_logout_req_descriptor_,
      c_as_logout_req::default_instance_,
      c_as_logout_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_logout_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_as_logout_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_as_logout_req));
  as_c_logout_res_descriptor_ = file->message_type(11);
  static const int as_c_logout_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_logout_res, error_code_),
  };
  as_c_logout_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      as_c_logout_res_descriptor_,
      as_c_logout_res::default_instance_,
      as_c_logout_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_logout_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(as_c_logout_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(as_c_logout_res));
  e_asc_proto_version_descriptor_ = file->enum_type(0);
  e_msg_c_as_descriptor_ = file->enum_type(1);
  e_msg_as_c_descriptor_ = file->enum_type(2);
  e_asc_errorcode_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_as_5fc_5fproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_as_register_req_descriptor_, &c_as_register_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    as_c_register_res_descriptor_, &as_c_register_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_as_login_req_descriptor_, &c_as_login_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_descriptor_, &area::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    area_list_descriptor_, &area_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    as_c_login_res_descriptor_, &as_c_login_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_as_login_if_no_register_req_descriptor_, &c_as_login_if_no_register_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    as_c_login_if_no_register_res_descriptor_, &as_c_login_if_no_register_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_as_enter_area_req_descriptor_, &c_as_enter_area_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    as_c_enter_area_res_descriptor_, &as_c_enter_area_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_as_logout_req_descriptor_, &c_as_logout_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    as_c_logout_res_descriptor_, &as_c_logout_res::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_as_5fc_5fproto_2eproto() {
  delete c_as_register_req::default_instance_;
  delete c_as_register_req_reflection_;
  delete as_c_register_res::default_instance_;
  delete as_c_register_res_reflection_;
  delete c_as_login_req::default_instance_;
  delete c_as_login_req_reflection_;
  delete area::default_instance_;
  delete area_reflection_;
  delete area_list::default_instance_;
  delete area_list_reflection_;
  delete as_c_login_res::default_instance_;
  delete as_c_login_res_reflection_;
  delete c_as_login_if_no_register_req::default_instance_;
  delete c_as_login_if_no_register_req_reflection_;
  delete as_c_login_if_no_register_res::default_instance_;
  delete as_c_login_if_no_register_res_reflection_;
  delete c_as_enter_area_req::default_instance_;
  delete c_as_enter_area_req_reflection_;
  delete as_c_enter_area_res::default_instance_;
  delete as_c_enter_area_res_reflection_;
  delete c_as_logout_req::default_instance_;
  delete c_as_logout_req_reflection_;
  delete as_c_logout_res::default_instance_;
  delete as_c_logout_res_reflection_;
}

void protobuf_AddDesc_as_5fc_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020as_c_proto.proto\"f\n\021c_as_register_req\022"
    "\024\n\014plantform_id\030\001 \002(\005\022\030\n\020plantform_sub_i"
    "d\030\002 \002(\005\022\017\n\007account\030\003 \002(\t\022\020\n\010password\030\004 \002"
    "(\t\"\'\n\021as_c_register_res\022\022\n\nerror_code\030\001 "
    "\002(\005\"c\n\016c_as_login_req\022\024\n\014plantform_id\030\001 "
    "\002(\005\022\030\n\020plantform_sub_id\030\002 \002(\005\022\017\n\007account"
    "\030\003 \002(\t\022\020\n\010password\030\004 \002(\t\"\262\001\n\004area\022\017\n\007are"
    "a_id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\016\n\006status\030\003 \001(\005"
    "\"{\n\013EAreaStatus\022\024\n\020EAreaStatus_None\020\000\022\024\n"
    "\020EAreaStatus_Good\020\001\022\026\n\022EAreaStatus_Norma"
    "l\020\002\022\023\n\017EAreaStatus_Bad\020\003\022\023\n\017EAreaStatus_"
    "New\020\004\"!\n\tarea_list\022\024\n\005areas\030\001 \003(\0132\005.area"
    "\"\?\n\016as_c_login_res\022\022\n\nerror_code\030\001 \002(\005\022\031"
    "\n\005areas\030\003 \001(\0132\n.area_list\"r\n\035c_as_login_"
    "if_no_register_req\022\024\n\014plantform_id\030\001 \002(\005"
    "\022\030\n\020plantform_sub_id\030\002 \002(\005\022\017\n\007account\030\003 "
    "\002(\t\022\020\n\010password\030\004 \002(\t\"N\n\035as_c_login_if_n"
    "o_register_res\022\022\n\nerror_code\030\001 \002(\005\022\031\n\005ar"
    "eas\030\002 \001(\0132\n.area_list\"&\n\023c_as_enter_area"
    "_req\022\017\n\007area_id\030\001 \002(\005\"R\n\023as_c_enter_area"
    "_res\022\022\n\nerror_code\030\001 \002(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004"
    "port\030\003 \001(\005\022\r\n\005token\030\004 \001(\014\"d\n\017c_as_logout"
    "_req\022\024\n\014plantform_id\030\001 \002(\005\022\030\n\020plantform_"
    "sub_id\030\002 \002(\005\022\017\n\007account\030\003 \002(\t\022\020\n\010passwor"
    "d\030\004 \002(\t\"%\n\017as_c_logout_res\022\022\n\nerror_code"
    "\030\001 \001(\005*&\n\023e_asc_proto_version\022\017\n\013ASC_VER"
    "SION\020\001*\316\001\n\ne_msg_c_as\022\022\n\016e_msg_c_as_min\020"
    "\000\022\033\n\027e_msg_c_as_register_req\020\001\022\030\n\024e_msg_"
    "c_as_login_req\020\002\022\035\n\031e_msg_c_as_enter_are"
    "a_req\020\003\022\031\n\025e_msg_c_as_logout_req\020\004\022\'\n#e_"
    "msg_c_as_login_if_no_register_req\020\005\022\022\n\016e"
    "_msg_c_as_max\020\006*\316\001\n\ne_msg_as_c\022\022\n\016e_msg_"
    "as_c_min\020\000\022\033\n\027e_msg_as_c_register_res\020\001\022"
    "\030\n\024e_msg_as_c_login_res\020\002\022\035\n\031e_msg_as_c_"
    "enter_area_res\020\003\022\031\n\025e_msg_as_c_logout_re"
    "s\020\004\022\'\n#e_msg_as_c_login_if_no_register_r"
    "es\020\005\022\022\n\016e_msg_as_c_max\020\006*\350\002\n\017e_asc_error"
    "code\022\027\n\023e_asc_errorcode_min\020\000\022\033\n\027e_asc_e"
    "rrorcode_success\020\001\022 \n\034e_asc_errorcode_un"
    "kown_error\020\002\022#\n\037e_asc_errorcode_registe_"
    "already\020\003\0227\n3e_asc_errorcode_account_not"
    "_exist_or_wrong_password\020\004\022\037\n\033e_asc_erro"
    "rcode_not_logined\020\005\022 \n\034e_asc_errorcode_n"
    "o_this_area\020\006\022\037\n\033e_asc_errorcode_area_cl"
    "osed\020\007\022\"\n\036e_asc_errorcode_wrong_password"
    "\020\010\022\027\n\023e_asc_errorcode_max\020\t", 1827);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "as_c_proto.proto", &protobuf_RegisterTypes);
  c_as_register_req::default_instance_ = new c_as_register_req();
  as_c_register_res::default_instance_ = new as_c_register_res();
  c_as_login_req::default_instance_ = new c_as_login_req();
  area::default_instance_ = new area();
  area_list::default_instance_ = new area_list();
  as_c_login_res::default_instance_ = new as_c_login_res();
  c_as_login_if_no_register_req::default_instance_ = new c_as_login_if_no_register_req();
  as_c_login_if_no_register_res::default_instance_ = new as_c_login_if_no_register_res();
  c_as_enter_area_req::default_instance_ = new c_as_enter_area_req();
  as_c_enter_area_res::default_instance_ = new as_c_enter_area_res();
  c_as_logout_req::default_instance_ = new c_as_logout_req();
  as_c_logout_res::default_instance_ = new as_c_logout_res();
  c_as_register_req::default_instance_->InitAsDefaultInstance();
  as_c_register_res::default_instance_->InitAsDefaultInstance();
  c_as_login_req::default_instance_->InitAsDefaultInstance();
  area::default_instance_->InitAsDefaultInstance();
  area_list::default_instance_->InitAsDefaultInstance();
  as_c_login_res::default_instance_->InitAsDefaultInstance();
  c_as_login_if_no_register_req::default_instance_->InitAsDefaultInstance();
  as_c_login_if_no_register_res::default_instance_->InitAsDefaultInstance();
  c_as_enter_area_req::default_instance_->InitAsDefaultInstance();
  as_c_enter_area_res::default_instance_->InitAsDefaultInstance();
  c_as_logout_req::default_instance_->InitAsDefaultInstance();
  as_c_logout_res::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_as_5fc_5fproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_as_5fc_5fproto_2eproto {
  StaticDescriptorInitializer_as_5fc_5fproto_2eproto() {
    protobuf_AddDesc_as_5fc_5fproto_2eproto();
  }
} static_descriptor_initializer_as_5fc_5fproto_2eproto_;
const ::google::protobuf::EnumDescriptor* e_asc_proto_version_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_asc_proto_version_descriptor_;
}
bool e_asc_proto_version_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_msg_c_as_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_msg_c_as_descriptor_;
}
bool e_msg_c_as_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_msg_as_c_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_msg_as_c_descriptor_;
}
bool e_msg_as_c_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_asc_errorcode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_asc_errorcode_descriptor_;
}
bool e_asc_errorcode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int c_as_register_req::kPlantformIdFieldNumber;
const int c_as_register_req::kPlantformSubIdFieldNumber;
const int c_as_register_req::kAccountFieldNumber;
const int c_as_register_req::kPasswordFieldNumber;
#endif  // !_MSC_VER

c_as_register_req::c_as_register_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_as_register_req::InitAsDefaultInstance() {
}

c_as_register_req::c_as_register_req(const c_as_register_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_as_register_req::SharedCtor() {
  _cached_size_ = 0;
  plantform_id_ = 0;
  plantform_sub_id_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_as_register_req::~c_as_register_req() {
  SharedDtor();
}

void c_as_register_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void c_as_register_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_as_register_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_as_register_req_descriptor_;
}

const c_as_register_req& c_as_register_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_as_register_req* c_as_register_req::default_instance_ = NULL;

c_as_register_req* c_as_register_req::New() const {
  return new c_as_register_req;
}

void c_as_register_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plantform_id_ = 0;
    plantform_sub_id_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_as_register_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plantform_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plantform_id_)));
          set_has_plantform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_plantform_sub_id;
        break;
      }

      // required int32 plantform_sub_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plantform_sub_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plantform_sub_id_)));
          set_has_plantform_sub_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // required string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // required string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_as_register_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 plantform_id = 1;
  if (has_plantform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plantform_id(), output);
  }

  // required int32 plantform_sub_id = 2;
  if (has_plantform_sub_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plantform_sub_id(), output);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_as_register_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 plantform_id = 1;
  if (has_plantform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plantform_id(), target);
  }

  // required int32 plantform_sub_id = 2;
  if (has_plantform_sub_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plantform_sub_id(), target);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_as_register_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plantform_id = 1;
    if (has_plantform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plantform_id());
    }

    // required int32 plantform_sub_id = 2;
    if (has_plantform_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plantform_sub_id());
    }

    // required string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_as_register_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_as_register_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_as_register_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_as_register_req::MergeFrom(const c_as_register_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plantform_id()) {
      set_plantform_id(from.plantform_id());
    }
    if (from.has_plantform_sub_id()) {
      set_plantform_sub_id(from.plantform_sub_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_as_register_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_as_register_req::CopyFrom(const c_as_register_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_as_register_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void c_as_register_req::Swap(c_as_register_req* other) {
  if (other != this) {
    std::swap(plantform_id_, other->plantform_id_);
    std::swap(plantform_sub_id_, other->plantform_sub_id_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_as_register_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_as_register_req_descriptor_;
  metadata.reflection = c_as_register_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int as_c_register_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

as_c_register_res::as_c_register_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void as_c_register_res::InitAsDefaultInstance() {
}

as_c_register_res::as_c_register_res(const as_c_register_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void as_c_register_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

as_c_register_res::~as_c_register_res() {
  SharedDtor();
}

void as_c_register_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void as_c_register_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* as_c_register_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return as_c_register_res_descriptor_;
}

const as_c_register_res& as_c_register_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_5fc_5fproto_2eproto();
  return *default_instance_;
}

as_c_register_res* as_c_register_res::default_instance_ = NULL;

as_c_register_res* as_c_register_res::New() const {
  return new as_c_register_res;
}

void as_c_register_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool as_c_register_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void as_c_register_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* as_c_register_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int as_c_register_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void as_c_register_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const as_c_register_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const as_c_register_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void as_c_register_res::MergeFrom(const as_c_register_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void as_c_register_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void as_c_register_res::CopyFrom(const as_c_register_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool as_c_register_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void as_c_register_res::Swap(as_c_register_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata as_c_register_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = as_c_register_res_descriptor_;
  metadata.reflection = as_c_register_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_as_login_req::kPlantformIdFieldNumber;
const int c_as_login_req::kPlantformSubIdFieldNumber;
const int c_as_login_req::kAccountFieldNumber;
const int c_as_login_req::kPasswordFieldNumber;
#endif  // !_MSC_VER

c_as_login_req::c_as_login_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_as_login_req::InitAsDefaultInstance() {
}

c_as_login_req::c_as_login_req(const c_as_login_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_as_login_req::SharedCtor() {
  _cached_size_ = 0;
  plantform_id_ = 0;
  plantform_sub_id_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_as_login_req::~c_as_login_req() {
  SharedDtor();
}

void c_as_login_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void c_as_login_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_as_login_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_as_login_req_descriptor_;
}

const c_as_login_req& c_as_login_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_as_login_req* c_as_login_req::default_instance_ = NULL;

c_as_login_req* c_as_login_req::New() const {
  return new c_as_login_req;
}

void c_as_login_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plantform_id_ = 0;
    plantform_sub_id_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_as_login_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plantform_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plantform_id_)));
          set_has_plantform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_plantform_sub_id;
        break;
      }

      // required int32 plantform_sub_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plantform_sub_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plantform_sub_id_)));
          set_has_plantform_sub_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // required string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // required string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_as_login_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 plantform_id = 1;
  if (has_plantform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plantform_id(), output);
  }

  // required int32 plantform_sub_id = 2;
  if (has_plantform_sub_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plantform_sub_id(), output);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_as_login_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 plantform_id = 1;
  if (has_plantform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plantform_id(), target);
  }

  // required int32 plantform_sub_id = 2;
  if (has_plantform_sub_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plantform_sub_id(), target);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_as_login_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plantform_id = 1;
    if (has_plantform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plantform_id());
    }

    // required int32 plantform_sub_id = 2;
    if (has_plantform_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plantform_sub_id());
    }

    // required string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_as_login_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_as_login_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_as_login_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_as_login_req::MergeFrom(const c_as_login_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plantform_id()) {
      set_plantform_id(from.plantform_id());
    }
    if (from.has_plantform_sub_id()) {
      set_plantform_sub_id(from.plantform_sub_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_as_login_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_as_login_req::CopyFrom(const c_as_login_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_as_login_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void c_as_login_req::Swap(c_as_login_req* other) {
  if (other != this) {
    std::swap(plantform_id_, other->plantform_id_);
    std::swap(plantform_sub_id_, other->plantform_sub_id_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_as_login_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_as_login_req_descriptor_;
  metadata.reflection = c_as_login_req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* area_EAreaStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_EAreaStatus_descriptor_;
}
bool area_EAreaStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const area_EAreaStatus area::EAreaStatus_None;
const area_EAreaStatus area::EAreaStatus_Good;
const area_EAreaStatus area::EAreaStatus_Normal;
const area_EAreaStatus area::EAreaStatus_Bad;
const area_EAreaStatus area::EAreaStatus_New;
const area_EAreaStatus area::EAreaStatus_MIN;
const area_EAreaStatus area::EAreaStatus_MAX;
const int area::EAreaStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int area::kAreaIdFieldNumber;
const int area::kNameFieldNumber;
const int area::kStatusFieldNumber;
#endif  // !_MSC_VER

area::area()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area::InitAsDefaultInstance() {
}

area::area(const area& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area::SharedCtor() {
  _cached_size_ = 0;
  area_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area::~area() {
  SharedDtor();
}

void area::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void area::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_descriptor_;
}

const area& area::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_5fc_5fproto_2eproto();
  return *default_instance_;
}

area* area::default_instance_ = NULL;

area* area::New() const {
  return new area;
}

void area::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 area_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 area_id = 1;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->area_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 area_id = 1;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->area_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 area_id = 1;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area::MergeFrom(const area& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area::CopyFrom(const area& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void area::Swap(area* other) {
  if (other != this) {
    std::swap(area_id_, other->area_id_);
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_descriptor_;
  metadata.reflection = area_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int area_list::kAreasFieldNumber;
#endif  // !_MSC_VER

area_list::area_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void area_list::InitAsDefaultInstance() {
}

area_list::area_list(const area_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void area_list::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

area_list::~area_list() {
  SharedDtor();
}

void area_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void area_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* area_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return area_list_descriptor_;
}

const area_list& area_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_5fc_5fproto_2eproto();
  return *default_instance_;
}

area_list* area_list::default_instance_ = NULL;

area_list* area_list::New() const {
  return new area_list;
}

void area_list::Clear() {
  areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool area_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .area areas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_areas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void area_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .area areas = 1;
  for (int i = 0; i < this->areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->areas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* area_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .area areas = 1;
  for (int i = 0; i < this->areas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->areas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int area_list::ByteSize() const {
  int total_size = 0;

  // repeated .area areas = 1;
  total_size += 1 * this->areas_size();
  for (int i = 0; i < this->areas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void area_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const area_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const area_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void area_list::MergeFrom(const area_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  areas_.MergeFrom(from.areas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void area_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void area_list::CopyFrom(const area_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool area_list::IsInitialized() const {

  for (int i = 0; i < areas_size(); i++) {
    if (!this->areas(i).IsInitialized()) return false;
  }
  return true;
}

void area_list::Swap(area_list* other) {
  if (other != this) {
    areas_.Swap(&other->areas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata area_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = area_list_descriptor_;
  metadata.reflection = area_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int as_c_login_res::kErrorCodeFieldNumber;
const int as_c_login_res::kAreasFieldNumber;
#endif  // !_MSC_VER

as_c_login_res::as_c_login_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void as_c_login_res::InitAsDefaultInstance() {
  areas_ = const_cast< ::area_list*>(&::area_list::default_instance());
}

as_c_login_res::as_c_login_res(const as_c_login_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void as_c_login_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  areas_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

as_c_login_res::~as_c_login_res() {
  SharedDtor();
}

void as_c_login_res::SharedDtor() {
  if (this != default_instance_) {
    delete areas_;
  }
}

void as_c_login_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* as_c_login_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return as_c_login_res_descriptor_;
}

const as_c_login_res& as_c_login_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_5fc_5fproto_2eproto();
  return *default_instance_;
}

as_c_login_res* as_c_login_res::default_instance_ = NULL;

as_c_login_res* as_c_login_res::New() const {
  return new as_c_login_res;
}

void as_c_login_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_areas()) {
      if (areas_ != NULL) areas_->::area_list::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool as_c_login_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_areas;
        break;
      }

      // optional .area_list areas = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_areas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void as_c_login_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional .area_list areas = 3;
  if (has_areas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->areas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* as_c_login_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional .area_list areas = 3;
  if (has_areas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->areas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int as_c_login_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .area_list areas = 3;
    if (has_areas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->areas());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void as_c_login_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const as_c_login_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const as_c_login_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void as_c_login_res::MergeFrom(const as_c_login_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_areas()) {
      mutable_areas()->::area_list::MergeFrom(from.areas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void as_c_login_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void as_c_login_res::CopyFrom(const as_c_login_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool as_c_login_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_areas()) {
    if (!this->areas().IsInitialized()) return false;
  }
  return true;
}

void as_c_login_res::Swap(as_c_login_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(areas_, other->areas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata as_c_login_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = as_c_login_res_descriptor_;
  metadata.reflection = as_c_login_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_as_login_if_no_register_req::kPlantformIdFieldNumber;
const int c_as_login_if_no_register_req::kPlantformSubIdFieldNumber;
const int c_as_login_if_no_register_req::kAccountFieldNumber;
const int c_as_login_if_no_register_req::kPasswordFieldNumber;
#endif  // !_MSC_VER

c_as_login_if_no_register_req::c_as_login_if_no_register_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_as_login_if_no_register_req::InitAsDefaultInstance() {
}

c_as_login_if_no_register_req::c_as_login_if_no_register_req(const c_as_login_if_no_register_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_as_login_if_no_register_req::SharedCtor() {
  _cached_size_ = 0;
  plantform_id_ = 0;
  plantform_sub_id_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_as_login_if_no_register_req::~c_as_login_if_no_register_req() {
  SharedDtor();
}

void c_as_login_if_no_register_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void c_as_login_if_no_register_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_as_login_if_no_register_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_as_login_if_no_register_req_descriptor_;
}

const c_as_login_if_no_register_req& c_as_login_if_no_register_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_as_login_if_no_register_req* c_as_login_if_no_register_req::default_instance_ = NULL;

c_as_login_if_no_register_req* c_as_login_if_no_register_req::New() const {
  return new c_as_login_if_no_register_req;
}

void c_as_login_if_no_register_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plantform_id_ = 0;
    plantform_sub_id_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_as_login_if_no_register_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plantform_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plantform_id_)));
          set_has_plantform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_plantform_sub_id;
        break;
      }

      // required int32 plantform_sub_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plantform_sub_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plantform_sub_id_)));
          set_has_plantform_sub_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // required string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // required string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_as_login_if_no_register_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 plantform_id = 1;
  if (has_plantform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plantform_id(), output);
  }

  // required int32 plantform_sub_id = 2;
  if (has_plantform_sub_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plantform_sub_id(), output);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_as_login_if_no_register_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 plantform_id = 1;
  if (has_plantform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plantform_id(), target);
  }

  // required int32 plantform_sub_id = 2;
  if (has_plantform_sub_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plantform_sub_id(), target);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_as_login_if_no_register_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plantform_id = 1;
    if (has_plantform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plantform_id());
    }

    // required int32 plantform_sub_id = 2;
    if (has_plantform_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plantform_sub_id());
    }

    // required string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_as_login_if_no_register_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_as_login_if_no_register_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_as_login_if_no_register_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_as_login_if_no_register_req::MergeFrom(const c_as_login_if_no_register_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plantform_id()) {
      set_plantform_id(from.plantform_id());
    }
    if (from.has_plantform_sub_id()) {
      set_plantform_sub_id(from.plantform_sub_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_as_login_if_no_register_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_as_login_if_no_register_req::CopyFrom(const c_as_login_if_no_register_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_as_login_if_no_register_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void c_as_login_if_no_register_req::Swap(c_as_login_if_no_register_req* other) {
  if (other != this) {
    std::swap(plantform_id_, other->plantform_id_);
    std::swap(plantform_sub_id_, other->plantform_sub_id_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_as_login_if_no_register_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_as_login_if_no_register_req_descriptor_;
  metadata.reflection = c_as_login_if_no_register_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int as_c_login_if_no_register_res::kErrorCodeFieldNumber;
const int as_c_login_if_no_register_res::kAreasFieldNumber;
#endif  // !_MSC_VER

as_c_login_if_no_register_res::as_c_login_if_no_register_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void as_c_login_if_no_register_res::InitAsDefaultInstance() {
  areas_ = const_cast< ::area_list*>(&::area_list::default_instance());
}

as_c_login_if_no_register_res::as_c_login_if_no_register_res(const as_c_login_if_no_register_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void as_c_login_if_no_register_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  areas_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

as_c_login_if_no_register_res::~as_c_login_if_no_register_res() {
  SharedDtor();
}

void as_c_login_if_no_register_res::SharedDtor() {
  if (this != default_instance_) {
    delete areas_;
  }
}

void as_c_login_if_no_register_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* as_c_login_if_no_register_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return as_c_login_if_no_register_res_descriptor_;
}

const as_c_login_if_no_register_res& as_c_login_if_no_register_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_5fc_5fproto_2eproto();
  return *default_instance_;
}

as_c_login_if_no_register_res* as_c_login_if_no_register_res::default_instance_ = NULL;

as_c_login_if_no_register_res* as_c_login_if_no_register_res::New() const {
  return new as_c_login_if_no_register_res;
}

void as_c_login_if_no_register_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_areas()) {
      if (areas_ != NULL) areas_->::area_list::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool as_c_login_if_no_register_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_areas;
        break;
      }

      // optional .area_list areas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_areas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void as_c_login_if_no_register_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional .area_list areas = 2;
  if (has_areas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->areas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* as_c_login_if_no_register_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional .area_list areas = 2;
  if (has_areas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->areas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int as_c_login_if_no_register_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .area_list areas = 2;
    if (has_areas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->areas());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void as_c_login_if_no_register_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const as_c_login_if_no_register_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const as_c_login_if_no_register_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void as_c_login_if_no_register_res::MergeFrom(const as_c_login_if_no_register_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_areas()) {
      mutable_areas()->::area_list::MergeFrom(from.areas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void as_c_login_if_no_register_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void as_c_login_if_no_register_res::CopyFrom(const as_c_login_if_no_register_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool as_c_login_if_no_register_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_areas()) {
    if (!this->areas().IsInitialized()) return false;
  }
  return true;
}

void as_c_login_if_no_register_res::Swap(as_c_login_if_no_register_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(areas_, other->areas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata as_c_login_if_no_register_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = as_c_login_if_no_register_res_descriptor_;
  metadata.reflection = as_c_login_if_no_register_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_as_enter_area_req::kAreaIdFieldNumber;
#endif  // !_MSC_VER

c_as_enter_area_req::c_as_enter_area_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_as_enter_area_req::InitAsDefaultInstance() {
}

c_as_enter_area_req::c_as_enter_area_req(const c_as_enter_area_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_as_enter_area_req::SharedCtor() {
  _cached_size_ = 0;
  area_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_as_enter_area_req::~c_as_enter_area_req() {
  SharedDtor();
}

void c_as_enter_area_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_as_enter_area_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_as_enter_area_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_as_enter_area_req_descriptor_;
}

const c_as_enter_area_req& c_as_enter_area_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_as_enter_area_req* c_as_enter_area_req::default_instance_ = NULL;

c_as_enter_area_req* c_as_enter_area_req::New() const {
  return new c_as_enter_area_req;
}

void c_as_enter_area_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    area_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_as_enter_area_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 area_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_as_enter_area_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 area_id = 1;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->area_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_as_enter_area_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 area_id = 1;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->area_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_as_enter_area_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 area_id = 1;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_as_enter_area_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_as_enter_area_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_as_enter_area_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_as_enter_area_req::MergeFrom(const c_as_enter_area_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_as_enter_area_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_as_enter_area_req::CopyFrom(const c_as_enter_area_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_as_enter_area_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_as_enter_area_req::Swap(c_as_enter_area_req* other) {
  if (other != this) {
    std::swap(area_id_, other->area_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_as_enter_area_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_as_enter_area_req_descriptor_;
  metadata.reflection = c_as_enter_area_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int as_c_enter_area_res::kErrorCodeFieldNumber;
const int as_c_enter_area_res::kIpFieldNumber;
const int as_c_enter_area_res::kPortFieldNumber;
const int as_c_enter_area_res::kTokenFieldNumber;
#endif  // !_MSC_VER

as_c_enter_area_res::as_c_enter_area_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void as_c_enter_area_res::InitAsDefaultInstance() {
}

as_c_enter_area_res::as_c_enter_area_res(const as_c_enter_area_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void as_c_enter_area_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

as_c_enter_area_res::~as_c_enter_area_res() {
  SharedDtor();
}

void as_c_enter_area_res::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void as_c_enter_area_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* as_c_enter_area_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return as_c_enter_area_res_descriptor_;
}

const as_c_enter_area_res& as_c_enter_area_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_5fc_5fproto_2eproto();
  return *default_instance_;
}

as_c_enter_area_res* as_c_enter_area_res::default_instance_ = NULL;

as_c_enter_area_res* as_c_enter_area_res::New() const {
  return new as_c_enter_area_res;
}

void as_c_enter_area_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool as_c_enter_area_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // optional bytes token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void as_c_enter_area_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional bytes token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* as_c_enter_area_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional bytes token = 4;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int as_c_enter_area_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional bytes token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void as_c_enter_area_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const as_c_enter_area_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const as_c_enter_area_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void as_c_enter_area_res::MergeFrom(const as_c_enter_area_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void as_c_enter_area_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void as_c_enter_area_res::CopyFrom(const as_c_enter_area_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool as_c_enter_area_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void as_c_enter_area_res::Swap(as_c_enter_area_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata as_c_enter_area_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = as_c_enter_area_res_descriptor_;
  metadata.reflection = as_c_enter_area_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_as_logout_req::kPlantformIdFieldNumber;
const int c_as_logout_req::kPlantformSubIdFieldNumber;
const int c_as_logout_req::kAccountFieldNumber;
const int c_as_logout_req::kPasswordFieldNumber;
#endif  // !_MSC_VER

c_as_logout_req::c_as_logout_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_as_logout_req::InitAsDefaultInstance() {
}

c_as_logout_req::c_as_logout_req(const c_as_logout_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_as_logout_req::SharedCtor() {
  _cached_size_ = 0;
  plantform_id_ = 0;
  plantform_sub_id_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_as_logout_req::~c_as_logout_req() {
  SharedDtor();
}

void c_as_logout_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void c_as_logout_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_as_logout_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_as_logout_req_descriptor_;
}

const c_as_logout_req& c_as_logout_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_as_logout_req* c_as_logout_req::default_instance_ = NULL;

c_as_logout_req* c_as_logout_req::New() const {
  return new c_as_logout_req;
}

void c_as_logout_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plantform_id_ = 0;
    plantform_sub_id_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_as_logout_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plantform_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plantform_id_)));
          set_has_plantform_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_plantform_sub_id;
        break;
      }

      // required int32 plantform_sub_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plantform_sub_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plantform_sub_id_)));
          set_has_plantform_sub_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // required string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // required string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_as_logout_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 plantform_id = 1;
  if (has_plantform_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plantform_id(), output);
  }

  // required int32 plantform_sub_id = 2;
  if (has_plantform_sub_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plantform_sub_id(), output);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_as_logout_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 plantform_id = 1;
  if (has_plantform_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plantform_id(), target);
  }

  // required int32 plantform_sub_id = 2;
  if (has_plantform_sub_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plantform_sub_id(), target);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_as_logout_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plantform_id = 1;
    if (has_plantform_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plantform_id());
    }

    // required int32 plantform_sub_id = 2;
    if (has_plantform_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plantform_sub_id());
    }

    // required string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_as_logout_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_as_logout_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_as_logout_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_as_logout_req::MergeFrom(const c_as_logout_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plantform_id()) {
      set_plantform_id(from.plantform_id());
    }
    if (from.has_plantform_sub_id()) {
      set_plantform_sub_id(from.plantform_sub_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_as_logout_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_as_logout_req::CopyFrom(const c_as_logout_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_as_logout_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void c_as_logout_req::Swap(c_as_logout_req* other) {
  if (other != this) {
    std::swap(plantform_id_, other->plantform_id_);
    std::swap(plantform_sub_id_, other->plantform_sub_id_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_as_logout_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_as_logout_req_descriptor_;
  metadata.reflection = c_as_logout_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int as_c_logout_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

as_c_logout_res::as_c_logout_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void as_c_logout_res::InitAsDefaultInstance() {
}

as_c_logout_res::as_c_logout_res(const as_c_logout_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void as_c_logout_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

as_c_logout_res::~as_c_logout_res() {
  SharedDtor();
}

void as_c_logout_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void as_c_logout_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* as_c_logout_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return as_c_logout_res_descriptor_;
}

const as_c_logout_res& as_c_logout_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_as_5fc_5fproto_2eproto();
  return *default_instance_;
}

as_c_logout_res* as_c_logout_res::default_instance_ = NULL;

as_c_logout_res* as_c_logout_res::New() const {
  return new as_c_logout_res;
}

void as_c_logout_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool as_c_logout_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void as_c_logout_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* as_c_logout_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int as_c_logout_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void as_c_logout_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const as_c_logout_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const as_c_logout_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void as_c_logout_res::MergeFrom(const as_c_logout_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void as_c_logout_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void as_c_logout_res::CopyFrom(const as_c_logout_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool as_c_logout_res::IsInitialized() const {

  return true;
}

void as_c_logout_res::Swap(as_c_logout_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata as_c_logout_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = as_c_logout_res_descriptor_;
  metadata.reflection = as_c_logout_res_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
