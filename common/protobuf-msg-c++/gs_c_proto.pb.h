// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gs_c_proto.proto

#ifndef PROTOBUF_gs_5fc_5fproto_2eproto__INCLUDED
#define PROTOBUF_gs_5fc_5fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

class AOYI;
class AOYI_ARRAY;
class ARENAPRICE;
class ARENAPRICE_ARRAY;
class BAG;
class BAG_ARRAY;
class BATTLE;
class BATTLE_ARRAY;
class BOSSPROP;
class BOSSPROP_ARRAY;
class BOSSSKILL;
class BOSSSKILL_ARRAY;
class BUFF;
class BUFF_ARRAY;
class CHAPTERMAP;
class CHAPTERMAP_ARRAY;
class COINPRICE;
class COINPRICE_ARRAY;
class EQUIP;
class EQUIP_ARRAY;
class EVOLUTIONCOIN;
class EVOLUTIONCOIN_ARRAY;
class HEROPROP;
class HEROPROP_ARRAY;
class HEROSKILL;
class HEROSKILL_ARRAY;
class HEROSTAR;
class HEROSTAR_ARRAY;
class MONSTERPROP;
class MONSTERPROP_ARRAY;
class PASSIVE;
class PASSIVE_ARRAY;
class PRIZESHOW;
class PRIZESHOW_ARRAY;
class QUALITYRULE;
class QUALITYRULE_ARRAY;
class REALTIMECHECK;
class REALTIMECHECK_ARRAY;
class RESETPRICE;
class RESETPRICE_ARRAY;
class RULE;
class RULE_ARRAY;
class SHOPRESETPRICE;
class SHOPRESETPRICE_ARRAY;
class SPPRICE;
class SPPRICE_ARRAY;
class STAPRICE;
class STAPRICE_ARRAY;
class SUBTASK;
class SUBTASK_ARRAY;
class TASK;
class TASK_ARRAY;
class TRIGGERATTACK;
class TRIGGERATTACK_ARRAY;
class TRIGGERSTARTCONDITION;
class TRIGGERSTARTCONDITION_ARRAY;
class VIP;
class VIP_ARRAY;
class VIPFUNCTION;
class VIPFUNCTION_ARRAY;
class c_gs_enter_gs_req;
class gs_c_enter_gs_res;
class c_gs_leave_gs_req;
class gs_c_leave_gs_res;
class c_gs_json_config_version_req;
class gs_c_json_config_version_res;
class gs_c_json_config_version_res_config_version;
class c_gs_json_config_req;
class gs_c_json_config_res;
class gs_c_json_config_res_config;
class c_gs_config_req;
class gs_c_config_res;
class c_gs_user_info_req;
class user_sub_task;
class user_sub_task_array;
class user_hero_equip;
class user_hero_skill;
class user_hero;
class user_hero_array;
class user_base_info;
class struct_game_element;
class user_shop_item;
class user_shop;
class user_arena_log;
class user_arena_log_user_arena_log_hero;
class user_arena_contestant;
class user_arena;
class user_crusade;
class user_crusade_crusade_hero;
class gs_c_user_info_res;
class c_gs_start_sub_task_req;
class gs_c_start_sub_task_res;
class c_gs_end_sub_task_req;
class gs_c_end_sub_task_res;
class c_gs_invoke_hero_req;
class gs_c_invoke_hero_res;
class c_gs_equip_level_up_req;
class gs_c_equip_level_up_res;
class c_gs_equip_evolution_req;
class gs_c_equip_evolution_res;
class c_gs_hero_evolution_req;
class gs_c_hero_evolution_res;
class c_gs_hero_star_up_req;
class gs_c_hero_star_up_res;
class c_gs_skill_level_up_req;
class gs_c_skill_level_up_res;
class c_gs_invoke_req;
class gs_c_invoke_res;
class struct_game_element_array;
class c_gs_diamond_speed_kill_req;
class gs_c_diamond_speed_kill_res;
class c_gs_use_item_req;
class gs_c_use_item_res;
class c_gs_shop_info_req;
class gs_c_shop_info_res;
class c_gs_shop_buy_item_req;
class gs_c_shop_buy_item_res;
class c_gs_shop_refresh_req;
class gs_c_shop_refresh_res;
class c_gs_sell_req;
class gs_c_sell_res;
class c_gs_arena_refresh_match_req;
class gs_c_arena_refresh_match_res;
class c_gs_arena_update_team_req;
class gs_c_arena_update_team_res;
class c_gs_arena_start_challenge_req;
class gs_c_arena_start_challenge_res;
class c_gs_arena_end_challenge_req;
class gs_c_arena_end_challenge_res;
class gs_c_arena_challenge_ntf;
class c_gs_arena_challenge_reset_cd_req;
class gs_c_arena_challenge_reset_cd_res;
class c_gs_arena_challenge_reset_num_req;
class gs_c_arena_challenge_reset_num_res;
class c_gs_arena_ranks_req;
class gs_c_arena_ranks_res;
class c_gs_arena_log_req;
class gs_c_arena_log_res;
class c_gs_arena_search_req;
class gs_c_arena_search_res;
class c_gs_fragment_compound_req;
class gs_c_fragment_compound_res;
class user_mail;
class c_gs_mail_opt_req;
class gs_c_mail_opt_res;
class gs_c_mail_opt_res_mail_update;
class gs_c_mail_ntf;
class gs_c_mail_ntf_array;
class c_gs_buy_req;
class gs_c_buy_res;
class user_mission;
class user_mission_mission_event_need;
class gs_c_mission_ntf_array;
class gs_c_mission_ntf_array_mission_opt;
class c_gs_get_mission_reward_req;
class gs_c_get_mission_reward_res;
class sign_n_reward;
class user_sign;
class c_gs_sign_req;
class gs_c_sign_res;
class c_gs_sign_add_req;
class gs_c_sign_add_res;
class c_gs_head_or_frame_change_req;
class gs_c_head_or_frame_change_res;
class c_gs_edit_player_info_req;
class gs_c_edit_player_info_res;
class c_gs_finish_novice_guide_req;
class gs_c_finish_novice_guide_res;
class gs_c_marquee_ntf;
class gs_c_element_ntf;
class friend_base_info;
class user_friend;
class user_friend_friend_info;
class c_gs_user_friend_op_req;
class gs_c_user_friend_op_res;
class c_gs_search_user_req;
class gs_c_search_user_res;
class gs_c_friend_ntf;
class c_gs_chat_req;
class gs_c_chat_res;
class gs_c_chat_ntf;
class c_gs_fight_power_req;
class gs_c_fight_power_res;
class c_gs_rank_req;
class gs_c_rank_res;
class gs_c_rank_res_user_hero_brief_info;
class gs_c_rank_res_rank_info;
class c_gs_crusade_start_req;
class gs_c_crusade_start_res;
class c_gs_crusade_end_req;
class gs_c_crusade_end_res;
class c_gs_crusade_hero_life_req;
class gs_c_crusade_hero_life_res;
class c_gs_crusade_reset_req;
class gs_c_crusade_reset_res;
class c_gs_crusade_promote_award_req;
class gs_c_crusade_promote_award_res;
class c_gs_crusade_buff_refresh_req;
class gs_c_crusade_buff_refresh_res;
class struct_guild_list_item;
class struct_user_guild_info;
class struct_user_guild_info_struct_guild_member;
class struct_guild_boss;
class struct_guild_boss_attacker_dead_hero;
class c_gs_guild_new_req;
class gs_c_guild_new_res;
class c_gs_guild_edit_req;
class gs_c_guild_edit_res;
class c_gs_guild_delete_req;
class gs_c_guild_delete_res;
class gs_c_guild_quit_ntf;
class gs_c_guild_join_ntf;
class c_gs_guild_apply_list_req;
class gs_c_guild_apply_list_res;
class gs_c_guild_apply_list_res_struct_apply_for_outsider;
class c_gs_guild_apply_op_req;
class gs_c_guild_apply_op_res;
class c_gs_guild_member_op_req;
class gs_c_guild_member_op_res;
class c_gs_guild_boss_refresh_req;
class gs_c_guild_boss_refresh_res;
class c_gs_guild_search_req;
class gs_c_guild_search_res;
class c_gs_guild_list_req;
class gs_c_guild_list_res;
class c_gs_guild_info_req;
class gs_c_guild_info_res;
class c_gs_guild_boss_list_req;
class gs_c_guild_boss_list_res;
class c_gs_guild_boss_info_req;
class gs_c_guild_boss_info_res;
class c_gs_guild_boss_attack_req;
class gs_c_guild_boss_attack_res;
class c_gs_guild_boss_dead_hero_reset_req;
class gs_c_guild_boss_dead_hero_reset_res;
class c_gs_guild_boss_attacker_rank_req;
class gs_c_guild_boss_attacker_rank_res;
class gs_c_guild_boss_attacker_rank_res_struct_boss_attacker;
class c_gs_server_time_req;
class gs_c_server_time_res;

enum user_hero_skill_e_skill_type {
  user_hero_skill_e_skill_type_BISHA = 1,
  user_hero_skill_e_skill_type_AOYI = 2,
  user_hero_skill_e_skill_type_PASSIVE1 = 3,
  user_hero_skill_e_skill_type_PASSIVE2 = 4,
  user_hero_skill_e_skill_type_PASSIVE3 = 5
};
bool user_hero_skill_e_skill_type_IsValid(int value);
const user_hero_skill_e_skill_type user_hero_skill_e_skill_type_e_skill_type_MIN = user_hero_skill_e_skill_type_BISHA;
const user_hero_skill_e_skill_type user_hero_skill_e_skill_type_e_skill_type_MAX = user_hero_skill_e_skill_type_PASSIVE3;
const int user_hero_skill_e_skill_type_e_skill_type_ARRAYSIZE = user_hero_skill_e_skill_type_e_skill_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* user_hero_skill_e_skill_type_descriptor();
inline const ::std::string& user_hero_skill_e_skill_type_Name(user_hero_skill_e_skill_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    user_hero_skill_e_skill_type_descriptor(), value);
}
inline bool user_hero_skill_e_skill_type_Parse(
    const ::std::string& name, user_hero_skill_e_skill_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<user_hero_skill_e_skill_type>(
    user_hero_skill_e_skill_type_descriptor(), name, value);
}
enum struct_game_element_EELEMENTTYPE {
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_min = 0,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_SKILL = 1,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_TASK = 2,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_SUB_TASK = 3,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_BATTLE = 4,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_HERO = 5,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_BOSS = 6,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_MONSTER = 7,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_ITEM = 8,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_EQUIP = 10,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_EXP = 11,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_GOLD = 12,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_DIAMOND = 13,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_HEALTH = 14,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_SKILL_POINT = 15,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_ARENA_POINT = 16,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_PACKET = 17,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_INVOKE_GOLD_FREE = 18,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_INVOKE_DIAMOND_FREE = 19,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_PLAYER_LEVEL = 20,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_PLAYER_EXP = 21,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_HERO_LEVEL = 22,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_HERO_EXP = 23,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_SUB_TASK_ENTER_NUM = 24,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_SUB_TASK_RESET_NUM = 25,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_FRIEND_POINT = 26,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_GUILD_CONTRIBUTION_POINT = 27,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_GUILD_COIN = 29,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_GUILD_MEMBER_CONTRIBUTION_POINT = 30,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_GUILD_MEMBER_COIN = 31,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_CRUSADE_POINT = 32,
  struct_game_element_EELEMENTTYPE_EELEMENTTYPE_max = 33
};
bool struct_game_element_EELEMENTTYPE_IsValid(int value);
const struct_game_element_EELEMENTTYPE struct_game_element_EELEMENTTYPE_EELEMENTTYPE_MIN = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_min;
const struct_game_element_EELEMENTTYPE struct_game_element_EELEMENTTYPE_EELEMENTTYPE_MAX = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_max;
const int struct_game_element_EELEMENTTYPE_EELEMENTTYPE_ARRAYSIZE = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* struct_game_element_EELEMENTTYPE_descriptor();
inline const ::std::string& struct_game_element_EELEMENTTYPE_Name(struct_game_element_EELEMENTTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    struct_game_element_EELEMENTTYPE_descriptor(), value);
}
inline bool struct_game_element_EELEMENTTYPE_Parse(
    const ::std::string& name, struct_game_element_EELEMENTTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<struct_game_element_EELEMENTTYPE>(
    struct_game_element_EELEMENTTYPE_descriptor(), name, value);
}
enum struct_game_element_EELEMENT_NUM_TYPE {
  struct_game_element_EELEMENT_NUM_TYPE_min = 0,
  struct_game_element_EELEMENT_NUM_TYPE_INCREASE = 1,
  struct_game_element_EELEMENT_NUM_TYPE_DECREASE = 2,
  struct_game_element_EELEMENT_NUM_TYPE_TOTAL = 3,
  struct_game_element_EELEMENT_NUM_TYPE_max = 4
};
bool struct_game_element_EELEMENT_NUM_TYPE_IsValid(int value);
const struct_game_element_EELEMENT_NUM_TYPE struct_game_element_EELEMENT_NUM_TYPE_EELEMENT_NUM_TYPE_MIN = struct_game_element_EELEMENT_NUM_TYPE_min;
const struct_game_element_EELEMENT_NUM_TYPE struct_game_element_EELEMENT_NUM_TYPE_EELEMENT_NUM_TYPE_MAX = struct_game_element_EELEMENT_NUM_TYPE_max;
const int struct_game_element_EELEMENT_NUM_TYPE_EELEMENT_NUM_TYPE_ARRAYSIZE = struct_game_element_EELEMENT_NUM_TYPE_EELEMENT_NUM_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* struct_game_element_EELEMENT_NUM_TYPE_descriptor();
inline const ::std::string& struct_game_element_EELEMENT_NUM_TYPE_Name(struct_game_element_EELEMENT_NUM_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    struct_game_element_EELEMENT_NUM_TYPE_descriptor(), value);
}
inline bool struct_game_element_EELEMENT_NUM_TYPE_Parse(
    const ::std::string& name, struct_game_element_EELEMENT_NUM_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<struct_game_element_EELEMENT_NUM_TYPE>(
    struct_game_element_EELEMENT_NUM_TYPE_descriptor(), name, value);
}
enum user_shop_item_ESHOPITEMFLAG {
  user_shop_item_ESHOPITEMFLAG_NONE = 0,
  user_shop_item_ESHOPITEMFLAG_HOT = 1,
  user_shop_item_ESHOPITEMFLAG_DISCOUNT = 2,
  user_shop_item_ESHOPITEMFLAG_FLASHSALE = 3,
  user_shop_item_ESHOPITEMFLAG_MAX = 4
};
bool user_shop_item_ESHOPITEMFLAG_IsValid(int value);
const user_shop_item_ESHOPITEMFLAG user_shop_item_ESHOPITEMFLAG_ESHOPITEMFLAG_MIN = user_shop_item_ESHOPITEMFLAG_NONE;
const user_shop_item_ESHOPITEMFLAG user_shop_item_ESHOPITEMFLAG_ESHOPITEMFLAG_MAX = user_shop_item_ESHOPITEMFLAG_MAX;
const int user_shop_item_ESHOPITEMFLAG_ESHOPITEMFLAG_ARRAYSIZE = user_shop_item_ESHOPITEMFLAG_ESHOPITEMFLAG_MAX + 1;

const ::google::protobuf::EnumDescriptor* user_shop_item_ESHOPITEMFLAG_descriptor();
inline const ::std::string& user_shop_item_ESHOPITEMFLAG_Name(user_shop_item_ESHOPITEMFLAG value) {
  return ::google::protobuf::internal::NameOfEnum(
    user_shop_item_ESHOPITEMFLAG_descriptor(), value);
}
inline bool user_shop_item_ESHOPITEMFLAG_Parse(
    const ::std::string& name, user_shop_item_ESHOPITEMFLAG* value) {
  return ::google::protobuf::internal::ParseNamedEnum<user_shop_item_ESHOPITEMFLAG>(
    user_shop_item_ESHOPITEMFLAG_descriptor(), name, value);
}
enum user_shop_ESHOPTYPE {
  user_shop_ESHOPTYPE_min = 0,
  user_shop_ESHOPTYPE_COMMON = 1,
  user_shop_ESHOPTYPE_QIWUGE = 2,
  user_shop_ESHOPTYPE_YIJIEBAOKU = 3,
  user_shop_ESHOPTYPE_ARENA = 4,
  user_shop_ESHOPTYPE_EXPEDITION = 5,
  user_shop_ESHOPTYPE_max = 6
};
bool user_shop_ESHOPTYPE_IsValid(int value);
const user_shop_ESHOPTYPE user_shop_ESHOPTYPE_ESHOPTYPE_MIN = user_shop_ESHOPTYPE_min;
const user_shop_ESHOPTYPE user_shop_ESHOPTYPE_ESHOPTYPE_MAX = user_shop_ESHOPTYPE_max;
const int user_shop_ESHOPTYPE_ESHOPTYPE_ARRAYSIZE = user_shop_ESHOPTYPE_ESHOPTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* user_shop_ESHOPTYPE_descriptor();
inline const ::std::string& user_shop_ESHOPTYPE_Name(user_shop_ESHOPTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    user_shop_ESHOPTYPE_descriptor(), value);
}
inline bool user_shop_ESHOPTYPE_Parse(
    const ::std::string& name, user_shop_ESHOPTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<user_shop_ESHOPTYPE>(
    user_shop_ESHOPTYPE_descriptor(), name, value);
}
enum c_gs_invoke_hero_req_EINVOKE_TYPE {
  c_gs_invoke_hero_req_EINVOKE_TYPE_FREE = 1,
  c_gs_invoke_hero_req_EINVOKE_TYPE_GOLD = 2,
  c_gs_invoke_hero_req_EINVOKE_TYPE_DIAMOND = 3,
  c_gs_invoke_hero_req_EINVOKE_TYPE_FRAGMENT = 4
};
bool c_gs_invoke_hero_req_EINVOKE_TYPE_IsValid(int value);
const c_gs_invoke_hero_req_EINVOKE_TYPE c_gs_invoke_hero_req_EINVOKE_TYPE_EINVOKE_TYPE_MIN = c_gs_invoke_hero_req_EINVOKE_TYPE_FREE;
const c_gs_invoke_hero_req_EINVOKE_TYPE c_gs_invoke_hero_req_EINVOKE_TYPE_EINVOKE_TYPE_MAX = c_gs_invoke_hero_req_EINVOKE_TYPE_FRAGMENT;
const int c_gs_invoke_hero_req_EINVOKE_TYPE_EINVOKE_TYPE_ARRAYSIZE = c_gs_invoke_hero_req_EINVOKE_TYPE_EINVOKE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* c_gs_invoke_hero_req_EINVOKE_TYPE_descriptor();
inline const ::std::string& c_gs_invoke_hero_req_EINVOKE_TYPE_Name(c_gs_invoke_hero_req_EINVOKE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    c_gs_invoke_hero_req_EINVOKE_TYPE_descriptor(), value);
}
inline bool c_gs_invoke_hero_req_EINVOKE_TYPE_Parse(
    const ::std::string& name, c_gs_invoke_hero_req_EINVOKE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c_gs_invoke_hero_req_EINVOKE_TYPE>(
    c_gs_invoke_hero_req_EINVOKE_TYPE_descriptor(), name, value);
}
enum c_gs_equip_level_up_req_OP_TYPE {
  c_gs_equip_level_up_req_OP_TYPE_EQUIP1_LEVEL = 1,
  c_gs_equip_level_up_req_OP_TYPE_EQUIP1_LEVELN = 2,
  c_gs_equip_level_up_req_OP_TYPE_EQUIPN_LEVELN = 3
};
bool c_gs_equip_level_up_req_OP_TYPE_IsValid(int value);
const c_gs_equip_level_up_req_OP_TYPE c_gs_equip_level_up_req_OP_TYPE_OP_TYPE_MIN = c_gs_equip_level_up_req_OP_TYPE_EQUIP1_LEVEL;
const c_gs_equip_level_up_req_OP_TYPE c_gs_equip_level_up_req_OP_TYPE_OP_TYPE_MAX = c_gs_equip_level_up_req_OP_TYPE_EQUIPN_LEVELN;
const int c_gs_equip_level_up_req_OP_TYPE_OP_TYPE_ARRAYSIZE = c_gs_equip_level_up_req_OP_TYPE_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* c_gs_equip_level_up_req_OP_TYPE_descriptor();
inline const ::std::string& c_gs_equip_level_up_req_OP_TYPE_Name(c_gs_equip_level_up_req_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    c_gs_equip_level_up_req_OP_TYPE_descriptor(), value);
}
inline bool c_gs_equip_level_up_req_OP_TYPE_Parse(
    const ::std::string& name, c_gs_equip_level_up_req_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c_gs_equip_level_up_req_OP_TYPE>(
    c_gs_equip_level_up_req_OP_TYPE_descriptor(), name, value);
}
enum c_gs_invoke_req_EINVOKE_TYPE {
  c_gs_invoke_req_EINVOKE_TYPE_GOLD_FREE = 1,
  c_gs_invoke_req_EINVOKE_TYPE_GOLD_1 = 2,
  c_gs_invoke_req_EINVOKE_TYPE_GOLD_N = 3,
  c_gs_invoke_req_EINVOKE_TYPE_DIAMOND_FREE = 4,
  c_gs_invoke_req_EINVOKE_TYPE_DIAMOND_1 = 5,
  c_gs_invoke_req_EINVOKE_TYPE_DIAMOND_N = 6,
  c_gs_invoke_req_EINVOKE_TYPE_VIP_DIAMOND_1 = 7,
  c_gs_invoke_req_EINVOKE_TYPE_VIP_DIAMOND_N = 8,
  c_gs_invoke_req_EINVOKE_TYPE_FRIEND_POINT = 9
};
bool c_gs_invoke_req_EINVOKE_TYPE_IsValid(int value);
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req_EINVOKE_TYPE_EINVOKE_TYPE_MIN = c_gs_invoke_req_EINVOKE_TYPE_GOLD_FREE;
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req_EINVOKE_TYPE_EINVOKE_TYPE_MAX = c_gs_invoke_req_EINVOKE_TYPE_FRIEND_POINT;
const int c_gs_invoke_req_EINVOKE_TYPE_EINVOKE_TYPE_ARRAYSIZE = c_gs_invoke_req_EINVOKE_TYPE_EINVOKE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* c_gs_invoke_req_EINVOKE_TYPE_descriptor();
inline const ::std::string& c_gs_invoke_req_EINVOKE_TYPE_Name(c_gs_invoke_req_EINVOKE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    c_gs_invoke_req_EINVOKE_TYPE_descriptor(), value);
}
inline bool c_gs_invoke_req_EINVOKE_TYPE_Parse(
    const ::std::string& name, c_gs_invoke_req_EINVOKE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c_gs_invoke_req_EINVOKE_TYPE>(
    c_gs_invoke_req_EINVOKE_TYPE_descriptor(), name, value);
}
enum c_gs_shop_info_req_PULLTYPE {
  c_gs_shop_info_req_PULLTYPE_ONE = 1,
  c_gs_shop_info_req_PULLTYPE_ALL = 2
};
bool c_gs_shop_info_req_PULLTYPE_IsValid(int value);
const c_gs_shop_info_req_PULLTYPE c_gs_shop_info_req_PULLTYPE_PULLTYPE_MIN = c_gs_shop_info_req_PULLTYPE_ONE;
const c_gs_shop_info_req_PULLTYPE c_gs_shop_info_req_PULLTYPE_PULLTYPE_MAX = c_gs_shop_info_req_PULLTYPE_ALL;
const int c_gs_shop_info_req_PULLTYPE_PULLTYPE_ARRAYSIZE = c_gs_shop_info_req_PULLTYPE_PULLTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* c_gs_shop_info_req_PULLTYPE_descriptor();
inline const ::std::string& c_gs_shop_info_req_PULLTYPE_Name(c_gs_shop_info_req_PULLTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    c_gs_shop_info_req_PULLTYPE_descriptor(), value);
}
inline bool c_gs_shop_info_req_PULLTYPE_Parse(
    const ::std::string& name, c_gs_shop_info_req_PULLTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c_gs_shop_info_req_PULLTYPE>(
    c_gs_shop_info_req_PULLTYPE_descriptor(), name, value);
}
enum c_gs_mail_opt_req_OPT {
  c_gs_mail_opt_req_OPT_DEL = 1,
  c_gs_mail_opt_req_OPT_READ1 = 2,
  c_gs_mail_opt_req_OPT_GET_ATTACH_AND_DEL1 = 3,
  c_gs_mail_opt_req_OPT_GET_ATTACH_AND_DEL_ALL = 4
};
bool c_gs_mail_opt_req_OPT_IsValid(int value);
const c_gs_mail_opt_req_OPT c_gs_mail_opt_req_OPT_OPT_MIN = c_gs_mail_opt_req_OPT_DEL;
const c_gs_mail_opt_req_OPT c_gs_mail_opt_req_OPT_OPT_MAX = c_gs_mail_opt_req_OPT_GET_ATTACH_AND_DEL_ALL;
const int c_gs_mail_opt_req_OPT_OPT_ARRAYSIZE = c_gs_mail_opt_req_OPT_OPT_MAX + 1;

const ::google::protobuf::EnumDescriptor* c_gs_mail_opt_req_OPT_descriptor();
inline const ::std::string& c_gs_mail_opt_req_OPT_Name(c_gs_mail_opt_req_OPT value) {
  return ::google::protobuf::internal::NameOfEnum(
    c_gs_mail_opt_req_OPT_descriptor(), value);
}
inline bool c_gs_mail_opt_req_OPT_Parse(
    const ::std::string& name, c_gs_mail_opt_req_OPT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c_gs_mail_opt_req_OPT>(
    c_gs_mail_opt_req_OPT_descriptor(), name, value);
}
enum gs_c_mail_ntf_OP_TYPE {
  gs_c_mail_ntf_OP_TYPE_ADD = 1,
  gs_c_mail_ntf_OP_TYPE_DEL = 2
};
bool gs_c_mail_ntf_OP_TYPE_IsValid(int value);
const gs_c_mail_ntf_OP_TYPE gs_c_mail_ntf_OP_TYPE_OP_TYPE_MIN = gs_c_mail_ntf_OP_TYPE_ADD;
const gs_c_mail_ntf_OP_TYPE gs_c_mail_ntf_OP_TYPE_OP_TYPE_MAX = gs_c_mail_ntf_OP_TYPE_DEL;
const int gs_c_mail_ntf_OP_TYPE_OP_TYPE_ARRAYSIZE = gs_c_mail_ntf_OP_TYPE_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gs_c_mail_ntf_OP_TYPE_descriptor();
inline const ::std::string& gs_c_mail_ntf_OP_TYPE_Name(gs_c_mail_ntf_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gs_c_mail_ntf_OP_TYPE_descriptor(), value);
}
inline bool gs_c_mail_ntf_OP_TYPE_Parse(
    const ::std::string& name, gs_c_mail_ntf_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gs_c_mail_ntf_OP_TYPE>(
    gs_c_mail_ntf_OP_TYPE_descriptor(), name, value);
}
enum user_mission_MISSION_EVENT_TYPE {
  user_mission_MISSION_EVENT_TYPE_min = 0,
  user_mission_MISSION_EVENT_TYPE_SKILL_LEVEL_UP = 1,
  user_mission_MISSION_EVENT_TYPE_RECHARGE = 2,
  user_mission_MISSION_EVENT_TYPE_COMMON_FB_COMPLETE = 3,
  user_mission_MISSION_EVENT_TYPE_COMMON_FB_ALL_THROUGH = 4,
  user_mission_MISSION_EVENT_TYPE_COMMON_FB_ALL_THROUGH_THREE_STAR = 5,
  user_mission_MISSION_EVENT_TYPE_EQUIP_LEVEL_UP = 6,
  user_mission_MISSION_EVENT_TYPE_RECHARGE_MISSION_MONTH_CARD1 = 7,
  user_mission_MISSION_EVENT_TYPE_GIVE_FRIEND_HEALTH = 8,
  user_mission_MISSION_EVENT_TYPE_HERO_COLLECT = 9,
  user_mission_MISSION_EVENT_TYPE_HEALTH_MEAL = 10,
  user_mission_MISSION_EVENT_TYPE_GET_REWARD = 11,
  user_mission_MISSION_EVENT_TYPE_RECHARGE_MISSION_MONTH_CARD2 = 12,
  user_mission_MISSION_EVENT_TYPE_MISSION_MAIN = 13,
  user_mission_MISSION_EVENT_TYPE_MISSION_FREE = 14,
  user_mission_MISSION_EVENT_TYPE_ACTIVITY = 15,
  user_mission_MISSION_EVENT_TYPE_JI_TAN = 16,
  user_mission_MISSION_EVENT_TYPE_ARENA_CHALLENGE = 17,
  user_mission_MISSION_EVENT_TYPE_SHI_LIAN_TA = 18,
  user_mission_MISSION_EVENT_TYPE_CRUSADE = 19,
  user_mission_MISSION_EVENT_TYPE_LEVEL_UP = 20,
  user_mission_MISSION_EVENT_TYPE_BUY_GOLD = 21,
  user_mission_MISSION_EVENT_TYPE_FB_FAIL = 22,
  user_mission_MISSION_EVENT_TYPE_COMPLETE_CHAPTER_ALL_FB_THREE_STAR = 23,
  user_mission_MISSION_EVENT_TYPE_ARENA_RANK_TOP = 24,
  user_mission_MISSION_EVENT_TYPE_COMPLETE_CHAPTER_FB = 25,
  user_mission_MISSION_EVENT_TYPE_max = 26
};
bool user_mission_MISSION_EVENT_TYPE_IsValid(int value);
const user_mission_MISSION_EVENT_TYPE user_mission_MISSION_EVENT_TYPE_MISSION_EVENT_TYPE_MIN = user_mission_MISSION_EVENT_TYPE_min;
const user_mission_MISSION_EVENT_TYPE user_mission_MISSION_EVENT_TYPE_MISSION_EVENT_TYPE_MAX = user_mission_MISSION_EVENT_TYPE_max;
const int user_mission_MISSION_EVENT_TYPE_MISSION_EVENT_TYPE_ARRAYSIZE = user_mission_MISSION_EVENT_TYPE_MISSION_EVENT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* user_mission_MISSION_EVENT_TYPE_descriptor();
inline const ::std::string& user_mission_MISSION_EVENT_TYPE_Name(user_mission_MISSION_EVENT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    user_mission_MISSION_EVENT_TYPE_descriptor(), value);
}
inline bool user_mission_MISSION_EVENT_TYPE_Parse(
    const ::std::string& name, user_mission_MISSION_EVENT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<user_mission_MISSION_EVENT_TYPE>(
    user_mission_MISSION_EVENT_TYPE_descriptor(), name, value);
}
enum user_mission_MISSION_EVENT_SUB_TYPE {
  user_mission_MISSION_EVENT_SUB_TYPE_MIN = 0,
  user_mission_MISSION_EVENT_SUB_TYPE_NONE = 1,
  user_mission_MISSION_EVENT_SUB_TYPE_HERO_QUALITY_GREEN = 2,
  user_mission_MISSION_EVENT_SUB_TYPE_HERO_QUALITY_BLUE = 3,
  user_mission_MISSION_EVENT_SUB_TYPE_HERO_STAR_FOUR = 4,
  user_mission_MISSION_EVENT_SUB_TYPE_HERO_STAR_THREE = 5,
  user_mission_MISSION_EVENT_SUB_TYPE_PLAYER_LEVEL = 6,
  user_mission_MISSION_EVENT_SUB_TYPE_VIP_LEVEL = 7,
  user_mission_MISSION_EVENT_SUB_TYPE_HUAXIA = 8,
  user_mission_MISSION_EVENT_SUB_TYPE_MAX = 9
};
bool user_mission_MISSION_EVENT_SUB_TYPE_IsValid(int value);
const user_mission_MISSION_EVENT_SUB_TYPE user_mission_MISSION_EVENT_SUB_TYPE_MISSION_EVENT_SUB_TYPE_MIN = user_mission_MISSION_EVENT_SUB_TYPE_MIN;
const user_mission_MISSION_EVENT_SUB_TYPE user_mission_MISSION_EVENT_SUB_TYPE_MISSION_EVENT_SUB_TYPE_MAX = user_mission_MISSION_EVENT_SUB_TYPE_MAX;
const int user_mission_MISSION_EVENT_SUB_TYPE_MISSION_EVENT_SUB_TYPE_ARRAYSIZE = user_mission_MISSION_EVENT_SUB_TYPE_MISSION_EVENT_SUB_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* user_mission_MISSION_EVENT_SUB_TYPE_descriptor();
inline const ::std::string& user_mission_MISSION_EVENT_SUB_TYPE_Name(user_mission_MISSION_EVENT_SUB_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    user_mission_MISSION_EVENT_SUB_TYPE_descriptor(), value);
}
inline bool user_mission_MISSION_EVENT_SUB_TYPE_Parse(
    const ::std::string& name, user_mission_MISSION_EVENT_SUB_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<user_mission_MISSION_EVENT_SUB_TYPE>(
    user_mission_MISSION_EVENT_SUB_TYPE_descriptor(), name, value);
}
enum user_mission_MISSION_STATUS {
  user_mission_MISSION_STATUS_STATUS_CAN_ATTACH = 1,
  user_mission_MISSION_STATUS_STATUS_IN = 2,
  user_mission_MISSION_STATUS_STATUS_NOT_TO_TIME = 3,
  user_mission_MISSION_STATUS_STATUS_CAN_NOT_SEE = 4,
  user_mission_MISSION_STATUS_STATUS_DELED = 5,
  user_mission_MISSION_STATUS_STATUS_ALREADY_ATTACH = 6
};
bool user_mission_MISSION_STATUS_IsValid(int value);
const user_mission_MISSION_STATUS user_mission_MISSION_STATUS_MISSION_STATUS_MIN = user_mission_MISSION_STATUS_STATUS_CAN_ATTACH;
const user_mission_MISSION_STATUS user_mission_MISSION_STATUS_MISSION_STATUS_MAX = user_mission_MISSION_STATUS_STATUS_ALREADY_ATTACH;
const int user_mission_MISSION_STATUS_MISSION_STATUS_ARRAYSIZE = user_mission_MISSION_STATUS_MISSION_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* user_mission_MISSION_STATUS_descriptor();
inline const ::std::string& user_mission_MISSION_STATUS_Name(user_mission_MISSION_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    user_mission_MISSION_STATUS_descriptor(), value);
}
inline bool user_mission_MISSION_STATUS_Parse(
    const ::std::string& name, user_mission_MISSION_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<user_mission_MISSION_STATUS>(
    user_mission_MISSION_STATUS_descriptor(), name, value);
}
enum gs_c_mission_ntf_array_mission_opt_OPT {
  gs_c_mission_ntf_array_mission_opt_OPT_ADD = 1,
  gs_c_mission_ntf_array_mission_opt_OPT_DEL = 2,
  gs_c_mission_ntf_array_mission_opt_OPT_UPDATE = 3
};
bool gs_c_mission_ntf_array_mission_opt_OPT_IsValid(int value);
const gs_c_mission_ntf_array_mission_opt_OPT gs_c_mission_ntf_array_mission_opt_OPT_OPT_MIN = gs_c_mission_ntf_array_mission_opt_OPT_ADD;
const gs_c_mission_ntf_array_mission_opt_OPT gs_c_mission_ntf_array_mission_opt_OPT_OPT_MAX = gs_c_mission_ntf_array_mission_opt_OPT_UPDATE;
const int gs_c_mission_ntf_array_mission_opt_OPT_OPT_ARRAYSIZE = gs_c_mission_ntf_array_mission_opt_OPT_OPT_MAX + 1;

const ::google::protobuf::EnumDescriptor* gs_c_mission_ntf_array_mission_opt_OPT_descriptor();
inline const ::std::string& gs_c_mission_ntf_array_mission_opt_OPT_Name(gs_c_mission_ntf_array_mission_opt_OPT value) {
  return ::google::protobuf::internal::NameOfEnum(
    gs_c_mission_ntf_array_mission_opt_OPT_descriptor(), value);
}
inline bool gs_c_mission_ntf_array_mission_opt_OPT_Parse(
    const ::std::string& name, gs_c_mission_ntf_array_mission_opt_OPT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gs_c_mission_ntf_array_mission_opt_OPT>(
    gs_c_mission_ntf_array_mission_opt_OPT_descriptor(), name, value);
}
enum sign_n_reward_SIGN_N_REWARD_TYPE {
  sign_n_reward_SIGN_N_REWARD_TYPE_MIN = 1,
  sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_FIRST = 2,
  sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_SECOND = 3,
  sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_THREE = 4,
  sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_FOUR = 5,
  sign_n_reward_SIGN_N_REWARD_TYPE_MAX = 6
};
bool sign_n_reward_SIGN_N_REWARD_TYPE_IsValid(int value);
const sign_n_reward_SIGN_N_REWARD_TYPE sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_MIN = sign_n_reward_SIGN_N_REWARD_TYPE_MIN;
const sign_n_reward_SIGN_N_REWARD_TYPE sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_MAX = sign_n_reward_SIGN_N_REWARD_TYPE_MAX;
const int sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_ARRAYSIZE = sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* sign_n_reward_SIGN_N_REWARD_TYPE_descriptor();
inline const ::std::string& sign_n_reward_SIGN_N_REWARD_TYPE_Name(sign_n_reward_SIGN_N_REWARD_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    sign_n_reward_SIGN_N_REWARD_TYPE_descriptor(), value);
}
inline bool sign_n_reward_SIGN_N_REWARD_TYPE_Parse(
    const ::std::string& name, sign_n_reward_SIGN_N_REWARD_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<sign_n_reward_SIGN_N_REWARD_TYPE>(
    sign_n_reward_SIGN_N_REWARD_TYPE_descriptor(), name, value);
}
enum sign_n_reward_SIGN_N_REWARD_STATUS {
  sign_n_reward_SIGN_N_REWARD_STATUS_STATUS_CONDITION_NOT_SATISFY = 1,
  sign_n_reward_SIGN_N_REWARD_STATUS_STATUS_ALREADY_GET_ATTACH = 2,
  sign_n_reward_SIGN_N_REWARD_STATUS_STATUS_CAN_ATTACH = 3
};
bool sign_n_reward_SIGN_N_REWARD_STATUS_IsValid(int value);
const sign_n_reward_SIGN_N_REWARD_STATUS sign_n_reward_SIGN_N_REWARD_STATUS_SIGN_N_REWARD_STATUS_MIN = sign_n_reward_SIGN_N_REWARD_STATUS_STATUS_CONDITION_NOT_SATISFY;
const sign_n_reward_SIGN_N_REWARD_STATUS sign_n_reward_SIGN_N_REWARD_STATUS_SIGN_N_REWARD_STATUS_MAX = sign_n_reward_SIGN_N_REWARD_STATUS_STATUS_CAN_ATTACH;
const int sign_n_reward_SIGN_N_REWARD_STATUS_SIGN_N_REWARD_STATUS_ARRAYSIZE = sign_n_reward_SIGN_N_REWARD_STATUS_SIGN_N_REWARD_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* sign_n_reward_SIGN_N_REWARD_STATUS_descriptor();
inline const ::std::string& sign_n_reward_SIGN_N_REWARD_STATUS_Name(sign_n_reward_SIGN_N_REWARD_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    sign_n_reward_SIGN_N_REWARD_STATUS_descriptor(), value);
}
inline bool sign_n_reward_SIGN_N_REWARD_STATUS_Parse(
    const ::std::string& name, sign_n_reward_SIGN_N_REWARD_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<sign_n_reward_SIGN_N_REWARD_STATUS>(
    sign_n_reward_SIGN_N_REWARD_STATUS_descriptor(), name, value);
}
enum c_gs_sign_req_SIGN_TYPE {
  c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_1 = 1,
  c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_N = 2
};
bool c_gs_sign_req_SIGN_TYPE_IsValid(int value);
const c_gs_sign_req_SIGN_TYPE c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_MIN = c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_1;
const c_gs_sign_req_SIGN_TYPE c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_MAX = c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_N;
const int c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_ARRAYSIZE = c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* c_gs_sign_req_SIGN_TYPE_descriptor();
inline const ::std::string& c_gs_sign_req_SIGN_TYPE_Name(c_gs_sign_req_SIGN_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    c_gs_sign_req_SIGN_TYPE_descriptor(), value);
}
inline bool c_gs_sign_req_SIGN_TYPE_Parse(
    const ::std::string& name, c_gs_sign_req_SIGN_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c_gs_sign_req_SIGN_TYPE>(
    c_gs_sign_req_SIGN_TYPE_descriptor(), name, value);
}
enum gs_c_marquee_ntf_MARQUEE_TYPE {
  gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_MIN = 0,
  gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_INVOKE = 1,
  gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_HERO_EVOLUTION = 2,
  gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_INVOKE_HERO = 3,
  gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_HERO_STAR_UP = 4,
  gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_ARENA_CHALLENGE = 5,
  gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_WORD = 6,
  gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_MAX = 7
};
bool gs_c_marquee_ntf_MARQUEE_TYPE_IsValid(int value);
const gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_TYPE_MIN = gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_MIN;
const gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_TYPE_MAX = gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_MAX;
const int gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_TYPE_ARRAYSIZE = gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gs_c_marquee_ntf_MARQUEE_TYPE_descriptor();
inline const ::std::string& gs_c_marquee_ntf_MARQUEE_TYPE_Name(gs_c_marquee_ntf_MARQUEE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gs_c_marquee_ntf_MARQUEE_TYPE_descriptor(), value);
}
inline bool gs_c_marquee_ntf_MARQUEE_TYPE_Parse(
    const ::std::string& name, gs_c_marquee_ntf_MARQUEE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gs_c_marquee_ntf_MARQUEE_TYPE>(
    gs_c_marquee_ntf_MARQUEE_TYPE_descriptor(), name, value);
}
enum c_gs_user_friend_op_req_OP_TYPE {
  c_gs_user_friend_op_req_OP_TYPE_MIN = 0,
  c_gs_user_friend_op_req_OP_TYPE_GET_ELEMENT1 = 1,
  c_gs_user_friend_op_req_OP_TYPE_GET_ELEMENTN = 2,
  c_gs_user_friend_op_req_OP_TYPE_GIVE_ELEMENT1 = 3,
  c_gs_user_friend_op_req_OP_TYPE_GIVE_ELEMENTN = 4,
  c_gs_user_friend_op_req_OP_TYPE_GIVE_UP_APPLY1 = 5,
  c_gs_user_friend_op_req_OP_TYPE_GIVE_UP_APPLYN = 6,
  c_gs_user_friend_op_req_OP_TYPE_AFFIRM_AGREE1 = 7,
  c_gs_user_friend_op_req_OP_TYPE_AFFIRM_AGREEN = 8,
  c_gs_user_friend_op_req_OP_TYPE_AFFIRM_REFUSE1 = 9,
  c_gs_user_friend_op_req_OP_TYPE_AFFIRM_REFUSEN = 10,
  c_gs_user_friend_op_req_OP_TYPE_ADD_FRIEND = 11,
  c_gs_user_friend_op_req_OP_TYPE_DEL_FRIEND = 12,
  c_gs_user_friend_op_req_OP_TYPE_MAX = 13
};
bool c_gs_user_friend_op_req_OP_TYPE_IsValid(int value);
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req_OP_TYPE_OP_TYPE_MIN = c_gs_user_friend_op_req_OP_TYPE_MIN;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req_OP_TYPE_OP_TYPE_MAX = c_gs_user_friend_op_req_OP_TYPE_MAX;
const int c_gs_user_friend_op_req_OP_TYPE_OP_TYPE_ARRAYSIZE = c_gs_user_friend_op_req_OP_TYPE_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* c_gs_user_friend_op_req_OP_TYPE_descriptor();
inline const ::std::string& c_gs_user_friend_op_req_OP_TYPE_Name(c_gs_user_friend_op_req_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    c_gs_user_friend_op_req_OP_TYPE_descriptor(), value);
}
inline bool c_gs_user_friend_op_req_OP_TYPE_Parse(
    const ::std::string& name, c_gs_user_friend_op_req_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c_gs_user_friend_op_req_OP_TYPE>(
    c_gs_user_friend_op_req_OP_TYPE_descriptor(), name, value);
}
enum gs_c_friend_ntf_OP_TYPE {
  gs_c_friend_ntf_OP_TYPE_FRIEND_GIVE_ELEMENT = 1,
  gs_c_friend_ntf_OP_TYPE_FRIEND_GIVE_UP_APPLY = 2,
  gs_c_friend_ntf_OP_TYPE_FRIEND_AFFIRM_AGREE = 3,
  gs_c_friend_ntf_OP_TYPE_FRIEND_DEL_FRIEND = 4,
  gs_c_friend_ntf_OP_TYPE_FRIEND_AFFIRM_REFUSE = 5,
  gs_c_friend_ntf_OP_TYPE_FRIEND_ADD_FRIEND = 6
};
bool gs_c_friend_ntf_OP_TYPE_IsValid(int value);
const gs_c_friend_ntf_OP_TYPE gs_c_friend_ntf_OP_TYPE_OP_TYPE_MIN = gs_c_friend_ntf_OP_TYPE_FRIEND_GIVE_ELEMENT;
const gs_c_friend_ntf_OP_TYPE gs_c_friend_ntf_OP_TYPE_OP_TYPE_MAX = gs_c_friend_ntf_OP_TYPE_FRIEND_ADD_FRIEND;
const int gs_c_friend_ntf_OP_TYPE_OP_TYPE_ARRAYSIZE = gs_c_friend_ntf_OP_TYPE_OP_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* gs_c_friend_ntf_OP_TYPE_descriptor();
inline const ::std::string& gs_c_friend_ntf_OP_TYPE_Name(gs_c_friend_ntf_OP_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    gs_c_friend_ntf_OP_TYPE_descriptor(), value);
}
inline bool gs_c_friend_ntf_OP_TYPE_Parse(
    const ::std::string& name, gs_c_friend_ntf_OP_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gs_c_friend_ntf_OP_TYPE>(
    gs_c_friend_ntf_OP_TYPE_descriptor(), name, value);
}
enum c_gs_chat_req_CHAT_TYPE {
  c_gs_chat_req_CHAT_TYPE_WORLD = 1,
  c_gs_chat_req_CHAT_TYPE_GUILD = 2,
  c_gs_chat_req_CHAT_TYPE_WHISPER = 3
};
bool c_gs_chat_req_CHAT_TYPE_IsValid(int value);
const c_gs_chat_req_CHAT_TYPE c_gs_chat_req_CHAT_TYPE_CHAT_TYPE_MIN = c_gs_chat_req_CHAT_TYPE_WORLD;
const c_gs_chat_req_CHAT_TYPE c_gs_chat_req_CHAT_TYPE_CHAT_TYPE_MAX = c_gs_chat_req_CHAT_TYPE_WHISPER;
const int c_gs_chat_req_CHAT_TYPE_CHAT_TYPE_ARRAYSIZE = c_gs_chat_req_CHAT_TYPE_CHAT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* c_gs_chat_req_CHAT_TYPE_descriptor();
inline const ::std::string& c_gs_chat_req_CHAT_TYPE_Name(c_gs_chat_req_CHAT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    c_gs_chat_req_CHAT_TYPE_descriptor(), value);
}
inline bool c_gs_chat_req_CHAT_TYPE_Parse(
    const ::std::string& name, c_gs_chat_req_CHAT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c_gs_chat_req_CHAT_TYPE>(
    c_gs_chat_req_CHAT_TYPE_descriptor(), name, value);
}
enum c_gs_rank_req_RANK_TYPE {
  c_gs_rank_req_RANK_TYPE_ARENA = 1,
  c_gs_rank_req_RANK_TYPE_FIGHT_POWER = 2,
  c_gs_rank_req_RANK_TYPE_LEVEL = 3,
  c_gs_rank_req_RANK_TYPE_GUILD = 4
};
bool c_gs_rank_req_RANK_TYPE_IsValid(int value);
const c_gs_rank_req_RANK_TYPE c_gs_rank_req_RANK_TYPE_RANK_TYPE_MIN = c_gs_rank_req_RANK_TYPE_ARENA;
const c_gs_rank_req_RANK_TYPE c_gs_rank_req_RANK_TYPE_RANK_TYPE_MAX = c_gs_rank_req_RANK_TYPE_GUILD;
const int c_gs_rank_req_RANK_TYPE_RANK_TYPE_ARRAYSIZE = c_gs_rank_req_RANK_TYPE_RANK_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* c_gs_rank_req_RANK_TYPE_descriptor();
inline const ::std::string& c_gs_rank_req_RANK_TYPE_Name(c_gs_rank_req_RANK_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    c_gs_rank_req_RANK_TYPE_descriptor(), value);
}
inline bool c_gs_rank_req_RANK_TYPE_Parse(
    const ::std::string& name, c_gs_rank_req_RANK_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c_gs_rank_req_RANK_TYPE>(
    c_gs_rank_req_RANK_TYPE_descriptor(), name, value);
}
enum c_gs_guild_apply_list_req_e_show_for {
  c_gs_guild_apply_list_req_e_show_for_EOutsider = 1,
  c_gs_guild_apply_list_req_e_show_for_EManager = 2
};
bool c_gs_guild_apply_list_req_e_show_for_IsValid(int value);
const c_gs_guild_apply_list_req_e_show_for c_gs_guild_apply_list_req_e_show_for_e_show_for_MIN = c_gs_guild_apply_list_req_e_show_for_EOutsider;
const c_gs_guild_apply_list_req_e_show_for c_gs_guild_apply_list_req_e_show_for_e_show_for_MAX = c_gs_guild_apply_list_req_e_show_for_EManager;
const int c_gs_guild_apply_list_req_e_show_for_e_show_for_ARRAYSIZE = c_gs_guild_apply_list_req_e_show_for_e_show_for_MAX + 1;

const ::google::protobuf::EnumDescriptor* c_gs_guild_apply_list_req_e_show_for_descriptor();
inline const ::std::string& c_gs_guild_apply_list_req_e_show_for_Name(c_gs_guild_apply_list_req_e_show_for value) {
  return ::google::protobuf::internal::NameOfEnum(
    c_gs_guild_apply_list_req_e_show_for_descriptor(), value);
}
inline bool c_gs_guild_apply_list_req_e_show_for_Parse(
    const ::std::string& name, c_gs_guild_apply_list_req_e_show_for* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c_gs_guild_apply_list_req_e_show_for>(
    c_gs_guild_apply_list_req_e_show_for_descriptor(), name, value);
}
enum c_gs_guild_apply_op_req_e_op_type {
  c_gs_guild_apply_op_req_e_op_type_EUser_Send = 1,
  c_gs_guild_apply_op_req_e_op_type_EUser_Quick_Send = 2,
  c_gs_guild_apply_op_req_e_op_type_EUser_Cancel = 3,
  c_gs_guild_apply_op_req_e_op_type_EGuild_Accept = 4,
  c_gs_guild_apply_op_req_e_op_type_EGuild_Refuse = 5
};
bool c_gs_guild_apply_op_req_e_op_type_IsValid(int value);
const c_gs_guild_apply_op_req_e_op_type c_gs_guild_apply_op_req_e_op_type_e_op_type_MIN = c_gs_guild_apply_op_req_e_op_type_EUser_Send;
const c_gs_guild_apply_op_req_e_op_type c_gs_guild_apply_op_req_e_op_type_e_op_type_MAX = c_gs_guild_apply_op_req_e_op_type_EGuild_Refuse;
const int c_gs_guild_apply_op_req_e_op_type_e_op_type_ARRAYSIZE = c_gs_guild_apply_op_req_e_op_type_e_op_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* c_gs_guild_apply_op_req_e_op_type_descriptor();
inline const ::std::string& c_gs_guild_apply_op_req_e_op_type_Name(c_gs_guild_apply_op_req_e_op_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    c_gs_guild_apply_op_req_e_op_type_descriptor(), value);
}
inline bool c_gs_guild_apply_op_req_e_op_type_Parse(
    const ::std::string& name, c_gs_guild_apply_op_req_e_op_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c_gs_guild_apply_op_req_e_op_type>(
    c_gs_guild_apply_op_req_e_op_type_descriptor(), name, value);
}
enum c_gs_guild_list_req_e_list_type {
  c_gs_guild_list_req_e_list_type_ERecommend = 1,
  c_gs_guild_list_req_e_list_type_EApplied = 2,
  c_gs_guild_list_req_e_list_type_EActive = 3
};
bool c_gs_guild_list_req_e_list_type_IsValid(int value);
const c_gs_guild_list_req_e_list_type c_gs_guild_list_req_e_list_type_e_list_type_MIN = c_gs_guild_list_req_e_list_type_ERecommend;
const c_gs_guild_list_req_e_list_type c_gs_guild_list_req_e_list_type_e_list_type_MAX = c_gs_guild_list_req_e_list_type_EActive;
const int c_gs_guild_list_req_e_list_type_e_list_type_ARRAYSIZE = c_gs_guild_list_req_e_list_type_e_list_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* c_gs_guild_list_req_e_list_type_descriptor();
inline const ::std::string& c_gs_guild_list_req_e_list_type_Name(c_gs_guild_list_req_e_list_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    c_gs_guild_list_req_e_list_type_descriptor(), value);
}
inline bool c_gs_guild_list_req_e_list_type_Parse(
    const ::std::string& name, c_gs_guild_list_req_e_list_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<c_gs_guild_list_req_e_list_type>(
    c_gs_guild_list_req_e_list_type_descriptor(), name, value);
}
enum e_msg_c_gs {
  e_msg_c_gs_min = 0,
  e_msg_c_gs_enter_gs_req = 1,
  e_msg_c_gs_config_req = 2,
  e_msg_c_gs_user_info_req = 3,
  e_msg_c_gs_start_sub_task_req = 4,
  e_msg_c_gs_end_sub_task_req = 5,
  e_msg_c_gs_invoke_hero_req = 6,
  e_msg_c_gs_leave_gs_req = 7,
  e_msg_c_gs_equip_level_up_req = 8,
  e_msg_c_gs_equip_evolution_req = 9,
  e_msg_c_gs_sell_req = 10,
  e_msg_c_gs_fragment_compound_req = 11,
  e_msg_c_gs_mail_opt_req = 12,
  e_msg_c_gs_hero_evolution_req = 13,
  e_msg_c_gs_hero_star_up_req = 14,
  e_msg_c_gs_skill_level_up_req = 15,
  e_msg_c_gs_invoke_req = 16,
  e_msg_c_gs_buy_req = 17,
  e_msg_c_gs_server_time_req = 18,
  e_msg_c_gs_use_item_req = 19,
  e_msg_c_gs_shop_buy_item_req = 20,
  e_msg_c_gs_shop_refresh_req = 21,
  e_msg_c_gs_shop_info_req = 22,
  e_msg_c_gs_arena_refresh_match_req = 23,
  e_msg_c_gs_arena_update_team_req = 24,
  e_msg_c_gs_arena_start_challenge_req = 25,
  e_msg_c_gs_arena_end_challenge_req = 26,
  e_msg_c_gs_arena_challenge_reset_cd_req = 27,
  e_msg_c_gs_arena_challenge_reset_num_req = 28,
  e_msg_c_gs_arena_log_req = 29,
  e_msg_c_gs_arena_ranks_req = 30,
  e_msg_c_gs_get_mission_reward_req = 31,
  e_msg_c_gs_sign_req = 32,
  e_msg_c_gs_sign_add_req = 33,
  e_msg_c_gs_arena_search_req = 34,
  e_msg_c_gs_diamond_speed_kill_req = 35,
  e_msg_c_gs_head_or_frame_change_req = 36,
  e_msg_c_gs_finish_novice_guide_req = 37,
  e_msg_c_gs_edit_player_info_req = 38,
  e_msg_c_gs_json_config_version_req = 39,
  e_msg_c_gs_json_config_req = 40,
  e_msg_c_gs_user_friend_op_req = 41,
  e_msg_c_gs_search_user_req = 42,
  e_msg_c_gs_chat_req = 43,
  e_msg_c_gs_fight_power_req = 44,
  e_msg_c_gs_rank_req = 45,
  e_msg_c_gs_guild_new_req = 46,
  e_msg_c_gs_guild_edit_req = 47,
  e_msg_c_gs_guild_delete_req = 48,
  e_msg_c_gs_guild_apply_list_req = 49,
  e_msg_c_gs_guild_apply_op_req = 50,
  e_msg_c_gs_guild_invite_req = 51,
  e_msg_c_gs_guild_member_op_req = 52,
  e_msg_c_gs_guild_boss_refresh_req = 53,
  e_msg_c_gs_guild_search_req = 54,
  e_msg_c_gs_guild_list_req = 55,
  e_msg_c_gs_guild_info_req = 56,
  e_msg_c_gs_guild_boss_list_req = 57,
  e_msg_c_gs_guild_boss_info_req = 58,
  e_msg_c_gs_guild_boss_attack_req = 59,
  e_msg_c_gs_guild_boss_dead_hero_reset_req = 60,
  e_msg_c_gs_guild_boss_attacker_rank_req = 61,
  e_msg_c_gs_crusade_start_req = 62,
  e_msg_c_gs_crusade_end_req = 63,
  e_msg_c_gs_crusade_hero_life_req = 64,
  e_msg_c_gs_crusade_reset_req = 65,
  e_msg_c_gs_crusade_promote_award_req = 66,
  e_msg_c_gs_crusade_buff_refresh_req = 67,
  e_msg_c_gs_max = 68
};
bool e_msg_c_gs_IsValid(int value);
const e_msg_c_gs e_msg_c_gs_MIN = e_msg_c_gs_min;
const e_msg_c_gs e_msg_c_gs_MAX = e_msg_c_gs_max;
const int e_msg_c_gs_ARRAYSIZE = e_msg_c_gs_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_msg_c_gs_descriptor();
inline const ::std::string& e_msg_c_gs_Name(e_msg_c_gs value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_msg_c_gs_descriptor(), value);
}
inline bool e_msg_c_gs_Parse(
    const ::std::string& name, e_msg_c_gs* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_msg_c_gs>(
    e_msg_c_gs_descriptor(), name, value);
}
enum e_msg_gs_c {
  e_msg_gs_c_min = 0,
  e_msg_gs_c_enter_gs_res = 1,
  e_msg_gs_c_config_res = 2,
  e_msg_gs_c_user_info_res = 3,
  e_msg_gs_c_start_sub_task_res = 4,
  e_msg_gs_c_end_sub_task_res = 5,
  e_msg_gs_c_invoke_hero_res = 6,
  e_msg_gs_c_equip_level_up_res = 7,
  e_msg_gs_c_equip_evolution_res = 8,
  e_msg_gs_c_leave_gs_res = 9,
  e_msg_gs_c_sell_res = 10,
  e_msg_gs_c_fragment_compound_res = 11,
  e_msg_gs_c_mail_opt_res = 12,
  e_msg_gs_c_mail_ntf = 13,
  e_msg_gs_c_hero_evolution_res = 14,
  e_msg_gs_c_hero_star_up_res = 15,
  e_msg_gs_c_skill_level_up_res = 16,
  e_msg_gs_c_invoke_res = 17,
  e_msg_gs_c_buy_res = 18,
  e_msg_gs_c_server_time_res = 19,
  e_msg_gs_c_use_item_res = 20,
  e_msg_gs_c_shop_buy_item_res = 21,
  e_msg_gs_c_shop_refresh_res = 22,
  e_msg_gs_c_shop_info_res = 23,
  e_msg_gs_c_arena_refresh_match_res = 24,
  e_msg_gs_c_arena_update_team_res = 25,
  e_msg_gs_c_arena_start_challenge_res = 26,
  e_msg_gs_c_arena_end_challenge_res = 27,
  e_msg_gs_c_arena_challenge_reset_cd_res = 28,
  e_msg_gs_c_arena_challenge_reset_num_res = 29,
  e_msg_gs_c_arena_challenge_ntf = 30,
  e_msg_gs_c_arena_log_res = 31,
  e_msg_gs_c_arena_ranks_res = 32,
  e_msg_gs_c_get_mission_reward_res = 33,
  e_msg_gs_c_mission_ntf = 34,
  e_msg_gs_c_sign_res = 35,
  e_msg_gs_c_sign_add_res = 36,
  e_msg_gs_c_arena_search_res = 37,
  e_msg_gs_c_diamond_speed_kill_res = 38,
  e_msg_gs_c_head_or_frame_change_res = 39,
  e_msg_gs_c_finish_novice_guide_res = 40,
  e_msg_gs_c_edit_player_info_res = 41,
  e_msg_gs_c_marquee_ntf = 42,
  e_msg_gs_c_element_ntf = 43,
  e_msg_gs_c_json_config_version_res = 44,
  e_msg_gs_c_json_config_res = 45,
  e_msg_gs_c_user_friend_op_res = 46,
  e_msg_gs_c_user_friend_ntf = 47,
  e_msg_gs_c_search_user_res = 48,
  e_msg_gs_c_chat_res = 49,
  e_msg_gs_c_chat_ntf = 50,
  e_msg_gs_c_fight_power_res = 51,
  e_msg_gs_c_rank_res = 52,
  e_msg_gs_c_guild_new_res = 53,
  e_msg_gs_c_guild_edit_res = 54,
  e_msg_gs_c_guild_delete_res = 55,
  e_msg_gs_c_guild_apply_list_res = 56,
  e_msg_gs_c_guild_apply_op_res = 57,
  e_msg_gs_c_guild_invite_res = 58,
  e_msg_gs_c_guild_member_op_res = 59,
  e_msg_gs_c_guild_boss_refresh_res = 60,
  e_msg_gs_c_guild_search_res = 61,
  e_msg_gs_c_guild_list_res = 62,
  e_msg_gs_c_guild_info_res = 63,
  e_msg_gs_c_guild_boss_list_res = 64,
  e_msg_gs_c_guild_boss_info_res = 65,
  e_msg_gs_c_guild_boss_attack_res = 66,
  e_msg_gs_c_guild_boss_dead_hero_reset_res = 67,
  e_msg_gs_c_guild_boss_attacker_rank_res = 68,
  e_msg_gs_c_guild_quit_ntf = 69,
  e_msg_gs_c_guild_join_ntf = 70,
  e_msg_gs_c_crusade_start_res = 71,
  e_msg_gs_c_crusade_end_res = 72,
  e_msg_gs_c_crusade_hero_life_res = 73,
  e_msg_gs_c_crusade_reset_res = 74,
  e_msg_gs_c_crusade_promote_award_res = 75,
  e_msg_gs_c_crusade_buff_refresh_res = 76,
  e_msg_gs_c_max = 77
};
bool e_msg_gs_c_IsValid(int value);
const e_msg_gs_c e_msg_gs_c_MIN = e_msg_gs_c_min;
const e_msg_gs_c e_msg_gs_c_MAX = e_msg_gs_c_max;
const int e_msg_gs_c_ARRAYSIZE = e_msg_gs_c_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_msg_gs_c_descriptor();
inline const ::std::string& e_msg_gs_c_Name(e_msg_gs_c value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_msg_gs_c_descriptor(), value);
}
inline bool e_msg_gs_c_Parse(
    const ::std::string& name, e_msg_gs_c* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_msg_gs_c>(
    e_msg_gs_c_descriptor(), name, value);
}
enum e_gsc_errorcode {
  e_gsc_errorcode_min = 0,
  e_gsc_errorcode_success = 1,
  e_gsc_errorcode_unknown_error = 2,
  e_gsc_errorcode_not_logined = 3,
  e_gsc_errorcode_not_get_user_info = 4,
  e_gsc_errorcode_cannot_start_sub_task = 5,
  e_gsc_errorcode_cannot_end_sub_task = 6,
  e_gsc_errorcode_sub_task_time_out = 7,
  e_gsc_errorcode_user_info_not_exsit_or_has_error = 8,
  e_gsc_errorcode_user_using_by_another_connect = 9,
  e_gsc_errorcode_no_enough_consume_or_reach_max = 10,
  e_gsc_errorcode_no_enough_consume = 11,
  e_gsc_errorcode_op_not_support = 12,
  e_gsc_errorcode_no_enough_health = 13,
  e_gsc_errorcode_not_enough_item = 14,
  e_gsc_errorcode_not_enough_diamond = 15,
  e_gsc_errorcode_not_enough_times = 16,
  e_gsc_errorcode_not_enough_bag_space = 17,
  e_gsc_errorcode_vip_level_not_reach = 18,
  e_gsc_errorcode_health_reach_max = 19,
  e_gsc_errorcode_gold_not_enough = 20,
  e_gsc_errorcode_level_not_enough = 21,
  e_gsc_errorcode_equip_quality_not_enough = 22,
  e_gsc_errorcode_not_exist_attach_mail = 23,
  e_gsc_errorcode_speed_kill_not_enough_star = 24,
  e_gsc_errorcode_speed_kill_not_enough_left_enter_num = 25,
  e_gsc_errorcode_speed_kill_exceed_limit = 26,
  e_gsc_errorcode_item_can_not_use = 27,
  e_gsc_errorcode_shop_no_unlock = 28,
  e_gsc_errorcode_shop_no_this_item = 29,
  e_gsc_errorcode_shop_item_sold = 30,
  e_gsc_errorcode_shop_has_refreshed = 31,
  e_gsc_errorcode_arena_contestant_rank_changed = 32,
  e_gsc_errorcode_no_this_hero = 33,
  e_gsc_errorcode_hero_exp_full = 34,
  e_gsc_errorcode_arena_match_is_fighting = 35,
  e_gsc_errorcode_arena_no_enough_challenge_num = 36,
  e_gsc_errorcode_arena_challenge_in_cd = 37,
  e_gsc_errorcode_arena_challenge_not_in_cd = 38,
  e_gsc_errorcode_arena_challenge_not_enough_buy_num = 39,
  e_gsc_errorcode_arena_challenge_num_not_zero = 40,
  e_gsc_errorcode_arena_i_am_fighting = 41,
  e_gsc_errorcode_arena_cannot_fight_this_contestant = 42,
  e_gsc_errorcode_arena_rank_page_out = 43,
  e_gsc_errorcode_mission_reward_condition_not_satisfy = 44,
  e_gsc_errorcode_mission_already_get_reward = 45,
  e_gsc_errorcode_sign_already_sign_today = 46,
  e_gsc_errorcode_sign_no_need_add = 47,
  e_gsc_errorcode_sign_no_left_add_times = 48,
  e_gsc_errorcode_sign_confition_not_satisfy = 49,
  e_gsc_errorcode_sign_already_reward = 50,
  e_gsc_errorcode_arena_search_no_result = 51,
  e_gsc_errorcode_guide_pre_guide_not_finish = 52,
  e_gsc_errorcode_guide_already_finish = 53,
  e_gsc_errorcode_guide_trigger_condition_not_satisfy = 54,
  e_gsc_errorcode_sub_task_has_not_passed = 55,
  e_gsc_errorcode_sub_task_not_branch = 56,
  e_gsc_errorcode_sub_task_has_left_enter_num = 57,
  e_gsc_errorcode_sub_task_no_enough_reset_num = 58,
  e_gsc_errorcode_sub_task_no_enter_num_limit = 59,
  e_gsc_errorcode_edit_player_info_name_too_long = 60,
  e_gsc_errorcode_edit_player_info_name_forbid_word = 61,
  e_gsc_errorcode_edit_player_info_name_same = 62,
  e_gsc_errorcode_json_config_no_some_file = 63,
  e_gsc_errorcode_friend_me_friend_num_reach_max = 64,
  e_gsc_errorcode_friend_friend_friend_num_reach_max = 65,
  e_gsc_errorcode_friend_apply_num_reach_max = 66,
  e_gsc_errorcode_friend_already_in_apply_list = 67,
  e_gsc_errorcode_friend_already_be_friend = 68,
  e_gsc_errorcode_friend_del_friend_num_reach_max = 69,
  e_gsc_errorcode_friend_already_give_element_today = 70,
  e_gsc_errorcode_friend_affirm_num_reach_max_num = 71,
  e_gsc_errorcode_friend_search_user_not_exist = 72,
  e_gsc_errorcode_chat_user_not_online_or_exist = 73,
  e_gsc_errorcode_signature_too_long = 74,
  e_gsc_errorcode_signature_has_forbid_word = 75,
  e_gsc_errorcode_guild_info_not_exist = 76,
  e_gsc_errorcode_guild_no_authority = 77,
  e_gsc_errorcode_guild_already_apply = 78,
  e_gsc_errorcode_guild_user_apply_num_reach_max = 79,
  e_gsc_errorcode_guild_apply_num_reach_max = 80,
  e_gsc_errorcode_guild_cannot_apply = 81,
  e_gsc_errorcode_guild_president_cannot_leave = 82,
  e_gsc_errorcode_guild_position_full = 83,
  e_gsc_errorcode_guild_boss_not_open = 84,
  e_gsc_errorcode_guild_no_enough_coin = 85,
  e_gsc_errorcode_crusade_reset_times_not_enough = 86,
  e_gsc_errorcode_crusade_promote_times_not_enough = 87,
  e_gsc_errorcode_guild_apply_user_in_cd = 88,
  e_gsc_errorcode_guild_boss_already_dead = 89,
  e_gsc_errorcode_guild_boss_has_not_attacked = 90,
  e_gsc_errorcode_max = 91
};
bool e_gsc_errorcode_IsValid(int value);
const e_gsc_errorcode e_gsc_errorcode_MIN = e_gsc_errorcode_min;
const e_gsc_errorcode e_gsc_errorcode_MAX = e_gsc_errorcode_max;
const int e_gsc_errorcode_ARRAYSIZE = e_gsc_errorcode_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_gsc_errorcode_descriptor();
inline const ::std::string& e_gsc_errorcode_Name(e_gsc_errorcode value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_gsc_errorcode_descriptor(), value);
}
inline bool e_gsc_errorcode_Parse(
    const ::std::string& name, e_gsc_errorcode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_gsc_errorcode>(
    e_gsc_errorcode_descriptor(), name, value);
}
enum MAIL_STATUS {
  MAIL_STATUS_READED = 1,
  MAIL_STATUS_NOT_READED = 2,
  MAIL_STATUS_DELED = 3
};
bool MAIL_STATUS_IsValid(int value);
const MAIL_STATUS MAIL_STATUS_MIN = MAIL_STATUS_READED;
const MAIL_STATUS MAIL_STATUS_MAX = MAIL_STATUS_DELED;
const int MAIL_STATUS_ARRAYSIZE = MAIL_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* MAIL_STATUS_descriptor();
inline const ::std::string& MAIL_STATUS_Name(MAIL_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    MAIL_STATUS_descriptor(), value);
}
inline bool MAIL_STATUS_Parse(
    const ::std::string& name, MAIL_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MAIL_STATUS>(
    MAIL_STATUS_descriptor(), name, value);
}
enum MAIL_TYPE {
  MAIL_TYPE_RECHARGE_SUCCESS = 1,
  MAIL_TYPE_VIP_LEVEL_UP = 2,
  MAIL_TYPE_ARENA_RANK_REWARD = 3,
  MAIL_TYPE_ARENA_TOP_RANK = 4,
  MAIL_TYPE_OVERLAP_ITEMS = 5,
  MAIL_TYPE_SYS_NOTICE = 6,
  MAIL_TYPE_PRE_MONTH_ADD_SIGN = 7,
  MAIL_TYPE_MAIL_GUIDE = 8
};
bool MAIL_TYPE_IsValid(int value);
const MAIL_TYPE MAIL_TYPE_MIN = MAIL_TYPE_RECHARGE_SUCCESS;
const MAIL_TYPE MAIL_TYPE_MAX = MAIL_TYPE_MAIL_GUIDE;
const int MAIL_TYPE_ARRAYSIZE = MAIL_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MAIL_TYPE_descriptor();
inline const ::std::string& MAIL_TYPE_Name(MAIL_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MAIL_TYPE_descriptor(), value);
}
inline bool MAIL_TYPE_Parse(
    const ::std::string& name, MAIL_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MAIL_TYPE>(
    MAIL_TYPE_descriptor(), name, value);
}
enum HEAD_CHANGE_TYPE {
  HEAD = 1,
  HEAD_FRAME = 2
};
bool HEAD_CHANGE_TYPE_IsValid(int value);
const HEAD_CHANGE_TYPE HEAD_CHANGE_TYPE_MIN = HEAD;
const HEAD_CHANGE_TYPE HEAD_CHANGE_TYPE_MAX = HEAD_FRAME;
const int HEAD_CHANGE_TYPE_ARRAYSIZE = HEAD_CHANGE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* HEAD_CHANGE_TYPE_descriptor();
inline const ::std::string& HEAD_CHANGE_TYPE_Name(HEAD_CHANGE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    HEAD_CHANGE_TYPE_descriptor(), value);
}
inline bool HEAD_CHANGE_TYPE_Parse(
    const ::std::string& name, HEAD_CHANGE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HEAD_CHANGE_TYPE>(
    HEAD_CHANGE_TYPE_descriptor(), name, value);
}
enum e_guild_position {
  EOutsider = 0,
  ECommon = 1,
  EVicePresident = 2,
  EPresident = 3,
  EInsider = 4
};
bool e_guild_position_IsValid(int value);
const e_guild_position e_guild_position_MIN = EOutsider;
const e_guild_position e_guild_position_MAX = EInsider;
const int e_guild_position_ARRAYSIZE = e_guild_position_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_guild_position_descriptor();
inline const ::std::string& e_guild_position_Name(e_guild_position value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_guild_position_descriptor(), value);
}
inline bool e_guild_position_Parse(
    const ::std::string& name, e_guild_position* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_guild_position>(
    e_guild_position_descriptor(), name, value);
}
enum e_apply_switch_status {
  MIN = 0,
  CLOSE = 1,
  Need = 2,
  Not_Need = 3,
  MAX = 4
};
bool e_apply_switch_status_IsValid(int value);
const e_apply_switch_status e_apply_switch_status_MIN = MIN;
const e_apply_switch_status e_apply_switch_status_MAX = MAX;
const int e_apply_switch_status_ARRAYSIZE = e_apply_switch_status_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_apply_switch_status_descriptor();
inline const ::std::string& e_apply_switch_status_Name(e_apply_switch_status value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_apply_switch_status_descriptor(), value);
}
inline bool e_apply_switch_status_Parse(
    const ::std::string& name, e_apply_switch_status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_apply_switch_status>(
    e_apply_switch_status_descriptor(), name, value);
}
// ===================================================================

class AOYI : public ::google::protobuf::Message {
 public:
  AOYI();
  virtual ~AOYI();

  AOYI(const AOYI& from);

  inline AOYI& operator=(const AOYI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AOYI& default_instance();

  void Swap(AOYI* other);

  // implements Message ----------------------------------------------

  AOYI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AOYI& from);
  void MergeFrom(const AOYI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required float factor = 2 [default = 0];
  inline bool has_factor() const;
  inline void clear_factor();
  static const int kFactorFieldNumber = 2;
  inline float factor() const;
  inline void set_factor(float value);

  // @@protoc_insertion_point(class_scope:AOYI)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_factor();
  inline void clear_has_factor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  float factor_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static AOYI* default_instance_;
};
// -------------------------------------------------------------------

class AOYI_ARRAY : public ::google::protobuf::Message {
 public:
  AOYI_ARRAY();
  virtual ~AOYI_ARRAY();

  AOYI_ARRAY(const AOYI_ARRAY& from);

  inline AOYI_ARRAY& operator=(const AOYI_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AOYI_ARRAY& default_instance();

  void Swap(AOYI_ARRAY* other);

  // implements Message ----------------------------------------------

  AOYI_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AOYI_ARRAY& from);
  void MergeFrom(const AOYI_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AOYI items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::AOYI& items(int index) const;
  inline ::AOYI* mutable_items(int index);
  inline ::AOYI* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::AOYI >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::AOYI >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:AOYI_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::AOYI > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static AOYI_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class ARENAPRICE : public ::google::protobuf::Message {
 public:
  ARENAPRICE();
  virtual ~ARENAPRICE();

  ARENAPRICE(const ARENAPRICE& from);

  inline ARENAPRICE& operator=(const ARENAPRICE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ARENAPRICE& default_instance();

  void Swap(ARENAPRICE* other);

  // implements Message ----------------------------------------------

  ARENAPRICE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ARENAPRICE& from);
  void MergeFrom(const ARENAPRICE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 price = 2 [default = 0];
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ARENAPRICE)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static ARENAPRICE* default_instance_;
};
// -------------------------------------------------------------------

class ARENAPRICE_ARRAY : public ::google::protobuf::Message {
 public:
  ARENAPRICE_ARRAY();
  virtual ~ARENAPRICE_ARRAY();

  ARENAPRICE_ARRAY(const ARENAPRICE_ARRAY& from);

  inline ARENAPRICE_ARRAY& operator=(const ARENAPRICE_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ARENAPRICE_ARRAY& default_instance();

  void Swap(ARENAPRICE_ARRAY* other);

  // implements Message ----------------------------------------------

  ARENAPRICE_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ARENAPRICE_ARRAY& from);
  void MergeFrom(const ARENAPRICE_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ARENAPRICE items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::ARENAPRICE& items(int index) const;
  inline ::ARENAPRICE* mutable_items(int index);
  inline ::ARENAPRICE* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ARENAPRICE >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ARENAPRICE >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:ARENAPRICE_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ARENAPRICE > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static ARENAPRICE_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class BAG : public ::google::protobuf::Message {
 public:
  BAG();
  virtual ~BAG();

  BAG(const BAG& from);

  inline BAG& operator=(const BAG& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BAG& default_instance();

  void Swap(BAG* other);

  // implements Message ----------------------------------------------

  BAG* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BAG& from);
  void MergeFrom(const BAG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 useType = 2 [default = 0];
  inline bool has_usetype() const;
  inline void clear_usetype();
  static const int kUseTypeFieldNumber = 2;
  inline ::google::protobuf::int32 usetype() const;
  inline void set_usetype(::google::protobuf::int32 value);

  // required int32 quality = 3 [default = 0];
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // required int32 sellPrice = 4 [default = 0];
  inline bool has_sellprice() const;
  inline void clear_sellprice();
  static const int kSellPriceFieldNumber = 4;
  inline ::google::protobuf::int32 sellprice() const;
  inline void set_sellprice(::google::protobuf::int32 value);

  // required string exp = 5 [default = ""];
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  inline const ::std::string& exp() const;
  inline void set_exp(const ::std::string& value);
  inline void set_exp(const char* value);
  inline void set_exp(const char* value, size_t size);
  inline ::std::string* mutable_exp();
  inline ::std::string* release_exp();
  inline void set_allocated_exp(::std::string* exp);

  // required string needs = 6 [default = ""];
  inline bool has_needs() const;
  inline void clear_needs();
  static const int kNeedsFieldNumber = 6;
  inline const ::std::string& needs() const;
  inline void set_needs(const ::std::string& value);
  inline void set_needs(const char* value);
  inline void set_needs(const char* value, size_t size);
  inline ::std::string* mutable_needs();
  inline ::std::string* release_needs();
  inline void set_allocated_needs(::std::string* needs);

  // required string needCounts = 7 [default = ""];
  inline bool has_needcounts() const;
  inline void clear_needcounts();
  static const int kNeedCountsFieldNumber = 7;
  inline const ::std::string& needcounts() const;
  inline void set_needcounts(const ::std::string& value);
  inline void set_needcounts(const char* value);
  inline void set_needcounts(const char* value, size_t size);
  inline ::std::string* mutable_needcounts();
  inline ::std::string* release_needcounts();
  inline void set_allocated_needcounts(::std::string* needcounts);

  // required int32 needGolds = 8 [default = 0];
  inline bool has_needgolds() const;
  inline void clear_needgolds();
  static const int kNeedGoldsFieldNumber = 8;
  inline ::google::protobuf::int32 needgolds() const;
  inline void set_needgolds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BAG)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_usetype();
  inline void clear_has_usetype();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_sellprice();
  inline void clear_has_sellprice();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_needs();
  inline void clear_has_needs();
  inline void set_has_needcounts();
  inline void clear_has_needcounts();
  inline void set_has_needgolds();
  inline void clear_has_needgolds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 usetype_;
  ::google::protobuf::int32 quality_;
  ::std::string* exp_;
  ::std::string* needs_;
  ::google::protobuf::int32 sellprice_;
  ::google::protobuf::int32 needgolds_;
  ::std::string* needcounts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static BAG* default_instance_;
};
// -------------------------------------------------------------------

class BAG_ARRAY : public ::google::protobuf::Message {
 public:
  BAG_ARRAY();
  virtual ~BAG_ARRAY();

  BAG_ARRAY(const BAG_ARRAY& from);

  inline BAG_ARRAY& operator=(const BAG_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BAG_ARRAY& default_instance();

  void Swap(BAG_ARRAY* other);

  // implements Message ----------------------------------------------

  BAG_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BAG_ARRAY& from);
  void MergeFrom(const BAG_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BAG items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::BAG& items(int index) const;
  inline ::BAG* mutable_items(int index);
  inline ::BAG* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::BAG >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::BAG >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:BAG_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::BAG > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static BAG_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class BATTLE : public ::google::protobuf::Message {
 public:
  BATTLE();
  virtual ~BATTLE();

  BATTLE(const BATTLE& from);

  inline BATTLE& operator=(const BATTLE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BATTLE& default_instance();

  void Swap(BATTLE* other);

  // implements Message ----------------------------------------------

  BATTLE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BATTLE& from);
  void MergeFrom(const BATTLE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string infos = 2 [default = ""];
  inline bool has_infos() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::std::string& infos() const;
  inline void set_infos(const ::std::string& value);
  inline void set_infos(const char* value);
  inline void set_infos(const char* value, size_t size);
  inline ::std::string* mutable_infos();
  inline ::std::string* release_infos();
  inline void set_allocated_infos(::std::string* infos);

  // required string positions = 3 [default = ""];
  inline bool has_positions() const;
  inline void clear_positions();
  static const int kPositionsFieldNumber = 3;
  inline const ::std::string& positions() const;
  inline void set_positions(const ::std::string& value);
  inline void set_positions(const char* value);
  inline void set_positions(const char* value, size_t size);
  inline ::std::string* mutable_positions();
  inline ::std::string* release_positions();
  inline void set_allocated_positions(::std::string* positions);

  // @@protoc_insertion_point(class_scope:BATTLE)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_infos();
  inline void clear_has_infos();
  inline void set_has_positions();
  inline void clear_has_positions();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* infos_;
  ::std::string* positions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static BATTLE* default_instance_;
};
// -------------------------------------------------------------------

class BATTLE_ARRAY : public ::google::protobuf::Message {
 public:
  BATTLE_ARRAY();
  virtual ~BATTLE_ARRAY();

  BATTLE_ARRAY(const BATTLE_ARRAY& from);

  inline BATTLE_ARRAY& operator=(const BATTLE_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BATTLE_ARRAY& default_instance();

  void Swap(BATTLE_ARRAY* other);

  // implements Message ----------------------------------------------

  BATTLE_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BATTLE_ARRAY& from);
  void MergeFrom(const BATTLE_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BATTLE items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::BATTLE& items(int index) const;
  inline ::BATTLE* mutable_items(int index);
  inline ::BATTLE* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::BATTLE >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::BATTLE >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:BATTLE_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::BATTLE > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static BATTLE_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class BOSSPROP : public ::google::protobuf::Message {
 public:
  BOSSPROP();
  virtual ~BOSSPROP();

  BOSSPROP(const BOSSPROP& from);

  inline BOSSPROP& operator=(const BOSSPROP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BOSSPROP& default_instance();

  void Swap(BOSSPROP* other);

  // implements Message ----------------------------------------------

  BOSSPROP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BOSSPROP& from);
  void MergeFrom(const BOSSPROP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string pointId = 2 [default = ""];
  inline bool has_pointid() const;
  inline void clear_pointid();
  static const int kPointIdFieldNumber = 2;
  inline const ::std::string& pointid() const;
  inline void set_pointid(const ::std::string& value);
  inline void set_pointid(const char* value);
  inline void set_pointid(const char* value, size_t size);
  inline ::std::string* mutable_pointid();
  inline ::std::string* release_pointid();
  inline void set_allocated_pointid(::std::string* pointid);

  // required int32 area = 3 [default = 0];
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 3;
  inline ::google::protobuf::int32 area() const;
  inline void set_area(::google::protobuf::int32 value);

  // required int32 occupation = 4 [default = 0];
  inline bool has_occupation() const;
  inline void clear_occupation();
  static const int kOccupationFieldNumber = 4;
  inline ::google::protobuf::int32 occupation() const;
  inline void set_occupation(::google::protobuf::int32 value);

  // required int32 level = 5 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 health = 6 [default = 0];
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 6;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // required int32 damage = 7 [default = 0];
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 7;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // required int32 pdd = 8 [default = 0];
  inline bool has_pdd() const;
  inline void clear_pdd();
  static const int kPddFieldNumber = 8;
  inline ::google::protobuf::int32 pdd() const;
  inline void set_pdd(::google::protobuf::int32 value);

  // required int32 mdd = 9 [default = 0];
  inline bool has_mdd() const;
  inline void clear_mdd();
  static const int kMddFieldNumber = 9;
  inline ::google::protobuf::int32 mdd() const;
  inline void set_mdd(::google::protobuf::int32 value);

  // required int32 hitLevel = 10 [default = 0];
  inline bool has_hitlevel() const;
  inline void clear_hitlevel();
  static const int kHitLevelFieldNumber = 10;
  inline ::google::protobuf::int32 hitlevel() const;
  inline void set_hitlevel(::google::protobuf::int32 value);

  // required int32 dodgeLevel = 11 [default = 0];
  inline bool has_dodgelevel() const;
  inline void clear_dodgelevel();
  static const int kDodgeLevelFieldNumber = 11;
  inline ::google::protobuf::int32 dodgelevel() const;
  inline void set_dodgelevel(::google::protobuf::int32 value);

  // required int32 criLevel = 12 [default = 0];
  inline bool has_crilevel() const;
  inline void clear_crilevel();
  static const int kCriLevelFieldNumber = 12;
  inline ::google::protobuf::int32 crilevel() const;
  inline void set_crilevel(::google::protobuf::int32 value);

  // required int32 tenacityLevel = 13 [default = 0];
  inline bool has_tenacitylevel() const;
  inline void clear_tenacitylevel();
  static const int kTenacityLevelFieldNumber = 13;
  inline ::google::protobuf::int32 tenacitylevel() const;
  inline void set_tenacitylevel(::google::protobuf::int32 value);

  // required int32 pddPierce = 14 [default = 0];
  inline bool has_pddpierce() const;
  inline void clear_pddpierce();
  static const int kPddPierceFieldNumber = 14;
  inline ::google::protobuf::int32 pddpierce() const;
  inline void set_pddpierce(::google::protobuf::int32 value);

  // required string passiveSkillId = 15 [default = ""];
  inline bool has_passiveskillid() const;
  inline void clear_passiveskillid();
  static const int kPassiveSkillIdFieldNumber = 15;
  inline const ::std::string& passiveskillid() const;
  inline void set_passiveskillid(const ::std::string& value);
  inline void set_passiveskillid(const char* value);
  inline void set_passiveskillid(const char* value, size_t size);
  inline ::std::string* mutable_passiveskillid();
  inline ::std::string* release_passiveskillid();
  inline void set_allocated_passiveskillid(::std::string* passiveskillid);

  // required string passiveSkillLevel = 16 [default = ""];
  inline bool has_passiveskilllevel() const;
  inline void clear_passiveskilllevel();
  static const int kPassiveSkillLevelFieldNumber = 16;
  inline const ::std::string& passiveskilllevel() const;
  inline void set_passiveskilllevel(const ::std::string& value);
  inline void set_passiveskilllevel(const char* value);
  inline void set_passiveskilllevel(const char* value, size_t size);
  inline ::std::string* mutable_passiveskilllevel();
  inline ::std::string* release_passiveskilllevel();
  inline void set_allocated_passiveskilllevel(::std::string* passiveskilllevel);

  // required float range_X = 17 [default = 0];
  inline bool has_range_x() const;
  inline void clear_range_x();
  static const int kRangeXFieldNumber = 17;
  inline float range_x() const;
  inline void set_range_x(float value);

  // required float range_Y = 18 [default = 0];
  inline bool has_range_y() const;
  inline void clear_range_y();
  static const int kRangeYFieldNumber = 18;
  inline float range_y() const;
  inline void set_range_y(float value);

  // required float range_Z = 19 [default = 0];
  inline bool has_range_z() const;
  inline void clear_range_z();
  static const int kRangeZFieldNumber = 19;
  inline float range_z() const;
  inline void set_range_z(float value);

  // required float attackSpeed = 20 [default = 0];
  inline bool has_attackspeed() const;
  inline void clear_attackspeed();
  static const int kAttackSpeedFieldNumber = 20;
  inline float attackspeed() const;
  inline void set_attackspeed(float value);

  // required float h_Dis = 21 [default = 0];
  inline bool has_h_dis() const;
  inline void clear_h_dis();
  static const int kHDisFieldNumber = 21;
  inline float h_dis() const;
  inline void set_h_dis(float value);

  // required float v_Dis = 22 [default = 0];
  inline bool has_v_dis() const;
  inline void clear_v_dis();
  static const int kVDisFieldNumber = 22;
  inline float v_dis() const;
  inline void set_v_dis(float value);

  // required float moveSpeed = 23 [default = 0];
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMoveSpeedFieldNumber = 23;
  inline float movespeed() const;
  inline void set_movespeed(float value);

  // required int32 star = 24 [default = 0];
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 24;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // required int32 stage_B = 25 [default = 0];
  inline bool has_stage_b() const;
  inline void clear_stage_b();
  static const int kStageBFieldNumber = 25;
  inline ::google::protobuf::int32 stage_b() const;
  inline void set_stage_b(::google::protobuf::int32 value);

  // required string hitNum_B = 26 [default = ""];
  inline bool has_hitnum_b() const;
  inline void clear_hitnum_b();
  static const int kHitNumBFieldNumber = 26;
  inline const ::std::string& hitnum_b() const;
  inline void set_hitnum_b(const ::std::string& value);
  inline void set_hitnum_b(const char* value);
  inline void set_hitnum_b(const char* value, size_t size);
  inline ::std::string* mutable_hitnum_b();
  inline ::std::string* release_hitnum_b();
  inline void set_allocated_hitnum_b(::std::string* hitnum_b);

  // required string skillTimeList = 27 [default = ""];
  inline bool has_skilltimelist() const;
  inline void clear_skilltimelist();
  static const int kSkillTimeListFieldNumber = 27;
  inline const ::std::string& skilltimelist() const;
  inline void set_skilltimelist(const ::std::string& value);
  inline void set_skilltimelist(const char* value);
  inline void set_skilltimelist(const char* value, size_t size);
  inline ::std::string* mutable_skilltimelist();
  inline ::std::string* release_skilltimelist();
  inline void set_allocated_skilltimelist(::std::string* skilltimelist);

  // required string warningTimeList = 28 [default = ""];
  inline bool has_warningtimelist() const;
  inline void clear_warningtimelist();
  static const int kWarningTimeListFieldNumber = 28;
  inline const ::std::string& warningtimelist() const;
  inline void set_warningtimelist(const ::std::string& value);
  inline void set_warningtimelist(const char* value);
  inline void set_warningtimelist(const char* value, size_t size);
  inline ::std::string* mutable_warningtimelist();
  inline ::std::string* release_warningtimelist();
  inline void set_allocated_warningtimelist(::std::string* warningtimelist);

  // required int32 maxIntensity = 29 [default = 0];
  inline bool has_maxintensity() const;
  inline void clear_maxintensity();
  static const int kMaxIntensityFieldNumber = 29;
  inline ::google::protobuf::int32 maxintensity() const;
  inline void set_maxintensity(::google::protobuf::int32 value);

  // required int32 recoverIntensityRate = 30 [default = 0];
  inline bool has_recoverintensityrate() const;
  inline void clear_recoverintensityrate();
  static const int kRecoverIntensityRateFieldNumber = 30;
  inline ::google::protobuf::int32 recoverintensityrate() const;
  inline void set_recoverintensityrate(::google::protobuf::int32 value);

  // required int32 minIntensity = 31 [default = 0];
  inline bool has_minintensity() const;
  inline void clear_minintensity();
  static const int kMinIntensityFieldNumber = 31;
  inline ::google::protobuf::int32 minintensity() const;
  inline void set_minintensity(::google::protobuf::int32 value);

  // required int32 type_Normal = 32 [default = 0];
  inline bool has_type_normal() const;
  inline void clear_type_normal();
  static const int kTypeNormalFieldNumber = 32;
  inline ::google::protobuf::int32 type_normal() const;
  inline void set_type_normal(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BOSSPROP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pointid();
  inline void clear_has_pointid();
  inline void set_has_area();
  inline void clear_has_area();
  inline void set_has_occupation();
  inline void clear_has_occupation();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_pdd();
  inline void clear_has_pdd();
  inline void set_has_mdd();
  inline void clear_has_mdd();
  inline void set_has_hitlevel();
  inline void clear_has_hitlevel();
  inline void set_has_dodgelevel();
  inline void clear_has_dodgelevel();
  inline void set_has_crilevel();
  inline void clear_has_crilevel();
  inline void set_has_tenacitylevel();
  inline void clear_has_tenacitylevel();
  inline void set_has_pddpierce();
  inline void clear_has_pddpierce();
  inline void set_has_passiveskillid();
  inline void clear_has_passiveskillid();
  inline void set_has_passiveskilllevel();
  inline void clear_has_passiveskilllevel();
  inline void set_has_range_x();
  inline void clear_has_range_x();
  inline void set_has_range_y();
  inline void clear_has_range_y();
  inline void set_has_range_z();
  inline void clear_has_range_z();
  inline void set_has_attackspeed();
  inline void clear_has_attackspeed();
  inline void set_has_h_dis();
  inline void clear_has_h_dis();
  inline void set_has_v_dis();
  inline void clear_has_v_dis();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_stage_b();
  inline void clear_has_stage_b();
  inline void set_has_hitnum_b();
  inline void clear_has_hitnum_b();
  inline void set_has_skilltimelist();
  inline void clear_has_skilltimelist();
  inline void set_has_warningtimelist();
  inline void clear_has_warningtimelist();
  inline void set_has_maxintensity();
  inline void clear_has_maxintensity();
  inline void set_has_recoverintensityrate();
  inline void clear_has_recoverintensityrate();
  inline void set_has_minintensity();
  inline void clear_has_minintensity();
  inline void set_has_type_normal();
  inline void clear_has_type_normal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* pointid_;
  ::google::protobuf::int32 area_;
  ::google::protobuf::int32 occupation_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 pdd_;
  ::google::protobuf::int32 mdd_;
  ::google::protobuf::int32 hitlevel_;
  ::google::protobuf::int32 dodgelevel_;
  ::google::protobuf::int32 crilevel_;
  ::google::protobuf::int32 tenacitylevel_;
  ::google::protobuf::int32 pddpierce_;
  ::std::string* passiveskillid_;
  ::std::string* passiveskilllevel_;
  float range_x_;
  float range_y_;
  float range_z_;
  float attackspeed_;
  float h_dis_;
  float v_dis_;
  float movespeed_;
  ::google::protobuf::int32 star_;
  ::std::string* hitnum_b_;
  ::std::string* skilltimelist_;
  ::google::protobuf::int32 stage_b_;
  ::google::protobuf::int32 maxintensity_;
  ::std::string* warningtimelist_;
  ::google::protobuf::int32 recoverintensityrate_;
  ::google::protobuf::int32 minintensity_;
  ::google::protobuf::int32 type_normal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static BOSSPROP* default_instance_;
};
// -------------------------------------------------------------------

class BOSSPROP_ARRAY : public ::google::protobuf::Message {
 public:
  BOSSPROP_ARRAY();
  virtual ~BOSSPROP_ARRAY();

  BOSSPROP_ARRAY(const BOSSPROP_ARRAY& from);

  inline BOSSPROP_ARRAY& operator=(const BOSSPROP_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BOSSPROP_ARRAY& default_instance();

  void Swap(BOSSPROP_ARRAY* other);

  // implements Message ----------------------------------------------

  BOSSPROP_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BOSSPROP_ARRAY& from);
  void MergeFrom(const BOSSPROP_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BOSSPROP items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::BOSSPROP& items(int index) const;
  inline ::BOSSPROP* mutable_items(int index);
  inline ::BOSSPROP* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::BOSSPROP >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::BOSSPROP >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:BOSSPROP_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::BOSSPROP > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static BOSSPROP_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class BOSSSKILL : public ::google::protobuf::Message {
 public:
  BOSSSKILL();
  virtual ~BOSSSKILL();

  BOSSSKILL(const BOSSSKILL& from);

  inline BOSSSKILL& operator=(const BOSSSKILL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BOSSSKILL& default_instance();

  void Swap(BOSSSKILL* other);

  // implements Message ----------------------------------------------

  BOSSSKILL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BOSSSKILL& from);
  void MergeFrom(const BOSSSKILL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required float factor = 2 [default = 0];
  inline bool has_factor() const;
  inline void clear_factor();
  static const int kFactorFieldNumber = 2;
  inline float factor() const;
  inline void set_factor(float value);

  // required float distance = 3 [default = 0];
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 3;
  inline float distance() const;
  inline void set_distance(float value);

  // required float height = 4 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline float height() const;
  inline void set_height(float value);

  // required float range_x = 5 [default = 0];
  inline bool has_range_x() const;
  inline void clear_range_x();
  static const int kRangeXFieldNumber = 5;
  inline float range_x() const;
  inline void set_range_x(float value);

  // required float range_y = 6 [default = 0];
  inline bool has_range_y() const;
  inline void clear_range_y();
  static const int kRangeYFieldNumber = 6;
  inline float range_y() const;
  inline void set_range_y(float value);

  // required float range_z = 7 [default = 0];
  inline bool has_range_z() const;
  inline void clear_range_z();
  static const int kRangeZFieldNumber = 7;
  inline float range_z() const;
  inline void set_range_z(float value);

  // required float waitTime = 8 [default = 0];
  inline bool has_waittime() const;
  inline void clear_waittime();
  static const int kWaitTimeFieldNumber = 8;
  inline float waittime() const;
  inline void set_waittime(float value);

  // @@protoc_insertion_point(class_scope:BOSSSKILL)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_factor();
  inline void clear_has_factor();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_range_x();
  inline void clear_has_range_x();
  inline void set_has_range_y();
  inline void clear_has_range_y();
  inline void set_has_range_z();
  inline void clear_has_range_z();
  inline void set_has_waittime();
  inline void clear_has_waittime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  float factor_;
  float distance_;
  float height_;
  float range_x_;
  float range_y_;
  float range_z_;
  float waittime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static BOSSSKILL* default_instance_;
};
// -------------------------------------------------------------------

class BOSSSKILL_ARRAY : public ::google::protobuf::Message {
 public:
  BOSSSKILL_ARRAY();
  virtual ~BOSSSKILL_ARRAY();

  BOSSSKILL_ARRAY(const BOSSSKILL_ARRAY& from);

  inline BOSSSKILL_ARRAY& operator=(const BOSSSKILL_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BOSSSKILL_ARRAY& default_instance();

  void Swap(BOSSSKILL_ARRAY* other);

  // implements Message ----------------------------------------------

  BOSSSKILL_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BOSSSKILL_ARRAY& from);
  void MergeFrom(const BOSSSKILL_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BOSSSKILL items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::BOSSSKILL& items(int index) const;
  inline ::BOSSSKILL* mutable_items(int index);
  inline ::BOSSSKILL* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::BOSSSKILL >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::BOSSSKILL >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:BOSSSKILL_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::BOSSSKILL > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static BOSSSKILL_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class BUFF : public ::google::protobuf::Message {
 public:
  BUFF();
  virtual ~BUFF();

  BUFF(const BUFF& from);

  inline BUFF& operator=(const BUFF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BUFF& default_instance();

  void Swap(BUFF* other);

  // implements Message ----------------------------------------------

  BUFF* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BUFF& from);
  void MergeFrom(const BUFF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 type = 2 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required float duration = 3 [default = 0];
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 3;
  inline float duration() const;
  inline void set_duration(float value);

  // required float durationGrow = 4 [default = 0];
  inline bool has_durationgrow() const;
  inline void clear_durationgrow();
  static const int kDurationGrowFieldNumber = 4;
  inline float durationgrow() const;
  inline void set_durationgrow(float value);

  // required float interval = 5 [default = 0];
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 5;
  inline float interval() const;
  inline void set_interval(float value);

  // required int32 value = 6 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 6;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // required int32 valueGrow = 7 [default = 0];
  inline bool has_valuegrow() const;
  inline void clear_valuegrow();
  static const int kValueGrowFieldNumber = 7;
  inline ::google::protobuf::int32 valuegrow() const;
  inline void set_valuegrow(::google::protobuf::int32 value);

  // required int32 useType = 8 [default = 0];
  inline bool has_usetype() const;
  inline void clear_usetype();
  static const int kUseTypeFieldNumber = 8;
  inline ::google::protobuf::int32 usetype() const;
  inline void set_usetype(::google::protobuf::int32 value);

  // required int32 lifeLine = 9 [default = 0];
  inline bool has_lifeline() const;
  inline void clear_lifeline();
  static const int kLifeLineFieldNumber = 9;
  inline ::google::protobuf::int32 lifeline() const;
  inline void set_lifeline(::google::protobuf::int32 value);

  // required int32 buffType = 10 [default = 0];
  inline bool has_bufftype() const;
  inline void clear_bufftype();
  static const int kBuffTypeFieldNumber = 10;
  inline ::google::protobuf::int32 bufftype() const;
  inline void set_bufftype(::google::protobuf::int32 value);

  // required int32 maxLimitCount = 11 [default = 0];
  inline bool has_maxlimitcount() const;
  inline void clear_maxlimitcount();
  static const int kMaxLimitCountFieldNumber = 11;
  inline ::google::protobuf::int32 maxlimitcount() const;
  inline void set_maxlimitcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BUFF)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_durationgrow();
  inline void clear_has_durationgrow();
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_valuegrow();
  inline void clear_has_valuegrow();
  inline void set_has_usetype();
  inline void clear_has_usetype();
  inline void set_has_lifeline();
  inline void clear_has_lifeline();
  inline void set_has_bufftype();
  inline void clear_has_bufftype();
  inline void set_has_maxlimitcount();
  inline void clear_has_maxlimitcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 type_;
  float duration_;
  float durationgrow_;
  float interval_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 valuegrow_;
  ::google::protobuf::int32 usetype_;
  ::google::protobuf::int32 lifeline_;
  ::google::protobuf::int32 bufftype_;
  ::google::protobuf::int32 maxlimitcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static BUFF* default_instance_;
};
// -------------------------------------------------------------------

class BUFF_ARRAY : public ::google::protobuf::Message {
 public:
  BUFF_ARRAY();
  virtual ~BUFF_ARRAY();

  BUFF_ARRAY(const BUFF_ARRAY& from);

  inline BUFF_ARRAY& operator=(const BUFF_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BUFF_ARRAY& default_instance();

  void Swap(BUFF_ARRAY* other);

  // implements Message ----------------------------------------------

  BUFF_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BUFF_ARRAY& from);
  void MergeFrom(const BUFF_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BUFF items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::BUFF& items(int index) const;
  inline ::BUFF* mutable_items(int index);
  inline ::BUFF* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::BUFF >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::BUFF >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:BUFF_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::BUFF > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static BUFF_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class CHAPTERMAP : public ::google::protobuf::Message {
 public:
  CHAPTERMAP();
  virtual ~CHAPTERMAP();

  CHAPTERMAP(const CHAPTERMAP& from);

  inline CHAPTERMAP& operator=(const CHAPTERMAP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CHAPTERMAP& default_instance();

  void Swap(CHAPTERMAP* other);

  // implements Message ----------------------------------------------

  CHAPTERMAP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CHAPTERMAP& from);
  void MergeFrom(const CHAPTERMAP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 capterType = 2 [default = 0];
  inline bool has_captertype() const;
  inline void clear_captertype();
  static const int kCapterTypeFieldNumber = 2;
  inline ::google::protobuf::int32 captertype() const;
  inline void set_captertype(::google::protobuf::int32 value);

  // required int32 pointType = 3 [default = 0];
  inline bool has_pointtype() const;
  inline void clear_pointtype();
  static const int kPointTypeFieldNumber = 3;
  inline ::google::protobuf::int32 pointtype() const;
  inline void set_pointtype(::google::protobuf::int32 value);

  // required int32 openLevel = 4 [default = 0];
  inline bool has_openlevel() const;
  inline void clear_openlevel();
  static const int kOpenLevelFieldNumber = 4;
  inline ::google::protobuf::int32 openlevel() const;
  inline void set_openlevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CHAPTERMAP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_captertype();
  inline void clear_has_captertype();
  inline void set_has_pointtype();
  inline void clear_has_pointtype();
  inline void set_has_openlevel();
  inline void clear_has_openlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 captertype_;
  ::google::protobuf::int32 pointtype_;
  ::google::protobuf::int32 openlevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static CHAPTERMAP* default_instance_;
};
// -------------------------------------------------------------------

class CHAPTERMAP_ARRAY : public ::google::protobuf::Message {
 public:
  CHAPTERMAP_ARRAY();
  virtual ~CHAPTERMAP_ARRAY();

  CHAPTERMAP_ARRAY(const CHAPTERMAP_ARRAY& from);

  inline CHAPTERMAP_ARRAY& operator=(const CHAPTERMAP_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CHAPTERMAP_ARRAY& default_instance();

  void Swap(CHAPTERMAP_ARRAY* other);

  // implements Message ----------------------------------------------

  CHAPTERMAP_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CHAPTERMAP_ARRAY& from);
  void MergeFrom(const CHAPTERMAP_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CHAPTERMAP items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::CHAPTERMAP& items(int index) const;
  inline ::CHAPTERMAP* mutable_items(int index);
  inline ::CHAPTERMAP* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::CHAPTERMAP >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::CHAPTERMAP >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:CHAPTERMAP_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CHAPTERMAP > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static CHAPTERMAP_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class COINPRICE : public ::google::protobuf::Message {
 public:
  COINPRICE();
  virtual ~COINPRICE();

  COINPRICE(const COINPRICE& from);

  inline COINPRICE& operator=(const COINPRICE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const COINPRICE& default_instance();

  void Swap(COINPRICE* other);

  // implements Message ----------------------------------------------

  COINPRICE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const COINPRICE& from);
  void MergeFrom(const COINPRICE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 needGems = 2 [default = 0];
  inline bool has_needgems() const;
  inline void clear_needgems();
  static const int kNeedGemsFieldNumber = 2;
  inline ::google::protobuf::int32 needgems() const;
  inline void set_needgems(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:COINPRICE)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_needgems();
  inline void clear_has_needgems();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 needgems_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static COINPRICE* default_instance_;
};
// -------------------------------------------------------------------

class COINPRICE_ARRAY : public ::google::protobuf::Message {
 public:
  COINPRICE_ARRAY();
  virtual ~COINPRICE_ARRAY();

  COINPRICE_ARRAY(const COINPRICE_ARRAY& from);

  inline COINPRICE_ARRAY& operator=(const COINPRICE_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const COINPRICE_ARRAY& default_instance();

  void Swap(COINPRICE_ARRAY* other);

  // implements Message ----------------------------------------------

  COINPRICE_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const COINPRICE_ARRAY& from);
  void MergeFrom(const COINPRICE_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .COINPRICE items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::COINPRICE& items(int index) const;
  inline ::COINPRICE* mutable_items(int index);
  inline ::COINPRICE* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::COINPRICE >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::COINPRICE >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:COINPRICE_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::COINPRICE > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static COINPRICE_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class EQUIP : public ::google::protobuf::Message {
 public:
  EQUIP();
  virtual ~EQUIP();

  EQUIP(const EQUIP& from);

  inline EQUIP& operator=(const EQUIP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EQUIP& default_instance();

  void Swap(EQUIP* other);

  // implements Message ----------------------------------------------

  EQUIP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EQUIP& from);
  void MergeFrom(const EQUIP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 pos = 2 [default = 0];
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // required string name_ch = 3 [default = ""];
  inline bool has_name_ch() const;
  inline void clear_name_ch();
  static const int kNameChFieldNumber = 3;
  inline const ::std::string& name_ch() const;
  inline void set_name_ch(const ::std::string& value);
  inline void set_name_ch(const char* value);
  inline void set_name_ch(const char* value, size_t size);
  inline ::std::string* mutable_name_ch();
  inline ::std::string* release_name_ch();
  inline void set_allocated_name_ch(::std::string* name_ch);

  // required string name_en = 4 [default = ""];
  inline bool has_name_en() const;
  inline void clear_name_en();
  static const int kNameEnFieldNumber = 4;
  inline const ::std::string& name_en() const;
  inline void set_name_en(const ::std::string& value);
  inline void set_name_en(const char* value);
  inline void set_name_en(const char* value, size_t size);
  inline ::std::string* mutable_name_en();
  inline ::std::string* release_name_en();
  inline void set_allocated_name_en(::std::string* name_en);

  // required int32 quality = 5 [default = 0];
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 5;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // required int32 health = 6 [default = 0];
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 6;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // required int32 healthGrow = 7 [default = 0];
  inline bool has_healthgrow() const;
  inline void clear_healthgrow();
  static const int kHealthGrowFieldNumber = 7;
  inline ::google::protobuf::int32 healthgrow() const;
  inline void set_healthgrow(::google::protobuf::int32 value);

  // required int32 damage = 8 [default = 0];
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 8;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // required int32 damageGrow = 9 [default = 0];
  inline bool has_damagegrow() const;
  inline void clear_damagegrow();
  static const int kDamageGrowFieldNumber = 9;
  inline ::google::protobuf::int32 damagegrow() const;
  inline void set_damagegrow(::google::protobuf::int32 value);

  // required int32 pdd = 10 [default = 0];
  inline bool has_pdd() const;
  inline void clear_pdd();
  static const int kPddFieldNumber = 10;
  inline ::google::protobuf::int32 pdd() const;
  inline void set_pdd(::google::protobuf::int32 value);

  // required int32 pddGrow = 11 [default = 0];
  inline bool has_pddgrow() const;
  inline void clear_pddgrow();
  static const int kPddGrowFieldNumber = 11;
  inline ::google::protobuf::int32 pddgrow() const;
  inline void set_pddgrow(::google::protobuf::int32 value);

  // required int32 mdd = 12 [default = 0];
  inline bool has_mdd() const;
  inline void clear_mdd();
  static const int kMddFieldNumber = 12;
  inline ::google::protobuf::int32 mdd() const;
  inline void set_mdd(::google::protobuf::int32 value);

  // required int32 mddGrow = 13 [default = 0];
  inline bool has_mddgrow() const;
  inline void clear_mddgrow();
  static const int kMddGrowFieldNumber = 13;
  inline ::google::protobuf::int32 mddgrow() const;
  inline void set_mddgrow(::google::protobuf::int32 value);

  // required int32 hitLevel = 14 [default = 0];
  inline bool has_hitlevel() const;
  inline void clear_hitlevel();
  static const int kHitLevelFieldNumber = 14;
  inline ::google::protobuf::int32 hitlevel() const;
  inline void set_hitlevel(::google::protobuf::int32 value);

  // required int32 hitGrow = 15 [default = 0];
  inline bool has_hitgrow() const;
  inline void clear_hitgrow();
  static const int kHitGrowFieldNumber = 15;
  inline ::google::protobuf::int32 hitgrow() const;
  inline void set_hitgrow(::google::protobuf::int32 value);

  // required int32 dodgeLevel = 16 [default = 0];
  inline bool has_dodgelevel() const;
  inline void clear_dodgelevel();
  static const int kDodgeLevelFieldNumber = 16;
  inline ::google::protobuf::int32 dodgelevel() const;
  inline void set_dodgelevel(::google::protobuf::int32 value);

  // required int32 dodgeGrow = 17 [default = 0];
  inline bool has_dodgegrow() const;
  inline void clear_dodgegrow();
  static const int kDodgeGrowFieldNumber = 17;
  inline ::google::protobuf::int32 dodgegrow() const;
  inline void set_dodgegrow(::google::protobuf::int32 value);

  // required int32 criLevel = 18 [default = 0];
  inline bool has_crilevel() const;
  inline void clear_crilevel();
  static const int kCriLevelFieldNumber = 18;
  inline ::google::protobuf::int32 crilevel() const;
  inline void set_crilevel(::google::protobuf::int32 value);

  // required int32 criGrow = 19 [default = 0];
  inline bool has_crigrow() const;
  inline void clear_crigrow();
  static const int kCriGrowFieldNumber = 19;
  inline ::google::protobuf::int32 crigrow() const;
  inline void set_crigrow(::google::protobuf::int32 value);

  // required int32 tenacityLevel = 20 [default = 0];
  inline bool has_tenacitylevel() const;
  inline void clear_tenacitylevel();
  static const int kTenacityLevelFieldNumber = 20;
  inline ::google::protobuf::int32 tenacitylevel() const;
  inline void set_tenacitylevel(::google::protobuf::int32 value);

  // required int32 tenacityGrow = 21 [default = 0];
  inline bool has_tenacitygrow() const;
  inline void clear_tenacitygrow();
  static const int kTenacityGrowFieldNumber = 21;
  inline ::google::protobuf::int32 tenacitygrow() const;
  inline void set_tenacitygrow(::google::protobuf::int32 value);

  // required int32 pddPierce = 22 [default = 0];
  inline bool has_pddpierce() const;
  inline void clear_pddpierce();
  static const int kPddPierceFieldNumber = 22;
  inline ::google::protobuf::int32 pddpierce() const;
  inline void set_pddpierce(::google::protobuf::int32 value);

  // required int32 pddPierceGrow = 23 [default = 0];
  inline bool has_pddpiercegrow() const;
  inline void clear_pddpiercegrow();
  static const int kPddPierceGrowFieldNumber = 23;
  inline ::google::protobuf::int32 pddpiercegrow() const;
  inline void set_pddpiercegrow(::google::protobuf::int32 value);

  // required string needs = 24 [default = ""];
  inline bool has_needs() const;
  inline void clear_needs();
  static const int kNeedsFieldNumber = 24;
  inline const ::std::string& needs() const;
  inline void set_needs(const ::std::string& value);
  inline void set_needs(const char* value);
  inline void set_needs(const char* value, size_t size);
  inline ::std::string* mutable_needs();
  inline ::std::string* release_needs();
  inline void set_allocated_needs(::std::string* needs);

  // required string needCounts = 25 [default = ""];
  inline bool has_needcounts() const;
  inline void clear_needcounts();
  static const int kNeedCountsFieldNumber = 25;
  inline const ::std::string& needcounts() const;
  inline void set_needcounts(const ::std::string& value);
  inline void set_needcounts(const char* value);
  inline void set_needcounts(const char* value, size_t size);
  inline ::std::string* mutable_needcounts();
  inline ::std::string* release_needcounts();
  inline void set_allocated_needcounts(::std::string* needcounts);

  // required string nextId = 26 [default = ""];
  inline bool has_nextid() const;
  inline void clear_nextid();
  static const int kNextIdFieldNumber = 26;
  inline const ::std::string& nextid() const;
  inline void set_nextid(const ::std::string& value);
  inline void set_nextid(const char* value);
  inline void set_nextid(const char* value, size_t size);
  inline ::std::string* mutable_nextid();
  inline ::std::string* release_nextid();
  inline void set_allocated_nextid(::std::string* nextid);

  // required string icon = 27 [default = ""];
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 27;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // @@protoc_insertion_point(class_scope:EQUIP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_name_ch();
  inline void clear_has_name_ch();
  inline void set_has_name_en();
  inline void clear_has_name_en();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_healthgrow();
  inline void clear_has_healthgrow();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_damagegrow();
  inline void clear_has_damagegrow();
  inline void set_has_pdd();
  inline void clear_has_pdd();
  inline void set_has_pddgrow();
  inline void clear_has_pddgrow();
  inline void set_has_mdd();
  inline void clear_has_mdd();
  inline void set_has_mddgrow();
  inline void clear_has_mddgrow();
  inline void set_has_hitlevel();
  inline void clear_has_hitlevel();
  inline void set_has_hitgrow();
  inline void clear_has_hitgrow();
  inline void set_has_dodgelevel();
  inline void clear_has_dodgelevel();
  inline void set_has_dodgegrow();
  inline void clear_has_dodgegrow();
  inline void set_has_crilevel();
  inline void clear_has_crilevel();
  inline void set_has_crigrow();
  inline void clear_has_crigrow();
  inline void set_has_tenacitylevel();
  inline void clear_has_tenacitylevel();
  inline void set_has_tenacitygrow();
  inline void clear_has_tenacitygrow();
  inline void set_has_pddpierce();
  inline void clear_has_pddpierce();
  inline void set_has_pddpiercegrow();
  inline void clear_has_pddpiercegrow();
  inline void set_has_needs();
  inline void clear_has_needs();
  inline void set_has_needcounts();
  inline void clear_has_needcounts();
  inline void set_has_nextid();
  inline void clear_has_nextid();
  inline void set_has_icon();
  inline void clear_has_icon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* name_ch_;
  ::google::protobuf::int32 pos_;
  ::google::protobuf::int32 quality_;
  ::std::string* name_en_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 healthgrow_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 damagegrow_;
  ::google::protobuf::int32 pdd_;
  ::google::protobuf::int32 pddgrow_;
  ::google::protobuf::int32 mdd_;
  ::google::protobuf::int32 mddgrow_;
  ::google::protobuf::int32 hitlevel_;
  ::google::protobuf::int32 hitgrow_;
  ::google::protobuf::int32 dodgelevel_;
  ::google::protobuf::int32 dodgegrow_;
  ::google::protobuf::int32 crilevel_;
  ::google::protobuf::int32 crigrow_;
  ::google::protobuf::int32 tenacitylevel_;
  ::google::protobuf::int32 tenacitygrow_;
  ::google::protobuf::int32 pddpierce_;
  ::google::protobuf::int32 pddpiercegrow_;
  ::std::string* needs_;
  ::std::string* needcounts_;
  ::std::string* nextid_;
  ::std::string* icon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static EQUIP* default_instance_;
};
// -------------------------------------------------------------------

class EQUIP_ARRAY : public ::google::protobuf::Message {
 public:
  EQUIP_ARRAY();
  virtual ~EQUIP_ARRAY();

  EQUIP_ARRAY(const EQUIP_ARRAY& from);

  inline EQUIP_ARRAY& operator=(const EQUIP_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EQUIP_ARRAY& default_instance();

  void Swap(EQUIP_ARRAY* other);

  // implements Message ----------------------------------------------

  EQUIP_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EQUIP_ARRAY& from);
  void MergeFrom(const EQUIP_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EQUIP items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::EQUIP& items(int index) const;
  inline ::EQUIP* mutable_items(int index);
  inline ::EQUIP* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::EQUIP >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::EQUIP >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:EQUIP_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::EQUIP > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static EQUIP_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class EVOLUTIONCOIN : public ::google::protobuf::Message {
 public:
  EVOLUTIONCOIN();
  virtual ~EVOLUTIONCOIN();

  EVOLUTIONCOIN(const EVOLUTIONCOIN& from);

  inline EVOLUTIONCOIN& operator=(const EVOLUTIONCOIN& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EVOLUTIONCOIN& default_instance();

  void Swap(EVOLUTIONCOIN* other);

  // implements Message ----------------------------------------------

  EVOLUTIONCOIN* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EVOLUTIONCOIN& from);
  void MergeFrom(const EVOLUTIONCOIN& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string equip_Weapon = 2 [default = ""];
  inline bool has_equip_weapon() const;
  inline void clear_equip_weapon();
  static const int kEquipWeaponFieldNumber = 2;
  inline const ::std::string& equip_weapon() const;
  inline void set_equip_weapon(const ::std::string& value);
  inline void set_equip_weapon(const char* value);
  inline void set_equip_weapon(const char* value, size_t size);
  inline ::std::string* mutable_equip_weapon();
  inline ::std::string* release_equip_weapon();
  inline void set_allocated_equip_weapon(::std::string* equip_weapon);

  // required string equip_Necklace = 3 [default = ""];
  inline bool has_equip_necklace() const;
  inline void clear_equip_necklace();
  static const int kEquipNecklaceFieldNumber = 3;
  inline const ::std::string& equip_necklace() const;
  inline void set_equip_necklace(const ::std::string& value);
  inline void set_equip_necklace(const char* value);
  inline void set_equip_necklace(const char* value, size_t size);
  inline ::std::string* mutable_equip_necklace();
  inline ::std::string* release_equip_necklace();
  inline void set_allocated_equip_necklace(::std::string* equip_necklace);

  // required string equip_Clothes = 4 [default = ""];
  inline bool has_equip_clothes() const;
  inline void clear_equip_clothes();
  static const int kEquipClothesFieldNumber = 4;
  inline const ::std::string& equip_clothes() const;
  inline void set_equip_clothes(const ::std::string& value);
  inline void set_equip_clothes(const char* value);
  inline void set_equip_clothes(const char* value, size_t size);
  inline ::std::string* mutable_equip_clothes();
  inline ::std::string* release_equip_clothes();
  inline void set_allocated_equip_clothes(::std::string* equip_clothes);

  // required string equip_Belt = 5 [default = ""];
  inline bool has_equip_belt() const;
  inline void clear_equip_belt();
  static const int kEquipBeltFieldNumber = 5;
  inline const ::std::string& equip_belt() const;
  inline void set_equip_belt(const ::std::string& value);
  inline void set_equip_belt(const char* value);
  inline void set_equip_belt(const char* value, size_t size);
  inline ::std::string* mutable_equip_belt();
  inline ::std::string* release_equip_belt();
  inline void set_allocated_equip_belt(::std::string* equip_belt);

  // required string equip_Ring = 6 [default = ""];
  inline bool has_equip_ring() const;
  inline void clear_equip_ring();
  static const int kEquipRingFieldNumber = 6;
  inline const ::std::string& equip_ring() const;
  inline void set_equip_ring(const ::std::string& value);
  inline void set_equip_ring(const char* value);
  inline void set_equip_ring(const char* value, size_t size);
  inline ::std::string* mutable_equip_ring();
  inline ::std::string* release_equip_ring();
  inline void set_allocated_equip_ring(::std::string* equip_ring);

  // required string equip_Boot = 7 [default = ""];
  inline bool has_equip_boot() const;
  inline void clear_equip_boot();
  static const int kEquipBootFieldNumber = 7;
  inline const ::std::string& equip_boot() const;
  inline void set_equip_boot(const ::std::string& value);
  inline void set_equip_boot(const char* value);
  inline void set_equip_boot(const char* value, size_t size);
  inline ::std::string* mutable_equip_boot();
  inline ::std::string* release_equip_boot();
  inline void set_allocated_equip_boot(::std::string* equip_boot);

  // @@protoc_insertion_point(class_scope:EVOLUTIONCOIN)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_equip_weapon();
  inline void clear_has_equip_weapon();
  inline void set_has_equip_necklace();
  inline void clear_has_equip_necklace();
  inline void set_has_equip_clothes();
  inline void clear_has_equip_clothes();
  inline void set_has_equip_belt();
  inline void clear_has_equip_belt();
  inline void set_has_equip_ring();
  inline void clear_has_equip_ring();
  inline void set_has_equip_boot();
  inline void clear_has_equip_boot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* equip_weapon_;
  ::std::string* equip_necklace_;
  ::std::string* equip_clothes_;
  ::std::string* equip_belt_;
  ::std::string* equip_ring_;
  ::std::string* equip_boot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static EVOLUTIONCOIN* default_instance_;
};
// -------------------------------------------------------------------

class EVOLUTIONCOIN_ARRAY : public ::google::protobuf::Message {
 public:
  EVOLUTIONCOIN_ARRAY();
  virtual ~EVOLUTIONCOIN_ARRAY();

  EVOLUTIONCOIN_ARRAY(const EVOLUTIONCOIN_ARRAY& from);

  inline EVOLUTIONCOIN_ARRAY& operator=(const EVOLUTIONCOIN_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EVOLUTIONCOIN_ARRAY& default_instance();

  void Swap(EVOLUTIONCOIN_ARRAY* other);

  // implements Message ----------------------------------------------

  EVOLUTIONCOIN_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EVOLUTIONCOIN_ARRAY& from);
  void MergeFrom(const EVOLUTIONCOIN_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EVOLUTIONCOIN items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::EVOLUTIONCOIN& items(int index) const;
  inline ::EVOLUTIONCOIN* mutable_items(int index);
  inline ::EVOLUTIONCOIN* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::EVOLUTIONCOIN >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::EVOLUTIONCOIN >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:EVOLUTIONCOIN_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::EVOLUTIONCOIN > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static EVOLUTIONCOIN_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class HEROPROP : public ::google::protobuf::Message {
 public:
  HEROPROP();
  virtual ~HEROPROP();

  HEROPROP(const HEROPROP& from);

  inline HEROPROP& operator=(const HEROPROP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HEROPROP& default_instance();

  void Swap(HEROPROP* other);

  // implements Message ----------------------------------------------

  HEROPROP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HEROPROP& from);
  void MergeFrom(const HEROPROP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 area = 2 [default = 0];
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 2;
  inline ::google::protobuf::int32 area() const;
  inline void set_area(::google::protobuf::int32 value);

  // required int32 property = 3 [default = 0];
  inline bool has_property() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 3;
  inline ::google::protobuf::int32 property() const;
  inline void set_property(::google::protobuf::int32 value);

  // required int32 occupation = 4 [default = 0];
  inline bool has_occupation() const;
  inline void clear_occupation();
  static const int kOccupationFieldNumber = 4;
  inline ::google::protobuf::int32 occupation() const;
  inline void set_occupation(::google::protobuf::int32 value);

  // required int32 health = 5 [default = 0];
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 5;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // required string healthGrow = 6 [default = ""];
  inline bool has_healthgrow() const;
  inline void clear_healthgrow();
  static const int kHealthGrowFieldNumber = 6;
  inline const ::std::string& healthgrow() const;
  inline void set_healthgrow(const ::std::string& value);
  inline void set_healthgrow(const char* value);
  inline void set_healthgrow(const char* value, size_t size);
  inline ::std::string* mutable_healthgrow();
  inline ::std::string* release_healthgrow();
  inline void set_allocated_healthgrow(::std::string* healthgrow);

  // required int32 damage = 7 [default = 0];
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 7;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // required string damageGrow = 8 [default = ""];
  inline bool has_damagegrow() const;
  inline void clear_damagegrow();
  static const int kDamageGrowFieldNumber = 8;
  inline const ::std::string& damagegrow() const;
  inline void set_damagegrow(const ::std::string& value);
  inline void set_damagegrow(const char* value);
  inline void set_damagegrow(const char* value, size_t size);
  inline ::std::string* mutable_damagegrow();
  inline ::std::string* release_damagegrow();
  inline void set_allocated_damagegrow(::std::string* damagegrow);

  // required int32 pdd = 9 [default = 0];
  inline bool has_pdd() const;
  inline void clear_pdd();
  static const int kPddFieldNumber = 9;
  inline ::google::protobuf::int32 pdd() const;
  inline void set_pdd(::google::protobuf::int32 value);

  // required string pddGrow = 10 [default = ""];
  inline bool has_pddgrow() const;
  inline void clear_pddgrow();
  static const int kPddGrowFieldNumber = 10;
  inline const ::std::string& pddgrow() const;
  inline void set_pddgrow(const ::std::string& value);
  inline void set_pddgrow(const char* value);
  inline void set_pddgrow(const char* value, size_t size);
  inline ::std::string* mutable_pddgrow();
  inline ::std::string* release_pddgrow();
  inline void set_allocated_pddgrow(::std::string* pddgrow);

  // required int32 mdd = 11 [default = 0];
  inline bool has_mdd() const;
  inline void clear_mdd();
  static const int kMddFieldNumber = 11;
  inline ::google::protobuf::int32 mdd() const;
  inline void set_mdd(::google::protobuf::int32 value);

  // required string mddGrow = 12 [default = ""];
  inline bool has_mddgrow() const;
  inline void clear_mddgrow();
  static const int kMddGrowFieldNumber = 12;
  inline const ::std::string& mddgrow() const;
  inline void set_mddgrow(const ::std::string& value);
  inline void set_mddgrow(const char* value);
  inline void set_mddgrow(const char* value, size_t size);
  inline ::std::string* mutable_mddgrow();
  inline ::std::string* release_mddgrow();
  inline void set_allocated_mddgrow(::std::string* mddgrow);

  // required int32 hitLevel = 13 [default = 0];
  inline bool has_hitlevel() const;
  inline void clear_hitlevel();
  static const int kHitLevelFieldNumber = 13;
  inline ::google::protobuf::int32 hitlevel() const;
  inline void set_hitlevel(::google::protobuf::int32 value);

  // required string hitGrow = 14 [default = ""];
  inline bool has_hitgrow() const;
  inline void clear_hitgrow();
  static const int kHitGrowFieldNumber = 14;
  inline const ::std::string& hitgrow() const;
  inline void set_hitgrow(const ::std::string& value);
  inline void set_hitgrow(const char* value);
  inline void set_hitgrow(const char* value, size_t size);
  inline ::std::string* mutable_hitgrow();
  inline ::std::string* release_hitgrow();
  inline void set_allocated_hitgrow(::std::string* hitgrow);

  // required int32 dodgeLevel = 15 [default = 0];
  inline bool has_dodgelevel() const;
  inline void clear_dodgelevel();
  static const int kDodgeLevelFieldNumber = 15;
  inline ::google::protobuf::int32 dodgelevel() const;
  inline void set_dodgelevel(::google::protobuf::int32 value);

  // required string dodgeGrow = 16 [default = ""];
  inline bool has_dodgegrow() const;
  inline void clear_dodgegrow();
  static const int kDodgeGrowFieldNumber = 16;
  inline const ::std::string& dodgegrow() const;
  inline void set_dodgegrow(const ::std::string& value);
  inline void set_dodgegrow(const char* value);
  inline void set_dodgegrow(const char* value, size_t size);
  inline ::std::string* mutable_dodgegrow();
  inline ::std::string* release_dodgegrow();
  inline void set_allocated_dodgegrow(::std::string* dodgegrow);

  // required int32 criLevel = 17 [default = 0];
  inline bool has_crilevel() const;
  inline void clear_crilevel();
  static const int kCriLevelFieldNumber = 17;
  inline ::google::protobuf::int32 crilevel() const;
  inline void set_crilevel(::google::protobuf::int32 value);

  // required string criGrow = 18 [default = ""];
  inline bool has_crigrow() const;
  inline void clear_crigrow();
  static const int kCriGrowFieldNumber = 18;
  inline const ::std::string& crigrow() const;
  inline void set_crigrow(const ::std::string& value);
  inline void set_crigrow(const char* value);
  inline void set_crigrow(const char* value, size_t size);
  inline ::std::string* mutable_crigrow();
  inline ::std::string* release_crigrow();
  inline void set_allocated_crigrow(::std::string* crigrow);

  // required int32 tenacityLevel = 19 [default = 0];
  inline bool has_tenacitylevel() const;
  inline void clear_tenacitylevel();
  static const int kTenacityLevelFieldNumber = 19;
  inline ::google::protobuf::int32 tenacitylevel() const;
  inline void set_tenacitylevel(::google::protobuf::int32 value);

  // required string tenacityGrow = 20 [default = ""];
  inline bool has_tenacitygrow() const;
  inline void clear_tenacitygrow();
  static const int kTenacityGrowFieldNumber = 20;
  inline const ::std::string& tenacitygrow() const;
  inline void set_tenacitygrow(const ::std::string& value);
  inline void set_tenacitygrow(const char* value);
  inline void set_tenacitygrow(const char* value, size_t size);
  inline ::std::string* mutable_tenacitygrow();
  inline ::std::string* release_tenacitygrow();
  inline void set_allocated_tenacitygrow(::std::string* tenacitygrow);

  // required int32 pddPierce = 21 [default = 0];
  inline bool has_pddpierce() const;
  inline void clear_pddpierce();
  static const int kPddPierceFieldNumber = 21;
  inline ::google::protobuf::int32 pddpierce() const;
  inline void set_pddpierce(::google::protobuf::int32 value);

  // required string pddPierceGrow = 22 [default = ""];
  inline bool has_pddpiercegrow() const;
  inline void clear_pddpiercegrow();
  static const int kPddPierceGrowFieldNumber = 22;
  inline const ::std::string& pddpiercegrow() const;
  inline void set_pddpiercegrow(const ::std::string& value);
  inline void set_pddpiercegrow(const char* value);
  inline void set_pddpiercegrow(const char* value, size_t size);
  inline ::std::string* mutable_pddpiercegrow();
  inline ::std::string* release_pddpiercegrow();
  inline void set_allocated_pddpiercegrow(::std::string* pddpiercegrow);

  // required int32 type_Normal = 23 [default = 0];
  inline bool has_type_normal() const;
  inline void clear_type_normal();
  static const int kTypeNormalFieldNumber = 23;
  inline ::google::protobuf::int32 type_normal() const;
  inline void set_type_normal(::google::protobuf::int32 value);

  // required int32 type_Skill = 24 [default = 0];
  inline bool has_type_skill() const;
  inline void clear_type_skill();
  static const int kTypeSkillFieldNumber = 24;
  inline ::google::protobuf::int32 type_skill() const;
  inline void set_type_skill(::google::protobuf::int32 value);

  // required int32 percent_Skill = 25 [default = 0];
  inline bool has_percent_skill() const;
  inline void clear_percent_skill();
  static const int kPercentSkillFieldNumber = 25;
  inline ::google::protobuf::int32 percent_skill() const;
  inline void set_percent_skill(::google::protobuf::int32 value);

  // required int32 addNum_Skill = 26 [default = 0];
  inline bool has_addnum_skill() const;
  inline void clear_addnum_skill();
  static const int kAddNumSkillFieldNumber = 26;
  inline ::google::protobuf::int32 addnum_skill() const;
  inline void set_addnum_skill(::google::protobuf::int32 value);

  // required int32 addNumGrow_Skill = 27 [default = 0];
  inline bool has_addnumgrow_skill() const;
  inline void clear_addnumgrow_skill();
  static const int kAddNumGrowSkillFieldNumber = 27;
  inline ::google::protobuf::int32 addnumgrow_skill() const;
  inline void set_addnumgrow_skill(::google::protobuf::int32 value);

  // required int32 type_AoYi = 28 [default = 0];
  inline bool has_type_aoyi() const;
  inline void clear_type_aoyi();
  static const int kTypeAoYiFieldNumber = 28;
  inline ::google::protobuf::int32 type_aoyi() const;
  inline void set_type_aoyi(::google::protobuf::int32 value);

  // required int32 percent_AoYi = 29 [default = 0];
  inline bool has_percent_aoyi() const;
  inline void clear_percent_aoyi();
  static const int kPercentAoYiFieldNumber = 29;
  inline ::google::protobuf::int32 percent_aoyi() const;
  inline void set_percent_aoyi(::google::protobuf::int32 value);

  // required int32 addNum_AoYi = 30 [default = 0];
  inline bool has_addnum_aoyi() const;
  inline void clear_addnum_aoyi();
  static const int kAddNumAoYiFieldNumber = 30;
  inline ::google::protobuf::int32 addnum_aoyi() const;
  inline void set_addnum_aoyi(::google::protobuf::int32 value);

  // required int32 addNumGrow_AoYi = 31 [default = 0];
  inline bool has_addnumgrow_aoyi() const;
  inline void clear_addnumgrow_aoyi();
  static const int kAddNumGrowAoYiFieldNumber = 31;
  inline ::google::protobuf::int32 addnumgrow_aoyi() const;
  inline void set_addnumgrow_aoyi(::google::protobuf::int32 value);

  // required string passiveSkill_1 = 32 [default = ""];
  inline bool has_passiveskill_1() const;
  inline void clear_passiveskill_1();
  static const int kPassiveSkill1FieldNumber = 32;
  inline const ::std::string& passiveskill_1() const;
  inline void set_passiveskill_1(const ::std::string& value);
  inline void set_passiveskill_1(const char* value);
  inline void set_passiveskill_1(const char* value, size_t size);
  inline ::std::string* mutable_passiveskill_1();
  inline ::std::string* release_passiveskill_1();
  inline void set_allocated_passiveskill_1(::std::string* passiveskill_1);

  // required string passiveSkill_2 = 33 [default = ""];
  inline bool has_passiveskill_2() const;
  inline void clear_passiveskill_2();
  static const int kPassiveSkill2FieldNumber = 33;
  inline const ::std::string& passiveskill_2() const;
  inline void set_passiveskill_2(const ::std::string& value);
  inline void set_passiveskill_2(const char* value);
  inline void set_passiveskill_2(const char* value, size_t size);
  inline ::std::string* mutable_passiveskill_2();
  inline ::std::string* release_passiveskill_2();
  inline void set_allocated_passiveskill_2(::std::string* passiveskill_2);

  // required string passiveSkill_3 = 34 [default = ""];
  inline bool has_passiveskill_3() const;
  inline void clear_passiveskill_3();
  static const int kPassiveSkill3FieldNumber = 34;
  inline const ::std::string& passiveskill_3() const;
  inline void set_passiveskill_3(const ::std::string& value);
  inline void set_passiveskill_3(const char* value);
  inline void set_passiveskill_3(const char* value, size_t size);
  inline ::std::string* mutable_passiveskill_3();
  inline ::std::string* release_passiveskill_3();
  inline void set_allocated_passiveskill_3(::std::string* passiveskill_3);

  // required float range_X = 35 [default = 0];
  inline bool has_range_x() const;
  inline void clear_range_x();
  static const int kRangeXFieldNumber = 35;
  inline float range_x() const;
  inline void set_range_x(float value);

  // required float range_Y = 36 [default = 0];
  inline bool has_range_y() const;
  inline void clear_range_y();
  static const int kRangeYFieldNumber = 36;
  inline float range_y() const;
  inline void set_range_y(float value);

  // required float range_Z = 37 [default = 0];
  inline bool has_range_z() const;
  inline void clear_range_z();
  static const int kRangeZFieldNumber = 37;
  inline float range_z() const;
  inline void set_range_z(float value);

  // required float attackSpeed = 38 [default = 0];
  inline bool has_attackspeed() const;
  inline void clear_attackspeed();
  static const int kAttackSpeedFieldNumber = 38;
  inline float attackspeed() const;
  inline void set_attackspeed(float value);

  // required float h_Dis = 39 [default = 0];
  inline bool has_h_dis() const;
  inline void clear_h_dis();
  static const int kHDisFieldNumber = 39;
  inline float h_dis() const;
  inline void set_h_dis(float value);

  // required float v_Dis = 40 [default = 0];
  inline bool has_v_dis() const;
  inline void clear_v_dis();
  static const int kVDisFieldNumber = 40;
  inline float v_dis() const;
  inline void set_v_dis(float value);

  // required float moveSpeed = 41 [default = 0];
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMoveSpeedFieldNumber = 41;
  inline float movespeed() const;
  inline void set_movespeed(float value);

  // required int32 star = 42 [default = 0];
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 42;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // required int32 stage_B = 43 [default = 0];
  inline bool has_stage_b() const;
  inline void clear_stage_b();
  static const int kStageBFieldNumber = 43;
  inline ::google::protobuf::int32 stage_b() const;
  inline void set_stage_b(::google::protobuf::int32 value);

  // required string hitNum_B = 44 [default = ""];
  inline bool has_hitnum_b() const;
  inline void clear_hitnum_b();
  static const int kHitNumBFieldNumber = 44;
  inline const ::std::string& hitnum_b() const;
  inline void set_hitnum_b(const ::std::string& value);
  inline void set_hitnum_b(const char* value);
  inline void set_hitnum_b(const char* value, size_t size);
  inline ::std::string* mutable_hitnum_b();
  inline ::std::string* release_hitnum_b();
  inline void set_allocated_hitnum_b(::std::string* hitnum_b);

  // required int32 hitNum_A = 45 [default = 0];
  inline bool has_hitnum_a() const;
  inline void clear_hitnum_a();
  static const int kHitNumAFieldNumber = 45;
  inline ::google::protobuf::int32 hitnum_a() const;
  inline void set_hitnum_a(::google::protobuf::int32 value);

  // required int32 posNum = 46 [default = 0];
  inline bool has_posnum() const;
  inline void clear_posnum();
  static const int kPosNumFieldNumber = 46;
  inline ::google::protobuf::int32 posnum() const;
  inline void set_posnum(::google::protobuf::int32 value);

  // required float recoverTime_Skill = 47 [default = 0];
  inline bool has_recovertime_skill() const;
  inline void clear_recovertime_skill();
  static const int kRecoverTimeSkillFieldNumber = 47;
  inline float recovertime_skill() const;
  inline void set_recovertime_skill(float value);

  // required int32 aoYiNum = 48 [default = 0];
  inline bool has_aoyinum() const;
  inline void clear_aoyinum();
  static const int kAoYiNumFieldNumber = 48;
  inline ::google::protobuf::int32 aoyinum() const;
  inline void set_aoyinum(::google::protobuf::int32 value);

  // required string equip_Weapon = 49 [default = ""];
  inline bool has_equip_weapon() const;
  inline void clear_equip_weapon();
  static const int kEquipWeaponFieldNumber = 49;
  inline const ::std::string& equip_weapon() const;
  inline void set_equip_weapon(const ::std::string& value);
  inline void set_equip_weapon(const char* value);
  inline void set_equip_weapon(const char* value, size_t size);
  inline ::std::string* mutable_equip_weapon();
  inline ::std::string* release_equip_weapon();
  inline void set_allocated_equip_weapon(::std::string* equip_weapon);

  // required string equip_Necklace = 50 [default = ""];
  inline bool has_equip_necklace() const;
  inline void clear_equip_necklace();
  static const int kEquipNecklaceFieldNumber = 50;
  inline const ::std::string& equip_necklace() const;
  inline void set_equip_necklace(const ::std::string& value);
  inline void set_equip_necklace(const char* value);
  inline void set_equip_necklace(const char* value, size_t size);
  inline ::std::string* mutable_equip_necklace();
  inline ::std::string* release_equip_necklace();
  inline void set_allocated_equip_necklace(::std::string* equip_necklace);

  // required string equip_Clothes = 51 [default = ""];
  inline bool has_equip_clothes() const;
  inline void clear_equip_clothes();
  static const int kEquipClothesFieldNumber = 51;
  inline const ::std::string& equip_clothes() const;
  inline void set_equip_clothes(const ::std::string& value);
  inline void set_equip_clothes(const char* value);
  inline void set_equip_clothes(const char* value, size_t size);
  inline ::std::string* mutable_equip_clothes();
  inline ::std::string* release_equip_clothes();
  inline void set_allocated_equip_clothes(::std::string* equip_clothes);

  // required string equip_Belt = 52 [default = ""];
  inline bool has_equip_belt() const;
  inline void clear_equip_belt();
  static const int kEquipBeltFieldNumber = 52;
  inline const ::std::string& equip_belt() const;
  inline void set_equip_belt(const ::std::string& value);
  inline void set_equip_belt(const char* value);
  inline void set_equip_belt(const char* value, size_t size);
  inline ::std::string* mutable_equip_belt();
  inline ::std::string* release_equip_belt();
  inline void set_allocated_equip_belt(::std::string* equip_belt);

  // required string equip_Ring = 53 [default = ""];
  inline bool has_equip_ring() const;
  inline void clear_equip_ring();
  static const int kEquipRingFieldNumber = 53;
  inline const ::std::string& equip_ring() const;
  inline void set_equip_ring(const ::std::string& value);
  inline void set_equip_ring(const char* value);
  inline void set_equip_ring(const char* value, size_t size);
  inline ::std::string* mutable_equip_ring();
  inline ::std::string* release_equip_ring();
  inline void set_allocated_equip_ring(::std::string* equip_ring);

  // required string equip_Boot = 54 [default = ""];
  inline bool has_equip_boot() const;
  inline void clear_equip_boot();
  static const int kEquipBootFieldNumber = 54;
  inline const ::std::string& equip_boot() const;
  inline void set_equip_boot(const ::std::string& value);
  inline void set_equip_boot(const char* value);
  inline void set_equip_boot(const char* value, size_t size);
  inline ::std::string* mutable_equip_boot();
  inline ::std::string* release_equip_boot();
  inline void set_allocated_equip_boot(::std::string* equip_boot);

  // required string needId = 55 [default = ""];
  inline bool has_needid() const;
  inline void clear_needid();
  static const int kNeedIdFieldNumber = 55;
  inline const ::std::string& needid() const;
  inline void set_needid(const ::std::string& value);
  inline void set_needid(const char* value);
  inline void set_needid(const char* value, size_t size);
  inline ::std::string* mutable_needid();
  inline ::std::string* release_needid();
  inline void set_allocated_needid(::std::string* needid);

  // required int32 skillTriggerProbability = 56 [default = 0];
  inline bool has_skilltriggerprobability() const;
  inline void clear_skilltriggerprobability();
  static const int kSkillTriggerProbabilityFieldNumber = 56;
  inline ::google::protobuf::int32 skilltriggerprobability() const;
  inline void set_skilltriggerprobability(::google::protobuf::int32 value);

  // required float skillTriggerDuration = 57 [default = 0];
  inline bool has_skilltriggerduration() const;
  inline void clear_skilltriggerduration();
  static const int kSkillTriggerDurationFieldNumber = 57;
  inline float skilltriggerduration() const;
  inline void set_skilltriggerduration(float value);

  // @@protoc_insertion_point(class_scope:HEROPROP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_area();
  inline void clear_has_area();
  inline void set_has_property();
  inline void clear_has_property();
  inline void set_has_occupation();
  inline void clear_has_occupation();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_healthgrow();
  inline void clear_has_healthgrow();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_damagegrow();
  inline void clear_has_damagegrow();
  inline void set_has_pdd();
  inline void clear_has_pdd();
  inline void set_has_pddgrow();
  inline void clear_has_pddgrow();
  inline void set_has_mdd();
  inline void clear_has_mdd();
  inline void set_has_mddgrow();
  inline void clear_has_mddgrow();
  inline void set_has_hitlevel();
  inline void clear_has_hitlevel();
  inline void set_has_hitgrow();
  inline void clear_has_hitgrow();
  inline void set_has_dodgelevel();
  inline void clear_has_dodgelevel();
  inline void set_has_dodgegrow();
  inline void clear_has_dodgegrow();
  inline void set_has_crilevel();
  inline void clear_has_crilevel();
  inline void set_has_crigrow();
  inline void clear_has_crigrow();
  inline void set_has_tenacitylevel();
  inline void clear_has_tenacitylevel();
  inline void set_has_tenacitygrow();
  inline void clear_has_tenacitygrow();
  inline void set_has_pddpierce();
  inline void clear_has_pddpierce();
  inline void set_has_pddpiercegrow();
  inline void clear_has_pddpiercegrow();
  inline void set_has_type_normal();
  inline void clear_has_type_normal();
  inline void set_has_type_skill();
  inline void clear_has_type_skill();
  inline void set_has_percent_skill();
  inline void clear_has_percent_skill();
  inline void set_has_addnum_skill();
  inline void clear_has_addnum_skill();
  inline void set_has_addnumgrow_skill();
  inline void clear_has_addnumgrow_skill();
  inline void set_has_type_aoyi();
  inline void clear_has_type_aoyi();
  inline void set_has_percent_aoyi();
  inline void clear_has_percent_aoyi();
  inline void set_has_addnum_aoyi();
  inline void clear_has_addnum_aoyi();
  inline void set_has_addnumgrow_aoyi();
  inline void clear_has_addnumgrow_aoyi();
  inline void set_has_passiveskill_1();
  inline void clear_has_passiveskill_1();
  inline void set_has_passiveskill_2();
  inline void clear_has_passiveskill_2();
  inline void set_has_passiveskill_3();
  inline void clear_has_passiveskill_3();
  inline void set_has_range_x();
  inline void clear_has_range_x();
  inline void set_has_range_y();
  inline void clear_has_range_y();
  inline void set_has_range_z();
  inline void clear_has_range_z();
  inline void set_has_attackspeed();
  inline void clear_has_attackspeed();
  inline void set_has_h_dis();
  inline void clear_has_h_dis();
  inline void set_has_v_dis();
  inline void clear_has_v_dis();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_stage_b();
  inline void clear_has_stage_b();
  inline void set_has_hitnum_b();
  inline void clear_has_hitnum_b();
  inline void set_has_hitnum_a();
  inline void clear_has_hitnum_a();
  inline void set_has_posnum();
  inline void clear_has_posnum();
  inline void set_has_recovertime_skill();
  inline void clear_has_recovertime_skill();
  inline void set_has_aoyinum();
  inline void clear_has_aoyinum();
  inline void set_has_equip_weapon();
  inline void clear_has_equip_weapon();
  inline void set_has_equip_necklace();
  inline void clear_has_equip_necklace();
  inline void set_has_equip_clothes();
  inline void clear_has_equip_clothes();
  inline void set_has_equip_belt();
  inline void clear_has_equip_belt();
  inline void set_has_equip_ring();
  inline void clear_has_equip_ring();
  inline void set_has_equip_boot();
  inline void clear_has_equip_boot();
  inline void set_has_needid();
  inline void clear_has_needid();
  inline void set_has_skilltriggerprobability();
  inline void clear_has_skilltriggerprobability();
  inline void set_has_skilltriggerduration();
  inline void clear_has_skilltriggerduration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 area_;
  ::google::protobuf::int32 property_;
  ::google::protobuf::int32 occupation_;
  ::google::protobuf::int32 health_;
  ::std::string* healthgrow_;
  ::std::string* damagegrow_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 pdd_;
  ::std::string* pddgrow_;
  ::std::string* mddgrow_;
  ::google::protobuf::int32 mdd_;
  ::google::protobuf::int32 hitlevel_;
  ::std::string* hitgrow_;
  ::std::string* dodgegrow_;
  ::google::protobuf::int32 dodgelevel_;
  ::google::protobuf::int32 crilevel_;
  ::std::string* crigrow_;
  ::std::string* tenacitygrow_;
  ::google::protobuf::int32 tenacitylevel_;
  ::google::protobuf::int32 pddpierce_;
  ::std::string* pddpiercegrow_;
  ::google::protobuf::int32 type_normal_;
  ::google::protobuf::int32 type_skill_;
  ::google::protobuf::int32 percent_skill_;
  ::google::protobuf::int32 addnum_skill_;
  ::google::protobuf::int32 addnumgrow_skill_;
  ::google::protobuf::int32 type_aoyi_;
  ::google::protobuf::int32 percent_aoyi_;
  ::google::protobuf::int32 addnum_aoyi_;
  ::std::string* passiveskill_1_;
  ::std::string* passiveskill_2_;
  ::google::protobuf::int32 addnumgrow_aoyi_;
  float range_x_;
  ::std::string* passiveskill_3_;
  float range_y_;
  float range_z_;
  float attackspeed_;
  float h_dis_;
  float v_dis_;
  float movespeed_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 stage_b_;
  ::std::string* hitnum_b_;
  ::google::protobuf::int32 hitnum_a_;
  ::google::protobuf::int32 posnum_;
  float recovertime_skill_;
  ::google::protobuf::int32 aoyinum_;
  ::std::string* equip_weapon_;
  ::std::string* equip_necklace_;
  ::std::string* equip_clothes_;
  ::std::string* equip_belt_;
  ::std::string* equip_ring_;
  ::std::string* equip_boot_;
  ::std::string* needid_;
  ::google::protobuf::int32 skilltriggerprobability_;
  float skilltriggerduration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(57 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static HEROPROP* default_instance_;
};
// -------------------------------------------------------------------

class HEROPROP_ARRAY : public ::google::protobuf::Message {
 public:
  HEROPROP_ARRAY();
  virtual ~HEROPROP_ARRAY();

  HEROPROP_ARRAY(const HEROPROP_ARRAY& from);

  inline HEROPROP_ARRAY& operator=(const HEROPROP_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HEROPROP_ARRAY& default_instance();

  void Swap(HEROPROP_ARRAY* other);

  // implements Message ----------------------------------------------

  HEROPROP_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HEROPROP_ARRAY& from);
  void MergeFrom(const HEROPROP_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HEROPROP items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::HEROPROP& items(int index) const;
  inline ::HEROPROP* mutable_items(int index);
  inline ::HEROPROP* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::HEROPROP >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::HEROPROP >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:HEROPROP_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::HEROPROP > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static HEROPROP_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class HEROSKILL : public ::google::protobuf::Message {
 public:
  HEROSKILL();
  virtual ~HEROSKILL();

  HEROSKILL(const HEROSKILL& from);

  inline HEROSKILL& operator=(const HEROSKILL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HEROSKILL& default_instance();

  void Swap(HEROSKILL* other);

  // implements Message ----------------------------------------------

  HEROSKILL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HEROSKILL& from);
  void MergeFrom(const HEROSKILL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required float factor = 2 [default = 0];
  inline bool has_factor() const;
  inline void clear_factor();
  static const int kFactorFieldNumber = 2;
  inline float factor() const;
  inline void set_factor(float value);

  // required float distance = 3 [default = 0];
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 3;
  inline float distance() const;
  inline void set_distance(float value);

  // required float height = 4 [default = 0];
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline float height() const;
  inline void set_height(float value);

  // required float range_x = 5 [default = 0];
  inline bool has_range_x() const;
  inline void clear_range_x();
  static const int kRangeXFieldNumber = 5;
  inline float range_x() const;
  inline void set_range_x(float value);

  // required float range_y = 6 [default = 0];
  inline bool has_range_y() const;
  inline void clear_range_y();
  static const int kRangeYFieldNumber = 6;
  inline float range_y() const;
  inline void set_range_y(float value);

  // required float range_z = 7 [default = 0];
  inline bool has_range_z() const;
  inline void clear_range_z();
  static const int kRangeZFieldNumber = 7;
  inline float range_z() const;
  inline void set_range_z(float value);

  // required float waitTime = 8 [default = 0];
  inline bool has_waittime() const;
  inline void clear_waittime();
  static const int kWaitTimeFieldNumber = 8;
  inline float waittime() const;
  inline void set_waittime(float value);

  // required int32 intensity = 9 [default = 0];
  inline bool has_intensity() const;
  inline void clear_intensity();
  static const int kIntensityFieldNumber = 9;
  inline ::google::protobuf::int32 intensity() const;
  inline void set_intensity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HEROSKILL)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_factor();
  inline void clear_has_factor();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_range_x();
  inline void clear_has_range_x();
  inline void set_has_range_y();
  inline void clear_has_range_y();
  inline void set_has_range_z();
  inline void clear_has_range_z();
  inline void set_has_waittime();
  inline void clear_has_waittime();
  inline void set_has_intensity();
  inline void clear_has_intensity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  float factor_;
  float distance_;
  float height_;
  float range_x_;
  float range_y_;
  float range_z_;
  float waittime_;
  ::google::protobuf::int32 intensity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static HEROSKILL* default_instance_;
};
// -------------------------------------------------------------------

class HEROSKILL_ARRAY : public ::google::protobuf::Message {
 public:
  HEROSKILL_ARRAY();
  virtual ~HEROSKILL_ARRAY();

  HEROSKILL_ARRAY(const HEROSKILL_ARRAY& from);

  inline HEROSKILL_ARRAY& operator=(const HEROSKILL_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HEROSKILL_ARRAY& default_instance();

  void Swap(HEROSKILL_ARRAY* other);

  // implements Message ----------------------------------------------

  HEROSKILL_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HEROSKILL_ARRAY& from);
  void MergeFrom(const HEROSKILL_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HEROSKILL items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::HEROSKILL& items(int index) const;
  inline ::HEROSKILL* mutable_items(int index);
  inline ::HEROSKILL* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::HEROSKILL >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::HEROSKILL >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:HEROSKILL_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::HEROSKILL > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static HEROSKILL_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class HEROSTAR : public ::google::protobuf::Message {
 public:
  HEROSTAR();
  virtual ~HEROSTAR();

  HEROSTAR(const HEROSTAR& from);

  inline HEROSTAR& operator=(const HEROSTAR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HEROSTAR& default_instance();

  void Swap(HEROSTAR* other);

  // implements Message ----------------------------------------------

  HEROSTAR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HEROSTAR& from);
  void MergeFrom(const HEROSTAR& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 needNum = 2 [default = 0];
  inline bool has_neednum() const;
  inline void clear_neednum();
  static const int kNeedNumFieldNumber = 2;
  inline ::google::protobuf::int32 neednum() const;
  inline void set_neednum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:HEROSTAR)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_neednum();
  inline void clear_has_neednum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 neednum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static HEROSTAR* default_instance_;
};
// -------------------------------------------------------------------

class HEROSTAR_ARRAY : public ::google::protobuf::Message {
 public:
  HEROSTAR_ARRAY();
  virtual ~HEROSTAR_ARRAY();

  HEROSTAR_ARRAY(const HEROSTAR_ARRAY& from);

  inline HEROSTAR_ARRAY& operator=(const HEROSTAR_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HEROSTAR_ARRAY& default_instance();

  void Swap(HEROSTAR_ARRAY* other);

  // implements Message ----------------------------------------------

  HEROSTAR_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HEROSTAR_ARRAY& from);
  void MergeFrom(const HEROSTAR_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .HEROSTAR items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::HEROSTAR& items(int index) const;
  inline ::HEROSTAR* mutable_items(int index);
  inline ::HEROSTAR* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::HEROSTAR >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::HEROSTAR >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:HEROSTAR_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::HEROSTAR > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static HEROSTAR_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class MONSTERPROP : public ::google::protobuf::Message {
 public:
  MONSTERPROP();
  virtual ~MONSTERPROP();

  MONSTERPROP(const MONSTERPROP& from);

  inline MONSTERPROP& operator=(const MONSTERPROP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MONSTERPROP& default_instance();

  void Swap(MONSTERPROP* other);

  // implements Message ----------------------------------------------

  MONSTERPROP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MONSTERPROP& from);
  void MergeFrom(const MONSTERPROP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 area = 2 [default = 0];
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 2;
  inline ::google::protobuf::int32 area() const;
  inline void set_area(::google::protobuf::int32 value);

  // required int32 occupation = 3 [default = 0];
  inline bool has_occupation() const;
  inline void clear_occupation();
  static const int kOccupationFieldNumber = 3;
  inline ::google::protobuf::int32 occupation() const;
  inline void set_occupation(::google::protobuf::int32 value);

  // required int32 level = 4 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 health = 5 [default = 0];
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 5;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // required int32 damage = 6 [default = 0];
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 6;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // required int32 pdd = 7 [default = 0];
  inline bool has_pdd() const;
  inline void clear_pdd();
  static const int kPddFieldNumber = 7;
  inline ::google::protobuf::int32 pdd() const;
  inline void set_pdd(::google::protobuf::int32 value);

  // required int32 mdd = 8 [default = 0];
  inline bool has_mdd() const;
  inline void clear_mdd();
  static const int kMddFieldNumber = 8;
  inline ::google::protobuf::int32 mdd() const;
  inline void set_mdd(::google::protobuf::int32 value);

  // required int32 hitLevel = 9 [default = 0];
  inline bool has_hitlevel() const;
  inline void clear_hitlevel();
  static const int kHitLevelFieldNumber = 9;
  inline ::google::protobuf::int32 hitlevel() const;
  inline void set_hitlevel(::google::protobuf::int32 value);

  // required int32 dodgeLevel = 10 [default = 0];
  inline bool has_dodgelevel() const;
  inline void clear_dodgelevel();
  static const int kDodgeLevelFieldNumber = 10;
  inline ::google::protobuf::int32 dodgelevel() const;
  inline void set_dodgelevel(::google::protobuf::int32 value);

  // required int32 criLevel = 11 [default = 0];
  inline bool has_crilevel() const;
  inline void clear_crilevel();
  static const int kCriLevelFieldNumber = 11;
  inline ::google::protobuf::int32 crilevel() const;
  inline void set_crilevel(::google::protobuf::int32 value);

  // required int32 tenacityLevel = 12 [default = 0];
  inline bool has_tenacitylevel() const;
  inline void clear_tenacitylevel();
  static const int kTenacityLevelFieldNumber = 12;
  inline ::google::protobuf::int32 tenacitylevel() const;
  inline void set_tenacitylevel(::google::protobuf::int32 value);

  // required int32 pddPierce = 13 [default = 0];
  inline bool has_pddpierce() const;
  inline void clear_pddpierce();
  static const int kPddPierceFieldNumber = 13;
  inline ::google::protobuf::int32 pddpierce() const;
  inline void set_pddpierce(::google::protobuf::int32 value);

  // required float range_X = 14 [default = 0];
  inline bool has_range_x() const;
  inline void clear_range_x();
  static const int kRangeXFieldNumber = 14;
  inline float range_x() const;
  inline void set_range_x(float value);

  // required float range_Y = 15 [default = 0];
  inline bool has_range_y() const;
  inline void clear_range_y();
  static const int kRangeYFieldNumber = 15;
  inline float range_y() const;
  inline void set_range_y(float value);

  // required float range_Z = 16 [default = 0];
  inline bool has_range_z() const;
  inline void clear_range_z();
  static const int kRangeZFieldNumber = 16;
  inline float range_z() const;
  inline void set_range_z(float value);

  // required float attackSpeed = 17 [default = 0];
  inline bool has_attackspeed() const;
  inline void clear_attackspeed();
  static const int kAttackSpeedFieldNumber = 17;
  inline float attackspeed() const;
  inline void set_attackspeed(float value);

  // required float h_Dis = 18 [default = 0];
  inline bool has_h_dis() const;
  inline void clear_h_dis();
  static const int kHDisFieldNumber = 18;
  inline float h_dis() const;
  inline void set_h_dis(float value);

  // required float v_Dis = 19 [default = 0];
  inline bool has_v_dis() const;
  inline void clear_v_dis();
  static const int kVDisFieldNumber = 19;
  inline float v_dis() const;
  inline void set_v_dis(float value);

  // required float moveSpeed = 20 [default = 0];
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMoveSpeedFieldNumber = 20;
  inline float movespeed() const;
  inline void set_movespeed(float value);

  // required int32 star = 21 [default = 0];
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 21;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // required int32 maxIntensity = 22 [default = 0];
  inline bool has_maxintensity() const;
  inline void clear_maxintensity();
  static const int kMaxIntensityFieldNumber = 22;
  inline ::google::protobuf::int32 maxintensity() const;
  inline void set_maxintensity(::google::protobuf::int32 value);

  // required int32 recoverIntensityRate = 23 [default = 0];
  inline bool has_recoverintensityrate() const;
  inline void clear_recoverintensityrate();
  static const int kRecoverIntensityRateFieldNumber = 23;
  inline ::google::protobuf::int32 recoverintensityrate() const;
  inline void set_recoverintensityrate(::google::protobuf::int32 value);

  // required int32 minIntensity = 24 [default = 0];
  inline bool has_minintensity() const;
  inline void clear_minintensity();
  static const int kMinIntensityFieldNumber = 24;
  inline ::google::protobuf::int32 minintensity() const;
  inline void set_minintensity(::google::protobuf::int32 value);

  // required int32 type_Normal = 25 [default = 0];
  inline bool has_type_normal() const;
  inline void clear_type_normal();
  static const int kTypeNormalFieldNumber = 25;
  inline ::google::protobuf::int32 type_normal() const;
  inline void set_type_normal(::google::protobuf::int32 value);

  // required string passiveSkillId = 26 [default = ""];
  inline bool has_passiveskillid() const;
  inline void clear_passiveskillid();
  static const int kPassiveSkillIdFieldNumber = 26;
  inline const ::std::string& passiveskillid() const;
  inline void set_passiveskillid(const ::std::string& value);
  inline void set_passiveskillid(const char* value);
  inline void set_passiveskillid(const char* value, size_t size);
  inline ::std::string* mutable_passiveskillid();
  inline ::std::string* release_passiveskillid();
  inline void set_allocated_passiveskillid(::std::string* passiveskillid);

  // required string passiveSkillLevel = 27 [default = ""];
  inline bool has_passiveskilllevel() const;
  inline void clear_passiveskilllevel();
  static const int kPassiveSkillLevelFieldNumber = 27;
  inline const ::std::string& passiveskilllevel() const;
  inline void set_passiveskilllevel(const ::std::string& value);
  inline void set_passiveskilllevel(const char* value);
  inline void set_passiveskilllevel(const char* value, size_t size);
  inline ::std::string* mutable_passiveskilllevel();
  inline ::std::string* release_passiveskilllevel();
  inline void set_allocated_passiveskilllevel(::std::string* passiveskilllevel);

  // @@protoc_insertion_point(class_scope:MONSTERPROP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_area();
  inline void clear_has_area();
  inline void set_has_occupation();
  inline void clear_has_occupation();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_pdd();
  inline void clear_has_pdd();
  inline void set_has_mdd();
  inline void clear_has_mdd();
  inline void set_has_hitlevel();
  inline void clear_has_hitlevel();
  inline void set_has_dodgelevel();
  inline void clear_has_dodgelevel();
  inline void set_has_crilevel();
  inline void clear_has_crilevel();
  inline void set_has_tenacitylevel();
  inline void clear_has_tenacitylevel();
  inline void set_has_pddpierce();
  inline void clear_has_pddpierce();
  inline void set_has_range_x();
  inline void clear_has_range_x();
  inline void set_has_range_y();
  inline void clear_has_range_y();
  inline void set_has_range_z();
  inline void clear_has_range_z();
  inline void set_has_attackspeed();
  inline void clear_has_attackspeed();
  inline void set_has_h_dis();
  inline void clear_has_h_dis();
  inline void set_has_v_dis();
  inline void clear_has_v_dis();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_maxintensity();
  inline void clear_has_maxintensity();
  inline void set_has_recoverintensityrate();
  inline void clear_has_recoverintensityrate();
  inline void set_has_minintensity();
  inline void clear_has_minintensity();
  inline void set_has_type_normal();
  inline void clear_has_type_normal();
  inline void set_has_passiveskillid();
  inline void clear_has_passiveskillid();
  inline void set_has_passiveskilllevel();
  inline void clear_has_passiveskilllevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 area_;
  ::google::protobuf::int32 occupation_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 pdd_;
  ::google::protobuf::int32 mdd_;
  ::google::protobuf::int32 hitlevel_;
  ::google::protobuf::int32 dodgelevel_;
  ::google::protobuf::int32 crilevel_;
  ::google::protobuf::int32 tenacitylevel_;
  ::google::protobuf::int32 pddpierce_;
  float range_x_;
  float range_y_;
  float range_z_;
  float attackspeed_;
  float h_dis_;
  float v_dis_;
  float movespeed_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 maxintensity_;
  ::google::protobuf::int32 recoverintensityrate_;
  ::google::protobuf::int32 minintensity_;
  ::google::protobuf::int32 type_normal_;
  ::std::string* passiveskillid_;
  ::std::string* passiveskilllevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static MONSTERPROP* default_instance_;
};
// -------------------------------------------------------------------

class MONSTERPROP_ARRAY : public ::google::protobuf::Message {
 public:
  MONSTERPROP_ARRAY();
  virtual ~MONSTERPROP_ARRAY();

  MONSTERPROP_ARRAY(const MONSTERPROP_ARRAY& from);

  inline MONSTERPROP_ARRAY& operator=(const MONSTERPROP_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MONSTERPROP_ARRAY& default_instance();

  void Swap(MONSTERPROP_ARRAY* other);

  // implements Message ----------------------------------------------

  MONSTERPROP_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MONSTERPROP_ARRAY& from);
  void MergeFrom(const MONSTERPROP_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MONSTERPROP items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::MONSTERPROP& items(int index) const;
  inline ::MONSTERPROP* mutable_items(int index);
  inline ::MONSTERPROP* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::MONSTERPROP >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::MONSTERPROP >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:MONSTERPROP_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MONSTERPROP > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static MONSTERPROP_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class PASSIVE : public ::google::protobuf::Message {
 public:
  PASSIVE();
  virtual ~PASSIVE();

  PASSIVE(const PASSIVE& from);

  inline PASSIVE& operator=(const PASSIVE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PASSIVE& default_instance();

  void Swap(PASSIVE* other);

  // implements Message ----------------------------------------------

  PASSIVE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PASSIVE& from);
  void MergeFrom(const PASSIVE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 triggerEnum = 2 [default = 0];
  inline bool has_triggerenum() const;
  inline void clear_triggerenum();
  static const int kTriggerEnumFieldNumber = 2;
  inline ::google::protobuf::int32 triggerenum() const;
  inline void set_triggerenum(::google::protobuf::int32 value);

  // required string triggerId = 3 [default = ""];
  inline bool has_triggerid() const;
  inline void clear_triggerid();
  static const int kTriggerIdFieldNumber = 3;
  inline const ::std::string& triggerid() const;
  inline void set_triggerid(const ::std::string& value);
  inline void set_triggerid(const char* value);
  inline void set_triggerid(const char* value, size_t size);
  inline ::std::string* mutable_triggerid();
  inline ::std::string* release_triggerid();
  inline void set_allocated_triggerid(::std::string* triggerid);

  // required string buffId = 4 [default = ""];
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIdFieldNumber = 4;
  inline const ::std::string& buffid() const;
  inline void set_buffid(const ::std::string& value);
  inline void set_buffid(const char* value);
  inline void set_buffid(const char* value, size_t size);
  inline ::std::string* mutable_buffid();
  inline ::std::string* release_buffid();
  inline void set_allocated_buffid(::std::string* buffid);

  // required int32 target_Team = 5 [default = 0];
  inline bool has_target_team() const;
  inline void clear_target_team();
  static const int kTargetTeamFieldNumber = 5;
  inline ::google::protobuf::int32 target_team() const;
  inline void set_target_team(::google::protobuf::int32 value);

  // required int32 target_State = 6 [default = 0];
  inline bool has_target_state() const;
  inline void clear_target_state();
  static const int kTargetStateFieldNumber = 6;
  inline ::google::protobuf::int32 target_state() const;
  inline void set_target_state(::google::protobuf::int32 value);

  // required int32 target_Occupation = 7 [default = 0];
  inline bool has_target_occupation() const;
  inline void clear_target_occupation();
  static const int kTargetOccupationFieldNumber = 7;
  inline ::google::protobuf::int32 target_occupation() const;
  inline void set_target_occupation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PASSIVE)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_triggerenum();
  inline void clear_has_triggerenum();
  inline void set_has_triggerid();
  inline void clear_has_triggerid();
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_target_team();
  inline void clear_has_target_team();
  inline void set_has_target_state();
  inline void clear_has_target_state();
  inline void set_has_target_occupation();
  inline void clear_has_target_occupation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* triggerid_;
  ::google::protobuf::int32 triggerenum_;
  ::google::protobuf::int32 target_team_;
  ::std::string* buffid_;
  ::google::protobuf::int32 target_state_;
  ::google::protobuf::int32 target_occupation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static PASSIVE* default_instance_;
};
// -------------------------------------------------------------------

class PASSIVE_ARRAY : public ::google::protobuf::Message {
 public:
  PASSIVE_ARRAY();
  virtual ~PASSIVE_ARRAY();

  PASSIVE_ARRAY(const PASSIVE_ARRAY& from);

  inline PASSIVE_ARRAY& operator=(const PASSIVE_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PASSIVE_ARRAY& default_instance();

  void Swap(PASSIVE_ARRAY* other);

  // implements Message ----------------------------------------------

  PASSIVE_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PASSIVE_ARRAY& from);
  void MergeFrom(const PASSIVE_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PASSIVE items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::PASSIVE& items(int index) const;
  inline ::PASSIVE* mutable_items(int index);
  inline ::PASSIVE* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::PASSIVE >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::PASSIVE >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:PASSIVE_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PASSIVE > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static PASSIVE_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class PRIZESHOW : public ::google::protobuf::Message {
 public:
  PRIZESHOW();
  virtual ~PRIZESHOW();

  PRIZESHOW(const PRIZESHOW& from);

  inline PRIZESHOW& operator=(const PRIZESHOW& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PRIZESHOW& default_instance();

  void Swap(PRIZESHOW* other);

  // implements Message ----------------------------------------------

  PRIZESHOW* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PRIZESHOW& from);
  void MergeFrom(const PRIZESHOW& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string type = 2 [default = ""];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string counts = 3 [default = ""];
  inline bool has_counts() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 3;
  inline const ::std::string& counts() const;
  inline void set_counts(const ::std::string& value);
  inline void set_counts(const char* value);
  inline void set_counts(const char* value, size_t size);
  inline ::std::string* mutable_counts();
  inline ::std::string* release_counts();
  inline void set_allocated_counts(::std::string* counts);

  // required string awards = 4 [default = ""];
  inline bool has_awards() const;
  inline void clear_awards();
  static const int kAwardsFieldNumber = 4;
  inline const ::std::string& awards() const;
  inline void set_awards(const ::std::string& value);
  inline void set_awards(const char* value);
  inline void set_awards(const char* value, size_t size);
  inline ::std::string* mutable_awards();
  inline ::std::string* release_awards();
  inline void set_allocated_awards(::std::string* awards);

  // @@protoc_insertion_point(class_scope:PRIZESHOW)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_counts();
  inline void clear_has_counts();
  inline void set_has_awards();
  inline void clear_has_awards();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* type_;
  ::std::string* counts_;
  ::std::string* awards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static PRIZESHOW* default_instance_;
};
// -------------------------------------------------------------------

class PRIZESHOW_ARRAY : public ::google::protobuf::Message {
 public:
  PRIZESHOW_ARRAY();
  virtual ~PRIZESHOW_ARRAY();

  PRIZESHOW_ARRAY(const PRIZESHOW_ARRAY& from);

  inline PRIZESHOW_ARRAY& operator=(const PRIZESHOW_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PRIZESHOW_ARRAY& default_instance();

  void Swap(PRIZESHOW_ARRAY* other);

  // implements Message ----------------------------------------------

  PRIZESHOW_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PRIZESHOW_ARRAY& from);
  void MergeFrom(const PRIZESHOW_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PRIZESHOW items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::PRIZESHOW& items(int index) const;
  inline ::PRIZESHOW* mutable_items(int index);
  inline ::PRIZESHOW* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::PRIZESHOW >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::PRIZESHOW >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:PRIZESHOW_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PRIZESHOW > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static PRIZESHOW_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class QUALITYRULE : public ::google::protobuf::Message {
 public:
  QUALITYRULE();
  virtual ~QUALITYRULE();

  QUALITYRULE(const QUALITYRULE& from);

  inline QUALITYRULE& operator=(const QUALITYRULE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QUALITYRULE& default_instance();

  void Swap(QUALITYRULE* other);

  // implements Message ----------------------------------------------

  QUALITYRULE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QUALITYRULE& from);
  void MergeFrom(const QUALITYRULE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 needLevel = 2 [default = 0];
  inline bool has_needlevel() const;
  inline void clear_needlevel();
  static const int kNeedLevelFieldNumber = 2;
  inline ::google::protobuf::int32 needlevel() const;
  inline void set_needlevel(::google::protobuf::int32 value);

  // required int32 needGolds = 3 [default = 0];
  inline bool has_needgolds() const;
  inline void clear_needgolds();
  static const int kNeedGoldsFieldNumber = 3;
  inline ::google::protobuf::int32 needgolds() const;
  inline void set_needgolds(::google::protobuf::int32 value);

  // required int32 health = 4 [default = 0];
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 4;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);

  // required int32 damage = 5 [default = 0];
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 5;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // required int32 pdd = 6 [default = 0];
  inline bool has_pdd() const;
  inline void clear_pdd();
  static const int kPddFieldNumber = 6;
  inline ::google::protobuf::int32 pdd() const;
  inline void set_pdd(::google::protobuf::int32 value);

  // required int32 mdd = 7 [default = 0];
  inline bool has_mdd() const;
  inline void clear_mdd();
  static const int kMddFieldNumber = 7;
  inline ::google::protobuf::int32 mdd() const;
  inline void set_mdd(::google::protobuf::int32 value);

  // required int32 hitLevel = 8 [default = 0];
  inline bool has_hitlevel() const;
  inline void clear_hitlevel();
  static const int kHitLevelFieldNumber = 8;
  inline ::google::protobuf::int32 hitlevel() const;
  inline void set_hitlevel(::google::protobuf::int32 value);

  // required int32 dodgeLevel = 9 [default = 0];
  inline bool has_dodgelevel() const;
  inline void clear_dodgelevel();
  static const int kDodgeLevelFieldNumber = 9;
  inline ::google::protobuf::int32 dodgelevel() const;
  inline void set_dodgelevel(::google::protobuf::int32 value);

  // required int32 criLevel = 10 [default = 0];
  inline bool has_crilevel() const;
  inline void clear_crilevel();
  static const int kCriLevelFieldNumber = 10;
  inline ::google::protobuf::int32 crilevel() const;
  inline void set_crilevel(::google::protobuf::int32 value);

  // required int32 tenacityLevel = 11 [default = 0];
  inline bool has_tenacitylevel() const;
  inline void clear_tenacitylevel();
  static const int kTenacityLevelFieldNumber = 11;
  inline ::google::protobuf::int32 tenacitylevel() const;
  inline void set_tenacitylevel(::google::protobuf::int32 value);

  // required int32 pddPierce = 12 [default = 0];
  inline bool has_pddpierce() const;
  inline void clear_pddpierce();
  static const int kPddPierceFieldNumber = 12;
  inline ::google::protobuf::int32 pddpierce() const;
  inline void set_pddpierce(::google::protobuf::int32 value);

  // required int32 open = 13 [default = 0];
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 13;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:QUALITYRULE)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_needlevel();
  inline void clear_has_needlevel();
  inline void set_has_needgolds();
  inline void clear_has_needgolds();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_pdd();
  inline void clear_has_pdd();
  inline void set_has_mdd();
  inline void clear_has_mdd();
  inline void set_has_hitlevel();
  inline void clear_has_hitlevel();
  inline void set_has_dodgelevel();
  inline void clear_has_dodgelevel();
  inline void set_has_crilevel();
  inline void clear_has_crilevel();
  inline void set_has_tenacitylevel();
  inline void clear_has_tenacitylevel();
  inline void set_has_pddpierce();
  inline void clear_has_pddpierce();
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 needlevel_;
  ::google::protobuf::int32 needgolds_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int32 pdd_;
  ::google::protobuf::int32 mdd_;
  ::google::protobuf::int32 hitlevel_;
  ::google::protobuf::int32 dodgelevel_;
  ::google::protobuf::int32 crilevel_;
  ::google::protobuf::int32 tenacitylevel_;
  ::google::protobuf::int32 pddpierce_;
  ::google::protobuf::int32 open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static QUALITYRULE* default_instance_;
};
// -------------------------------------------------------------------

class QUALITYRULE_ARRAY : public ::google::protobuf::Message {
 public:
  QUALITYRULE_ARRAY();
  virtual ~QUALITYRULE_ARRAY();

  QUALITYRULE_ARRAY(const QUALITYRULE_ARRAY& from);

  inline QUALITYRULE_ARRAY& operator=(const QUALITYRULE_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QUALITYRULE_ARRAY& default_instance();

  void Swap(QUALITYRULE_ARRAY* other);

  // implements Message ----------------------------------------------

  QUALITYRULE_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QUALITYRULE_ARRAY& from);
  void MergeFrom(const QUALITYRULE_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .QUALITYRULE items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::QUALITYRULE& items(int index) const;
  inline ::QUALITYRULE* mutable_items(int index);
  inline ::QUALITYRULE* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::QUALITYRULE >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::QUALITYRULE >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:QUALITYRULE_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::QUALITYRULE > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static QUALITYRULE_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class REALTIMECHECK : public ::google::protobuf::Message {
 public:
  REALTIMECHECK();
  virtual ~REALTIMECHECK();

  REALTIMECHECK(const REALTIMECHECK& from);

  inline REALTIMECHECK& operator=(const REALTIMECHECK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REALTIMECHECK& default_instance();

  void Swap(REALTIMECHECK* other);

  // implements Message ----------------------------------------------

  REALTIMECHECK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REALTIMECHECK& from);
  void MergeFrom(const REALTIMECHECK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 type = 2 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 num = 3 [default = 0];
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:REALTIMECHECK)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static REALTIMECHECK* default_instance_;
};
// -------------------------------------------------------------------

class REALTIMECHECK_ARRAY : public ::google::protobuf::Message {
 public:
  REALTIMECHECK_ARRAY();
  virtual ~REALTIMECHECK_ARRAY();

  REALTIMECHECK_ARRAY(const REALTIMECHECK_ARRAY& from);

  inline REALTIMECHECK_ARRAY& operator=(const REALTIMECHECK_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const REALTIMECHECK_ARRAY& default_instance();

  void Swap(REALTIMECHECK_ARRAY* other);

  // implements Message ----------------------------------------------

  REALTIMECHECK_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const REALTIMECHECK_ARRAY& from);
  void MergeFrom(const REALTIMECHECK_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .REALTIMECHECK items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::REALTIMECHECK& items(int index) const;
  inline ::REALTIMECHECK* mutable_items(int index);
  inline ::REALTIMECHECK* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::REALTIMECHECK >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::REALTIMECHECK >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:REALTIMECHECK_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::REALTIMECHECK > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static REALTIMECHECK_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class RESETPRICE : public ::google::protobuf::Message {
 public:
  RESETPRICE();
  virtual ~RESETPRICE();

  RESETPRICE(const RESETPRICE& from);

  inline RESETPRICE& operator=(const RESETPRICE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RESETPRICE& default_instance();

  void Swap(RESETPRICE* other);

  // implements Message ----------------------------------------------

  RESETPRICE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RESETPRICE& from);
  void MergeFrom(const RESETPRICE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 needGems = 2 [default = 0];
  inline bool has_needgems() const;
  inline void clear_needgems();
  static const int kNeedGemsFieldNumber = 2;
  inline ::google::protobuf::int32 needgems() const;
  inline void set_needgems(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RESETPRICE)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_needgems();
  inline void clear_has_needgems();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 needgems_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static RESETPRICE* default_instance_;
};
// -------------------------------------------------------------------

class RESETPRICE_ARRAY : public ::google::protobuf::Message {
 public:
  RESETPRICE_ARRAY();
  virtual ~RESETPRICE_ARRAY();

  RESETPRICE_ARRAY(const RESETPRICE_ARRAY& from);

  inline RESETPRICE_ARRAY& operator=(const RESETPRICE_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RESETPRICE_ARRAY& default_instance();

  void Swap(RESETPRICE_ARRAY* other);

  // implements Message ----------------------------------------------

  RESETPRICE_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RESETPRICE_ARRAY& from);
  void MergeFrom(const RESETPRICE_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RESETPRICE items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::RESETPRICE& items(int index) const;
  inline ::RESETPRICE* mutable_items(int index);
  inline ::RESETPRICE* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::RESETPRICE >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::RESETPRICE >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:RESETPRICE_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::RESETPRICE > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static RESETPRICE_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class RULE : public ::google::protobuf::Message {
 public:
  RULE();
  virtual ~RULE();

  RULE(const RULE& from);

  inline RULE& operator=(const RULE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RULE& default_instance();

  void Swap(RULE* other);

  // implements Message ----------------------------------------------

  RULE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RULE& from);
  void MergeFrom(const RULE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 upgrade_Exp_User = 2 [default = 0];
  inline bool has_upgrade_exp_user() const;
  inline void clear_upgrade_exp_user();
  static const int kUpgradeExpUserFieldNumber = 2;
  inline ::google::protobuf::int32 upgrade_exp_user() const;
  inline void set_upgrade_exp_user(::google::protobuf::int32 value);

  // required int32 upgrade_Exp_Hero = 3 [default = 0];
  inline bool has_upgrade_exp_hero() const;
  inline void clear_upgrade_exp_hero();
  static const int kUpgradeExpHeroFieldNumber = 3;
  inline ::google::protobuf::int32 upgrade_exp_hero() const;
  inline void set_upgrade_exp_hero(::google::protobuf::int32 value);

  // required int32 factor_Hit = 4 [default = 0];
  inline bool has_factor_hit() const;
  inline void clear_factor_hit();
  static const int kFactorHitFieldNumber = 4;
  inline ::google::protobuf::int32 factor_hit() const;
  inline void set_factor_hit(::google::protobuf::int32 value);

  // required int32 factor_Dodge = 5 [default = 0];
  inline bool has_factor_dodge() const;
  inline void clear_factor_dodge();
  static const int kFactorDodgeFieldNumber = 5;
  inline ::google::protobuf::int32 factor_dodge() const;
  inline void set_factor_dodge(::google::protobuf::int32 value);

  // required int32 factor_Cri = 6 [default = 0];
  inline bool has_factor_cri() const;
  inline void clear_factor_cri();
  static const int kFactorCriFieldNumber = 6;
  inline ::google::protobuf::int32 factor_cri() const;
  inline void set_factor_cri(::google::protobuf::int32 value);

  // required int32 factor_Tenacity = 7 [default = 0];
  inline bool has_factor_tenacity() const;
  inline void clear_factor_tenacity();
  static const int kFactorTenacityFieldNumber = 7;
  inline ::google::protobuf::int32 factor_tenacity() const;
  inline void set_factor_tenacity(::google::protobuf::int32 value);

  // required int32 upgrade_Gold_Skill = 8 [default = 0];
  inline bool has_upgrade_gold_skill() const;
  inline void clear_upgrade_gold_skill();
  static const int kUpgradeGoldSkillFieldNumber = 8;
  inline ::google::protobuf::int32 upgrade_gold_skill() const;
  inline void set_upgrade_gold_skill(::google::protobuf::int32 value);

  // required int32 upgrade_Gold_AoYi = 9 [default = 0];
  inline bool has_upgrade_gold_aoyi() const;
  inline void clear_upgrade_gold_aoyi();
  static const int kUpgradeGoldAoYiFieldNumber = 9;
  inline ::google::protobuf::int32 upgrade_gold_aoyi() const;
  inline void set_upgrade_gold_aoyi(::google::protobuf::int32 value);

  // required int32 upgrade_Gold_Passive_1 = 10 [default = 0];
  inline bool has_upgrade_gold_passive_1() const;
  inline void clear_upgrade_gold_passive_1();
  static const int kUpgradeGoldPassive1FieldNumber = 10;
  inline ::google::protobuf::int32 upgrade_gold_passive_1() const;
  inline void set_upgrade_gold_passive_1(::google::protobuf::int32 value);

  // required int32 upgrade_Gold_Passive_2 = 11 [default = 0];
  inline bool has_upgrade_gold_passive_2() const;
  inline void clear_upgrade_gold_passive_2();
  static const int kUpgradeGoldPassive2FieldNumber = 11;
  inline ::google::protobuf::int32 upgrade_gold_passive_2() const;
  inline void set_upgrade_gold_passive_2(::google::protobuf::int32 value);

  // required int32 upgrade_Gold_Passive_3 = 12 [default = 0];
  inline bool has_upgrade_gold_passive_3() const;
  inline void clear_upgrade_gold_passive_3();
  static const int kUpgradeGoldPassive3FieldNumber = 12;
  inline ::google::protobuf::int32 upgrade_gold_passive_3() const;
  inline void set_upgrade_gold_passive_3(::google::protobuf::int32 value);

  // required int32 upgrade_Gold_Weapon = 13 [default = 0];
  inline bool has_upgrade_gold_weapon() const;
  inline void clear_upgrade_gold_weapon();
  static const int kUpgradeGoldWeaponFieldNumber = 13;
  inline ::google::protobuf::int32 upgrade_gold_weapon() const;
  inline void set_upgrade_gold_weapon(::google::protobuf::int32 value);

  // required int32 upgrade_Gold_Necklace = 14 [default = 0];
  inline bool has_upgrade_gold_necklace() const;
  inline void clear_upgrade_gold_necklace();
  static const int kUpgradeGoldNecklaceFieldNumber = 14;
  inline ::google::protobuf::int32 upgrade_gold_necklace() const;
  inline void set_upgrade_gold_necklace(::google::protobuf::int32 value);

  // required int32 upgrade_Gold_Clothes = 15 [default = 0];
  inline bool has_upgrade_gold_clothes() const;
  inline void clear_upgrade_gold_clothes();
  static const int kUpgradeGoldClothesFieldNumber = 15;
  inline ::google::protobuf::int32 upgrade_gold_clothes() const;
  inline void set_upgrade_gold_clothes(::google::protobuf::int32 value);

  // required int32 upgrade_Gold_Belt = 16 [default = 0];
  inline bool has_upgrade_gold_belt() const;
  inline void clear_upgrade_gold_belt();
  static const int kUpgradeGoldBeltFieldNumber = 16;
  inline ::google::protobuf::int32 upgrade_gold_belt() const;
  inline void set_upgrade_gold_belt(::google::protobuf::int32 value);

  // required int32 upgrade_Gold_Ring = 17 [default = 0];
  inline bool has_upgrade_gold_ring() const;
  inline void clear_upgrade_gold_ring();
  static const int kUpgradeGoldRingFieldNumber = 17;
  inline ::google::protobuf::int32 upgrade_gold_ring() const;
  inline void set_upgrade_gold_ring(::google::protobuf::int32 value);

  // required int32 upgrade_Gold_Boot = 18 [default = 0];
  inline bool has_upgrade_gold_boot() const;
  inline void clear_upgrade_gold_boot();
  static const int kUpgradeGoldBootFieldNumber = 18;
  inline ::google::protobuf::int32 upgrade_gold_boot() const;
  inline void set_upgrade_gold_boot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RULE)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_upgrade_exp_user();
  inline void clear_has_upgrade_exp_user();
  inline void set_has_upgrade_exp_hero();
  inline void clear_has_upgrade_exp_hero();
  inline void set_has_factor_hit();
  inline void clear_has_factor_hit();
  inline void set_has_factor_dodge();
  inline void clear_has_factor_dodge();
  inline void set_has_factor_cri();
  inline void clear_has_factor_cri();
  inline void set_has_factor_tenacity();
  inline void clear_has_factor_tenacity();
  inline void set_has_upgrade_gold_skill();
  inline void clear_has_upgrade_gold_skill();
  inline void set_has_upgrade_gold_aoyi();
  inline void clear_has_upgrade_gold_aoyi();
  inline void set_has_upgrade_gold_passive_1();
  inline void clear_has_upgrade_gold_passive_1();
  inline void set_has_upgrade_gold_passive_2();
  inline void clear_has_upgrade_gold_passive_2();
  inline void set_has_upgrade_gold_passive_3();
  inline void clear_has_upgrade_gold_passive_3();
  inline void set_has_upgrade_gold_weapon();
  inline void clear_has_upgrade_gold_weapon();
  inline void set_has_upgrade_gold_necklace();
  inline void clear_has_upgrade_gold_necklace();
  inline void set_has_upgrade_gold_clothes();
  inline void clear_has_upgrade_gold_clothes();
  inline void set_has_upgrade_gold_belt();
  inline void clear_has_upgrade_gold_belt();
  inline void set_has_upgrade_gold_ring();
  inline void clear_has_upgrade_gold_ring();
  inline void set_has_upgrade_gold_boot();
  inline void clear_has_upgrade_gold_boot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 upgrade_exp_user_;
  ::google::protobuf::int32 upgrade_exp_hero_;
  ::google::protobuf::int32 factor_hit_;
  ::google::protobuf::int32 factor_dodge_;
  ::google::protobuf::int32 factor_cri_;
  ::google::protobuf::int32 factor_tenacity_;
  ::google::protobuf::int32 upgrade_gold_skill_;
  ::google::protobuf::int32 upgrade_gold_aoyi_;
  ::google::protobuf::int32 upgrade_gold_passive_1_;
  ::google::protobuf::int32 upgrade_gold_passive_2_;
  ::google::protobuf::int32 upgrade_gold_passive_3_;
  ::google::protobuf::int32 upgrade_gold_weapon_;
  ::google::protobuf::int32 upgrade_gold_necklace_;
  ::google::protobuf::int32 upgrade_gold_clothes_;
  ::google::protobuf::int32 upgrade_gold_belt_;
  ::google::protobuf::int32 upgrade_gold_ring_;
  ::google::protobuf::int32 upgrade_gold_boot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static RULE* default_instance_;
};
// -------------------------------------------------------------------

class RULE_ARRAY : public ::google::protobuf::Message {
 public:
  RULE_ARRAY();
  virtual ~RULE_ARRAY();

  RULE_ARRAY(const RULE_ARRAY& from);

  inline RULE_ARRAY& operator=(const RULE_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RULE_ARRAY& default_instance();

  void Swap(RULE_ARRAY* other);

  // implements Message ----------------------------------------------

  RULE_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RULE_ARRAY& from);
  void MergeFrom(const RULE_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RULE items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::RULE& items(int index) const;
  inline ::RULE* mutable_items(int index);
  inline ::RULE* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::RULE >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::RULE >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:RULE_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::RULE > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static RULE_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class SHOPRESETPRICE : public ::google::protobuf::Message {
 public:
  SHOPRESETPRICE();
  virtual ~SHOPRESETPRICE();

  SHOPRESETPRICE(const SHOPRESETPRICE& from);

  inline SHOPRESETPRICE& operator=(const SHOPRESETPRICE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SHOPRESETPRICE& default_instance();

  void Swap(SHOPRESETPRICE* other);

  // implements Message ----------------------------------------------

  SHOPRESETPRICE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SHOPRESETPRICE& from);
  void MergeFrom(const SHOPRESETPRICE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 needGems = 2 [default = 0];
  inline bool has_needgems() const;
  inline void clear_needgems();
  static const int kNeedGemsFieldNumber = 2;
  inline ::google::protobuf::int32 needgems() const;
  inline void set_needgems(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SHOPRESETPRICE)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_needgems();
  inline void clear_has_needgems();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 needgems_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static SHOPRESETPRICE* default_instance_;
};
// -------------------------------------------------------------------

class SHOPRESETPRICE_ARRAY : public ::google::protobuf::Message {
 public:
  SHOPRESETPRICE_ARRAY();
  virtual ~SHOPRESETPRICE_ARRAY();

  SHOPRESETPRICE_ARRAY(const SHOPRESETPRICE_ARRAY& from);

  inline SHOPRESETPRICE_ARRAY& operator=(const SHOPRESETPRICE_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SHOPRESETPRICE_ARRAY& default_instance();

  void Swap(SHOPRESETPRICE_ARRAY* other);

  // implements Message ----------------------------------------------

  SHOPRESETPRICE_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SHOPRESETPRICE_ARRAY& from);
  void MergeFrom(const SHOPRESETPRICE_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SHOPRESETPRICE items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::SHOPRESETPRICE& items(int index) const;
  inline ::SHOPRESETPRICE* mutable_items(int index);
  inline ::SHOPRESETPRICE* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SHOPRESETPRICE >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SHOPRESETPRICE >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:SHOPRESETPRICE_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SHOPRESETPRICE > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static SHOPRESETPRICE_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class SPPRICE : public ::google::protobuf::Message {
 public:
  SPPRICE();
  virtual ~SPPRICE();

  SPPRICE(const SPPRICE& from);

  inline SPPRICE& operator=(const SPPRICE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPPRICE& default_instance();

  void Swap(SPPRICE* other);

  // implements Message ----------------------------------------------

  SPPRICE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPPRICE& from);
  void MergeFrom(const SPPRICE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 needGems = 2 [default = 0];
  inline bool has_needgems() const;
  inline void clear_needgems();
  static const int kNeedGemsFieldNumber = 2;
  inline ::google::protobuf::int32 needgems() const;
  inline void set_needgems(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SPPRICE)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_needgems();
  inline void clear_has_needgems();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 needgems_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static SPPRICE* default_instance_;
};
// -------------------------------------------------------------------

class SPPRICE_ARRAY : public ::google::protobuf::Message {
 public:
  SPPRICE_ARRAY();
  virtual ~SPPRICE_ARRAY();

  SPPRICE_ARRAY(const SPPRICE_ARRAY& from);

  inline SPPRICE_ARRAY& operator=(const SPPRICE_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPPRICE_ARRAY& default_instance();

  void Swap(SPPRICE_ARRAY* other);

  // implements Message ----------------------------------------------

  SPPRICE_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPPRICE_ARRAY& from);
  void MergeFrom(const SPPRICE_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SPPRICE items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::SPPRICE& items(int index) const;
  inline ::SPPRICE* mutable_items(int index);
  inline ::SPPRICE* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SPPRICE >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SPPRICE >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:SPPRICE_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SPPRICE > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static SPPRICE_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class STAPRICE : public ::google::protobuf::Message {
 public:
  STAPRICE();
  virtual ~STAPRICE();

  STAPRICE(const STAPRICE& from);

  inline STAPRICE& operator=(const STAPRICE& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STAPRICE& default_instance();

  void Swap(STAPRICE* other);

  // implements Message ----------------------------------------------

  STAPRICE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STAPRICE& from);
  void MergeFrom(const STAPRICE& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 needGems = 2 [default = 0];
  inline bool has_needgems() const;
  inline void clear_needgems();
  static const int kNeedGemsFieldNumber = 2;
  inline ::google::protobuf::int32 needgems() const;
  inline void set_needgems(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:STAPRICE)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_needgems();
  inline void clear_has_needgems();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 needgems_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static STAPRICE* default_instance_;
};
// -------------------------------------------------------------------

class STAPRICE_ARRAY : public ::google::protobuf::Message {
 public:
  STAPRICE_ARRAY();
  virtual ~STAPRICE_ARRAY();

  STAPRICE_ARRAY(const STAPRICE_ARRAY& from);

  inline STAPRICE_ARRAY& operator=(const STAPRICE_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STAPRICE_ARRAY& default_instance();

  void Swap(STAPRICE_ARRAY* other);

  // implements Message ----------------------------------------------

  STAPRICE_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STAPRICE_ARRAY& from);
  void MergeFrom(const STAPRICE_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .STAPRICE items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::STAPRICE& items(int index) const;
  inline ::STAPRICE* mutable_items(int index);
  inline ::STAPRICE* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::STAPRICE >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::STAPRICE >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:STAPRICE_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::STAPRICE > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static STAPRICE_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class SUBTASK : public ::google::protobuf::Message {
 public:
  SUBTASK();
  virtual ~SUBTASK();

  SUBTASK(const SUBTASK& from);

  inline SUBTASK& operator=(const SUBTASK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SUBTASK& default_instance();

  void Swap(SUBTASK* other);

  // implements Message ----------------------------------------------

  SUBTASK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SUBTASK& from);
  void MergeFrom(const SUBTASK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string battleData = 2 [default = ""];
  inline bool has_battledata() const;
  inline void clear_battledata();
  static const int kBattleDataFieldNumber = 2;
  inline const ::std::string& battledata() const;
  inline void set_battledata(const ::std::string& value);
  inline void set_battledata(const char* value);
  inline void set_battledata(const char* value, size_t size);
  inline ::std::string* mutable_battledata();
  inline ::std::string* release_battledata();
  inline void set_allocated_battledata(::std::string* battledata);

  // required string diffs = 3 [default = ""];
  inline bool has_diffs() const;
  inline void clear_diffs();
  static const int kDiffsFieldNumber = 3;
  inline const ::std::string& diffs() const;
  inline void set_diffs(const ::std::string& value);
  inline void set_diffs(const char* value);
  inline void set_diffs(const char* value, size_t size);
  inline ::std::string* mutable_diffs();
  inline ::std::string* release_diffs();
  inline void set_allocated_diffs(::std::string* diffs);

  // required string totalTimes = 4 [default = ""];
  inline bool has_totaltimes() const;
  inline void clear_totaltimes();
  static const int kTotalTimesFieldNumber = 4;
  inline const ::std::string& totaltimes() const;
  inline void set_totaltimes(const ::std::string& value);
  inline void set_totaltimes(const char* value);
  inline void set_totaltimes(const char* value, size_t size);
  inline ::std::string* mutable_totaltimes();
  inline ::std::string* release_totaltimes();
  inline void set_allocated_totaltimes(::std::string* totaltimes);

  // required string name_ch = 5 [default = ""];
  inline bool has_name_ch() const;
  inline void clear_name_ch();
  static const int kNameChFieldNumber = 5;
  inline const ::std::string& name_ch() const;
  inline void set_name_ch(const ::std::string& value);
  inline void set_name_ch(const char* value);
  inline void set_name_ch(const char* value, size_t size);
  inline ::std::string* mutable_name_ch();
  inline ::std::string* release_name_ch();
  inline void set_allocated_name_ch(::std::string* name_ch);

  // required int32 expendSt = 6 [default = 0];
  inline bool has_expendst() const;
  inline void clear_expendst();
  static const int kExpendStFieldNumber = 6;
  inline ::google::protobuf::int32 expendst() const;
  inline void set_expendst(::google::protobuf::int32 value);

  // required int32 fightCount = 7 [default = 0];
  inline bool has_fightcount() const;
  inline void clear_fightcount();
  static const int kFightCountFieldNumber = 7;
  inline ::google::protobuf::int32 fightcount() const;
  inline void set_fightcount(::google::protobuf::int32 value);

  // required int32 idExp = 8 [default = 0];
  inline bool has_idexp() const;
  inline void clear_idexp();
  static const int kIdExpFieldNumber = 8;
  inline ::google::protobuf::int32 idexp() const;
  inline void set_idexp(::google::protobuf::int32 value);

  // required int32 heroExp = 9 [default = 0];
  inline bool has_heroexp() const;
  inline void clear_heroexp();
  static const int kHeroExpFieldNumber = 9;
  inline ::google::protobuf::int32 heroexp() const;
  inline void set_heroexp(::google::protobuf::int32 value);

  // required int32 dropGold = 10 [default = 0];
  inline bool has_dropgold() const;
  inline void clear_dropgold();
  static const int kDropGoldFieldNumber = 10;
  inline ::google::protobuf::int32 dropgold() const;
  inline void set_dropgold(::google::protobuf::int32 value);

  // required string pointParentId = 11 [default = ""];
  inline bool has_pointparentid() const;
  inline void clear_pointparentid();
  static const int kPointParentIdFieldNumber = 11;
  inline const ::std::string& pointparentid() const;
  inline void set_pointparentid(const ::std::string& value);
  inline void set_pointparentid(const char* value);
  inline void set_pointparentid(const char* value, size_t size);
  inline ::std::string* mutable_pointparentid();
  inline ::std::string* release_pointparentid();
  inline void set_allocated_pointparentid(::std::string* pointparentid);

  // required float priority = 12 [default = 0];
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 12;
  inline float priority() const;
  inline void set_priority(float value);

  // required int32 fightPower = 13 [default = 0];
  inline bool has_fightpower() const;
  inline void clear_fightpower();
  static const int kFightPowerFieldNumber = 13;
  inline ::google::protobuf::int32 fightpower() const;
  inline void set_fightpower(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SUBTASK)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_battledata();
  inline void clear_has_battledata();
  inline void set_has_diffs();
  inline void clear_has_diffs();
  inline void set_has_totaltimes();
  inline void clear_has_totaltimes();
  inline void set_has_name_ch();
  inline void clear_has_name_ch();
  inline void set_has_expendst();
  inline void clear_has_expendst();
  inline void set_has_fightcount();
  inline void clear_has_fightcount();
  inline void set_has_idexp();
  inline void clear_has_idexp();
  inline void set_has_heroexp();
  inline void clear_has_heroexp();
  inline void set_has_dropgold();
  inline void clear_has_dropgold();
  inline void set_has_pointparentid();
  inline void clear_has_pointparentid();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_fightpower();
  inline void clear_has_fightpower();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* battledata_;
  ::std::string* diffs_;
  ::std::string* totaltimes_;
  ::std::string* name_ch_;
  ::google::protobuf::int32 expendst_;
  ::google::protobuf::int32 fightcount_;
  ::google::protobuf::int32 idexp_;
  ::google::protobuf::int32 heroexp_;
  ::std::string* pointparentid_;
  ::google::protobuf::int32 dropgold_;
  float priority_;
  ::google::protobuf::int32 fightpower_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static SUBTASK* default_instance_;
};
// -------------------------------------------------------------------

class SUBTASK_ARRAY : public ::google::protobuf::Message {
 public:
  SUBTASK_ARRAY();
  virtual ~SUBTASK_ARRAY();

  SUBTASK_ARRAY(const SUBTASK_ARRAY& from);

  inline SUBTASK_ARRAY& operator=(const SUBTASK_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SUBTASK_ARRAY& default_instance();

  void Swap(SUBTASK_ARRAY* other);

  // implements Message ----------------------------------------------

  SUBTASK_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SUBTASK_ARRAY& from);
  void MergeFrom(const SUBTASK_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SUBTASK items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::SUBTASK& items(int index) const;
  inline ::SUBTASK* mutable_items(int index);
  inline ::SUBTASK* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SUBTASK >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SUBTASK >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:SUBTASK_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SUBTASK > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static SUBTASK_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class TASK : public ::google::protobuf::Message {
 public:
  TASK();
  virtual ~TASK();

  TASK(const TASK& from);

  inline TASK& operator=(const TASK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TASK& default_instance();

  void Swap(TASK* other);

  // implements Message ----------------------------------------------

  TASK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TASK& from);
  void MergeFrom(const TASK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 seriesType = 2 [default = 0];
  inline bool has_seriestype() const;
  inline void clear_seriestype();
  static const int kSeriesTypeFieldNumber = 2;
  inline ::google::protobuf::int32 seriestype() const;
  inline void set_seriestype(::google::protobuf::int32 value);

  // required string seriesName_ch = 3 [default = ""];
  inline bool has_seriesname_ch() const;
  inline void clear_seriesname_ch();
  static const int kSeriesNameChFieldNumber = 3;
  inline const ::std::string& seriesname_ch() const;
  inline void set_seriesname_ch(const ::std::string& value);
  inline void set_seriesname_ch(const char* value);
  inline void set_seriesname_ch(const char* value, size_t size);
  inline ::std::string* mutable_seriesname_ch();
  inline ::std::string* release_seriesname_ch();
  inline void set_allocated_seriesname_ch(::std::string* seriesname_ch);

  // required string rewardId = 4 [default = ""];
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 4;
  inline const ::std::string& rewardid() const;
  inline void set_rewardid(const ::std::string& value);
  inline void set_rewardid(const char* value);
  inline void set_rewardid(const char* value, size_t size);
  inline ::std::string* mutable_rewardid();
  inline ::std::string* release_rewardid();
  inline void set_allocated_rewardid(::std::string* rewardid);

  // required int32 openTimeType = 5 [default = 0];
  inline bool has_opentimetype() const;
  inline void clear_opentimetype();
  static const int kOpenTimeTypeFieldNumber = 5;
  inline ::google::protobuf::int32 opentimetype() const;
  inline void set_opentimetype(::google::protobuf::int32 value);

  // required string openTime = 6 [default = ""];
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpenTimeFieldNumber = 6;
  inline const ::std::string& opentime() const;
  inline void set_opentime(const ::std::string& value);
  inline void set_opentime(const char* value);
  inline void set_opentime(const char* value, size_t size);
  inline ::std::string* mutable_opentime();
  inline ::std::string* release_opentime();
  inline void set_allocated_opentime(::std::string* opentime);

  // required int32 totalEnterNum = 7 [default = 0];
  inline bool has_totalenternum() const;
  inline void clear_totalenternum();
  static const int kTotalEnterNumFieldNumber = 7;
  inline ::google::protobuf::int32 totalenternum() const;
  inline void set_totalenternum(::google::protobuf::int32 value);

  // required string enterLimit = 8 [default = ""];
  inline bool has_enterlimit() const;
  inline void clear_enterlimit();
  static const int kEnterLimitFieldNumber = 8;
  inline const ::std::string& enterlimit() const;
  inline void set_enterlimit(const ::std::string& value);
  inline void set_enterlimit(const char* value);
  inline void set_enterlimit(const char* value, size_t size);
  inline ::std::string* mutable_enterlimit();
  inline ::std::string* release_enterlimit();
  inline void set_allocated_enterlimit(::std::string* enterlimit);

  // required string pointParentId = 9 [default = ""];
  inline bool has_pointparentid() const;
  inline void clear_pointparentid();
  static const int kPointParentIdFieldNumber = 9;
  inline const ::std::string& pointparentid() const;
  inline void set_pointparentid(const ::std::string& value);
  inline void set_pointparentid(const char* value);
  inline void set_pointparentid(const char* value, size_t size);
  inline ::std::string* mutable_pointparentid();
  inline ::std::string* release_pointparentid();
  inline void set_allocated_pointparentid(::std::string* pointparentid);

  // required string nextPoint = 10 [default = ""];
  inline bool has_nextpoint() const;
  inline void clear_nextpoint();
  static const int kNextPointFieldNumber = 10;
  inline const ::std::string& nextpoint() const;
  inline void set_nextpoint(const ::std::string& value);
  inline void set_nextpoint(const char* value);
  inline void set_nextpoint(const char* value, size_t size);
  inline ::std::string* mutable_nextpoint();
  inline ::std::string* release_nextpoint();
  inline void set_allocated_nextpoint(::std::string* nextpoint);

  // required float priority = 11 [default = 0];
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 11;
  inline float priority() const;
  inline void set_priority(float value);

  // @@protoc_insertion_point(class_scope:TASK)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_seriestype();
  inline void clear_has_seriestype();
  inline void set_has_seriesname_ch();
  inline void clear_has_seriesname_ch();
  inline void set_has_rewardid();
  inline void clear_has_rewardid();
  inline void set_has_opentimetype();
  inline void clear_has_opentimetype();
  inline void set_has_opentime();
  inline void clear_has_opentime();
  inline void set_has_totalenternum();
  inline void clear_has_totalenternum();
  inline void set_has_enterlimit();
  inline void clear_has_enterlimit();
  inline void set_has_pointparentid();
  inline void clear_has_pointparentid();
  inline void set_has_nextpoint();
  inline void clear_has_nextpoint();
  inline void set_has_priority();
  inline void clear_has_priority();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* seriesname_ch_;
  ::google::protobuf::int32 seriestype_;
  ::google::protobuf::int32 opentimetype_;
  ::std::string* rewardid_;
  ::std::string* opentime_;
  ::std::string* enterlimit_;
  ::std::string* pointparentid_;
  ::google::protobuf::int32 totalenternum_;
  float priority_;
  ::std::string* nextpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static TASK* default_instance_;
};
// -------------------------------------------------------------------

class TASK_ARRAY : public ::google::protobuf::Message {
 public:
  TASK_ARRAY();
  virtual ~TASK_ARRAY();

  TASK_ARRAY(const TASK_ARRAY& from);

  inline TASK_ARRAY& operator=(const TASK_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TASK_ARRAY& default_instance();

  void Swap(TASK_ARRAY* other);

  // implements Message ----------------------------------------------

  TASK_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TASK_ARRAY& from);
  void MergeFrom(const TASK_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TASK items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::TASK& items(int index) const;
  inline ::TASK* mutable_items(int index);
  inline ::TASK* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::TASK >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::TASK >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:TASK_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TASK > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static TASK_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class TRIGGERATTACK : public ::google::protobuf::Message {
 public:
  TRIGGERATTACK();
  virtual ~TRIGGERATTACK();

  TRIGGERATTACK(const TRIGGERATTACK& from);

  inline TRIGGERATTACK& operator=(const TRIGGERATTACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRIGGERATTACK& default_instance();

  void Swap(TRIGGERATTACK* other);

  // implements Message ----------------------------------------------

  TRIGGERATTACK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRIGGERATTACK& from);
  void MergeFrom(const TRIGGERATTACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 type = 2 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required float cd = 3 [default = 0];
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 3;
  inline float cd() const;
  inline void set_cd(float value);

  // @@protoc_insertion_point(class_scope:TRIGGERATTACK)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cd();
  inline void clear_has_cd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 type_;
  float cd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static TRIGGERATTACK* default_instance_;
};
// -------------------------------------------------------------------

class TRIGGERATTACK_ARRAY : public ::google::protobuf::Message {
 public:
  TRIGGERATTACK_ARRAY();
  virtual ~TRIGGERATTACK_ARRAY();

  TRIGGERATTACK_ARRAY(const TRIGGERATTACK_ARRAY& from);

  inline TRIGGERATTACK_ARRAY& operator=(const TRIGGERATTACK_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRIGGERATTACK_ARRAY& default_instance();

  void Swap(TRIGGERATTACK_ARRAY* other);

  // implements Message ----------------------------------------------

  TRIGGERATTACK_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRIGGERATTACK_ARRAY& from);
  void MergeFrom(const TRIGGERATTACK_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TRIGGERATTACK items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::TRIGGERATTACK& items(int index) const;
  inline ::TRIGGERATTACK* mutable_items(int index);
  inline ::TRIGGERATTACK* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::TRIGGERATTACK >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::TRIGGERATTACK >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:TRIGGERATTACK_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TRIGGERATTACK > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static TRIGGERATTACK_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class TRIGGERSTARTCONDITION : public ::google::protobuf::Message {
 public:
  TRIGGERSTARTCONDITION();
  virtual ~TRIGGERSTARTCONDITION();

  TRIGGERSTARTCONDITION(const TRIGGERSTARTCONDITION& from);

  inline TRIGGERSTARTCONDITION& operator=(const TRIGGERSTARTCONDITION& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRIGGERSTARTCONDITION& default_instance();

  void Swap(TRIGGERSTARTCONDITION* other);

  // implements Message ----------------------------------------------

  TRIGGERSTARTCONDITION* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRIGGERSTARTCONDITION& from);
  void MergeFrom(const TRIGGERSTARTCONDITION& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 trigger_Time = 2 [default = 0];
  inline bool has_trigger_time() const;
  inline void clear_trigger_time();
  static const int kTriggerTimeFieldNumber = 2;
  inline ::google::protobuf::int32 trigger_time() const;
  inline void set_trigger_time(::google::protobuf::int32 value);

  // required int32 trigger_Team = 3 [default = 0];
  inline bool has_trigger_team() const;
  inline void clear_trigger_team();
  static const int kTriggerTeamFieldNumber = 3;
  inline ::google::protobuf::int32 trigger_team() const;
  inline void set_trigger_team(::google::protobuf::int32 value);

  // required int32 trigger_State = 4 [default = 0];
  inline bool has_trigger_state() const;
  inline void clear_trigger_state();
  static const int kTriggerStateFieldNumber = 4;
  inline ::google::protobuf::int32 trigger_state() const;
  inline void set_trigger_state(::google::protobuf::int32 value);

  // required int32 trigger_Occupation = 5 [default = 0];
  inline bool has_trigger_occupation() const;
  inline void clear_trigger_occupation();
  static const int kTriggerOccupationFieldNumber = 5;
  inline ::google::protobuf::int32 trigger_occupation() const;
  inline void set_trigger_occupation(::google::protobuf::int32 value);

  // required int32 trigger_Mark = 6 [default = 0];
  inline bool has_trigger_mark() const;
  inline void clear_trigger_mark();
  static const int kTriggerMarkFieldNumber = 6;
  inline ::google::protobuf::int32 trigger_mark() const;
  inline void set_trigger_mark(::google::protobuf::int32 value);

  // required int32 trigger_Count = 7 [default = 0];
  inline bool has_trigger_count() const;
  inline void clear_trigger_count();
  static const int kTriggerCountFieldNumber = 7;
  inline ::google::protobuf::int32 trigger_count() const;
  inline void set_trigger_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TRIGGERSTARTCONDITION)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_trigger_time();
  inline void clear_has_trigger_time();
  inline void set_has_trigger_team();
  inline void clear_has_trigger_team();
  inline void set_has_trigger_state();
  inline void clear_has_trigger_state();
  inline void set_has_trigger_occupation();
  inline void clear_has_trigger_occupation();
  inline void set_has_trigger_mark();
  inline void clear_has_trigger_mark();
  inline void set_has_trigger_count();
  inline void clear_has_trigger_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 trigger_time_;
  ::google::protobuf::int32 trigger_team_;
  ::google::protobuf::int32 trigger_state_;
  ::google::protobuf::int32 trigger_occupation_;
  ::google::protobuf::int32 trigger_mark_;
  ::google::protobuf::int32 trigger_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static TRIGGERSTARTCONDITION* default_instance_;
};
// -------------------------------------------------------------------

class TRIGGERSTARTCONDITION_ARRAY : public ::google::protobuf::Message {
 public:
  TRIGGERSTARTCONDITION_ARRAY();
  virtual ~TRIGGERSTARTCONDITION_ARRAY();

  TRIGGERSTARTCONDITION_ARRAY(const TRIGGERSTARTCONDITION_ARRAY& from);

  inline TRIGGERSTARTCONDITION_ARRAY& operator=(const TRIGGERSTARTCONDITION_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRIGGERSTARTCONDITION_ARRAY& default_instance();

  void Swap(TRIGGERSTARTCONDITION_ARRAY* other);

  // implements Message ----------------------------------------------

  TRIGGERSTARTCONDITION_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRIGGERSTARTCONDITION_ARRAY& from);
  void MergeFrom(const TRIGGERSTARTCONDITION_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TRIGGERSTARTCONDITION items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::TRIGGERSTARTCONDITION& items(int index) const;
  inline ::TRIGGERSTARTCONDITION* mutable_items(int index);
  inline ::TRIGGERSTARTCONDITION* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::TRIGGERSTARTCONDITION >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::TRIGGERSTARTCONDITION >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:TRIGGERSTARTCONDITION_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TRIGGERSTARTCONDITION > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static TRIGGERSTARTCONDITION_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class VIP : public ::google::protobuf::Message {
 public:
  VIP();
  virtual ~VIP();

  VIP(const VIP& from);

  inline VIP& operator=(const VIP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VIP& default_instance();

  void Swap(VIP* other);

  // implements Message ----------------------------------------------

  VIP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VIP& from);
  void MergeFrom(const VIP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 needRMB = 2 [default = 0];
  inline bool has_needrmb() const;
  inline void clear_needrmb();
  static const int kNeedRMBFieldNumber = 2;
  inline ::google::protobuf::int32 needrmb() const;
  inline void set_needrmb(::google::protobuf::int32 value);

  // required int32 freeItemCount = 3 [default = 0];
  inline bool has_freeitemcount() const;
  inline void clear_freeitemcount();
  static const int kFreeItemCountFieldNumber = 3;
  inline ::google::protobuf::int32 freeitemcount() const;
  inline void set_freeitemcount(::google::protobuf::int32 value);

  // required int32 buyPowerCount = 4 [default = 0];
  inline bool has_buypowercount() const;
  inline void clear_buypowercount();
  static const int kBuyPowerCountFieldNumber = 4;
  inline ::google::protobuf::int32 buypowercount() const;
  inline void set_buypowercount(::google::protobuf::int32 value);

  // required int32 buyFBCount = 5 [default = 0];
  inline bool has_buyfbcount() const;
  inline void clear_buyfbcount();
  static const int kBuyFBCountFieldNumber = 5;
  inline ::google::protobuf::int32 buyfbcount() const;
  inline void set_buyfbcount(::google::protobuf::int32 value);

  // required int32 buyArenaCount = 6 [default = 0];
  inline bool has_buyarenacount() const;
  inline void clear_buyarenacount();
  static const int kBuyArenaCountFieldNumber = 6;
  inline ::google::protobuf::int32 buyarenacount() const;
  inline void set_buyarenacount(::google::protobuf::int32 value);

  // required int32 buyGoldsCount = 7 [default = 0];
  inline bool has_buygoldscount() const;
  inline void clear_buygoldscount();
  static const int kBuyGoldsCountFieldNumber = 7;
  inline ::google::protobuf::int32 buygoldscount() const;
  inline void set_buygoldscount(::google::protobuf::int32 value);

  // required int32 maxSkillPoint = 8 [default = 0];
  inline bool has_maxskillpoint() const;
  inline void clear_maxskillpoint();
  static const int kMaxSkillPointFieldNumber = 8;
  inline ::google::protobuf::int32 maxskillpoint() const;
  inline void set_maxskillpoint(::google::protobuf::int32 value);

  // required int32 expBattleNum = 9 [default = 0];
  inline bool has_expbattlenum() const;
  inline void clear_expbattlenum();
  static const int kExpBattleNumFieldNumber = 9;
  inline ::google::protobuf::int32 expbattlenum() const;
  inline void set_expbattlenum(::google::protobuf::int32 value);

  // required int32 goldBattleNum = 10 [default = 0];
  inline bool has_goldbattlenum() const;
  inline void clear_goldbattlenum();
  static const int kGoldBattleNumFieldNumber = 10;
  inline ::google::protobuf::int32 goldbattlenum() const;
  inline void set_goldbattlenum(::google::protobuf::int32 value);

  // required int32 towerNum = 11 [default = 0];
  inline bool has_towernum() const;
  inline void clear_towernum();
  static const int kTowerNumFieldNumber = 11;
  inline ::google::protobuf::int32 towernum() const;
  inline void set_towernum(::google::protobuf::int32 value);

  // required int32 crusadeNum = 12 [default = 0];
  inline bool has_crusadenum() const;
  inline void clear_crusadenum();
  static const int kCrusadeNumFieldNumber = 12;
  inline ::google::protobuf::int32 crusadenum() const;
  inline void set_crusadenum(::google::protobuf::int32 value);

  // required int32 buySkillPoint = 13 [default = 0];
  inline bool has_buyskillpoint() const;
  inline void clear_buyskillpoint();
  static const int kBuySkillPointFieldNumber = 13;
  inline ::google::protobuf::int32 buyskillpoint() const;
  inline void set_buyskillpoint(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VIP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_needrmb();
  inline void clear_has_needrmb();
  inline void set_has_freeitemcount();
  inline void clear_has_freeitemcount();
  inline void set_has_buypowercount();
  inline void clear_has_buypowercount();
  inline void set_has_buyfbcount();
  inline void clear_has_buyfbcount();
  inline void set_has_buyarenacount();
  inline void clear_has_buyarenacount();
  inline void set_has_buygoldscount();
  inline void clear_has_buygoldscount();
  inline void set_has_maxskillpoint();
  inline void clear_has_maxskillpoint();
  inline void set_has_expbattlenum();
  inline void clear_has_expbattlenum();
  inline void set_has_goldbattlenum();
  inline void clear_has_goldbattlenum();
  inline void set_has_towernum();
  inline void clear_has_towernum();
  inline void set_has_crusadenum();
  inline void clear_has_crusadenum();
  inline void set_has_buyskillpoint();
  inline void clear_has_buyskillpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 needrmb_;
  ::google::protobuf::int32 freeitemcount_;
  ::google::protobuf::int32 buypowercount_;
  ::google::protobuf::int32 buyfbcount_;
  ::google::protobuf::int32 buyarenacount_;
  ::google::protobuf::int32 buygoldscount_;
  ::google::protobuf::int32 maxskillpoint_;
  ::google::protobuf::int32 expbattlenum_;
  ::google::protobuf::int32 goldbattlenum_;
  ::google::protobuf::int32 towernum_;
  ::google::protobuf::int32 crusadenum_;
  ::google::protobuf::int32 buyskillpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static VIP* default_instance_;
};
// -------------------------------------------------------------------

class VIP_ARRAY : public ::google::protobuf::Message {
 public:
  VIP_ARRAY();
  virtual ~VIP_ARRAY();

  VIP_ARRAY(const VIP_ARRAY& from);

  inline VIP_ARRAY& operator=(const VIP_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VIP_ARRAY& default_instance();

  void Swap(VIP_ARRAY* other);

  // implements Message ----------------------------------------------

  VIP_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VIP_ARRAY& from);
  void MergeFrom(const VIP_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VIP items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::VIP& items(int index) const;
  inline ::VIP* mutable_items(int index);
  inline ::VIP* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::VIP >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::VIP >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:VIP_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::VIP > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static VIP_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class VIPFUNCTION : public ::google::protobuf::Message {
 public:
  VIPFUNCTION();
  virtual ~VIPFUNCTION();

  VIPFUNCTION(const VIPFUNCTION& from);

  inline VIPFUNCTION& operator=(const VIPFUNCTION& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VIPFUNCTION& default_instance();

  void Swap(VIPFUNCTION* other);

  // implements Message ----------------------------------------------

  VIPFUNCTION* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VIPFUNCTION& from);
  void MergeFrom(const VIPFUNCTION& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1 [default = ""];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 openVip = 2 [default = 0];
  inline bool has_openvip() const;
  inline void clear_openvip();
  static const int kOpenVipFieldNumber = 2;
  inline ::google::protobuf::int32 openvip() const;
  inline void set_openvip(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VIPFUNCTION)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_openvip();
  inline void clear_has_openvip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::google::protobuf::int32 openvip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static VIPFUNCTION* default_instance_;
};
// -------------------------------------------------------------------

class VIPFUNCTION_ARRAY : public ::google::protobuf::Message {
 public:
  VIPFUNCTION_ARRAY();
  virtual ~VIPFUNCTION_ARRAY();

  VIPFUNCTION_ARRAY(const VIPFUNCTION_ARRAY& from);

  inline VIPFUNCTION_ARRAY& operator=(const VIPFUNCTION_ARRAY& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VIPFUNCTION_ARRAY& default_instance();

  void Swap(VIPFUNCTION_ARRAY* other);

  // implements Message ----------------------------------------------

  VIPFUNCTION_ARRAY* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VIPFUNCTION_ARRAY& from);
  void MergeFrom(const VIPFUNCTION_ARRAY& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VIPFUNCTION items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::VIPFUNCTION& items(int index) const;
  inline ::VIPFUNCTION* mutable_items(int index);
  inline ::VIPFUNCTION* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::VIPFUNCTION >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::VIPFUNCTION >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:VIPFUNCTION_ARRAY)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::VIPFUNCTION > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static VIPFUNCTION_ARRAY* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_enter_gs_req : public ::google::protobuf::Message {
 public:
  c_gs_enter_gs_req();
  virtual ~c_gs_enter_gs_req();

  c_gs_enter_gs_req(const c_gs_enter_gs_req& from);

  inline c_gs_enter_gs_req& operator=(const c_gs_enter_gs_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_enter_gs_req& default_instance();

  void Swap(c_gs_enter_gs_req* other);

  // implements Message ----------------------------------------------

  c_gs_enter_gs_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_enter_gs_req& from);
  void MergeFrom(const c_gs_enter_gs_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const void* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:c_gs_enter_gs_req)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_enter_gs_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_enter_gs_res : public ::google::protobuf::Message {
 public:
  gs_c_enter_gs_res();
  virtual ~gs_c_enter_gs_res();

  gs_c_enter_gs_res(const gs_c_enter_gs_res& from);

  inline gs_c_enter_gs_res& operator=(const gs_c_enter_gs_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_enter_gs_res& default_instance();

  void Swap(gs_c_enter_gs_res* other);

  // implements Message ----------------------------------------------

  gs_c_enter_gs_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_enter_gs_res& from);
  void MergeFrom(const gs_c_enter_gs_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 proto_version = 2;
  inline bool has_proto_version() const;
  inline void clear_proto_version();
  static const int kProtoVersionFieldNumber = 2;
  inline ::google::protobuf::uint32 proto_version() const;
  inline void set_proto_version(::google::protobuf::uint32 value);

  // optional uint32 server_timestamp = 3;
  inline bool has_server_timestamp() const;
  inline void clear_server_timestamp();
  static const int kServerTimestampFieldNumber = 3;
  inline ::google::protobuf::uint32 server_timestamp() const;
  inline void set_server_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_enter_gs_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_proto_version();
  inline void clear_has_proto_version();
  inline void set_has_server_timestamp();
  inline void clear_has_server_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 proto_version_;
  ::google::protobuf::uint32 server_timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_enter_gs_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_leave_gs_req : public ::google::protobuf::Message {
 public:
  c_gs_leave_gs_req();
  virtual ~c_gs_leave_gs_req();

  c_gs_leave_gs_req(const c_gs_leave_gs_req& from);

  inline c_gs_leave_gs_req& operator=(const c_gs_leave_gs_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_leave_gs_req& default_instance();

  void Swap(c_gs_leave_gs_req* other);

  // implements Message ----------------------------------------------

  c_gs_leave_gs_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_leave_gs_req& from);
  void MergeFrom(const c_gs_leave_gs_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_leave_gs_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_leave_gs_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_leave_gs_res : public ::google::protobuf::Message {
 public:
  gs_c_leave_gs_res();
  virtual ~gs_c_leave_gs_res();

  gs_c_leave_gs_res(const gs_c_leave_gs_res& from);

  inline gs_c_leave_gs_res& operator=(const gs_c_leave_gs_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_leave_gs_res& default_instance();

  void Swap(gs_c_leave_gs_res* other);

  // implements Message ----------------------------------------------

  gs_c_leave_gs_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_leave_gs_res& from);
  void MergeFrom(const gs_c_leave_gs_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_leave_gs_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_leave_gs_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_json_config_version_req : public ::google::protobuf::Message {
 public:
  c_gs_json_config_version_req();
  virtual ~c_gs_json_config_version_req();

  c_gs_json_config_version_req(const c_gs_json_config_version_req& from);

  inline c_gs_json_config_version_req& operator=(const c_gs_json_config_version_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_json_config_version_req& default_instance();

  void Swap(c_gs_json_config_version_req* other);

  // implements Message ----------------------------------------------

  c_gs_json_config_version_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_json_config_version_req& from);
  void MergeFrom(const c_gs_json_config_version_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_json_config_version_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_json_config_version_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_json_config_version_res_config_version : public ::google::protobuf::Message {
 public:
  gs_c_json_config_version_res_config_version();
  virtual ~gs_c_json_config_version_res_config_version();

  gs_c_json_config_version_res_config_version(const gs_c_json_config_version_res_config_version& from);

  inline gs_c_json_config_version_res_config_version& operator=(const gs_c_json_config_version_res_config_version& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_json_config_version_res_config_version& default_instance();

  void Swap(gs_c_json_config_version_res_config_version* other);

  // implements Message ----------------------------------------------

  gs_c_json_config_version_res_config_version* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_json_config_version_res_config_version& from);
  void MergeFrom(const gs_c_json_config_version_res_config_version& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string md5 = 2;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 2;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // @@protoc_insertion_point(class_scope:gs_c_json_config_version_res.config_version)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_md5();
  inline void clear_has_md5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* md5_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_json_config_version_res_config_version* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_json_config_version_res : public ::google::protobuf::Message {
 public:
  gs_c_json_config_version_res();
  virtual ~gs_c_json_config_version_res();

  gs_c_json_config_version_res(const gs_c_json_config_version_res& from);

  inline gs_c_json_config_version_res& operator=(const gs_c_json_config_version_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_json_config_version_res& default_instance();

  void Swap(gs_c_json_config_version_res* other);

  // implements Message ----------------------------------------------

  gs_c_json_config_version_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_json_config_version_res& from);
  void MergeFrom(const gs_c_json_config_version_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gs_c_json_config_version_res_config_version config_version;

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .gs_c_json_config_version_res.config_version versions = 2;
  inline int versions_size() const;
  inline void clear_versions();
  static const int kVersionsFieldNumber = 2;
  inline const ::gs_c_json_config_version_res_config_version& versions(int index) const;
  inline ::gs_c_json_config_version_res_config_version* mutable_versions(int index);
  inline ::gs_c_json_config_version_res_config_version* add_versions();
  inline const ::google::protobuf::RepeatedPtrField< ::gs_c_json_config_version_res_config_version >&
      versions() const;
  inline ::google::protobuf::RepeatedPtrField< ::gs_c_json_config_version_res_config_version >*
      mutable_versions();

  // @@protoc_insertion_point(class_scope:gs_c_json_config_version_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::gs_c_json_config_version_res_config_version > versions_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_json_config_version_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_json_config_req : public ::google::protobuf::Message {
 public:
  c_gs_json_config_req();
  virtual ~c_gs_json_config_req();

  c_gs_json_config_req(const c_gs_json_config_req& from);

  inline c_gs_json_config_req& operator=(const c_gs_json_config_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_json_config_req& default_instance();

  void Swap(c_gs_json_config_req* other);

  // implements Message ----------------------------------------------

  c_gs_json_config_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_json_config_req& from);
  void MergeFrom(const c_gs_json_config_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 1;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 1;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:c_gs_json_config_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> names_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_json_config_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_json_config_res_config : public ::google::protobuf::Message {
 public:
  gs_c_json_config_res_config();
  virtual ~gs_c_json_config_res_config();

  gs_c_json_config_res_config(const gs_c_json_config_res_config& from);

  inline gs_c_json_config_res_config& operator=(const gs_c_json_config_res_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_json_config_res_config& default_instance();

  void Swap(gs_c_json_config_res_config* other);

  // implements Message ----------------------------------------------

  gs_c_json_config_res_config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_json_config_res_config& from);
  void MergeFrom(const gs_c_json_config_res_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string md5 = 2;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 2;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // required string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:gs_c_json_config_res.config)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* md5_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_json_config_res_config* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_json_config_res : public ::google::protobuf::Message {
 public:
  gs_c_json_config_res();
  virtual ~gs_c_json_config_res();

  gs_c_json_config_res(const gs_c_json_config_res& from);

  inline gs_c_json_config_res& operator=(const gs_c_json_config_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_json_config_res& default_instance();

  void Swap(gs_c_json_config_res* other);

  // implements Message ----------------------------------------------

  gs_c_json_config_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_json_config_res& from);
  void MergeFrom(const gs_c_json_config_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gs_c_json_config_res_config config;

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .gs_c_json_config_res.config configs = 2;
  inline int configs_size() const;
  inline void clear_configs();
  static const int kConfigsFieldNumber = 2;
  inline const ::gs_c_json_config_res_config& configs(int index) const;
  inline ::gs_c_json_config_res_config* mutable_configs(int index);
  inline ::gs_c_json_config_res_config* add_configs();
  inline const ::google::protobuf::RepeatedPtrField< ::gs_c_json_config_res_config >&
      configs() const;
  inline ::google::protobuf::RepeatedPtrField< ::gs_c_json_config_res_config >*
      mutable_configs();

  // @@protoc_insertion_point(class_scope:gs_c_json_config_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::gs_c_json_config_res_config > configs_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_json_config_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_config_req : public ::google::protobuf::Message {
 public:
  c_gs_config_req();
  virtual ~c_gs_config_req();

  c_gs_config_req(const c_gs_config_req& from);

  inline c_gs_config_req& operator=(const c_gs_config_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_config_req& default_instance();

  void Swap(c_gs_config_req* other);

  // implements Message ----------------------------------------------

  c_gs_config_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_config_req& from);
  void MergeFrom(const c_gs_config_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_config_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_config_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_config_res : public ::google::protobuf::Message {
 public:
  gs_c_config_res();
  virtual ~gs_c_config_res();

  gs_c_config_res(const gs_c_config_res& from);

  inline gs_c_config_res& operator=(const gs_c_config_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_config_res& default_instance();

  void Swap(gs_c_config_res* other);

  // implements Message ----------------------------------------------

  gs_c_config_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_config_res& from);
  void MergeFrom(const gs_c_config_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional .CHAPTERMAP_ARRAY chapter_map = 2;
  inline bool has_chapter_map() const;
  inline void clear_chapter_map();
  static const int kChapterMapFieldNumber = 2;
  inline const ::CHAPTERMAP_ARRAY& chapter_map() const;
  inline ::CHAPTERMAP_ARRAY* mutable_chapter_map();
  inline ::CHAPTERMAP_ARRAY* release_chapter_map();
  inline void set_allocated_chapter_map(::CHAPTERMAP_ARRAY* chapter_map);

  // optional .TASK_ARRAY task = 3;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 3;
  inline const ::TASK_ARRAY& task() const;
  inline ::TASK_ARRAY* mutable_task();
  inline ::TASK_ARRAY* release_task();
  inline void set_allocated_task(::TASK_ARRAY* task);

  // optional .SUBTASK_ARRAY sub_task = 4;
  inline bool has_sub_task() const;
  inline void clear_sub_task();
  static const int kSubTaskFieldNumber = 4;
  inline const ::SUBTASK_ARRAY& sub_task() const;
  inline ::SUBTASK_ARRAY* mutable_sub_task();
  inline ::SUBTASK_ARRAY* release_sub_task();
  inline void set_allocated_sub_task(::SUBTASK_ARRAY* sub_task);

  // optional .BATTLE_ARRAY battle = 5;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 5;
  inline const ::BATTLE_ARRAY& battle() const;
  inline ::BATTLE_ARRAY* mutable_battle();
  inline ::BATTLE_ARRAY* release_battle();
  inline void set_allocated_battle(::BATTLE_ARRAY* battle);

  // optional .HEROPROP_ARRAY hero_prop = 6;
  inline bool has_hero_prop() const;
  inline void clear_hero_prop();
  static const int kHeroPropFieldNumber = 6;
  inline const ::HEROPROP_ARRAY& hero_prop() const;
  inline ::HEROPROP_ARRAY* mutable_hero_prop();
  inline ::HEROPROP_ARRAY* release_hero_prop();
  inline void set_allocated_hero_prop(::HEROPROP_ARRAY* hero_prop);

  // optional .BOSSPROP_ARRAY boss_prop = 7;
  inline bool has_boss_prop() const;
  inline void clear_boss_prop();
  static const int kBossPropFieldNumber = 7;
  inline const ::BOSSPROP_ARRAY& boss_prop() const;
  inline ::BOSSPROP_ARRAY* mutable_boss_prop();
  inline ::BOSSPROP_ARRAY* release_boss_prop();
  inline void set_allocated_boss_prop(::BOSSPROP_ARRAY* boss_prop);

  // optional .MONSTERPROP_ARRAY monster_prop = 8;
  inline bool has_monster_prop() const;
  inline void clear_monster_prop();
  static const int kMonsterPropFieldNumber = 8;
  inline const ::MONSTERPROP_ARRAY& monster_prop() const;
  inline ::MONSTERPROP_ARRAY* mutable_monster_prop();
  inline ::MONSTERPROP_ARRAY* release_monster_prop();
  inline void set_allocated_monster_prop(::MONSTERPROP_ARRAY* monster_prop);

  // optional .EQUIP_ARRAY equip = 9;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 9;
  inline const ::EQUIP_ARRAY& equip() const;
  inline ::EQUIP_ARRAY* mutable_equip();
  inline ::EQUIP_ARRAY* release_equip();
  inline void set_allocated_equip(::EQUIP_ARRAY* equip);

  // optional .AOYI_ARRAY aoyi = 10;
  inline bool has_aoyi() const;
  inline void clear_aoyi();
  static const int kAoyiFieldNumber = 10;
  inline const ::AOYI_ARRAY& aoyi() const;
  inline ::AOYI_ARRAY* mutable_aoyi();
  inline ::AOYI_ARRAY* release_aoyi();
  inline void set_allocated_aoyi(::AOYI_ARRAY* aoyi);

  // optional .BAG_ARRAY bag = 11;
  inline bool has_bag() const;
  inline void clear_bag();
  static const int kBagFieldNumber = 11;
  inline const ::BAG_ARRAY& bag() const;
  inline ::BAG_ARRAY* mutable_bag();
  inline ::BAG_ARRAY* release_bag();
  inline void set_allocated_bag(::BAG_ARRAY* bag);

  // optional .PASSIVE_ARRAY passive = 12;
  inline bool has_passive() const;
  inline void clear_passive();
  static const int kPassiveFieldNumber = 12;
  inline const ::PASSIVE_ARRAY& passive() const;
  inline ::PASSIVE_ARRAY* mutable_passive();
  inline ::PASSIVE_ARRAY* release_passive();
  inline void set_allocated_passive(::PASSIVE_ARRAY* passive);

  // optional .TRIGGERSTARTCONDITION_ARRAY trigger_start_condition = 13;
  inline bool has_trigger_start_condition() const;
  inline void clear_trigger_start_condition();
  static const int kTriggerStartConditionFieldNumber = 13;
  inline const ::TRIGGERSTARTCONDITION_ARRAY& trigger_start_condition() const;
  inline ::TRIGGERSTARTCONDITION_ARRAY* mutable_trigger_start_condition();
  inline ::TRIGGERSTARTCONDITION_ARRAY* release_trigger_start_condition();
  inline void set_allocated_trigger_start_condition(::TRIGGERSTARTCONDITION_ARRAY* trigger_start_condition);

  // optional .REALTIMECHECK_ARRAY realtime_check = 14;
  inline bool has_realtime_check() const;
  inline void clear_realtime_check();
  static const int kRealtimeCheckFieldNumber = 14;
  inline const ::REALTIMECHECK_ARRAY& realtime_check() const;
  inline ::REALTIMECHECK_ARRAY* mutable_realtime_check();
  inline ::REALTIMECHECK_ARRAY* release_realtime_check();
  inline void set_allocated_realtime_check(::REALTIMECHECK_ARRAY* realtime_check);

  // optional .TRIGGERATTACK_ARRAY trigger_attack = 15;
  inline bool has_trigger_attack() const;
  inline void clear_trigger_attack();
  static const int kTriggerAttackFieldNumber = 15;
  inline const ::TRIGGERATTACK_ARRAY& trigger_attack() const;
  inline ::TRIGGERATTACK_ARRAY* mutable_trigger_attack();
  inline ::TRIGGERATTACK_ARRAY* release_trigger_attack();
  inline void set_allocated_trigger_attack(::TRIGGERATTACK_ARRAY* trigger_attack);

  // optional .BUFF_ARRAY buff = 16;
  inline bool has_buff() const;
  inline void clear_buff();
  static const int kBuffFieldNumber = 16;
  inline const ::BUFF_ARRAY& buff() const;
  inline ::BUFF_ARRAY* mutable_buff();
  inline ::BUFF_ARRAY* release_buff();
  inline void set_allocated_buff(::BUFF_ARRAY* buff);

  // optional .HEROSKILL_ARRAY hero_skill = 17;
  inline bool has_hero_skill() const;
  inline void clear_hero_skill();
  static const int kHeroSkillFieldNumber = 17;
  inline const ::HEROSKILL_ARRAY& hero_skill() const;
  inline ::HEROSKILL_ARRAY* mutable_hero_skill();
  inline ::HEROSKILL_ARRAY* release_hero_skill();
  inline void set_allocated_hero_skill(::HEROSKILL_ARRAY* hero_skill);

  // optional .BOSSSKILL_ARRAY boss_skill = 18;
  inline bool has_boss_skill() const;
  inline void clear_boss_skill();
  static const int kBossSkillFieldNumber = 18;
  inline const ::BOSSSKILL_ARRAY& boss_skill() const;
  inline ::BOSSSKILL_ARRAY* mutable_boss_skill();
  inline ::BOSSSKILL_ARRAY* release_boss_skill();
  inline void set_allocated_boss_skill(::BOSSSKILL_ARRAY* boss_skill);

  // optional .COINPRICE_ARRAY coin_price = 19;
  inline bool has_coin_price() const;
  inline void clear_coin_price();
  static const int kCoinPriceFieldNumber = 19;
  inline const ::COINPRICE_ARRAY& coin_price() const;
  inline ::COINPRICE_ARRAY* mutable_coin_price();
  inline ::COINPRICE_ARRAY* release_coin_price();
  inline void set_allocated_coin_price(::COINPRICE_ARRAY* coin_price);

  // optional .RESETPRICE_ARRAY reset_price = 20;
  inline bool has_reset_price() const;
  inline void clear_reset_price();
  static const int kResetPriceFieldNumber = 20;
  inline const ::RESETPRICE_ARRAY& reset_price() const;
  inline ::RESETPRICE_ARRAY* mutable_reset_price();
  inline ::RESETPRICE_ARRAY* release_reset_price();
  inline void set_allocated_reset_price(::RESETPRICE_ARRAY* reset_price);

  // optional .SPPRICE_ARRAY spprice = 21;
  inline bool has_spprice() const;
  inline void clear_spprice();
  static const int kSppriceFieldNumber = 21;
  inline const ::SPPRICE_ARRAY& spprice() const;
  inline ::SPPRICE_ARRAY* mutable_spprice();
  inline ::SPPRICE_ARRAY* release_spprice();
  inline void set_allocated_spprice(::SPPRICE_ARRAY* spprice);

  // optional .STAPRICE_ARRAY staprice = 22;
  inline bool has_staprice() const;
  inline void clear_staprice();
  static const int kStapriceFieldNumber = 22;
  inline const ::STAPRICE_ARRAY& staprice() const;
  inline ::STAPRICE_ARRAY* mutable_staprice();
  inline ::STAPRICE_ARRAY* release_staprice();
  inline void set_allocated_staprice(::STAPRICE_ARRAY* staprice);

  // optional .VIP_ARRAY vip = 23;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 23;
  inline const ::VIP_ARRAY& vip() const;
  inline ::VIP_ARRAY* mutable_vip();
  inline ::VIP_ARRAY* release_vip();
  inline void set_allocated_vip(::VIP_ARRAY* vip);

  // optional .VIPFUNCTION_ARRAY vip_function = 24;
  inline bool has_vip_function() const;
  inline void clear_vip_function();
  static const int kVipFunctionFieldNumber = 24;
  inline const ::VIPFUNCTION_ARRAY& vip_function() const;
  inline ::VIPFUNCTION_ARRAY* mutable_vip_function();
  inline ::VIPFUNCTION_ARRAY* release_vip_function();
  inline void set_allocated_vip_function(::VIPFUNCTION_ARRAY* vip_function);

  // optional .SHOPRESETPRICE_ARRAY shop_resetprice = 25;
  inline bool has_shop_resetprice() const;
  inline void clear_shop_resetprice();
  static const int kShopResetpriceFieldNumber = 25;
  inline const ::SHOPRESETPRICE_ARRAY& shop_resetprice() const;
  inline ::SHOPRESETPRICE_ARRAY* mutable_shop_resetprice();
  inline ::SHOPRESETPRICE_ARRAY* release_shop_resetprice();
  inline void set_allocated_shop_resetprice(::SHOPRESETPRICE_ARRAY* shop_resetprice);

  // optional .PRIZESHOW_ARRAY prize_show = 26;
  inline bool has_prize_show() const;
  inline void clear_prize_show();
  static const int kPrizeShowFieldNumber = 26;
  inline const ::PRIZESHOW_ARRAY& prize_show() const;
  inline ::PRIZESHOW_ARRAY* mutable_prize_show();
  inline ::PRIZESHOW_ARRAY* release_prize_show();
  inline void set_allocated_prize_show(::PRIZESHOW_ARRAY* prize_show);

  // optional .HEROSTAR_ARRAY hero_star = 27;
  inline bool has_hero_star() const;
  inline void clear_hero_star();
  static const int kHeroStarFieldNumber = 27;
  inline const ::HEROSTAR_ARRAY& hero_star() const;
  inline ::HEROSTAR_ARRAY* mutable_hero_star();
  inline ::HEROSTAR_ARRAY* release_hero_star();
  inline void set_allocated_hero_star(::HEROSTAR_ARRAY* hero_star);

  // optional .EVOLUTIONCOIN_ARRAY evolution_coin = 28;
  inline bool has_evolution_coin() const;
  inline void clear_evolution_coin();
  static const int kEvolutionCoinFieldNumber = 28;
  inline const ::EVOLUTIONCOIN_ARRAY& evolution_coin() const;
  inline ::EVOLUTIONCOIN_ARRAY* mutable_evolution_coin();
  inline ::EVOLUTIONCOIN_ARRAY* release_evolution_coin();
  inline void set_allocated_evolution_coin(::EVOLUTIONCOIN_ARRAY* evolution_coin);

  // optional .QUALITYRULE_ARRAY quality_rule = 29;
  inline bool has_quality_rule() const;
  inline void clear_quality_rule();
  static const int kQualityRuleFieldNumber = 29;
  inline const ::QUALITYRULE_ARRAY& quality_rule() const;
  inline ::QUALITYRULE_ARRAY* mutable_quality_rule();
  inline ::QUALITYRULE_ARRAY* release_quality_rule();
  inline void set_allocated_quality_rule(::QUALITYRULE_ARRAY* quality_rule);

  // optional .RULE_ARRAY rule = 30;
  inline bool has_rule() const;
  inline void clear_rule();
  static const int kRuleFieldNumber = 30;
  inline const ::RULE_ARRAY& rule() const;
  inline ::RULE_ARRAY* mutable_rule();
  inline ::RULE_ARRAY* release_rule();
  inline void set_allocated_rule(::RULE_ARRAY* rule);

  // @@protoc_insertion_point(class_scope:gs_c_config_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_chapter_map();
  inline void clear_has_chapter_map();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_sub_task();
  inline void clear_has_sub_task();
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_hero_prop();
  inline void clear_has_hero_prop();
  inline void set_has_boss_prop();
  inline void clear_has_boss_prop();
  inline void set_has_monster_prop();
  inline void clear_has_monster_prop();
  inline void set_has_equip();
  inline void clear_has_equip();
  inline void set_has_aoyi();
  inline void clear_has_aoyi();
  inline void set_has_bag();
  inline void clear_has_bag();
  inline void set_has_passive();
  inline void clear_has_passive();
  inline void set_has_trigger_start_condition();
  inline void clear_has_trigger_start_condition();
  inline void set_has_realtime_check();
  inline void clear_has_realtime_check();
  inline void set_has_trigger_attack();
  inline void clear_has_trigger_attack();
  inline void set_has_buff();
  inline void clear_has_buff();
  inline void set_has_hero_skill();
  inline void clear_has_hero_skill();
  inline void set_has_boss_skill();
  inline void clear_has_boss_skill();
  inline void set_has_coin_price();
  inline void clear_has_coin_price();
  inline void set_has_reset_price();
  inline void clear_has_reset_price();
  inline void set_has_spprice();
  inline void clear_has_spprice();
  inline void set_has_staprice();
  inline void clear_has_staprice();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_vip_function();
  inline void clear_has_vip_function();
  inline void set_has_shop_resetprice();
  inline void clear_has_shop_resetprice();
  inline void set_has_prize_show();
  inline void clear_has_prize_show();
  inline void set_has_hero_star();
  inline void clear_has_hero_star();
  inline void set_has_evolution_coin();
  inline void clear_has_evolution_coin();
  inline void set_has_quality_rule();
  inline void clear_has_quality_rule();
  inline void set_has_rule();
  inline void clear_has_rule();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CHAPTERMAP_ARRAY* chapter_map_;
  ::TASK_ARRAY* task_;
  ::SUBTASK_ARRAY* sub_task_;
  ::BATTLE_ARRAY* battle_;
  ::HEROPROP_ARRAY* hero_prop_;
  ::BOSSPROP_ARRAY* boss_prop_;
  ::MONSTERPROP_ARRAY* monster_prop_;
  ::EQUIP_ARRAY* equip_;
  ::AOYI_ARRAY* aoyi_;
  ::BAG_ARRAY* bag_;
  ::PASSIVE_ARRAY* passive_;
  ::TRIGGERSTARTCONDITION_ARRAY* trigger_start_condition_;
  ::REALTIMECHECK_ARRAY* realtime_check_;
  ::TRIGGERATTACK_ARRAY* trigger_attack_;
  ::BUFF_ARRAY* buff_;
  ::HEROSKILL_ARRAY* hero_skill_;
  ::BOSSSKILL_ARRAY* boss_skill_;
  ::COINPRICE_ARRAY* coin_price_;
  ::RESETPRICE_ARRAY* reset_price_;
  ::SPPRICE_ARRAY* spprice_;
  ::STAPRICE_ARRAY* staprice_;
  ::VIP_ARRAY* vip_;
  ::VIPFUNCTION_ARRAY* vip_function_;
  ::SHOPRESETPRICE_ARRAY* shop_resetprice_;
  ::PRIZESHOW_ARRAY* prize_show_;
  ::HEROSTAR_ARRAY* hero_star_;
  ::EVOLUTIONCOIN_ARRAY* evolution_coin_;
  ::QUALITYRULE_ARRAY* quality_rule_;
  ::RULE_ARRAY* rule_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(30 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_config_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_user_info_req : public ::google::protobuf::Message {
 public:
  c_gs_user_info_req();
  virtual ~c_gs_user_info_req();

  c_gs_user_info_req(const c_gs_user_info_req& from);

  inline c_gs_user_info_req& operator=(const c_gs_user_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_user_info_req& default_instance();

  void Swap(c_gs_user_info_req* other);

  // implements Message ----------------------------------------------

  c_gs_user_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_user_info_req& from);
  void MergeFrom(const c_gs_user_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_user_info_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_user_info_req* default_instance_;
};
// -------------------------------------------------------------------

class user_sub_task : public ::google::protobuf::Message {
 public:
  user_sub_task();
  virtual ~user_sub_task();

  user_sub_task(const user_sub_task& from);

  inline user_sub_task& operator=(const user_sub_task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_sub_task& default_instance();

  void Swap(user_sub_task* other);

  // implements Message ----------------------------------------------

  user_sub_task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_sub_task& from);
  void MergeFrom(const user_sub_task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sub_task_id = 1;
  inline bool has_sub_task_id() const;
  inline void clear_sub_task_id();
  static const int kSubTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sub_task_id() const;
  inline void set_sub_task_id(::google::protobuf::uint32 value);

  // required uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // required uint32 last_enter_time = 3;
  inline bool has_last_enter_time() const;
  inline void clear_last_enter_time();
  static const int kLastEnterTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 last_enter_time() const;
  inline void set_last_enter_time(::google::protobuf::uint32 value);

  // required uint32 last_day_enter_num = 4;
  inline bool has_last_day_enter_num() const;
  inline void clear_last_day_enter_num();
  static const int kLastDayEnterNumFieldNumber = 4;
  inline ::google::protobuf::uint32 last_day_enter_num() const;
  inline void set_last_day_enter_num(::google::protobuf::uint32 value);

  // required uint32 total_enter_num = 5;
  inline bool has_total_enter_num() const;
  inline void clear_total_enter_num();
  static const int kTotalEnterNumFieldNumber = 5;
  inline ::google::protobuf::uint32 total_enter_num() const;
  inline void set_total_enter_num(::google::protobuf::uint32 value);

  // required uint32 last_reset_time = 6;
  inline bool has_last_reset_time() const;
  inline void clear_last_reset_time();
  static const int kLastResetTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 last_reset_time() const;
  inline void set_last_reset_time(::google::protobuf::uint32 value);

  // required uint32 last_day_reset_num = 7;
  inline bool has_last_day_reset_num() const;
  inline void clear_last_day_reset_num();
  static const int kLastDayResetNumFieldNumber = 7;
  inline ::google::protobuf::uint32 last_day_reset_num() const;
  inline void set_last_day_reset_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user_sub_task)
 private:
  inline void set_has_sub_task_id();
  inline void clear_has_sub_task_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_last_enter_time();
  inline void clear_has_last_enter_time();
  inline void set_has_last_day_enter_num();
  inline void clear_has_last_day_enter_num();
  inline void set_has_total_enter_num();
  inline void clear_has_total_enter_num();
  inline void set_has_last_reset_time();
  inline void clear_has_last_reset_time();
  inline void set_has_last_day_reset_num();
  inline void clear_has_last_day_reset_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sub_task_id_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 last_enter_time_;
  ::google::protobuf::uint32 last_day_enter_num_;
  ::google::protobuf::uint32 total_enter_num_;
  ::google::protobuf::uint32 last_reset_time_;
  ::google::protobuf::uint32 last_day_reset_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_sub_task* default_instance_;
};
// -------------------------------------------------------------------

class user_sub_task_array : public ::google::protobuf::Message {
 public:
  user_sub_task_array();
  virtual ~user_sub_task_array();

  user_sub_task_array(const user_sub_task_array& from);

  inline user_sub_task_array& operator=(const user_sub_task_array& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_sub_task_array& default_instance();

  void Swap(user_sub_task_array* other);

  // implements Message ----------------------------------------------

  user_sub_task_array* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_sub_task_array& from);
  void MergeFrom(const user_sub_task_array& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .user_sub_task items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::user_sub_task& items(int index) const;
  inline ::user_sub_task* mutable_items(int index);
  inline ::user_sub_task* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::user_sub_task >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_sub_task >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:user_sub_task_array)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::user_sub_task > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_sub_task_array* default_instance_;
};
// -------------------------------------------------------------------

class user_hero_equip : public ::google::protobuf::Message {
 public:
  user_hero_equip();
  virtual ~user_hero_equip();

  user_hero_equip(const user_hero_equip& from);

  inline user_hero_equip& operator=(const user_hero_equip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_hero_equip& default_instance();

  void Swap(user_hero_equip* other);

  // implements Message ----------------------------------------------

  user_hero_equip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_hero_equip& from);
  void MergeFrom(const user_hero_equip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 equip_id = 1 [default = 0];
  inline bool has_equip_id() const;
  inline void clear_equip_id();
  static const int kEquipIdFieldNumber = 1;
  inline ::google::protobuf::uint32 equip_id() const;
  inline void set_equip_id(::google::protobuf::uint32 value);

  // required uint32 level = 2 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user_hero_equip)
 private:
  inline void set_has_equip_id();
  inline void clear_has_equip_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 equip_id_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_hero_equip* default_instance_;
};
// -------------------------------------------------------------------

class user_hero_skill : public ::google::protobuf::Message {
 public:
  user_hero_skill();
  virtual ~user_hero_skill();

  user_hero_skill(const user_hero_skill& from);

  inline user_hero_skill& operator=(const user_hero_skill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_hero_skill& default_instance();

  void Swap(user_hero_skill* other);

  // implements Message ----------------------------------------------

  user_hero_skill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_hero_skill& from);
  void MergeFrom(const user_hero_skill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef user_hero_skill_e_skill_type e_skill_type;
  static const e_skill_type BISHA = user_hero_skill_e_skill_type_BISHA;
  static const e_skill_type AOYI = user_hero_skill_e_skill_type_AOYI;
  static const e_skill_type PASSIVE1 = user_hero_skill_e_skill_type_PASSIVE1;
  static const e_skill_type PASSIVE2 = user_hero_skill_e_skill_type_PASSIVE2;
  static const e_skill_type PASSIVE3 = user_hero_skill_e_skill_type_PASSIVE3;
  static inline bool e_skill_type_IsValid(int value) {
    return user_hero_skill_e_skill_type_IsValid(value);
  }
  static const e_skill_type e_skill_type_MIN =
    user_hero_skill_e_skill_type_e_skill_type_MIN;
  static const e_skill_type e_skill_type_MAX =
    user_hero_skill_e_skill_type_e_skill_type_MAX;
  static const int e_skill_type_ARRAYSIZE =
    user_hero_skill_e_skill_type_e_skill_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  e_skill_type_descriptor() {
    return user_hero_skill_e_skill_type_descriptor();
  }
  static inline const ::std::string& e_skill_type_Name(e_skill_type value) {
    return user_hero_skill_e_skill_type_Name(value);
  }
  static inline bool e_skill_type_Parse(const ::std::string& name,
      e_skill_type* value) {
    return user_hero_skill_e_skill_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .user_hero_skill.e_skill_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::user_hero_skill_e_skill_type type() const;
  inline void set_type(::user_hero_skill_e_skill_type value);

  // required uint32 level = 2 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user_hero_skill)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_hero_skill* default_instance_;
};
// -------------------------------------------------------------------

class user_hero : public ::google::protobuf::Message {
 public:
  user_hero();
  virtual ~user_hero();

  user_hero(const user_hero& from);

  inline user_hero& operator=(const user_hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_hero& default_instance();

  void Swap(user_hero* other);

  // implements Message ----------------------------------------------

  user_hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_hero& from);
  void MergeFrom(const user_hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_id = 1 [default = 0];
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // required uint32 star = 2 [default = 0];
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // required uint32 quality = 3 [default = 0];
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // required uint32 level = 4 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 cur_exp = 5 [default = 0];
  inline bool has_cur_exp() const;
  inline void clear_cur_exp();
  static const int kCurExpFieldNumber = 5;
  inline ::google::protobuf::uint32 cur_exp() const;
  inline void set_cur_exp(::google::protobuf::uint32 value);

  // required uint32 got_timestamp = 6 [default = 0];
  inline bool has_got_timestamp() const;
  inline void clear_got_timestamp();
  static const int kGotTimestampFieldNumber = 6;
  inline ::google::protobuf::uint32 got_timestamp() const;
  inline void set_got_timestamp(::google::protobuf::uint32 value);

  // repeated .user_hero_equip equips = 7;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 7;
  inline const ::user_hero_equip& equips(int index) const;
  inline ::user_hero_equip* mutable_equips(int index);
  inline ::user_hero_equip* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::user_hero_equip >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_hero_equip >*
      mutable_equips();

  // repeated .user_hero_skill skills = 8;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 8;
  inline const ::user_hero_skill& skills(int index) const;
  inline ::user_hero_skill* mutable_skills(int index);
  inline ::user_hero_skill* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::user_hero_skill >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_hero_skill >*
      mutable_skills();

  // @@protoc_insertion_point(class_scope:user_hero)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_cur_exp();
  inline void clear_has_cur_exp();
  inline void set_has_got_timestamp();
  inline void clear_has_got_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 cur_exp_;
  ::google::protobuf::uint32 got_timestamp_;
  ::google::protobuf::RepeatedPtrField< ::user_hero_equip > equips_;
  ::google::protobuf::RepeatedPtrField< ::user_hero_skill > skills_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_hero* default_instance_;
};
// -------------------------------------------------------------------

class user_hero_array : public ::google::protobuf::Message {
 public:
  user_hero_array();
  virtual ~user_hero_array();

  user_hero_array(const user_hero_array& from);

  inline user_hero_array& operator=(const user_hero_array& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_hero_array& default_instance();

  void Swap(user_hero_array* other);

  // implements Message ----------------------------------------------

  user_hero_array* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_hero_array& from);
  void MergeFrom(const user_hero_array& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .user_hero items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::user_hero& items(int index) const;
  inline ::user_hero* mutable_items(int index);
  inline ::user_hero* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::user_hero >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_hero >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:user_hero_array)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::user_hero > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_hero_array* default_instance_;
};
// -------------------------------------------------------------------

class user_base_info : public ::google::protobuf::Message {
 public:
  user_base_info();
  virtual ~user_base_info();

  user_base_info(const user_base_info& from);

  inline user_base_info& operator=(const user_base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_base_info& default_instance();

  void Swap(user_base_info* other);

  // implements Message ----------------------------------------------

  user_base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_base_info& from);
  void MergeFrom(const user_base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // required uint32 vip = 5;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 5;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // required uint32 diamond = 6;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 6;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // required uint32 gold = 7;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 7;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // required uint32 health_cur = 8;
  inline bool has_health_cur() const;
  inline void clear_health_cur();
  static const int kHealthCurFieldNumber = 8;
  inline ::google::protobuf::uint32 health_cur() const;
  inline void set_health_cur(::google::protobuf::uint32 value);

  // required uint32 health_last_update_timestamp = 9;
  inline bool has_health_last_update_timestamp() const;
  inline void clear_health_last_update_timestamp();
  static const int kHealthLastUpdateTimestampFieldNumber = 9;
  inline ::google::protobuf::uint32 health_last_update_timestamp() const;
  inline void set_health_last_update_timestamp(::google::protobuf::uint32 value);

  // required uint32 skill_point = 10;
  inline bool has_skill_point() const;
  inline void clear_skill_point();
  static const int kSkillPointFieldNumber = 10;
  inline ::google::protobuf::uint32 skill_point() const;
  inline void set_skill_point(::google::protobuf::uint32 value);

  // required uint32 skill_point_last_update_timestamp = 11;
  inline bool has_skill_point_last_update_timestamp() const;
  inline void clear_skill_point_last_update_timestamp();
  static const int kSkillPointLastUpdateTimestampFieldNumber = 11;
  inline ::google::protobuf::uint32 skill_point_last_update_timestamp() const;
  inline void set_skill_point_last_update_timestamp(::google::protobuf::uint32 value);

  // required uint32 invoke_gold_free_left_num = 12;
  inline bool has_invoke_gold_free_left_num() const;
  inline void clear_invoke_gold_free_left_num();
  static const int kInvokeGoldFreeLeftNumFieldNumber = 12;
  inline ::google::protobuf::uint32 invoke_gold_free_left_num() const;
  inline void set_invoke_gold_free_left_num(::google::protobuf::uint32 value);

  // required uint32 invoke_gold_free_update_timestamp = 13;
  inline bool has_invoke_gold_free_update_timestamp() const;
  inline void clear_invoke_gold_free_update_timestamp();
  static const int kInvokeGoldFreeUpdateTimestampFieldNumber = 13;
  inline ::google::protobuf::uint32 invoke_gold_free_update_timestamp() const;
  inline void set_invoke_gold_free_update_timestamp(::google::protobuf::uint32 value);

  // required uint32 invoke_diamond_free_left_num = 14;
  inline bool has_invoke_diamond_free_left_num() const;
  inline void clear_invoke_diamond_free_left_num();
  static const int kInvokeDiamondFreeLeftNumFieldNumber = 14;
  inline ::google::protobuf::uint32 invoke_diamond_free_left_num() const;
  inline void set_invoke_diamond_free_left_num(::google::protobuf::uint32 value);

  // required uint32 invoke_diamond_free_update_timestamp = 15;
  inline bool has_invoke_diamond_free_update_timestamp() const;
  inline void clear_invoke_diamond_free_update_timestamp();
  static const int kInvokeDiamondFreeUpdateTimestampFieldNumber = 15;
  inline ::google::protobuf::uint32 invoke_diamond_free_update_timestamp() const;
  inline void set_invoke_diamond_free_update_timestamp(::google::protobuf::uint32 value);

  // required uint32 buy_used_times_gold = 16;
  inline bool has_buy_used_times_gold() const;
  inline void clear_buy_used_times_gold();
  static const int kBuyUsedTimesGoldFieldNumber = 16;
  inline ::google::protobuf::uint32 buy_used_times_gold() const;
  inline void set_buy_used_times_gold(::google::protobuf::uint32 value);

  // required uint32 buy_used_times_health = 17;
  inline bool has_buy_used_times_health() const;
  inline void clear_buy_used_times_health();
  static const int kBuyUsedTimesHealthFieldNumber = 17;
  inline ::google::protobuf::uint32 buy_used_times_health() const;
  inline void set_buy_used_times_health(::google::protobuf::uint32 value);

  // required uint32 buy_used_times_skill_point = 18;
  inline bool has_buy_used_times_skill_point() const;
  inline void clear_buy_used_times_skill_point();
  static const int kBuyUsedTimesSkillPointFieldNumber = 18;
  inline ::google::protobuf::uint32 buy_used_times_skill_point() const;
  inline void set_buy_used_times_skill_point(::google::protobuf::uint32 value);

  // required uint32 head_id = 19;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 19;
  inline ::google::protobuf::uint32 head_id() const;
  inline void set_head_id(::google::protobuf::uint32 value);

  // required uint32 head_frame_id = 20;
  inline bool has_head_frame_id() const;
  inline void clear_head_frame_id();
  static const int kHeadFrameIdFieldNumber = 20;
  inline ::google::protobuf::uint32 head_frame_id() const;
  inline void set_head_frame_id(::google::protobuf::uint32 value);

  // required uint32 friend_point = 21;
  inline bool has_friend_point() const;
  inline void clear_friend_point();
  static const int kFriendPointFieldNumber = 21;
  inline ::google::protobuf::uint32 friend_point() const;
  inline void set_friend_point(::google::protobuf::uint32 value);

  // required string signature = 22;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 22;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // required uint32 fight_power = 23;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 23;
  inline ::google::protobuf::uint32 fight_power() const;
  inline void set_fight_power(::google::protobuf::uint32 value);

  // required uint32 crusade_point = 24;
  inline bool has_crusade_point() const;
  inline void clear_crusade_point();
  static const int kCrusadePointFieldNumber = 24;
  inline ::google::protobuf::uint32 crusade_point() const;
  inline void set_crusade_point(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user_base_info)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_health_cur();
  inline void clear_has_health_cur();
  inline void set_has_health_last_update_timestamp();
  inline void clear_has_health_last_update_timestamp();
  inline void set_has_skill_point();
  inline void clear_has_skill_point();
  inline void set_has_skill_point_last_update_timestamp();
  inline void clear_has_skill_point_last_update_timestamp();
  inline void set_has_invoke_gold_free_left_num();
  inline void clear_has_invoke_gold_free_left_num();
  inline void set_has_invoke_gold_free_update_timestamp();
  inline void clear_has_invoke_gold_free_update_timestamp();
  inline void set_has_invoke_diamond_free_left_num();
  inline void clear_has_invoke_diamond_free_left_num();
  inline void set_has_invoke_diamond_free_update_timestamp();
  inline void clear_has_invoke_diamond_free_update_timestamp();
  inline void set_has_buy_used_times_gold();
  inline void clear_has_buy_used_times_gold();
  inline void set_has_buy_used_times_health();
  inline void clear_has_buy_used_times_health();
  inline void set_has_buy_used_times_skill_point();
  inline void clear_has_buy_used_times_skill_point();
  inline void set_has_head_id();
  inline void clear_has_head_id();
  inline void set_has_head_frame_id();
  inline void clear_has_head_frame_id();
  inline void set_has_friend_point();
  inline void clear_has_friend_point();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();
  inline void set_has_crusade_point();
  inline void clear_has_crusade_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 vip_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 health_cur_;
  ::google::protobuf::uint32 health_last_update_timestamp_;
  ::google::protobuf::uint32 skill_point_;
  ::google::protobuf::uint32 skill_point_last_update_timestamp_;
  ::google::protobuf::uint32 invoke_gold_free_left_num_;
  ::google::protobuf::uint32 invoke_gold_free_update_timestamp_;
  ::google::protobuf::uint32 invoke_diamond_free_left_num_;
  ::google::protobuf::uint32 invoke_diamond_free_update_timestamp_;
  ::google::protobuf::uint32 buy_used_times_gold_;
  ::google::protobuf::uint32 buy_used_times_health_;
  ::google::protobuf::uint32 buy_used_times_skill_point_;
  ::google::protobuf::uint32 head_id_;
  ::google::protobuf::uint32 head_frame_id_;
  ::google::protobuf::uint32 friend_point_;
  ::std::string* signature_;
  ::google::protobuf::uint32 fight_power_;
  ::google::protobuf::uint32 crusade_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_base_info* default_instance_;
};
// -------------------------------------------------------------------

class struct_game_element : public ::google::protobuf::Message {
 public:
  struct_game_element();
  virtual ~struct_game_element();

  struct_game_element(const struct_game_element& from);

  inline struct_game_element& operator=(const struct_game_element& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const struct_game_element& default_instance();

  void Swap(struct_game_element* other);

  // implements Message ----------------------------------------------

  struct_game_element* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const struct_game_element& from);
  void MergeFrom(const struct_game_element& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef struct_game_element_EELEMENTTYPE EELEMENTTYPE;
  static const EELEMENTTYPE EELEMENTTYPE_min = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_min;
  static const EELEMENTTYPE EELEMENTTYPE_SKILL = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_SKILL;
  static const EELEMENTTYPE EELEMENTTYPE_TASK = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_TASK;
  static const EELEMENTTYPE EELEMENTTYPE_SUB_TASK = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_SUB_TASK;
  static const EELEMENTTYPE EELEMENTTYPE_BATTLE = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_BATTLE;
  static const EELEMENTTYPE EELEMENTTYPE_HERO = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_HERO;
  static const EELEMENTTYPE EELEMENTTYPE_BOSS = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_BOSS;
  static const EELEMENTTYPE EELEMENTTYPE_MONSTER = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_MONSTER;
  static const EELEMENTTYPE EELEMENTTYPE_ITEM = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_ITEM;
  static const EELEMENTTYPE EELEMENTTYPE_EQUIP = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_EQUIP;
  static const EELEMENTTYPE EELEMENTTYPE_EXP = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_EXP;
  static const EELEMENTTYPE EELEMENTTYPE_GOLD = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_GOLD;
  static const EELEMENTTYPE EELEMENTTYPE_DIAMOND = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_DIAMOND;
  static const EELEMENTTYPE EELEMENTTYPE_HEALTH = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_HEALTH;
  static const EELEMENTTYPE EELEMENTTYPE_SKILL_POINT = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_SKILL_POINT;
  static const EELEMENTTYPE EELEMENTTYPE_ARENA_POINT = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_ARENA_POINT;
  static const EELEMENTTYPE EELEMENTTYPE_PACKET = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_PACKET;
  static const EELEMENTTYPE EELEMENTTYPE_INVOKE_GOLD_FREE = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_INVOKE_GOLD_FREE;
  static const EELEMENTTYPE EELEMENTTYPE_INVOKE_DIAMOND_FREE = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_INVOKE_DIAMOND_FREE;
  static const EELEMENTTYPE EELEMENTTYPE_PLAYER_LEVEL = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_PLAYER_LEVEL;
  static const EELEMENTTYPE EELEMENTTYPE_PLAYER_EXP = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_PLAYER_EXP;
  static const EELEMENTTYPE EELEMENTTYPE_HERO_LEVEL = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_HERO_LEVEL;
  static const EELEMENTTYPE EELEMENTTYPE_HERO_EXP = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_HERO_EXP;
  static const EELEMENTTYPE EELEMENTTYPE_SUB_TASK_ENTER_NUM = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_SUB_TASK_ENTER_NUM;
  static const EELEMENTTYPE EELEMENTTYPE_SUB_TASK_RESET_NUM = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_SUB_TASK_RESET_NUM;
  static const EELEMENTTYPE EELEMENTTYPE_FRIEND_POINT = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_FRIEND_POINT;
  static const EELEMENTTYPE EELEMENTTYPE_GUILD_CONTRIBUTION_POINT = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_GUILD_CONTRIBUTION_POINT;
  static const EELEMENTTYPE EELEMENTTYPE_GUILD_COIN = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_GUILD_COIN;
  static const EELEMENTTYPE EELEMENTTYPE_GUILD_MEMBER_CONTRIBUTION_POINT = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_GUILD_MEMBER_CONTRIBUTION_POINT;
  static const EELEMENTTYPE EELEMENTTYPE_GUILD_MEMBER_COIN = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_GUILD_MEMBER_COIN;
  static const EELEMENTTYPE EELEMENTTYPE_CRUSADE_POINT = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_CRUSADE_POINT;
  static const EELEMENTTYPE EELEMENTTYPE_max = struct_game_element_EELEMENTTYPE_EELEMENTTYPE_max;
  static inline bool EELEMENTTYPE_IsValid(int value) {
    return struct_game_element_EELEMENTTYPE_IsValid(value);
  }
  static const EELEMENTTYPE EELEMENTTYPE_MIN =
    struct_game_element_EELEMENTTYPE_EELEMENTTYPE_MIN;
  static const EELEMENTTYPE EELEMENTTYPE_MAX =
    struct_game_element_EELEMENTTYPE_EELEMENTTYPE_MAX;
  static const int EELEMENTTYPE_ARRAYSIZE =
    struct_game_element_EELEMENTTYPE_EELEMENTTYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EELEMENTTYPE_descriptor() {
    return struct_game_element_EELEMENTTYPE_descriptor();
  }
  static inline const ::std::string& EELEMENTTYPE_Name(EELEMENTTYPE value) {
    return struct_game_element_EELEMENTTYPE_Name(value);
  }
  static inline bool EELEMENTTYPE_Parse(const ::std::string& name,
      EELEMENTTYPE* value) {
    return struct_game_element_EELEMENTTYPE_Parse(name, value);
  }

  typedef struct_game_element_EELEMENT_NUM_TYPE EELEMENT_NUM_TYPE;
  static const EELEMENT_NUM_TYPE min = struct_game_element_EELEMENT_NUM_TYPE_min;
  static const EELEMENT_NUM_TYPE INCREASE = struct_game_element_EELEMENT_NUM_TYPE_INCREASE;
  static const EELEMENT_NUM_TYPE DECREASE = struct_game_element_EELEMENT_NUM_TYPE_DECREASE;
  static const EELEMENT_NUM_TYPE TOTAL = struct_game_element_EELEMENT_NUM_TYPE_TOTAL;
  static const EELEMENT_NUM_TYPE max = struct_game_element_EELEMENT_NUM_TYPE_max;
  static inline bool EELEMENT_NUM_TYPE_IsValid(int value) {
    return struct_game_element_EELEMENT_NUM_TYPE_IsValid(value);
  }
  static const EELEMENT_NUM_TYPE EELEMENT_NUM_TYPE_MIN =
    struct_game_element_EELEMENT_NUM_TYPE_EELEMENT_NUM_TYPE_MIN;
  static const EELEMENT_NUM_TYPE EELEMENT_NUM_TYPE_MAX =
    struct_game_element_EELEMENT_NUM_TYPE_EELEMENT_NUM_TYPE_MAX;
  static const int EELEMENT_NUM_TYPE_ARRAYSIZE =
    struct_game_element_EELEMENT_NUM_TYPE_EELEMENT_NUM_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EELEMENT_NUM_TYPE_descriptor() {
    return struct_game_element_EELEMENT_NUM_TYPE_descriptor();
  }
  static inline const ::std::string& EELEMENT_NUM_TYPE_Name(EELEMENT_NUM_TYPE value) {
    return struct_game_element_EELEMENT_NUM_TYPE_Name(value);
  }
  static inline bool EELEMENT_NUM_TYPE_Parse(const ::std::string& name,
      EELEMENT_NUM_TYPE* value) {
    return struct_game_element_EELEMENT_NUM_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .struct_game_element.EELEMENTTYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::struct_game_element_EELEMENTTYPE type() const;
  inline void set_type(::struct_game_element_EELEMENTTYPE value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 sub_id = 3;
  inline bool has_sub_id() const;
  inline void clear_sub_id();
  static const int kSubIdFieldNumber = 3;
  inline ::google::protobuf::uint32 sub_id() const;
  inline void set_sub_id(::google::protobuf::uint32 value);

  // required .struct_game_element.EELEMENT_NUM_TYPE num_type = 4;
  inline bool has_num_type() const;
  inline void clear_num_type();
  static const int kNumTypeFieldNumber = 4;
  inline ::struct_game_element_EELEMENT_NUM_TYPE num_type() const;
  inline void set_num_type(::struct_game_element_EELEMENT_NUM_TYPE value);

  // required uint32 num = 5;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 5;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:struct_game_element)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sub_id();
  inline void clear_has_sub_id();
  inline void set_has_num_type();
  inline void clear_has_num_type();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 sub_id_;
  int num_type_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static struct_game_element* default_instance_;
};
// -------------------------------------------------------------------

class user_shop_item : public ::google::protobuf::Message {
 public:
  user_shop_item();
  virtual ~user_shop_item();

  user_shop_item(const user_shop_item& from);

  inline user_shop_item& operator=(const user_shop_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_shop_item& default_instance();

  void Swap(user_shop_item* other);

  // implements Message ----------------------------------------------

  user_shop_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_shop_item& from);
  void MergeFrom(const user_shop_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef user_shop_item_ESHOPITEMFLAG ESHOPITEMFLAG;
  static const ESHOPITEMFLAG NONE = user_shop_item_ESHOPITEMFLAG_NONE;
  static const ESHOPITEMFLAG HOT = user_shop_item_ESHOPITEMFLAG_HOT;
  static const ESHOPITEMFLAG DISCOUNT = user_shop_item_ESHOPITEMFLAG_DISCOUNT;
  static const ESHOPITEMFLAG FLASHSALE = user_shop_item_ESHOPITEMFLAG_FLASHSALE;
  static const ESHOPITEMFLAG MAX = user_shop_item_ESHOPITEMFLAG_MAX;
  static inline bool ESHOPITEMFLAG_IsValid(int value) {
    return user_shop_item_ESHOPITEMFLAG_IsValid(value);
  }
  static const ESHOPITEMFLAG ESHOPITEMFLAG_MIN =
    user_shop_item_ESHOPITEMFLAG_ESHOPITEMFLAG_MIN;
  static const ESHOPITEMFLAG ESHOPITEMFLAG_MAX =
    user_shop_item_ESHOPITEMFLAG_ESHOPITEMFLAG_MAX;
  static const int ESHOPITEMFLAG_ARRAYSIZE =
    user_shop_item_ESHOPITEMFLAG_ESHOPITEMFLAG_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ESHOPITEMFLAG_descriptor() {
    return user_shop_item_ESHOPITEMFLAG_descriptor();
  }
  static inline const ::std::string& ESHOPITEMFLAG_Name(ESHOPITEMFLAG value) {
    return user_shop_item_ESHOPITEMFLAG_Name(value);
  }
  static inline bool ESHOPITEMFLAG_Parse(const ::std::string& name,
      ESHOPITEMFLAG* value) {
    return user_shop_item_ESHOPITEMFLAG_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // required .struct_game_element.EELEMENTTYPE element_type = 2;
  inline bool has_element_type() const;
  inline void clear_element_type();
  static const int kElementTypeFieldNumber = 2;
  inline ::struct_game_element_EELEMENTTYPE element_type() const;
  inline void set_element_type(::struct_game_element_EELEMENTTYPE value);

  // required uint32 element_id = 3;
  inline bool has_element_id() const;
  inline void clear_element_id();
  static const int kElementIdFieldNumber = 3;
  inline ::google::protobuf::uint32 element_id() const;
  inline void set_element_id(::google::protobuf::uint32 value);

  // required uint32 element_num = 4;
  inline bool has_element_num() const;
  inline void clear_element_num();
  static const int kElementNumFieldNumber = 4;
  inline ::google::protobuf::uint32 element_num() const;
  inline void set_element_num(::google::protobuf::uint32 value);

  // required .struct_game_element.EELEMENTTYPE consume_type = 5;
  inline bool has_consume_type() const;
  inline void clear_consume_type();
  static const int kConsumeTypeFieldNumber = 5;
  inline ::struct_game_element_EELEMENTTYPE consume_type() const;
  inline void set_consume_type(::struct_game_element_EELEMENTTYPE value);

  // required uint32 consume_id = 6;
  inline bool has_consume_id() const;
  inline void clear_consume_id();
  static const int kConsumeIdFieldNumber = 6;
  inline ::google::protobuf::uint32 consume_id() const;
  inline void set_consume_id(::google::protobuf::uint32 value);

  // required uint32 consume_num = 7;
  inline bool has_consume_num() const;
  inline void clear_consume_num();
  static const int kConsumeNumFieldNumber = 7;
  inline ::google::protobuf::uint32 consume_num() const;
  inline void set_consume_num(::google::protobuf::uint32 value);

  // required .user_shop_item.ESHOPITEMFLAG flag = 8;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 8;
  inline ::user_shop_item_ESHOPITEMFLAG flag() const;
  inline void set_flag(::user_shop_item_ESHOPITEMFLAG value);

  // required bool is_sold = 9;
  inline bool has_is_sold() const;
  inline void clear_is_sold();
  static const int kIsSoldFieldNumber = 9;
  inline bool is_sold() const;
  inline void set_is_sold(bool value);

  // @@protoc_insertion_point(class_scope:user_shop_item)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_element_type();
  inline void clear_has_element_type();
  inline void set_has_element_id();
  inline void clear_has_element_id();
  inline void set_has_element_num();
  inline void clear_has_element_num();
  inline void set_has_consume_type();
  inline void clear_has_consume_type();
  inline void set_has_consume_id();
  inline void clear_has_consume_id();
  inline void set_has_consume_num();
  inline void clear_has_consume_num();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_is_sold();
  inline void clear_has_is_sold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pos_;
  int element_type_;
  ::google::protobuf::uint32 element_id_;
  ::google::protobuf::uint32 element_num_;
  int consume_type_;
  ::google::protobuf::uint32 consume_id_;
  ::google::protobuf::uint32 consume_num_;
  int flag_;
  bool is_sold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_shop_item* default_instance_;
};
// -------------------------------------------------------------------

class user_shop : public ::google::protobuf::Message {
 public:
  user_shop();
  virtual ~user_shop();

  user_shop(const user_shop& from);

  inline user_shop& operator=(const user_shop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_shop& default_instance();

  void Swap(user_shop* other);

  // implements Message ----------------------------------------------

  user_shop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_shop& from);
  void MergeFrom(const user_shop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef user_shop_ESHOPTYPE ESHOPTYPE;
  static const ESHOPTYPE min = user_shop_ESHOPTYPE_min;
  static const ESHOPTYPE COMMON = user_shop_ESHOPTYPE_COMMON;
  static const ESHOPTYPE QIWUGE = user_shop_ESHOPTYPE_QIWUGE;
  static const ESHOPTYPE YIJIEBAOKU = user_shop_ESHOPTYPE_YIJIEBAOKU;
  static const ESHOPTYPE ARENA = user_shop_ESHOPTYPE_ARENA;
  static const ESHOPTYPE EXPEDITION = user_shop_ESHOPTYPE_EXPEDITION;
  static const ESHOPTYPE max = user_shop_ESHOPTYPE_max;
  static inline bool ESHOPTYPE_IsValid(int value) {
    return user_shop_ESHOPTYPE_IsValid(value);
  }
  static const ESHOPTYPE ESHOPTYPE_MIN =
    user_shop_ESHOPTYPE_ESHOPTYPE_MIN;
  static const ESHOPTYPE ESHOPTYPE_MAX =
    user_shop_ESHOPTYPE_ESHOPTYPE_MAX;
  static const int ESHOPTYPE_ARRAYSIZE =
    user_shop_ESHOPTYPE_ESHOPTYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ESHOPTYPE_descriptor() {
    return user_shop_ESHOPTYPE_descriptor();
  }
  static inline const ::std::string& ESHOPTYPE_Name(ESHOPTYPE value) {
    return user_shop_ESHOPTYPE_Name(value);
  }
  static inline bool ESHOPTYPE_Parse(const ::std::string& name,
      ESHOPTYPE* value) {
    return user_shop_ESHOPTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .user_shop.ESHOPTYPE shop_type = 1;
  inline bool has_shop_type() const;
  inline void clear_shop_type();
  static const int kShopTypeFieldNumber = 1;
  inline ::user_shop_ESHOPTYPE shop_type() const;
  inline void set_shop_type(::user_shop_ESHOPTYPE value);

  // required uint32 last_auto_refresh_time = 2;
  inline bool has_last_auto_refresh_time() const;
  inline void clear_last_auto_refresh_time();
  static const int kLastAutoRefreshTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_auto_refresh_time() const;
  inline void set_last_auto_refresh_time(::google::protobuf::uint32 value);

  // required uint32 last_manual_refresh_time = 3;
  inline bool has_last_manual_refresh_time() const;
  inline void clear_last_manual_refresh_time();
  static const int kLastManualRefreshTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 last_manual_refresh_time() const;
  inline void set_last_manual_refresh_time(::google::protobuf::uint32 value);

  // required uint32 last_day_manual_refresh_num = 4;
  inline bool has_last_day_manual_refresh_num() const;
  inline void clear_last_day_manual_refresh_num();
  static const int kLastDayManualRefreshNumFieldNumber = 4;
  inline ::google::protobuf::uint32 last_day_manual_refresh_num() const;
  inline void set_last_day_manual_refresh_num(::google::protobuf::uint32 value);

  // required uint32 random_open_start_timestamp = 5;
  inline bool has_random_open_start_timestamp() const;
  inline void clear_random_open_start_timestamp();
  static const int kRandomOpenStartTimestampFieldNumber = 5;
  inline ::google::protobuf::uint32 random_open_start_timestamp() const;
  inline void set_random_open_start_timestamp(::google::protobuf::uint32 value);

  // required uint32 random_open_end_timestamp = 6;
  inline bool has_random_open_end_timestamp() const;
  inline void clear_random_open_end_timestamp();
  static const int kRandomOpenEndTimestampFieldNumber = 6;
  inline ::google::protobuf::uint32 random_open_end_timestamp() const;
  inline void set_random_open_end_timestamp(::google::protobuf::uint32 value);

  // repeated .user_shop_item items = 7;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 7;
  inline const ::user_shop_item& items(int index) const;
  inline ::user_shop_item* mutable_items(int index);
  inline ::user_shop_item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::user_shop_item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_shop_item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:user_shop)
 private:
  inline void set_has_shop_type();
  inline void clear_has_shop_type();
  inline void set_has_last_auto_refresh_time();
  inline void clear_has_last_auto_refresh_time();
  inline void set_has_last_manual_refresh_time();
  inline void clear_has_last_manual_refresh_time();
  inline void set_has_last_day_manual_refresh_num();
  inline void clear_has_last_day_manual_refresh_num();
  inline void set_has_random_open_start_timestamp();
  inline void clear_has_random_open_start_timestamp();
  inline void set_has_random_open_end_timestamp();
  inline void clear_has_random_open_end_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int shop_type_;
  ::google::protobuf::uint32 last_auto_refresh_time_;
  ::google::protobuf::uint32 last_manual_refresh_time_;
  ::google::protobuf::uint32 last_day_manual_refresh_num_;
  ::google::protobuf::uint32 random_open_start_timestamp_;
  ::google::protobuf::uint32 random_open_end_timestamp_;
  ::google::protobuf::RepeatedPtrField< ::user_shop_item > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_shop* default_instance_;
};
// -------------------------------------------------------------------

class user_arena_log_user_arena_log_hero : public ::google::protobuf::Message {
 public:
  user_arena_log_user_arena_log_hero();
  virtual ~user_arena_log_user_arena_log_hero();

  user_arena_log_user_arena_log_hero(const user_arena_log_user_arena_log_hero& from);

  inline user_arena_log_user_arena_log_hero& operator=(const user_arena_log_user_arena_log_hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_arena_log_user_arena_log_hero& default_instance();

  void Swap(user_arena_log_user_arena_log_hero* other);

  // implements Message ----------------------------------------------

  user_arena_log_user_arena_log_hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_arena_log_user_arena_log_hero& from);
  void MergeFrom(const user_arena_log_user_arena_log_hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // required uint32 quality = 2;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user_arena_log.user_arena_log_hero)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 star_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_arena_log_user_arena_log_hero* default_instance_;
};
// -------------------------------------------------------------------

class user_arena_log : public ::google::protobuf::Message {
 public:
  user_arena_log();
  virtual ~user_arena_log();

  user_arena_log(const user_arena_log& from);

  inline user_arena_log& operator=(const user_arena_log& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_arena_log& default_instance();

  void Swap(user_arena_log* other);

  // implements Message ----------------------------------------------

  user_arena_log* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_arena_log& from);
  void MergeFrom(const user_arena_log& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef user_arena_log_user_arena_log_hero user_arena_log_hero;

  // accessors -------------------------------------------------------

  // required bool is_attacker_win = 1;
  inline bool has_is_attacker_win() const;
  inline void clear_is_attacker_win();
  static const int kIsAttackerWinFieldNumber = 1;
  inline bool is_attacker_win() const;
  inline void set_is_attacker_win(bool value);

  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required bool is_me_attacker = 3;
  inline bool has_is_me_attacker() const;
  inline void clear_is_me_attacker();
  static const int kIsMeAttackerFieldNumber = 3;
  inline bool is_me_attacker() const;
  inline void set_is_me_attacker(bool value);

  // required uint32 me_rank = 4;
  inline bool has_me_rank() const;
  inline void clear_me_rank();
  static const int kMeRankFieldNumber = 4;
  inline ::google::protobuf::uint32 me_rank() const;
  inline void set_me_rank(::google::protobuf::uint32 value);

  // required uint32 match_user_id = 5;
  inline bool has_match_user_id() const;
  inline void clear_match_user_id();
  static const int kMatchUserIdFieldNumber = 5;
  inline ::google::protobuf::uint32 match_user_id() const;
  inline void set_match_user_id(::google::protobuf::uint32 value);

  // required uint32 match_rank = 6;
  inline bool has_match_rank() const;
  inline void clear_match_rank();
  static const int kMatchRankFieldNumber = 6;
  inline ::google::protobuf::uint32 match_rank() const;
  inline void set_match_rank(::google::protobuf::uint32 value);

  // required uint32 match_power = 7;
  inline bool has_match_power() const;
  inline void clear_match_power();
  static const int kMatchPowerFieldNumber = 7;
  inline ::google::protobuf::uint32 match_power() const;
  inline void set_match_power(::google::protobuf::uint32 value);

  // required string match_name = 8;
  inline bool has_match_name() const;
  inline void clear_match_name();
  static const int kMatchNameFieldNumber = 8;
  inline const ::std::string& match_name() const;
  inline void set_match_name(const ::std::string& value);
  inline void set_match_name(const char* value);
  inline void set_match_name(const char* value, size_t size);
  inline ::std::string* mutable_match_name();
  inline ::std::string* release_match_name();
  inline void set_allocated_match_name(::std::string* match_name);

  // required uint32 match_level = 9;
  inline bool has_match_level() const;
  inline void clear_match_level();
  static const int kMatchLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 match_level() const;
  inline void set_match_level(::google::protobuf::uint32 value);

  // repeated .user_arena_log.user_arena_log_hero match_heros = 10;
  inline int match_heros_size() const;
  inline void clear_match_heros();
  static const int kMatchHerosFieldNumber = 10;
  inline const ::user_arena_log_user_arena_log_hero& match_heros(int index) const;
  inline ::user_arena_log_user_arena_log_hero* mutable_match_heros(int index);
  inline ::user_arena_log_user_arena_log_hero* add_match_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::user_arena_log_user_arena_log_hero >&
      match_heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_arena_log_user_arena_log_hero >*
      mutable_match_heros();

  // @@protoc_insertion_point(class_scope:user_arena_log)
 private:
  inline void set_has_is_attacker_win();
  inline void clear_has_is_attacker_win();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_is_me_attacker();
  inline void clear_has_is_me_attacker();
  inline void set_has_me_rank();
  inline void clear_has_me_rank();
  inline void set_has_match_user_id();
  inline void clear_has_match_user_id();
  inline void set_has_match_rank();
  inline void clear_has_match_rank();
  inline void set_has_match_power();
  inline void clear_has_match_power();
  inline void set_has_match_name();
  inline void clear_has_match_name();
  inline void set_has_match_level();
  inline void clear_has_match_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;
  bool is_attacker_win_;
  bool is_me_attacker_;
  ::google::protobuf::uint32 me_rank_;
  ::google::protobuf::uint32 match_user_id_;
  ::google::protobuf::uint32 match_rank_;
  ::google::protobuf::uint32 match_power_;
  ::std::string* match_name_;
  ::google::protobuf::RepeatedPtrField< ::user_arena_log_user_arena_log_hero > match_heros_;
  ::google::protobuf::uint32 match_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_arena_log* default_instance_;
};
// -------------------------------------------------------------------

class user_arena_contestant : public ::google::protobuf::Message {
 public:
  user_arena_contestant();
  virtual ~user_arena_contestant();

  user_arena_contestant(const user_arena_contestant& from);

  inline user_arena_contestant& operator=(const user_arena_contestant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_arena_contestant& default_instance();

  void Swap(user_arena_contestant* other);

  // implements Message ----------------------------------------------

  user_arena_contestant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_arena_contestant& from);
  void MergeFrom(const user_arena_contestant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 head_id = 5;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 5;
  inline ::google::protobuf::uint32 head_id() const;
  inline void set_head_id(::google::protobuf::uint32 value);

  // required uint32 head_frame_id = 6;
  inline bool has_head_frame_id() const;
  inline void clear_head_frame_id();
  static const int kHeadFrameIdFieldNumber = 6;
  inline ::google::protobuf::uint32 head_frame_id() const;
  inline void set_head_frame_id(::google::protobuf::uint32 value);

  // repeated .user_hero heros = 7;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 7;
  inline const ::user_hero& heros(int index) const;
  inline ::user_hero* mutable_heros(int index);
  inline ::user_hero* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::user_hero >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_hero >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:user_arena_contestant)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_head_id();
  inline void clear_has_head_id();
  inline void set_has_head_frame_id();
  inline void clear_has_head_frame_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 head_id_;
  ::google::protobuf::RepeatedPtrField< ::user_hero > heros_;
  ::google::protobuf::uint32 head_frame_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_arena_contestant* default_instance_;
};
// -------------------------------------------------------------------

class user_arena : public ::google::protobuf::Message {
 public:
  user_arena();
  virtual ~user_arena();

  user_arena(const user_arena& from);

  inline user_arena& operator=(const user_arena& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_arena& default_instance();

  void Swap(user_arena* other);

  // implements Message ----------------------------------------------

  user_arena* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_arena& from);
  void MergeFrom(const user_arena& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // required uint32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // required uint32 last_challenge_time = 3;
  inline bool has_last_challenge_time() const;
  inline void clear_last_challenge_time();
  static const int kLastChallengeTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 last_challenge_time() const;
  inline void set_last_challenge_time(::google::protobuf::uint32 value);

  // required uint32 last_day_challenge_num = 4;
  inline bool has_last_day_challenge_num() const;
  inline void clear_last_day_challenge_num();
  static const int kLastDayChallengeNumFieldNumber = 4;
  inline ::google::protobuf::uint32 last_day_challenge_num() const;
  inline void set_last_day_challenge_num(::google::protobuf::uint32 value);

  // required uint32 history_highest_rank = 5;
  inline bool has_history_highest_rank() const;
  inline void clear_history_highest_rank();
  static const int kHistoryHighestRankFieldNumber = 5;
  inline ::google::protobuf::uint32 history_highest_rank() const;
  inline void set_history_highest_rank(::google::protobuf::uint32 value);

  // repeated uint32 heros = 6;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 6;
  inline ::google::protobuf::uint32 heros(int index) const;
  inline void set_heros(int index, ::google::protobuf::uint32 value);
  inline void add_heros(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heros();

  // required uint32 last_time_buy_arena_challenge = 7;
  inline bool has_last_time_buy_arena_challenge() const;
  inline void clear_last_time_buy_arena_challenge();
  static const int kLastTimeBuyArenaChallengeFieldNumber = 7;
  inline ::google::protobuf::uint32 last_time_buy_arena_challenge() const;
  inline void set_last_time_buy_arena_challenge(::google::protobuf::uint32 value);

  // required uint32 last_day_buy_arena_challenge_num = 8;
  inline bool has_last_day_buy_arena_challenge_num() const;
  inline void clear_last_day_buy_arena_challenge_num();
  static const int kLastDayBuyArenaChallengeNumFieldNumber = 8;
  inline ::google::protobuf::uint32 last_day_buy_arena_challenge_num() const;
  inline void set_last_day_buy_arena_challenge_num(::google::protobuf::uint32 value);

  // repeated .user_arena_log log = 9;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 9;
  inline const ::user_arena_log& log(int index) const;
  inline ::user_arena_log* mutable_log(int index);
  inline ::user_arena_log* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::user_arena_log >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_arena_log >*
      mutable_log();

  // repeated .user_arena_contestant matchs = 10;
  inline int matchs_size() const;
  inline void clear_matchs();
  static const int kMatchsFieldNumber = 10;
  inline const ::user_arena_contestant& matchs(int index) const;
  inline ::user_arena_contestant* mutable_matchs(int index);
  inline ::user_arena_contestant* add_matchs();
  inline const ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >&
      matchs() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >*
      mutable_matchs();

  // @@protoc_insertion_point(class_scope:user_arena)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_last_challenge_time();
  inline void clear_has_last_challenge_time();
  inline void set_has_last_day_challenge_num();
  inline void clear_has_last_day_challenge_num();
  inline void set_has_history_highest_rank();
  inline void clear_has_history_highest_rank();
  inline void set_has_last_time_buy_arena_challenge();
  inline void clear_has_last_time_buy_arena_challenge();
  inline void set_has_last_day_buy_arena_challenge_num();
  inline void clear_has_last_day_buy_arena_challenge_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 last_challenge_time_;
  ::google::protobuf::uint32 last_day_challenge_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heros_;
  ::google::protobuf::uint32 history_highest_rank_;
  ::google::protobuf::uint32 last_time_buy_arena_challenge_;
  ::google::protobuf::RepeatedPtrField< ::user_arena_log > log_;
  ::google::protobuf::RepeatedPtrField< ::user_arena_contestant > matchs_;
  ::google::protobuf::uint32 last_day_buy_arena_challenge_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_arena* default_instance_;
};
// -------------------------------------------------------------------

class user_crusade_crusade_hero : public ::google::protobuf::Message {
 public:
  user_crusade_crusade_hero();
  virtual ~user_crusade_crusade_hero();

  user_crusade_crusade_hero(const user_crusade_crusade_hero& from);

  inline user_crusade_crusade_hero& operator=(const user_crusade_crusade_hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_crusade_crusade_hero& default_instance();

  void Swap(user_crusade_crusade_hero* other);

  // implements Message ----------------------------------------------

  user_crusade_crusade_hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_crusade_crusade_hero& from);
  void MergeFrom(const user_crusade_crusade_hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // required uint32 hp = 2;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // required uint32 ao_yi = 3;
  inline bool has_ao_yi() const;
  inline void clear_ao_yi();
  static const int kAoYiFieldNumber = 3;
  inline ::google::protobuf::uint32 ao_yi() const;
  inline void set_ao_yi(::google::protobuf::uint32 value);

  // required uint32 bi_sha = 4;
  inline bool has_bi_sha() const;
  inline void clear_bi_sha();
  static const int kBiShaFieldNumber = 4;
  inline ::google::protobuf::uint32 bi_sha() const;
  inline void set_bi_sha(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user_crusade.crusade_hero)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_ao_yi();
  inline void clear_has_ao_yi();
  inline void set_has_bi_sha();
  inline void clear_has_bi_sha();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 ao_yi_;
  ::google::protobuf::uint32 bi_sha_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_crusade_crusade_hero* default_instance_;
};
// -------------------------------------------------------------------

class user_crusade : public ::google::protobuf::Message {
 public:
  user_crusade();
  virtual ~user_crusade();

  user_crusade(const user_crusade& from);

  inline user_crusade& operator=(const user_crusade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_crusade& default_instance();

  void Swap(user_crusade* other);

  // implements Message ----------------------------------------------

  user_crusade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_crusade& from);
  void MergeFrom(const user_crusade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef user_crusade_crusade_hero crusade_hero;

  // accessors -------------------------------------------------------

  // required bool is_all_through = 1;
  inline bool has_is_all_through() const;
  inline void clear_is_all_through();
  static const int kIsAllThroughFieldNumber = 1;
  inline bool is_all_through() const;
  inline void set_is_all_through(bool value);

  // repeated .user_crusade.crusade_hero me_heros = 2;
  inline int me_heros_size() const;
  inline void clear_me_heros();
  static const int kMeHerosFieldNumber = 2;
  inline const ::user_crusade_crusade_hero& me_heros(int index) const;
  inline ::user_crusade_crusade_hero* mutable_me_heros(int index);
  inline ::user_crusade_crusade_hero* add_me_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >&
      me_heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >*
      mutable_me_heros();

  // repeated .user_crusade.crusade_hero enemy_heros = 3;
  inline int enemy_heros_size() const;
  inline void clear_enemy_heros();
  static const int kEnemyHerosFieldNumber = 3;
  inline const ::user_crusade_crusade_hero& enemy_heros(int index) const;
  inline ::user_crusade_crusade_hero* mutable_enemy_heros(int index);
  inline ::user_crusade_crusade_hero* add_enemy_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >&
      enemy_heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >*
      mutable_enemy_heros();

  // optional uint32 wave = 4;
  inline bool has_wave() const;
  inline void clear_wave();
  static const int kWaveFieldNumber = 4;
  inline ::google::protobuf::uint32 wave() const;
  inline void set_wave(::google::protobuf::uint32 value);

  // optional uint32 left_reset_times = 5;
  inline bool has_left_reset_times() const;
  inline void clear_left_reset_times();
  static const int kLeftResetTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 left_reset_times() const;
  inline void set_left_reset_times(::google::protobuf::uint32 value);

  // optional uint32 left_promote_award_times = 6;
  inline bool has_left_promote_award_times() const;
  inline void clear_left_promote_award_times();
  static const int kLeftPromoteAwardTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 left_promote_award_times() const;
  inline void set_left_promote_award_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user_crusade)
 private:
  inline void set_has_is_all_through();
  inline void clear_has_is_all_through();
  inline void set_has_wave();
  inline void clear_has_wave();
  inline void set_has_left_reset_times();
  inline void clear_has_left_reset_times();
  inline void set_has_left_promote_award_times();
  inline void clear_has_left_promote_award_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero > me_heros_;
  bool is_all_through_;
  ::google::protobuf::uint32 wave_;
  ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero > enemy_heros_;
  ::google::protobuf::uint32 left_reset_times_;
  ::google::protobuf::uint32 left_promote_award_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_crusade* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_user_info_res : public ::google::protobuf::Message {
 public:
  gs_c_user_info_res();
  virtual ~gs_c_user_info_res();

  gs_c_user_info_res(const gs_c_user_info_res& from);

  inline gs_c_user_info_res& operator=(const gs_c_user_info_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_user_info_res& default_instance();

  void Swap(gs_c_user_info_res* other);

  // implements Message ----------------------------------------------

  gs_c_user_info_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_user_info_res& from);
  void MergeFrom(const gs_c_user_info_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional .user_base_info base_info = 2;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 2;
  inline const ::user_base_info& base_info() const;
  inline ::user_base_info* mutable_base_info();
  inline ::user_base_info* release_base_info();
  inline void set_allocated_base_info(::user_base_info* base_info);

  // optional .user_sub_task_array sub_tasks = 3;
  inline bool has_sub_tasks() const;
  inline void clear_sub_tasks();
  static const int kSubTasksFieldNumber = 3;
  inline const ::user_sub_task_array& sub_tasks() const;
  inline ::user_sub_task_array* mutable_sub_tasks();
  inline ::user_sub_task_array* release_sub_tasks();
  inline void set_allocated_sub_tasks(::user_sub_task_array* sub_tasks);

  // optional .user_hero_array heros = 4;
  inline bool has_heros() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 4;
  inline const ::user_hero_array& heros() const;
  inline ::user_hero_array* mutable_heros();
  inline ::user_hero_array* release_heros();
  inline void set_allocated_heros(::user_hero_array* heros);

  // repeated .struct_game_element item_elements = 5;
  inline int item_elements_size() const;
  inline void clear_item_elements();
  static const int kItemElementsFieldNumber = 5;
  inline const ::struct_game_element& item_elements(int index) const;
  inline ::struct_game_element* mutable_item_elements(int index);
  inline ::struct_game_element* add_item_elements();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      item_elements() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_item_elements();

  // repeated .user_mail mail_elements = 6;
  inline int mail_elements_size() const;
  inline void clear_mail_elements();
  static const int kMailElementsFieldNumber = 6;
  inline const ::user_mail& mail_elements(int index) const;
  inline ::user_mail* mutable_mail_elements(int index);
  inline ::user_mail* add_mail_elements();
  inline const ::google::protobuf::RepeatedPtrField< ::user_mail >&
      mail_elements() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_mail >*
      mutable_mail_elements();

  // repeated .user_shop shops = 7;
  inline int shops_size() const;
  inline void clear_shops();
  static const int kShopsFieldNumber = 7;
  inline const ::user_shop& shops(int index) const;
  inline ::user_shop* mutable_shops(int index);
  inline ::user_shop* add_shops();
  inline const ::google::protobuf::RepeatedPtrField< ::user_shop >&
      shops() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_shop >*
      mutable_shops();

  // repeated .user_mission missions = 8;
  inline int missions_size() const;
  inline void clear_missions();
  static const int kMissionsFieldNumber = 8;
  inline const ::user_mission& missions(int index) const;
  inline ::user_mission* mutable_missions(int index);
  inline ::user_mission* add_missions();
  inline const ::google::protobuf::RepeatedPtrField< ::user_mission >&
      missions() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_mission >*
      mutable_missions();

  // optional .user_arena arena = 9;
  inline bool has_arena() const;
  inline void clear_arena();
  static const int kArenaFieldNumber = 9;
  inline const ::user_arena& arena() const;
  inline ::user_arena* mutable_arena();
  inline ::user_arena* release_arena();
  inline void set_allocated_arena(::user_arena* arena);

  // optional .user_sign sign = 10;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 10;
  inline const ::user_sign& sign() const;
  inline ::user_sign* mutable_sign();
  inline ::user_sign* release_sign();
  inline void set_allocated_sign(::user_sign* sign);

  // repeated uint32 guide_ids = 11;
  inline int guide_ids_size() const;
  inline void clear_guide_ids();
  static const int kGuideIdsFieldNumber = 11;
  inline ::google::protobuf::uint32 guide_ids(int index) const;
  inline void set_guide_ids(int index, ::google::protobuf::uint32 value);
  inline void add_guide_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      guide_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_guide_ids();

  // optional .user_friend friend_info = 12;
  inline bool has_friend_info() const;
  inline void clear_friend_info();
  static const int kFriendInfoFieldNumber = 12;
  inline const ::user_friend& friend_info() const;
  inline ::user_friend* mutable_friend_info();
  inline ::user_friend* release_friend_info();
  inline void set_allocated_friend_info(::user_friend* friend_info);

  // optional .user_crusade crusade = 13;
  inline bool has_crusade() const;
  inline void clear_crusade();
  static const int kCrusadeFieldNumber = 13;
  inline const ::user_crusade& crusade() const;
  inline ::user_crusade* mutable_crusade();
  inline ::user_crusade* release_crusade();
  inline void set_allocated_crusade(::user_crusade* crusade);

  // @@protoc_insertion_point(class_scope:gs_c_user_info_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_base_info();
  inline void clear_has_base_info();
  inline void set_has_sub_tasks();
  inline void clear_has_sub_tasks();
  inline void set_has_heros();
  inline void clear_has_heros();
  inline void set_has_arena();
  inline void clear_has_arena();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_friend_info();
  inline void clear_has_friend_info();
  inline void set_has_crusade();
  inline void clear_has_crusade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::user_base_info* base_info_;
  ::user_sub_task_array* sub_tasks_;
  ::user_hero_array* heros_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > item_elements_;
  ::google::protobuf::RepeatedPtrField< ::user_mail > mail_elements_;
  ::google::protobuf::RepeatedPtrField< ::user_shop > shops_;
  ::google::protobuf::RepeatedPtrField< ::user_mission > missions_;
  ::user_arena* arena_;
  ::user_sign* sign_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > guide_ids_;
  ::user_friend* friend_info_;
  ::user_crusade* crusade_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_user_info_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_start_sub_task_req : public ::google::protobuf::Message {
 public:
  c_gs_start_sub_task_req();
  virtual ~c_gs_start_sub_task_req();

  c_gs_start_sub_task_req(const c_gs_start_sub_task_req& from);

  inline c_gs_start_sub_task_req& operator=(const c_gs_start_sub_task_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_start_sub_task_req& default_instance();

  void Swap(c_gs_start_sub_task_req* other);

  // implements Message ----------------------------------------------

  c_gs_start_sub_task_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_start_sub_task_req& from);
  void MergeFrom(const c_gs_start_sub_task_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sub_task_id = 1;
  inline bool has_sub_task_id() const;
  inline void clear_sub_task_id();
  static const int kSubTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sub_task_id() const;
  inline void set_sub_task_id(::google::protobuf::uint32 value);

  // repeated uint32 heros = 2;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 2;
  inline ::google::protobuf::uint32 heros(int index) const;
  inline void set_heros(int index, ::google::protobuf::uint32 value);
  inline void add_heros(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:c_gs_start_sub_task_req)
 private:
  inline void set_has_sub_task_id();
  inline void clear_has_sub_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heros_;
  ::google::protobuf::uint32 sub_task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_start_sub_task_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_start_sub_task_res : public ::google::protobuf::Message {
 public:
  gs_c_start_sub_task_res();
  virtual ~gs_c_start_sub_task_res();

  gs_c_start_sub_task_res(const gs_c_start_sub_task_res& from);

  inline gs_c_start_sub_task_res& operator=(const gs_c_start_sub_task_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_start_sub_task_res& default_instance();

  void Swap(gs_c_start_sub_task_res* other);

  // implements Message ----------------------------------------------

  gs_c_start_sub_task_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_start_sub_task_res& from);
  void MergeFrom(const gs_c_start_sub_task_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 sub_task_id = 2;
  inline bool has_sub_task_id() const;
  inline void clear_sub_task_id();
  static const int kSubTaskIdFieldNumber = 2;
  inline ::google::protobuf::uint32 sub_task_id() const;
  inline void set_sub_task_id(::google::protobuf::uint32 value);

  // repeated .struct_game_element output = 3;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 3;
  inline const ::struct_game_element& output(int index) const;
  inline ::struct_game_element* mutable_output(int index);
  inline ::struct_game_element* add_output();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      output() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_output();

  // repeated .struct_game_element consume = 4;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 4;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // optional uint32 enter_time = 5;
  inline bool has_enter_time() const;
  inline void clear_enter_time();
  static const int kEnterTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 enter_time() const;
  inline void set_enter_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_start_sub_task_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_sub_task_id();
  inline void clear_has_sub_task_id();
  inline void set_has_enter_time();
  inline void clear_has_enter_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 sub_task_id_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > output_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::google::protobuf::uint32 enter_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_start_sub_task_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_end_sub_task_req : public ::google::protobuf::Message {
 public:
  c_gs_end_sub_task_req();
  virtual ~c_gs_end_sub_task_req();

  c_gs_end_sub_task_req(const c_gs_end_sub_task_req& from);

  inline c_gs_end_sub_task_req& operator=(const c_gs_end_sub_task_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_end_sub_task_req& default_instance();

  void Swap(c_gs_end_sub_task_req* other);

  // implements Message ----------------------------------------------

  c_gs_end_sub_task_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_end_sub_task_req& from);
  void MergeFrom(const c_gs_end_sub_task_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_win = 1;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 1;
  inline bool is_win() const;
  inline void set_is_win(bool value);

  // optional uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_end_sub_task_req)
 private:
  inline void set_has_is_win();
  inline void clear_has_is_win();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_win_;
  ::google::protobuf::uint32 star_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_end_sub_task_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_end_sub_task_res : public ::google::protobuf::Message {
 public:
  gs_c_end_sub_task_res();
  virtual ~gs_c_end_sub_task_res();

  gs_c_end_sub_task_res(const gs_c_end_sub_task_res& from);

  inline gs_c_end_sub_task_res& operator=(const gs_c_end_sub_task_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_end_sub_task_res& default_instance();

  void Swap(gs_c_end_sub_task_res* other);

  // implements Message ----------------------------------------------

  gs_c_end_sub_task_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_end_sub_task_res& from);
  void MergeFrom(const gs_c_end_sub_task_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .struct_game_element output = 2;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 2;
  inline const ::struct_game_element& output(int index) const;
  inline ::struct_game_element* mutable_output(int index);
  inline ::struct_game_element* add_output();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      output() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_output();

  // repeated .struct_game_element task_complete_prize = 3;
  inline int task_complete_prize_size() const;
  inline void clear_task_complete_prize();
  static const int kTaskCompletePrizeFieldNumber = 3;
  inline const ::struct_game_element& task_complete_prize(int index) const;
  inline ::struct_game_element* mutable_task_complete_prize(int index);
  inline ::struct_game_element* add_task_complete_prize();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      task_complete_prize() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_task_complete_prize();

  // repeated .user_hero heros = 4;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 4;
  inline const ::user_hero& heros(int index) const;
  inline ::user_hero* mutable_heros(int index);
  inline ::user_hero* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::user_hero >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_hero >*
      mutable_heros();

  // optional .user_shop shop = 5;
  inline bool has_shop() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 5;
  inline const ::user_shop& shop() const;
  inline ::user_shop* mutable_shop();
  inline ::user_shop* release_shop();
  inline void set_allocated_shop(::user_shop* shop);

  // @@protoc_insertion_point(class_scope:gs_c_end_sub_task_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_shop();
  inline void clear_has_shop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > output_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > task_complete_prize_;
  ::google::protobuf::RepeatedPtrField< ::user_hero > heros_;
  ::user_shop* shop_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_end_sub_task_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_invoke_hero_req : public ::google::protobuf::Message {
 public:
  c_gs_invoke_hero_req();
  virtual ~c_gs_invoke_hero_req();

  c_gs_invoke_hero_req(const c_gs_invoke_hero_req& from);

  inline c_gs_invoke_hero_req& operator=(const c_gs_invoke_hero_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_invoke_hero_req& default_instance();

  void Swap(c_gs_invoke_hero_req* other);

  // implements Message ----------------------------------------------

  c_gs_invoke_hero_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_invoke_hero_req& from);
  void MergeFrom(const c_gs_invoke_hero_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef c_gs_invoke_hero_req_EINVOKE_TYPE EINVOKE_TYPE;
  static const EINVOKE_TYPE FREE = c_gs_invoke_hero_req_EINVOKE_TYPE_FREE;
  static const EINVOKE_TYPE GOLD = c_gs_invoke_hero_req_EINVOKE_TYPE_GOLD;
  static const EINVOKE_TYPE DIAMOND = c_gs_invoke_hero_req_EINVOKE_TYPE_DIAMOND;
  static const EINVOKE_TYPE FRAGMENT = c_gs_invoke_hero_req_EINVOKE_TYPE_FRAGMENT;
  static inline bool EINVOKE_TYPE_IsValid(int value) {
    return c_gs_invoke_hero_req_EINVOKE_TYPE_IsValid(value);
  }
  static const EINVOKE_TYPE EINVOKE_TYPE_MIN =
    c_gs_invoke_hero_req_EINVOKE_TYPE_EINVOKE_TYPE_MIN;
  static const EINVOKE_TYPE EINVOKE_TYPE_MAX =
    c_gs_invoke_hero_req_EINVOKE_TYPE_EINVOKE_TYPE_MAX;
  static const int EINVOKE_TYPE_ARRAYSIZE =
    c_gs_invoke_hero_req_EINVOKE_TYPE_EINVOKE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EINVOKE_TYPE_descriptor() {
    return c_gs_invoke_hero_req_EINVOKE_TYPE_descriptor();
  }
  static inline const ::std::string& EINVOKE_TYPE_Name(EINVOKE_TYPE value) {
    return c_gs_invoke_hero_req_EINVOKE_TYPE_Name(value);
  }
  static inline bool EINVOKE_TYPE_Parse(const ::std::string& name,
      EINVOKE_TYPE* value) {
    return c_gs_invoke_hero_req_EINVOKE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c_gs_invoke_hero_req.EINVOKE_TYPE invoke_type = 1;
  inline bool has_invoke_type() const;
  inline void clear_invoke_type();
  static const int kInvokeTypeFieldNumber = 1;
  inline ::c_gs_invoke_hero_req_EINVOKE_TYPE invoke_type() const;
  inline void set_invoke_type(::c_gs_invoke_hero_req_EINVOKE_TYPE value);

  // optional uint32 hero_num = 2;
  inline bool has_hero_num() const;
  inline void clear_hero_num();
  static const int kHeroNumFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_num() const;
  inline void set_hero_num(::google::protobuf::uint32 value);

  // optional uint32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 4;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 4;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_invoke_hero_req)
 private:
  inline void set_has_invoke_type();
  inline void clear_has_invoke_type();
  inline void set_has_hero_num();
  inline void clear_has_hero_num();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int invoke_type_;
  ::google::protobuf::uint32 hero_num_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 hero_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_invoke_hero_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_invoke_hero_res : public ::google::protobuf::Message {
 public:
  gs_c_invoke_hero_res();
  virtual ~gs_c_invoke_hero_res();

  gs_c_invoke_hero_res(const gs_c_invoke_hero_res& from);

  inline gs_c_invoke_hero_res& operator=(const gs_c_invoke_hero_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_invoke_hero_res& default_instance();

  void Swap(gs_c_invoke_hero_res* other);

  // implements Message ----------------------------------------------

  gs_c_invoke_hero_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_invoke_hero_res& from);
  void MergeFrom(const gs_c_invoke_hero_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .user_hero heros = 2;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 2;
  inline const ::user_hero& heros(int index) const;
  inline ::user_hero* mutable_heros(int index);
  inline ::user_hero* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::user_hero >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_hero >*
      mutable_heros();

  // repeated .struct_game_element consume = 3;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 3;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // repeated .struct_game_element output = 4;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline const ::struct_game_element& output(int index) const;
  inline ::struct_game_element* mutable_output(int index);
  inline ::struct_game_element* add_output();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      output() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_output();

  // @@protoc_insertion_point(class_scope:gs_c_invoke_hero_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::user_hero > heros_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > output_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_invoke_hero_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_equip_level_up_req : public ::google::protobuf::Message {
 public:
  c_gs_equip_level_up_req();
  virtual ~c_gs_equip_level_up_req();

  c_gs_equip_level_up_req(const c_gs_equip_level_up_req& from);

  inline c_gs_equip_level_up_req& operator=(const c_gs_equip_level_up_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_equip_level_up_req& default_instance();

  void Swap(c_gs_equip_level_up_req* other);

  // implements Message ----------------------------------------------

  c_gs_equip_level_up_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_equip_level_up_req& from);
  void MergeFrom(const c_gs_equip_level_up_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef c_gs_equip_level_up_req_OP_TYPE OP_TYPE;
  static const OP_TYPE EQUIP1_LEVEL = c_gs_equip_level_up_req_OP_TYPE_EQUIP1_LEVEL;
  static const OP_TYPE EQUIP1_LEVELN = c_gs_equip_level_up_req_OP_TYPE_EQUIP1_LEVELN;
  static const OP_TYPE EQUIPN_LEVELN = c_gs_equip_level_up_req_OP_TYPE_EQUIPN_LEVELN;
  static inline bool OP_TYPE_IsValid(int value) {
    return c_gs_equip_level_up_req_OP_TYPE_IsValid(value);
  }
  static const OP_TYPE OP_TYPE_MIN =
    c_gs_equip_level_up_req_OP_TYPE_OP_TYPE_MIN;
  static const OP_TYPE OP_TYPE_MAX =
    c_gs_equip_level_up_req_OP_TYPE_OP_TYPE_MAX;
  static const int OP_TYPE_ARRAYSIZE =
    c_gs_equip_level_up_req_OP_TYPE_OP_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OP_TYPE_descriptor() {
    return c_gs_equip_level_up_req_OP_TYPE_descriptor();
  }
  static inline const ::std::string& OP_TYPE_Name(OP_TYPE value) {
    return c_gs_equip_level_up_req_OP_TYPE_Name(value);
  }
  static inline bool OP_TYPE_Parse(const ::std::string& name,
      OP_TYPE* value) {
    return c_gs_equip_level_up_req_OP_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c_gs_equip_level_up_req.OP_TYPE op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::c_gs_equip_level_up_req_OP_TYPE op_type() const;
  inline void set_op_type(::c_gs_equip_level_up_req_OP_TYPE value);

  // required uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 equip_id = 3;
  inline bool has_equip_id() const;
  inline void clear_equip_id();
  static const int kEquipIdFieldNumber = 3;
  inline ::google::protobuf::uint32 equip_id() const;
  inline void set_equip_id(::google::protobuf::uint32 value);

  // optional uint32 level_up_num = 4;
  inline bool has_level_up_num() const;
  inline void clear_level_up_num();
  static const int kLevelUpNumFieldNumber = 4;
  inline ::google::protobuf::uint32 level_up_num() const;
  inline void set_level_up_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_equip_level_up_req)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_equip_id();
  inline void clear_has_equip_id();
  inline void set_has_level_up_num();
  inline void clear_has_level_up_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int op_type_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 equip_id_;
  ::google::protobuf::uint32 level_up_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_equip_level_up_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_equip_level_up_res : public ::google::protobuf::Message {
 public:
  gs_c_equip_level_up_res();
  virtual ~gs_c_equip_level_up_res();

  gs_c_equip_level_up_res(const gs_c_equip_level_up_res& from);

  inline gs_c_equip_level_up_res& operator=(const gs_c_equip_level_up_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_equip_level_up_res& default_instance();

  void Swap(gs_c_equip_level_up_res* other);

  // implements Message ----------------------------------------------

  gs_c_equip_level_up_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_equip_level_up_res& from);
  void MergeFrom(const gs_c_equip_level_up_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // repeated .user_hero_equip equips = 3;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 3;
  inline const ::user_hero_equip& equips(int index) const;
  inline ::user_hero_equip* mutable_equips(int index);
  inline ::user_hero_equip* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::user_hero_equip >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_hero_equip >*
      mutable_equips();

  // repeated .struct_game_element consume = 4;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 4;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // @@protoc_insertion_point(class_scope:gs_c_equip_level_up_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::RepeatedPtrField< ::user_hero_equip > equips_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_equip_level_up_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_equip_evolution_req : public ::google::protobuf::Message {
 public:
  c_gs_equip_evolution_req();
  virtual ~c_gs_equip_evolution_req();

  c_gs_equip_evolution_req(const c_gs_equip_evolution_req& from);

  inline c_gs_equip_evolution_req& operator=(const c_gs_equip_evolution_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_equip_evolution_req& default_instance();

  void Swap(c_gs_equip_evolution_req* other);

  // implements Message ----------------------------------------------

  c_gs_equip_evolution_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_equip_evolution_req& from);
  void MergeFrom(const c_gs_equip_evolution_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // required uint32 equip_id = 2;
  inline bool has_equip_id() const;
  inline void clear_equip_id();
  static const int kEquipIdFieldNumber = 2;
  inline ::google::protobuf::uint32 equip_id() const;
  inline void set_equip_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_equip_evolution_req)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_equip_id();
  inline void clear_has_equip_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 equip_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_equip_evolution_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_equip_evolution_res : public ::google::protobuf::Message {
 public:
  gs_c_equip_evolution_res();
  virtual ~gs_c_equip_evolution_res();

  gs_c_equip_evolution_res(const gs_c_equip_evolution_res& from);

  inline gs_c_equip_evolution_res& operator=(const gs_c_equip_evolution_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_equip_evolution_res& default_instance();

  void Swap(gs_c_equip_evolution_res* other);

  // implements Message ----------------------------------------------

  gs_c_equip_evolution_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_equip_evolution_res& from);
  void MergeFrom(const gs_c_equip_evolution_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 equip_id = 3;
  inline bool has_equip_id() const;
  inline void clear_equip_id();
  static const int kEquipIdFieldNumber = 3;
  inline ::google::protobuf::uint32 equip_id() const;
  inline void set_equip_id(::google::protobuf::uint32 value);

  // optional uint32 evolution_equip_id = 4;
  inline bool has_evolution_equip_id() const;
  inline void clear_evolution_equip_id();
  static const int kEvolutionEquipIdFieldNumber = 4;
  inline ::google::protobuf::uint32 evolution_equip_id() const;
  inline void set_evolution_equip_id(::google::protobuf::uint32 value);

  // repeated .struct_game_element consume = 5;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // @@protoc_insertion_point(class_scope:gs_c_equip_evolution_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_equip_id();
  inline void clear_has_equip_id();
  inline void set_has_evolution_equip_id();
  inline void clear_has_evolution_equip_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 equip_id_;
  ::google::protobuf::uint32 evolution_equip_id_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_equip_evolution_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_hero_evolution_req : public ::google::protobuf::Message {
 public:
  c_gs_hero_evolution_req();
  virtual ~c_gs_hero_evolution_req();

  c_gs_hero_evolution_req(const c_gs_hero_evolution_req& from);

  inline c_gs_hero_evolution_req& operator=(const c_gs_hero_evolution_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_hero_evolution_req& default_instance();

  void Swap(c_gs_hero_evolution_req* other);

  // implements Message ----------------------------------------------

  c_gs_hero_evolution_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_hero_evolution_req& from);
  void MergeFrom(const c_gs_hero_evolution_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_hero_evolution_req)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_hero_evolution_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_hero_evolution_res : public ::google::protobuf::Message {
 public:
  gs_c_hero_evolution_res();
  virtual ~gs_c_hero_evolution_res();

  gs_c_hero_evolution_res(const gs_c_hero_evolution_res& from);

  inline gs_c_hero_evolution_res& operator=(const gs_c_hero_evolution_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_hero_evolution_res& default_instance();

  void Swap(gs_c_hero_evolution_res* other);

  // implements Message ----------------------------------------------

  gs_c_hero_evolution_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_hero_evolution_res& from);
  void MergeFrom(const gs_c_hero_evolution_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // repeated .struct_game_element consume = 3;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 3;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // repeated .user_hero_skill new_skills = 4;
  inline int new_skills_size() const;
  inline void clear_new_skills();
  static const int kNewSkillsFieldNumber = 4;
  inline const ::user_hero_skill& new_skills(int index) const;
  inline ::user_hero_skill* mutable_new_skills(int index);
  inline ::user_hero_skill* add_new_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::user_hero_skill >&
      new_skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_hero_skill >*
      mutable_new_skills();

  // @@protoc_insertion_point(class_scope:gs_c_hero_evolution_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::google::protobuf::RepeatedPtrField< ::user_hero_skill > new_skills_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_hero_evolution_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_hero_star_up_req : public ::google::protobuf::Message {
 public:
  c_gs_hero_star_up_req();
  virtual ~c_gs_hero_star_up_req();

  c_gs_hero_star_up_req(const c_gs_hero_star_up_req& from);

  inline c_gs_hero_star_up_req& operator=(const c_gs_hero_star_up_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_hero_star_up_req& default_instance();

  void Swap(c_gs_hero_star_up_req* other);

  // implements Message ----------------------------------------------

  c_gs_hero_star_up_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_hero_star_up_req& from);
  void MergeFrom(const c_gs_hero_star_up_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_hero_star_up_req)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_hero_star_up_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_hero_star_up_res : public ::google::protobuf::Message {
 public:
  gs_c_hero_star_up_res();
  virtual ~gs_c_hero_star_up_res();

  gs_c_hero_star_up_res(const gs_c_hero_star_up_res& from);

  inline gs_c_hero_star_up_res& operator=(const gs_c_hero_star_up_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_hero_star_up_res& default_instance();

  void Swap(gs_c_hero_star_up_res* other);

  // implements Message ----------------------------------------------

  gs_c_hero_star_up_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_hero_star_up_res& from);
  void MergeFrom(const gs_c_hero_star_up_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // repeated .struct_game_element consume = 3;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 3;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // @@protoc_insertion_point(class_scope:gs_c_hero_star_up_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_hero_star_up_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_skill_level_up_req : public ::google::protobuf::Message {
 public:
  c_gs_skill_level_up_req();
  virtual ~c_gs_skill_level_up_req();

  c_gs_skill_level_up_req(const c_gs_skill_level_up_req& from);

  inline c_gs_skill_level_up_req& operator=(const c_gs_skill_level_up_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_skill_level_up_req& default_instance();

  void Swap(c_gs_skill_level_up_req* other);

  // implements Message ----------------------------------------------

  c_gs_skill_level_up_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_skill_level_up_req& from);
  void MergeFrom(const c_gs_skill_level_up_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // required .user_hero_skill.e_skill_type skill_type = 2;
  inline bool has_skill_type() const;
  inline void clear_skill_type();
  static const int kSkillTypeFieldNumber = 2;
  inline ::user_hero_skill_e_skill_type skill_type() const;
  inline void set_skill_type(::user_hero_skill_e_skill_type value);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_skill_level_up_req)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_skill_type();
  inline void clear_has_skill_type();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_id_;
  int skill_type_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_skill_level_up_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_skill_level_up_res : public ::google::protobuf::Message {
 public:
  gs_c_skill_level_up_res();
  virtual ~gs_c_skill_level_up_res();

  gs_c_skill_level_up_res(const gs_c_skill_level_up_res& from);

  inline gs_c_skill_level_up_res& operator=(const gs_c_skill_level_up_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_skill_level_up_res& default_instance();

  void Swap(gs_c_skill_level_up_res* other);

  // implements Message ----------------------------------------------

  gs_c_skill_level_up_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_skill_level_up_res& from);
  void MergeFrom(const gs_c_skill_level_up_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // optional .user_hero_skill.e_skill_type skill_type = 3;
  inline bool has_skill_type() const;
  inline void clear_skill_type();
  static const int kSkillTypeFieldNumber = 3;
  inline ::user_hero_skill_e_skill_type skill_type() const;
  inline void set_skill_type(::user_hero_skill_e_skill_type value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // repeated .struct_game_element consume = 5;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // @@protoc_insertion_point(class_scope:gs_c_skill_level_up_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_skill_type();
  inline void clear_has_skill_type();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 hero_id_;
  int skill_type_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_skill_level_up_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_invoke_req : public ::google::protobuf::Message {
 public:
  c_gs_invoke_req();
  virtual ~c_gs_invoke_req();

  c_gs_invoke_req(const c_gs_invoke_req& from);

  inline c_gs_invoke_req& operator=(const c_gs_invoke_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_invoke_req& default_instance();

  void Swap(c_gs_invoke_req* other);

  // implements Message ----------------------------------------------

  c_gs_invoke_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_invoke_req& from);
  void MergeFrom(const c_gs_invoke_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef c_gs_invoke_req_EINVOKE_TYPE EINVOKE_TYPE;
  static const EINVOKE_TYPE GOLD_FREE = c_gs_invoke_req_EINVOKE_TYPE_GOLD_FREE;
  static const EINVOKE_TYPE GOLD_1 = c_gs_invoke_req_EINVOKE_TYPE_GOLD_1;
  static const EINVOKE_TYPE GOLD_N = c_gs_invoke_req_EINVOKE_TYPE_GOLD_N;
  static const EINVOKE_TYPE DIAMOND_FREE = c_gs_invoke_req_EINVOKE_TYPE_DIAMOND_FREE;
  static const EINVOKE_TYPE DIAMOND_1 = c_gs_invoke_req_EINVOKE_TYPE_DIAMOND_1;
  static const EINVOKE_TYPE DIAMOND_N = c_gs_invoke_req_EINVOKE_TYPE_DIAMOND_N;
  static const EINVOKE_TYPE VIP_DIAMOND_1 = c_gs_invoke_req_EINVOKE_TYPE_VIP_DIAMOND_1;
  static const EINVOKE_TYPE VIP_DIAMOND_N = c_gs_invoke_req_EINVOKE_TYPE_VIP_DIAMOND_N;
  static const EINVOKE_TYPE FRIEND_POINT = c_gs_invoke_req_EINVOKE_TYPE_FRIEND_POINT;
  static inline bool EINVOKE_TYPE_IsValid(int value) {
    return c_gs_invoke_req_EINVOKE_TYPE_IsValid(value);
  }
  static const EINVOKE_TYPE EINVOKE_TYPE_MIN =
    c_gs_invoke_req_EINVOKE_TYPE_EINVOKE_TYPE_MIN;
  static const EINVOKE_TYPE EINVOKE_TYPE_MAX =
    c_gs_invoke_req_EINVOKE_TYPE_EINVOKE_TYPE_MAX;
  static const int EINVOKE_TYPE_ARRAYSIZE =
    c_gs_invoke_req_EINVOKE_TYPE_EINVOKE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EINVOKE_TYPE_descriptor() {
    return c_gs_invoke_req_EINVOKE_TYPE_descriptor();
  }
  static inline const ::std::string& EINVOKE_TYPE_Name(EINVOKE_TYPE value) {
    return c_gs_invoke_req_EINVOKE_TYPE_Name(value);
  }
  static inline bool EINVOKE_TYPE_Parse(const ::std::string& name,
      EINVOKE_TYPE* value) {
    return c_gs_invoke_req_EINVOKE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c_gs_invoke_req.EINVOKE_TYPE invoke_type = 1;
  inline bool has_invoke_type() const;
  inline void clear_invoke_type();
  static const int kInvokeTypeFieldNumber = 1;
  inline ::c_gs_invoke_req_EINVOKE_TYPE invoke_type() const;
  inline void set_invoke_type(::c_gs_invoke_req_EINVOKE_TYPE value);

  // optional uint32 invoke_num = 2;
  inline bool has_invoke_num() const;
  inline void clear_invoke_num();
  static const int kInvokeNumFieldNumber = 2;
  inline ::google::protobuf::uint32 invoke_num() const;
  inline void set_invoke_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_invoke_req)
 private:
  inline void set_has_invoke_type();
  inline void clear_has_invoke_type();
  inline void set_has_invoke_num();
  inline void clear_has_invoke_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int invoke_type_;
  ::google::protobuf::uint32 invoke_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_invoke_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_invoke_res : public ::google::protobuf::Message {
 public:
  gs_c_invoke_res();
  virtual ~gs_c_invoke_res();

  gs_c_invoke_res(const gs_c_invoke_res& from);

  inline gs_c_invoke_res& operator=(const gs_c_invoke_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_invoke_res& default_instance();

  void Swap(gs_c_invoke_res* other);

  // implements Message ----------------------------------------------

  gs_c_invoke_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_invoke_res& from);
  void MergeFrom(const gs_c_invoke_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .struct_game_element consume = 2;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 2;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // repeated .struct_game_element ouput = 3;
  inline int ouput_size() const;
  inline void clear_ouput();
  static const int kOuputFieldNumber = 3;
  inline const ::struct_game_element& ouput(int index) const;
  inline ::struct_game_element* mutable_ouput(int index);
  inline ::struct_game_element* add_ouput();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      ouput() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_ouput();

  // repeated .user_hero heros = 4;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 4;
  inline const ::user_hero& heros(int index) const;
  inline ::user_hero* mutable_heros(int index);
  inline ::user_hero* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::user_hero >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_hero >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:gs_c_invoke_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > ouput_;
  ::google::protobuf::RepeatedPtrField< ::user_hero > heros_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_invoke_res* default_instance_;
};
// -------------------------------------------------------------------

class struct_game_element_array : public ::google::protobuf::Message {
 public:
  struct_game_element_array();
  virtual ~struct_game_element_array();

  struct_game_element_array(const struct_game_element_array& from);

  inline struct_game_element_array& operator=(const struct_game_element_array& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const struct_game_element_array& default_instance();

  void Swap(struct_game_element_array* other);

  // implements Message ----------------------------------------------

  struct_game_element_array* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const struct_game_element_array& from);
  void MergeFrom(const struct_game_element_array& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .struct_game_element items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::struct_game_element& items(int index) const;
  inline ::struct_game_element* mutable_items(int index);
  inline ::struct_game_element* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:struct_game_element_array)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static struct_game_element_array* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_diamond_speed_kill_req : public ::google::protobuf::Message {
 public:
  c_gs_diamond_speed_kill_req();
  virtual ~c_gs_diamond_speed_kill_req();

  c_gs_diamond_speed_kill_req(const c_gs_diamond_speed_kill_req& from);

  inline c_gs_diamond_speed_kill_req& operator=(const c_gs_diamond_speed_kill_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_diamond_speed_kill_req& default_instance();

  void Swap(c_gs_diamond_speed_kill_req* other);

  // implements Message ----------------------------------------------

  c_gs_diamond_speed_kill_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_diamond_speed_kill_req& from);
  void MergeFrom(const c_gs_diamond_speed_kill_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // required uint32 sub_task_id = 2;
  inline bool has_sub_task_id() const;
  inline void clear_sub_task_id();
  static const int kSubTaskIdFieldNumber = 2;
  inline ::google::protobuf::uint32 sub_task_id() const;
  inline void set_sub_task_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_diamond_speed_kill_req)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_sub_task_id();
  inline void clear_has_sub_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 sub_task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_diamond_speed_kill_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_diamond_speed_kill_res : public ::google::protobuf::Message {
 public:
  gs_c_diamond_speed_kill_res();
  virtual ~gs_c_diamond_speed_kill_res();

  gs_c_diamond_speed_kill_res(const gs_c_diamond_speed_kill_res& from);

  inline gs_c_diamond_speed_kill_res& operator=(const gs_c_diamond_speed_kill_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_diamond_speed_kill_res& default_instance();

  void Swap(gs_c_diamond_speed_kill_res* other);

  // implements Message ----------------------------------------------

  gs_c_diamond_speed_kill_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_diamond_speed_kill_res& from);
  void MergeFrom(const gs_c_diamond_speed_kill_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .struct_game_element consume = 2;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 2;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // repeated .struct_game_element_array items_arr = 3;
  inline int items_arr_size() const;
  inline void clear_items_arr();
  static const int kItemsArrFieldNumber = 3;
  inline const ::struct_game_element_array& items_arr(int index) const;
  inline ::struct_game_element_array* mutable_items_arr(int index);
  inline ::struct_game_element_array* add_items_arr();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element_array >&
      items_arr() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element_array >*
      mutable_items_arr();

  // optional .user_shop shop = 5;
  inline bool has_shop() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 5;
  inline const ::user_shop& shop() const;
  inline ::user_shop* mutable_shop();
  inline ::user_shop* release_shop();
  inline void set_allocated_shop(::user_shop* shop);

  // @@protoc_insertion_point(class_scope:gs_c_diamond_speed_kill_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_shop();
  inline void clear_has_shop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element_array > items_arr_;
  ::user_shop* shop_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_diamond_speed_kill_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_use_item_req : public ::google::protobuf::Message {
 public:
  c_gs_use_item_req();
  virtual ~c_gs_use_item_req();

  c_gs_use_item_req(const c_gs_use_item_req& from);

  inline c_gs_use_item_req& operator=(const c_gs_use_item_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_use_item_req& default_instance();

  void Swap(c_gs_use_item_req* other);

  // implements Message ----------------------------------------------

  c_gs_use_item_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_use_item_req& from);
  void MergeFrom(const c_gs_use_item_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // required uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 target_id = 3;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 3;
  inline ::google::protobuf::uint32 target_id() const;
  inline void set_target_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_use_item_req)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 target_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_use_item_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_use_item_res : public ::google::protobuf::Message {
 public:
  gs_c_use_item_res();
  virtual ~gs_c_use_item_res();

  gs_c_use_item_res(const gs_c_use_item_res& from);

  inline gs_c_use_item_res& operator=(const gs_c_use_item_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_use_item_res& default_instance();

  void Swap(gs_c_use_item_res* other);

  // implements Message ----------------------------------------------

  gs_c_use_item_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_use_item_res& from);
  void MergeFrom(const gs_c_use_item_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .struct_game_element consume = 2;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 2;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // repeated .struct_game_element_array items_arr = 3;
  inline int items_arr_size() const;
  inline void clear_items_arr();
  static const int kItemsArrFieldNumber = 3;
  inline const ::struct_game_element_array& items_arr(int index) const;
  inline ::struct_game_element_array* mutable_items_arr(int index);
  inline ::struct_game_element_array* add_items_arr();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element_array >&
      items_arr() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element_array >*
      mutable_items_arr();

  // optional .user_shop shop = 5;
  inline bool has_shop() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 5;
  inline const ::user_shop& shop() const;
  inline ::user_shop* mutable_shop();
  inline ::user_shop* release_shop();
  inline void set_allocated_shop(::user_shop* shop);

  // @@protoc_insertion_point(class_scope:gs_c_use_item_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_shop();
  inline void clear_has_shop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element_array > items_arr_;
  ::user_shop* shop_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_use_item_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_shop_info_req : public ::google::protobuf::Message {
 public:
  c_gs_shop_info_req();
  virtual ~c_gs_shop_info_req();

  c_gs_shop_info_req(const c_gs_shop_info_req& from);

  inline c_gs_shop_info_req& operator=(const c_gs_shop_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_shop_info_req& default_instance();

  void Swap(c_gs_shop_info_req* other);

  // implements Message ----------------------------------------------

  c_gs_shop_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_shop_info_req& from);
  void MergeFrom(const c_gs_shop_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef c_gs_shop_info_req_PULLTYPE PULLTYPE;
  static const PULLTYPE ONE = c_gs_shop_info_req_PULLTYPE_ONE;
  static const PULLTYPE ALL = c_gs_shop_info_req_PULLTYPE_ALL;
  static inline bool PULLTYPE_IsValid(int value) {
    return c_gs_shop_info_req_PULLTYPE_IsValid(value);
  }
  static const PULLTYPE PULLTYPE_MIN =
    c_gs_shop_info_req_PULLTYPE_PULLTYPE_MIN;
  static const PULLTYPE PULLTYPE_MAX =
    c_gs_shop_info_req_PULLTYPE_PULLTYPE_MAX;
  static const int PULLTYPE_ARRAYSIZE =
    c_gs_shop_info_req_PULLTYPE_PULLTYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PULLTYPE_descriptor() {
    return c_gs_shop_info_req_PULLTYPE_descriptor();
  }
  static inline const ::std::string& PULLTYPE_Name(PULLTYPE value) {
    return c_gs_shop_info_req_PULLTYPE_Name(value);
  }
  static inline bool PULLTYPE_Parse(const ::std::string& name,
      PULLTYPE* value) {
    return c_gs_shop_info_req_PULLTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c_gs_shop_info_req.PULLTYPE pull_type = 1;
  inline bool has_pull_type() const;
  inline void clear_pull_type();
  static const int kPullTypeFieldNumber = 1;
  inline ::c_gs_shop_info_req_PULLTYPE pull_type() const;
  inline void set_pull_type(::c_gs_shop_info_req_PULLTYPE value);

  // optional .user_shop.ESHOPTYPE shop_type = 2;
  inline bool has_shop_type() const;
  inline void clear_shop_type();
  static const int kShopTypeFieldNumber = 2;
  inline ::user_shop_ESHOPTYPE shop_type() const;
  inline void set_shop_type(::user_shop_ESHOPTYPE value);

  // @@protoc_insertion_point(class_scope:c_gs_shop_info_req)
 private:
  inline void set_has_pull_type();
  inline void clear_has_pull_type();
  inline void set_has_shop_type();
  inline void clear_has_shop_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int pull_type_;
  int shop_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_shop_info_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_shop_info_res : public ::google::protobuf::Message {
 public:
  gs_c_shop_info_res();
  virtual ~gs_c_shop_info_res();

  gs_c_shop_info_res(const gs_c_shop_info_res& from);

  inline gs_c_shop_info_res& operator=(const gs_c_shop_info_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_shop_info_res& default_instance();

  void Swap(gs_c_shop_info_res* other);

  // implements Message ----------------------------------------------

  gs_c_shop_info_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_shop_info_res& from);
  void MergeFrom(const gs_c_shop_info_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .user_shop shops = 2;
  inline int shops_size() const;
  inline void clear_shops();
  static const int kShopsFieldNumber = 2;
  inline const ::user_shop& shops(int index) const;
  inline ::user_shop* mutable_shops(int index);
  inline ::user_shop* add_shops();
  inline const ::google::protobuf::RepeatedPtrField< ::user_shop >&
      shops() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_shop >*
      mutable_shops();

  // @@protoc_insertion_point(class_scope:gs_c_shop_info_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::user_shop > shops_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_shop_info_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_shop_buy_item_req : public ::google::protobuf::Message {
 public:
  c_gs_shop_buy_item_req();
  virtual ~c_gs_shop_buy_item_req();

  c_gs_shop_buy_item_req(const c_gs_shop_buy_item_req& from);

  inline c_gs_shop_buy_item_req& operator=(const c_gs_shop_buy_item_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_shop_buy_item_req& default_instance();

  void Swap(c_gs_shop_buy_item_req* other);

  // implements Message ----------------------------------------------

  c_gs_shop_buy_item_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_shop_buy_item_req& from);
  void MergeFrom(const c_gs_shop_buy_item_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .user_shop.ESHOPTYPE shop_type = 1;
  inline bool has_shop_type() const;
  inline void clear_shop_type();
  static const int kShopTypeFieldNumber = 1;
  inline ::user_shop_ESHOPTYPE shop_type() const;
  inline void set_shop_type(::user_shop_ESHOPTYPE value);

  // required uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_shop_buy_item_req)
 private:
  inline void set_has_shop_type();
  inline void clear_has_shop_type();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int shop_type_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_shop_buy_item_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_shop_buy_item_res : public ::google::protobuf::Message {
 public:
  gs_c_shop_buy_item_res();
  virtual ~gs_c_shop_buy_item_res();

  gs_c_shop_buy_item_res(const gs_c_shop_buy_item_res& from);

  inline gs_c_shop_buy_item_res& operator=(const gs_c_shop_buy_item_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_shop_buy_item_res& default_instance();

  void Swap(gs_c_shop_buy_item_res* other);

  // implements Message ----------------------------------------------

  gs_c_shop_buy_item_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_shop_buy_item_res& from);
  void MergeFrom(const gs_c_shop_buy_item_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional .user_shop refreshed_shop = 2;
  inline bool has_refreshed_shop() const;
  inline void clear_refreshed_shop();
  static const int kRefreshedShopFieldNumber = 2;
  inline const ::user_shop& refreshed_shop() const;
  inline ::user_shop* mutable_refreshed_shop();
  inline ::user_shop* release_refreshed_shop();
  inline void set_allocated_refreshed_shop(::user_shop* refreshed_shop);

  // optional .user_shop.ESHOPTYPE shop_type = 3;
  inline bool has_shop_type() const;
  inline void clear_shop_type();
  static const int kShopTypeFieldNumber = 3;
  inline ::user_shop_ESHOPTYPE shop_type() const;
  inline void set_shop_type(::user_shop_ESHOPTYPE value);

  // optional uint32 pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // repeated .struct_game_element output = 5;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 5;
  inline const ::struct_game_element& output(int index) const;
  inline ::struct_game_element* mutable_output(int index);
  inline ::struct_game_element* add_output();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      output() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_output();

  // repeated .struct_game_element consume = 6;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 6;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // @@protoc_insertion_point(class_scope:gs_c_shop_buy_item_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_refreshed_shop();
  inline void clear_has_refreshed_shop();
  inline void set_has_shop_type();
  inline void clear_has_shop_type();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::user_shop* refreshed_shop_;
  ::google::protobuf::uint32 error_code_;
  int shop_type_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > output_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_shop_buy_item_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_shop_refresh_req : public ::google::protobuf::Message {
 public:
  c_gs_shop_refresh_req();
  virtual ~c_gs_shop_refresh_req();

  c_gs_shop_refresh_req(const c_gs_shop_refresh_req& from);

  inline c_gs_shop_refresh_req& operator=(const c_gs_shop_refresh_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_shop_refresh_req& default_instance();

  void Swap(c_gs_shop_refresh_req* other);

  // implements Message ----------------------------------------------

  c_gs_shop_refresh_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_shop_refresh_req& from);
  void MergeFrom(const c_gs_shop_refresh_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .user_shop.ESHOPTYPE shop_type = 1;
  inline bool has_shop_type() const;
  inline void clear_shop_type();
  static const int kShopTypeFieldNumber = 1;
  inline ::user_shop_ESHOPTYPE shop_type() const;
  inline void set_shop_type(::user_shop_ESHOPTYPE value);

  // @@protoc_insertion_point(class_scope:c_gs_shop_refresh_req)
 private:
  inline void set_has_shop_type();
  inline void clear_has_shop_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int shop_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_shop_refresh_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_shop_refresh_res : public ::google::protobuf::Message {
 public:
  gs_c_shop_refresh_res();
  virtual ~gs_c_shop_refresh_res();

  gs_c_shop_refresh_res(const gs_c_shop_refresh_res& from);

  inline gs_c_shop_refresh_res& operator=(const gs_c_shop_refresh_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_shop_refresh_res& default_instance();

  void Swap(gs_c_shop_refresh_res* other);

  // implements Message ----------------------------------------------

  gs_c_shop_refresh_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_shop_refresh_res& from);
  void MergeFrom(const gs_c_shop_refresh_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional .user_shop shop = 2;
  inline bool has_shop() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 2;
  inline const ::user_shop& shop() const;
  inline ::user_shop* mutable_shop();
  inline ::user_shop* release_shop();
  inline void set_allocated_shop(::user_shop* shop);

  // repeated .struct_game_element consume = 3;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 3;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // @@protoc_insertion_point(class_scope:gs_c_shop_refresh_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_shop();
  inline void clear_has_shop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::user_shop* shop_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_shop_refresh_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_sell_req : public ::google::protobuf::Message {
 public:
  c_gs_sell_req();
  virtual ~c_gs_sell_req();

  c_gs_sell_req(const c_gs_sell_req& from);

  inline c_gs_sell_req& operator=(const c_gs_sell_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_sell_req& default_instance();

  void Swap(c_gs_sell_req* other);

  // implements Message ----------------------------------------------

  c_gs_sell_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_sell_req& from);
  void MergeFrom(const c_gs_sell_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .struct_game_element items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::struct_game_element& items(int index) const;
  inline ::struct_game_element* mutable_items(int index);
  inline ::struct_game_element* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:c_gs_sell_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_sell_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_sell_res : public ::google::protobuf::Message {
 public:
  gs_c_sell_res();
  virtual ~gs_c_sell_res();

  gs_c_sell_res(const gs_c_sell_res& from);

  inline gs_c_sell_res& operator=(const gs_c_sell_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_sell_res& default_instance();

  void Swap(gs_c_sell_res* other);

  // implements Message ----------------------------------------------

  gs_c_sell_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_sell_res& from);
  void MergeFrom(const gs_c_sell_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .struct_game_element eles = 2;
  inline int eles_size() const;
  inline void clear_eles();
  static const int kElesFieldNumber = 2;
  inline const ::struct_game_element& eles(int index) const;
  inline ::struct_game_element* mutable_eles(int index);
  inline ::struct_game_element* add_eles();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      eles() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_eles();

  // @@protoc_insertion_point(class_scope:gs_c_sell_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > eles_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_sell_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_arena_refresh_match_req : public ::google::protobuf::Message {
 public:
  c_gs_arena_refresh_match_req();
  virtual ~c_gs_arena_refresh_match_req();

  c_gs_arena_refresh_match_req(const c_gs_arena_refresh_match_req& from);

  inline c_gs_arena_refresh_match_req& operator=(const c_gs_arena_refresh_match_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_arena_refresh_match_req& default_instance();

  void Swap(c_gs_arena_refresh_match_req* other);

  // implements Message ----------------------------------------------

  c_gs_arena_refresh_match_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_arena_refresh_match_req& from);
  void MergeFrom(const c_gs_arena_refresh_match_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_arena_refresh_match_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_arena_refresh_match_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_arena_refresh_match_res : public ::google::protobuf::Message {
 public:
  gs_c_arena_refresh_match_res();
  virtual ~gs_c_arena_refresh_match_res();

  gs_c_arena_refresh_match_res(const gs_c_arena_refresh_match_res& from);

  inline gs_c_arena_refresh_match_res& operator=(const gs_c_arena_refresh_match_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_arena_refresh_match_res& default_instance();

  void Swap(gs_c_arena_refresh_match_res* other);

  // implements Message ----------------------------------------------

  gs_c_arena_refresh_match_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_arena_refresh_match_res& from);
  void MergeFrom(const gs_c_arena_refresh_match_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .user_arena_contestant matchs = 2;
  inline int matchs_size() const;
  inline void clear_matchs();
  static const int kMatchsFieldNumber = 2;
  inline const ::user_arena_contestant& matchs(int index) const;
  inline ::user_arena_contestant* mutable_matchs(int index);
  inline ::user_arena_contestant* add_matchs();
  inline const ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >&
      matchs() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >*
      mutable_matchs();

  // @@protoc_insertion_point(class_scope:gs_c_arena_refresh_match_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::user_arena_contestant > matchs_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_arena_refresh_match_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_arena_update_team_req : public ::google::protobuf::Message {
 public:
  c_gs_arena_update_team_req();
  virtual ~c_gs_arena_update_team_req();

  c_gs_arena_update_team_req(const c_gs_arena_update_team_req& from);

  inline c_gs_arena_update_team_req& operator=(const c_gs_arena_update_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_arena_update_team_req& default_instance();

  void Swap(c_gs_arena_update_team_req* other);

  // implements Message ----------------------------------------------

  c_gs_arena_update_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_arena_update_team_req& from);
  void MergeFrom(const c_gs_arena_update_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 heros = 1;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 1;
  inline ::google::protobuf::uint32 heros(int index) const;
  inline void set_heros(int index, ::google::protobuf::uint32 value);
  inline void add_heros(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:c_gs_arena_update_team_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heros_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_arena_update_team_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_arena_update_team_res : public ::google::protobuf::Message {
 public:
  gs_c_arena_update_team_res();
  virtual ~gs_c_arena_update_team_res();

  gs_c_arena_update_team_res(const gs_c_arena_update_team_res& from);

  inline gs_c_arena_update_team_res& operator=(const gs_c_arena_update_team_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_arena_update_team_res& default_instance();

  void Swap(gs_c_arena_update_team_res* other);

  // implements Message ----------------------------------------------

  gs_c_arena_update_team_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_arena_update_team_res& from);
  void MergeFrom(const gs_c_arena_update_team_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_arena_update_team_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_arena_update_team_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_arena_start_challenge_req : public ::google::protobuf::Message {
 public:
  c_gs_arena_start_challenge_req();
  virtual ~c_gs_arena_start_challenge_req();

  c_gs_arena_start_challenge_req(const c_gs_arena_start_challenge_req& from);

  inline c_gs_arena_start_challenge_req& operator=(const c_gs_arena_start_challenge_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_arena_start_challenge_req& default_instance();

  void Swap(c_gs_arena_start_challenge_req* other);

  // implements Message ----------------------------------------------

  c_gs_arena_start_challenge_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_arena_start_challenge_req& from);
  void MergeFrom(const c_gs_arena_start_challenge_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 heros = 1;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 1;
  inline ::google::protobuf::uint32 heros(int index) const;
  inline void set_heros(int index, ::google::protobuf::uint32 value);
  inline void add_heros(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heros();

  // required uint32 defender_user_id = 2;
  inline bool has_defender_user_id() const;
  inline void clear_defender_user_id();
  static const int kDefenderUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 defender_user_id() const;
  inline void set_defender_user_id(::google::protobuf::uint32 value);

  // required uint32 power = 3;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // required uint32 defender_power = 4;
  inline bool has_defender_power() const;
  inline void clear_defender_power();
  static const int kDefenderPowerFieldNumber = 4;
  inline ::google::protobuf::uint32 defender_power() const;
  inline void set_defender_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_arena_start_challenge_req)
 private:
  inline void set_has_defender_user_id();
  inline void clear_has_defender_user_id();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_defender_power();
  inline void clear_has_defender_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heros_;
  ::google::protobuf::uint32 defender_user_id_;
  ::google::protobuf::uint32 power_;
  ::google::protobuf::uint32 defender_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_arena_start_challenge_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_arena_start_challenge_res : public ::google::protobuf::Message {
 public:
  gs_c_arena_start_challenge_res();
  virtual ~gs_c_arena_start_challenge_res();

  gs_c_arena_start_challenge_res(const gs_c_arena_start_challenge_res& from);

  inline gs_c_arena_start_challenge_res& operator=(const gs_c_arena_start_challenge_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_arena_start_challenge_res& default_instance();

  void Swap(gs_c_arena_start_challenge_res* other);

  // implements Message ----------------------------------------------

  gs_c_arena_start_challenge_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_arena_start_challenge_res& from);
  void MergeFrom(const gs_c_arena_start_challenge_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 last_challenge_time = 2;
  inline bool has_last_challenge_time() const;
  inline void clear_last_challenge_time();
  static const int kLastChallengeTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_challenge_time() const;
  inline void set_last_challenge_time(::google::protobuf::uint32 value);

  // optional uint32 last_day_challenge_num = 3;
  inline bool has_last_day_challenge_num() const;
  inline void clear_last_day_challenge_num();
  static const int kLastDayChallengeNumFieldNumber = 3;
  inline ::google::protobuf::uint32 last_day_challenge_num() const;
  inline void set_last_day_challenge_num(::google::protobuf::uint32 value);

  // repeated .user_arena_contestant matchs = 4;
  inline int matchs_size() const;
  inline void clear_matchs();
  static const int kMatchsFieldNumber = 4;
  inline const ::user_arena_contestant& matchs(int index) const;
  inline ::user_arena_contestant* mutable_matchs(int index);
  inline ::user_arena_contestant* add_matchs();
  inline const ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >&
      matchs() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >*
      mutable_matchs();

  // @@protoc_insertion_point(class_scope:gs_c_arena_start_challenge_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_last_challenge_time();
  inline void clear_has_last_challenge_time();
  inline void set_has_last_day_challenge_num();
  inline void clear_has_last_day_challenge_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 last_challenge_time_;
  ::google::protobuf::RepeatedPtrField< ::user_arena_contestant > matchs_;
  ::google::protobuf::uint32 last_day_challenge_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_arena_start_challenge_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_arena_end_challenge_req : public ::google::protobuf::Message {
 public:
  c_gs_arena_end_challenge_req();
  virtual ~c_gs_arena_end_challenge_req();

  c_gs_arena_end_challenge_req(const c_gs_arena_end_challenge_req& from);

  inline c_gs_arena_end_challenge_req& operator=(const c_gs_arena_end_challenge_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_arena_end_challenge_req& default_instance();

  void Swap(c_gs_arena_end_challenge_req* other);

  // implements Message ----------------------------------------------

  c_gs_arena_end_challenge_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_arena_end_challenge_req& from);
  void MergeFrom(const c_gs_arena_end_challenge_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_win = 1;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 1;
  inline bool is_win() const;
  inline void set_is_win(bool value);

  // @@protoc_insertion_point(class_scope:c_gs_arena_end_challenge_req)
 private:
  inline void set_has_is_win();
  inline void clear_has_is_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_arena_end_challenge_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_arena_end_challenge_res : public ::google::protobuf::Message {
 public:
  gs_c_arena_end_challenge_res();
  virtual ~gs_c_arena_end_challenge_res();

  gs_c_arena_end_challenge_res(const gs_c_arena_end_challenge_res& from);

  inline gs_c_arena_end_challenge_res& operator=(const gs_c_arena_end_challenge_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_arena_end_challenge_res& default_instance();

  void Swap(gs_c_arena_end_challenge_res* other);

  // implements Message ----------------------------------------------

  gs_c_arena_end_challenge_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_arena_end_challenge_res& from);
  void MergeFrom(const gs_c_arena_end_challenge_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // repeated .struct_game_element output = 3;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 3;
  inline const ::struct_game_element& output(int index) const;
  inline ::struct_game_element* mutable_output(int index);
  inline ::struct_game_element* add_output();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      output() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_output();

  // @@protoc_insertion_point(class_scope:gs_c_arena_end_challenge_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > output_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_arena_end_challenge_res* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_arena_challenge_ntf : public ::google::protobuf::Message {
 public:
  gs_c_arena_challenge_ntf();
  virtual ~gs_c_arena_challenge_ntf();

  gs_c_arena_challenge_ntf(const gs_c_arena_challenge_ntf& from);

  inline gs_c_arena_challenge_ntf& operator=(const gs_c_arena_challenge_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_arena_challenge_ntf& default_instance();

  void Swap(gs_c_arena_challenge_ntf* other);

  // implements Message ----------------------------------------------

  gs_c_arena_challenge_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_arena_challenge_ntf& from);
  void MergeFrom(const gs_c_arena_challenge_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .user_arena_log ele = 1;
  inline bool has_ele() const;
  inline void clear_ele();
  static const int kEleFieldNumber = 1;
  inline const ::user_arena_log& ele() const;
  inline ::user_arena_log* mutable_ele();
  inline ::user_arena_log* release_ele();
  inline void set_allocated_ele(::user_arena_log* ele);

  // @@protoc_insertion_point(class_scope:gs_c_arena_challenge_ntf)
 private:
  inline void set_has_ele();
  inline void clear_has_ele();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::user_arena_log* ele_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_arena_challenge_ntf* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_arena_challenge_reset_cd_req : public ::google::protobuf::Message {
 public:
  c_gs_arena_challenge_reset_cd_req();
  virtual ~c_gs_arena_challenge_reset_cd_req();

  c_gs_arena_challenge_reset_cd_req(const c_gs_arena_challenge_reset_cd_req& from);

  inline c_gs_arena_challenge_reset_cd_req& operator=(const c_gs_arena_challenge_reset_cd_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_arena_challenge_reset_cd_req& default_instance();

  void Swap(c_gs_arena_challenge_reset_cd_req* other);

  // implements Message ----------------------------------------------

  c_gs_arena_challenge_reset_cd_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_arena_challenge_reset_cd_req& from);
  void MergeFrom(const c_gs_arena_challenge_reset_cd_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_arena_challenge_reset_cd_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_arena_challenge_reset_cd_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_arena_challenge_reset_cd_res : public ::google::protobuf::Message {
 public:
  gs_c_arena_challenge_reset_cd_res();
  virtual ~gs_c_arena_challenge_reset_cd_res();

  gs_c_arena_challenge_reset_cd_res(const gs_c_arena_challenge_reset_cd_res& from);

  inline gs_c_arena_challenge_reset_cd_res& operator=(const gs_c_arena_challenge_reset_cd_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_arena_challenge_reset_cd_res& default_instance();

  void Swap(gs_c_arena_challenge_reset_cd_res* other);

  // implements Message ----------------------------------------------

  gs_c_arena_challenge_reset_cd_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_arena_challenge_reset_cd_res& from);
  void MergeFrom(const gs_c_arena_challenge_reset_cd_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 last_challenge_time = 2;
  inline bool has_last_challenge_time() const;
  inline void clear_last_challenge_time();
  static const int kLastChallengeTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_challenge_time() const;
  inline void set_last_challenge_time(::google::protobuf::uint32 value);

  // repeated .struct_game_element consume = 3;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 3;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // @@protoc_insertion_point(class_scope:gs_c_arena_challenge_reset_cd_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_last_challenge_time();
  inline void clear_has_last_challenge_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 last_challenge_time_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_arena_challenge_reset_cd_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_arena_challenge_reset_num_req : public ::google::protobuf::Message {
 public:
  c_gs_arena_challenge_reset_num_req();
  virtual ~c_gs_arena_challenge_reset_num_req();

  c_gs_arena_challenge_reset_num_req(const c_gs_arena_challenge_reset_num_req& from);

  inline c_gs_arena_challenge_reset_num_req& operator=(const c_gs_arena_challenge_reset_num_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_arena_challenge_reset_num_req& default_instance();

  void Swap(c_gs_arena_challenge_reset_num_req* other);

  // implements Message ----------------------------------------------

  c_gs_arena_challenge_reset_num_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_arena_challenge_reset_num_req& from);
  void MergeFrom(const c_gs_arena_challenge_reset_num_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_arena_challenge_reset_num_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_arena_challenge_reset_num_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_arena_challenge_reset_num_res : public ::google::protobuf::Message {
 public:
  gs_c_arena_challenge_reset_num_res();
  virtual ~gs_c_arena_challenge_reset_num_res();

  gs_c_arena_challenge_reset_num_res(const gs_c_arena_challenge_reset_num_res& from);

  inline gs_c_arena_challenge_reset_num_res& operator=(const gs_c_arena_challenge_reset_num_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_arena_challenge_reset_num_res& default_instance();

  void Swap(gs_c_arena_challenge_reset_num_res* other);

  // implements Message ----------------------------------------------

  gs_c_arena_challenge_reset_num_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_arena_challenge_reset_num_res& from);
  void MergeFrom(const gs_c_arena_challenge_reset_num_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 last_challenge_time = 2;
  inline bool has_last_challenge_time() const;
  inline void clear_last_challenge_time();
  static const int kLastChallengeTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_challenge_time() const;
  inline void set_last_challenge_time(::google::protobuf::uint32 value);

  // optional uint32 last_day_challenge_num = 3;
  inline bool has_last_day_challenge_num() const;
  inline void clear_last_day_challenge_num();
  static const int kLastDayChallengeNumFieldNumber = 3;
  inline ::google::protobuf::uint32 last_day_challenge_num() const;
  inline void set_last_day_challenge_num(::google::protobuf::uint32 value);

  // optional uint32 last_time_buy_arena_challenge = 4;
  inline bool has_last_time_buy_arena_challenge() const;
  inline void clear_last_time_buy_arena_challenge();
  static const int kLastTimeBuyArenaChallengeFieldNumber = 4;
  inline ::google::protobuf::uint32 last_time_buy_arena_challenge() const;
  inline void set_last_time_buy_arena_challenge(::google::protobuf::uint32 value);

  // optional uint32 last_day_buy_arena_challenge_num = 5;
  inline bool has_last_day_buy_arena_challenge_num() const;
  inline void clear_last_day_buy_arena_challenge_num();
  static const int kLastDayBuyArenaChallengeNumFieldNumber = 5;
  inline ::google::protobuf::uint32 last_day_buy_arena_challenge_num() const;
  inline void set_last_day_buy_arena_challenge_num(::google::protobuf::uint32 value);

  // repeated .struct_game_element consume = 6;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 6;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // @@protoc_insertion_point(class_scope:gs_c_arena_challenge_reset_num_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_last_challenge_time();
  inline void clear_has_last_challenge_time();
  inline void set_has_last_day_challenge_num();
  inline void clear_has_last_day_challenge_num();
  inline void set_has_last_time_buy_arena_challenge();
  inline void clear_has_last_time_buy_arena_challenge();
  inline void set_has_last_day_buy_arena_challenge_num();
  inline void clear_has_last_day_buy_arena_challenge_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 last_challenge_time_;
  ::google::protobuf::uint32 last_day_challenge_num_;
  ::google::protobuf::uint32 last_time_buy_arena_challenge_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::google::protobuf::uint32 last_day_buy_arena_challenge_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_arena_challenge_reset_num_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_arena_ranks_req : public ::google::protobuf::Message {
 public:
  c_gs_arena_ranks_req();
  virtual ~c_gs_arena_ranks_req();

  c_gs_arena_ranks_req(const c_gs_arena_ranks_req& from);

  inline c_gs_arena_ranks_req& operator=(const c_gs_arena_ranks_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_arena_ranks_req& default_instance();

  void Swap(c_gs_arena_ranks_req* other);

  // implements Message ----------------------------------------------

  c_gs_arena_ranks_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_arena_ranks_req& from);
  void MergeFrom(const c_gs_arena_ranks_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 page_num = 1;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 1;
  inline ::google::protobuf::uint32 page_num() const;
  inline void set_page_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_arena_ranks_req)
 private:
  inline void set_has_page_num();
  inline void clear_has_page_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 page_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_arena_ranks_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_arena_ranks_res : public ::google::protobuf::Message {
 public:
  gs_c_arena_ranks_res();
  virtual ~gs_c_arena_ranks_res();

  gs_c_arena_ranks_res(const gs_c_arena_ranks_res& from);

  inline gs_c_arena_ranks_res& operator=(const gs_c_arena_ranks_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_arena_ranks_res& default_instance();

  void Swap(gs_c_arena_ranks_res* other);

  // implements Message ----------------------------------------------

  gs_c_arena_ranks_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_arena_ranks_res& from);
  void MergeFrom(const gs_c_arena_ranks_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .user_arena_contestant ranks = 2;
  inline int ranks_size() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 2;
  inline const ::user_arena_contestant& ranks(int index) const;
  inline ::user_arena_contestant* mutable_ranks(int index);
  inline ::user_arena_contestant* add_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >&
      ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >*
      mutable_ranks();

  // @@protoc_insertion_point(class_scope:gs_c_arena_ranks_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::user_arena_contestant > ranks_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_arena_ranks_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_arena_log_req : public ::google::protobuf::Message {
 public:
  c_gs_arena_log_req();
  virtual ~c_gs_arena_log_req();

  c_gs_arena_log_req(const c_gs_arena_log_req& from);

  inline c_gs_arena_log_req& operator=(const c_gs_arena_log_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_arena_log_req& default_instance();

  void Swap(c_gs_arena_log_req* other);

  // implements Message ----------------------------------------------

  c_gs_arena_log_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_arena_log_req& from);
  void MergeFrom(const c_gs_arena_log_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_arena_log_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_arena_log_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_arena_log_res : public ::google::protobuf::Message {
 public:
  gs_c_arena_log_res();
  virtual ~gs_c_arena_log_res();

  gs_c_arena_log_res(const gs_c_arena_log_res& from);

  inline gs_c_arena_log_res& operator=(const gs_c_arena_log_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_arena_log_res& default_instance();

  void Swap(gs_c_arena_log_res* other);

  // implements Message ----------------------------------------------

  gs_c_arena_log_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_arena_log_res& from);
  void MergeFrom(const gs_c_arena_log_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .user_arena_log log = 1;
  inline int log_size() const;
  inline void clear_log();
  static const int kLogFieldNumber = 1;
  inline const ::user_arena_log& log(int index) const;
  inline ::user_arena_log* mutable_log(int index);
  inline ::user_arena_log* add_log();
  inline const ::google::protobuf::RepeatedPtrField< ::user_arena_log >&
      log() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_arena_log >*
      mutable_log();

  // @@protoc_insertion_point(class_scope:gs_c_arena_log_res)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::user_arena_log > log_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_arena_log_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_arena_search_req : public ::google::protobuf::Message {
 public:
  c_gs_arena_search_req();
  virtual ~c_gs_arena_search_req();

  c_gs_arena_search_req(const c_gs_arena_search_req& from);

  inline c_gs_arena_search_req& operator=(const c_gs_arena_search_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_arena_search_req& default_instance();

  void Swap(c_gs_arena_search_req* other);

  // implements Message ----------------------------------------------

  c_gs_arena_search_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_arena_search_req& from);
  void MergeFrom(const c_gs_arena_search_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // @@protoc_insertion_point(class_scope:c_gs_arena_search_req)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_arena_search_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_arena_search_res : public ::google::protobuf::Message {
 public:
  gs_c_arena_search_res();
  virtual ~gs_c_arena_search_res();

  gs_c_arena_search_res(const gs_c_arena_search_res& from);

  inline gs_c_arena_search_res& operator=(const gs_c_arena_search_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_arena_search_res& default_instance();

  void Swap(gs_c_arena_search_res* other);

  // implements Message ----------------------------------------------

  gs_c_arena_search_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_arena_search_res& from);
  void MergeFrom(const gs_c_arena_search_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional .user_arena_contestant contestant = 2;
  inline bool has_contestant() const;
  inline void clear_contestant();
  static const int kContestantFieldNumber = 2;
  inline const ::user_arena_contestant& contestant() const;
  inline ::user_arena_contestant* mutable_contestant();
  inline ::user_arena_contestant* release_contestant();
  inline void set_allocated_contestant(::user_arena_contestant* contestant);

  // @@protoc_insertion_point(class_scope:gs_c_arena_search_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_contestant();
  inline void clear_has_contestant();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::user_arena_contestant* contestant_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_arena_search_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_fragment_compound_req : public ::google::protobuf::Message {
 public:
  c_gs_fragment_compound_req();
  virtual ~c_gs_fragment_compound_req();

  c_gs_fragment_compound_req(const c_gs_fragment_compound_req& from);

  inline c_gs_fragment_compound_req& operator=(const c_gs_fragment_compound_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_fragment_compound_req& default_instance();

  void Swap(c_gs_fragment_compound_req* other);

  // implements Message ----------------------------------------------

  c_gs_fragment_compound_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_fragment_compound_req& from);
  void MergeFrom(const c_gs_fragment_compound_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 compound_id = 1;
  inline bool has_compound_id() const;
  inline void clear_compound_id();
  static const int kCompoundIdFieldNumber = 1;
  inline ::google::protobuf::uint32 compound_id() const;
  inline void set_compound_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_fragment_compound_req)
 private:
  inline void set_has_compound_id();
  inline void clear_has_compound_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 compound_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_fragment_compound_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_fragment_compound_res : public ::google::protobuf::Message {
 public:
  gs_c_fragment_compound_res();
  virtual ~gs_c_fragment_compound_res();

  gs_c_fragment_compound_res(const gs_c_fragment_compound_res& from);

  inline gs_c_fragment_compound_res& operator=(const gs_c_fragment_compound_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_fragment_compound_res& default_instance();

  void Swap(gs_c_fragment_compound_res* other);

  // implements Message ----------------------------------------------

  gs_c_fragment_compound_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_fragment_compound_res& from);
  void MergeFrom(const gs_c_fragment_compound_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .struct_game_element eles = 2;
  inline int eles_size() const;
  inline void clear_eles();
  static const int kElesFieldNumber = 2;
  inline const ::struct_game_element& eles(int index) const;
  inline ::struct_game_element* mutable_eles(int index);
  inline ::struct_game_element* add_eles();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      eles() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_eles();

  // @@protoc_insertion_point(class_scope:gs_c_fragment_compound_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > eles_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_fragment_compound_res* default_instance_;
};
// -------------------------------------------------------------------

class user_mail : public ::google::protobuf::Message {
 public:
  user_mail();
  virtual ~user_mail();

  user_mail(const user_mail& from);

  inline user_mail& operator=(const user_mail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_mail& default_instance();

  void Swap(user_mail* other);

  // implements Message ----------------------------------------------

  user_mail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_mail& from);
  void MergeFrom(const user_mail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);

  // required uint32 send_time = 2;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 send_time() const;
  inline void set_send_time(::google::protobuf::uint32 value);

  // required .MAIL_TYPE type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::MAIL_TYPE type() const;
  inline void set_type(::MAIL_TYPE value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required .MAIL_STATUS status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::MAIL_STATUS status() const;
  inline void set_status(::MAIL_STATUS value);

  // repeated .struct_game_element elements = 8;
  inline int elements_size() const;
  inline void clear_elements();
  static const int kElementsFieldNumber = 8;
  inline const ::struct_game_element& elements(int index) const;
  inline ::struct_game_element* mutable_elements(int index);
  inline ::struct_game_element* add_elements();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      elements() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_elements();

  // @@protoc_insertion_point(class_scope:user_mail)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_send_time();
  inline void clear_has_send_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mail_id_;
  ::google::protobuf::uint32 send_time_;
  ::std::string* content_;
  int type_;
  int status_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > elements_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_mail* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_mail_opt_req : public ::google::protobuf::Message {
 public:
  c_gs_mail_opt_req();
  virtual ~c_gs_mail_opt_req();

  c_gs_mail_opt_req(const c_gs_mail_opt_req& from);

  inline c_gs_mail_opt_req& operator=(const c_gs_mail_opt_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_mail_opt_req& default_instance();

  void Swap(c_gs_mail_opt_req* other);

  // implements Message ----------------------------------------------

  c_gs_mail_opt_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_mail_opt_req& from);
  void MergeFrom(const c_gs_mail_opt_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef c_gs_mail_opt_req_OPT OPT;
  static const OPT DEL = c_gs_mail_opt_req_OPT_DEL;
  static const OPT READ1 = c_gs_mail_opt_req_OPT_READ1;
  static const OPT GET_ATTACH_AND_DEL1 = c_gs_mail_opt_req_OPT_GET_ATTACH_AND_DEL1;
  static const OPT GET_ATTACH_AND_DEL_ALL = c_gs_mail_opt_req_OPT_GET_ATTACH_AND_DEL_ALL;
  static inline bool OPT_IsValid(int value) {
    return c_gs_mail_opt_req_OPT_IsValid(value);
  }
  static const OPT OPT_MIN =
    c_gs_mail_opt_req_OPT_OPT_MIN;
  static const OPT OPT_MAX =
    c_gs_mail_opt_req_OPT_OPT_MAX;
  static const int OPT_ARRAYSIZE =
    c_gs_mail_opt_req_OPT_OPT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPT_descriptor() {
    return c_gs_mail_opt_req_OPT_descriptor();
  }
  static inline const ::std::string& OPT_Name(OPT value) {
    return c_gs_mail_opt_req_OPT_Name(value);
  }
  static inline bool OPT_Parse(const ::std::string& name,
      OPT* value) {
    return c_gs_mail_opt_req_OPT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c_gs_mail_opt_req.OPT mail_opt = 1;
  inline bool has_mail_opt() const;
  inline void clear_mail_opt();
  static const int kMailOptFieldNumber = 1;
  inline ::c_gs_mail_opt_req_OPT mail_opt() const;
  inline void set_mail_opt(::c_gs_mail_opt_req_OPT value);

  // repeated uint32 mail_id_arr = 2;
  inline int mail_id_arr_size() const;
  inline void clear_mail_id_arr();
  static const int kMailIdArrFieldNumber = 2;
  inline ::google::protobuf::uint32 mail_id_arr(int index) const;
  inline void set_mail_id_arr(int index, ::google::protobuf::uint32 value);
  inline void add_mail_id_arr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mail_id_arr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mail_id_arr();

  // @@protoc_insertion_point(class_scope:c_gs_mail_opt_req)
 private:
  inline void set_has_mail_opt();
  inline void clear_has_mail_opt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mail_id_arr_;
  int mail_opt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_mail_opt_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_mail_opt_res_mail_update : public ::google::protobuf::Message {
 public:
  gs_c_mail_opt_res_mail_update();
  virtual ~gs_c_mail_opt_res_mail_update();

  gs_c_mail_opt_res_mail_update(const gs_c_mail_opt_res_mail_update& from);

  inline gs_c_mail_opt_res_mail_update& operator=(const gs_c_mail_opt_res_mail_update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_mail_opt_res_mail_update& default_instance();

  void Swap(gs_c_mail_opt_res_mail_update* other);

  // implements Message ----------------------------------------------

  gs_c_mail_opt_res_mail_update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_mail_opt_res_mail_update& from);
  void MergeFrom(const gs_c_mail_opt_res_mail_update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mail_id = 1;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);

  // required .MAIL_STATUS mail_status = 2;
  inline bool has_mail_status() const;
  inline void clear_mail_status();
  static const int kMailStatusFieldNumber = 2;
  inline ::MAIL_STATUS mail_status() const;
  inline void set_mail_status(::MAIL_STATUS value);

  // @@protoc_insertion_point(class_scope:gs_c_mail_opt_res.mail_update)
 private:
  inline void set_has_mail_id();
  inline void clear_has_mail_id();
  inline void set_has_mail_status();
  inline void clear_has_mail_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mail_id_;
  int mail_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_mail_opt_res_mail_update* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_mail_opt_res : public ::google::protobuf::Message {
 public:
  gs_c_mail_opt_res();
  virtual ~gs_c_mail_opt_res();

  gs_c_mail_opt_res(const gs_c_mail_opt_res& from);

  inline gs_c_mail_opt_res& operator=(const gs_c_mail_opt_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_mail_opt_res& default_instance();

  void Swap(gs_c_mail_opt_res* other);

  // implements Message ----------------------------------------------

  gs_c_mail_opt_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_mail_opt_res& from);
  void MergeFrom(const gs_c_mail_opt_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gs_c_mail_opt_res_mail_update mail_update;

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .gs_c_mail_opt_res.mail_update mail_update_arr = 2;
  inline int mail_update_arr_size() const;
  inline void clear_mail_update_arr();
  static const int kMailUpdateArrFieldNumber = 2;
  inline const ::gs_c_mail_opt_res_mail_update& mail_update_arr(int index) const;
  inline ::gs_c_mail_opt_res_mail_update* mutable_mail_update_arr(int index);
  inline ::gs_c_mail_opt_res_mail_update* add_mail_update_arr();
  inline const ::google::protobuf::RepeatedPtrField< ::gs_c_mail_opt_res_mail_update >&
      mail_update_arr() const;
  inline ::google::protobuf::RepeatedPtrField< ::gs_c_mail_opt_res_mail_update >*
      mutable_mail_update_arr();

  // repeated .struct_game_element output_arr = 3;
  inline int output_arr_size() const;
  inline void clear_output_arr();
  static const int kOutputArrFieldNumber = 3;
  inline const ::struct_game_element& output_arr(int index) const;
  inline ::struct_game_element* mutable_output_arr(int index);
  inline ::struct_game_element* add_output_arr();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      output_arr() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_output_arr();

  // @@protoc_insertion_point(class_scope:gs_c_mail_opt_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::gs_c_mail_opt_res_mail_update > mail_update_arr_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > output_arr_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_mail_opt_res* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_mail_ntf : public ::google::protobuf::Message {
 public:
  gs_c_mail_ntf();
  virtual ~gs_c_mail_ntf();

  gs_c_mail_ntf(const gs_c_mail_ntf& from);

  inline gs_c_mail_ntf& operator=(const gs_c_mail_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_mail_ntf& default_instance();

  void Swap(gs_c_mail_ntf* other);

  // implements Message ----------------------------------------------

  gs_c_mail_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_mail_ntf& from);
  void MergeFrom(const gs_c_mail_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gs_c_mail_ntf_OP_TYPE OP_TYPE;
  static const OP_TYPE ADD = gs_c_mail_ntf_OP_TYPE_ADD;
  static const OP_TYPE DEL = gs_c_mail_ntf_OP_TYPE_DEL;
  static inline bool OP_TYPE_IsValid(int value) {
    return gs_c_mail_ntf_OP_TYPE_IsValid(value);
  }
  static const OP_TYPE OP_TYPE_MIN =
    gs_c_mail_ntf_OP_TYPE_OP_TYPE_MIN;
  static const OP_TYPE OP_TYPE_MAX =
    gs_c_mail_ntf_OP_TYPE_OP_TYPE_MAX;
  static const int OP_TYPE_ARRAYSIZE =
    gs_c_mail_ntf_OP_TYPE_OP_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OP_TYPE_descriptor() {
    return gs_c_mail_ntf_OP_TYPE_descriptor();
  }
  static inline const ::std::string& OP_TYPE_Name(OP_TYPE value) {
    return gs_c_mail_ntf_OP_TYPE_Name(value);
  }
  static inline bool OP_TYPE_Parse(const ::std::string& name,
      OP_TYPE* value) {
    return gs_c_mail_ntf_OP_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .gs_c_mail_ntf.OP_TYPE type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::gs_c_mail_ntf_OP_TYPE type() const;
  inline void set_type(::gs_c_mail_ntf_OP_TYPE value);

  // optional .user_mail ele = 2;
  inline bool has_ele() const;
  inline void clear_ele();
  static const int kEleFieldNumber = 2;
  inline const ::user_mail& ele() const;
  inline ::user_mail* mutable_ele();
  inline ::user_mail* release_ele();
  inline void set_allocated_ele(::user_mail* ele);

  // optional uint32 mail_id = 3;
  inline bool has_mail_id() const;
  inline void clear_mail_id();
  static const int kMailIdFieldNumber = 3;
  inline ::google::protobuf::uint32 mail_id() const;
  inline void set_mail_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_mail_ntf)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ele();
  inline void clear_has_ele();
  inline void set_has_mail_id();
  inline void clear_has_mail_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::user_mail* ele_;
  int type_;
  ::google::protobuf::uint32 mail_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_mail_ntf* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_mail_ntf_array : public ::google::protobuf::Message {
 public:
  gs_c_mail_ntf_array();
  virtual ~gs_c_mail_ntf_array();

  gs_c_mail_ntf_array(const gs_c_mail_ntf_array& from);

  inline gs_c_mail_ntf_array& operator=(const gs_c_mail_ntf_array& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_mail_ntf_array& default_instance();

  void Swap(gs_c_mail_ntf_array* other);

  // implements Message ----------------------------------------------

  gs_c_mail_ntf_array* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_mail_ntf_array& from);
  void MergeFrom(const gs_c_mail_ntf_array& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gs_c_mail_ntf mails = 1;
  inline int mails_size() const;
  inline void clear_mails();
  static const int kMailsFieldNumber = 1;
  inline const ::gs_c_mail_ntf& mails(int index) const;
  inline ::gs_c_mail_ntf* mutable_mails(int index);
  inline ::gs_c_mail_ntf* add_mails();
  inline const ::google::protobuf::RepeatedPtrField< ::gs_c_mail_ntf >&
      mails() const;
  inline ::google::protobuf::RepeatedPtrField< ::gs_c_mail_ntf >*
      mutable_mails();

  // repeated .struct_game_element eles = 2;
  inline int eles_size() const;
  inline void clear_eles();
  static const int kElesFieldNumber = 2;
  inline const ::struct_game_element& eles(int index) const;
  inline ::struct_game_element* mutable_eles(int index);
  inline ::struct_game_element* add_eles();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      eles() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_eles();

  // @@protoc_insertion_point(class_scope:gs_c_mail_ntf_array)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::gs_c_mail_ntf > mails_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > eles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_mail_ntf_array* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_buy_req : public ::google::protobuf::Message {
 public:
  c_gs_buy_req();
  virtual ~c_gs_buy_req();

  c_gs_buy_req(const c_gs_buy_req& from);

  inline c_gs_buy_req& operator=(const c_gs_buy_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_buy_req& default_instance();

  void Swap(c_gs_buy_req* other);

  // implements Message ----------------------------------------------

  c_gs_buy_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_buy_req& from);
  void MergeFrom(const c_gs_buy_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .struct_game_element.EELEMENTTYPE buy_type = 1;
  inline bool has_buy_type() const;
  inline void clear_buy_type();
  static const int kBuyTypeFieldNumber = 1;
  inline ::struct_game_element_EELEMENTTYPE buy_type() const;
  inline void set_buy_type(::struct_game_element_EELEMENTTYPE value);

  // optional uint32 element_id = 2;
  inline bool has_element_id() const;
  inline void clear_element_id();
  static const int kElementIdFieldNumber = 2;
  inline ::google::protobuf::uint32 element_id() const;
  inline void set_element_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_buy_req)
 private:
  inline void set_has_buy_type();
  inline void clear_has_buy_type();
  inline void set_has_element_id();
  inline void clear_has_element_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int buy_type_;
  ::google::protobuf::uint32 element_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_buy_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_buy_res : public ::google::protobuf::Message {
 public:
  gs_c_buy_res();
  virtual ~gs_c_buy_res();

  gs_c_buy_res(const gs_c_buy_res& from);

  inline gs_c_buy_res& operator=(const gs_c_buy_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_buy_res& default_instance();

  void Swap(gs_c_buy_res* other);

  // implements Message ----------------------------------------------

  gs_c_buy_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_buy_res& from);
  void MergeFrom(const gs_c_buy_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional .struct_game_element.EELEMENTTYPE buy_type = 2;
  inline bool has_buy_type() const;
  inline void clear_buy_type();
  static const int kBuyTypeFieldNumber = 2;
  inline ::struct_game_element_EELEMENTTYPE buy_type() const;
  inline void set_buy_type(::struct_game_element_EELEMENTTYPE value);

  // repeated .struct_game_element consume = 3;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 3;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // optional .struct_game_element output = 4;
  inline bool has_output() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 4;
  inline const ::struct_game_element& output() const;
  inline ::struct_game_element* mutable_output();
  inline ::struct_game_element* release_output();
  inline void set_allocated_output(::struct_game_element* output);

  // optional uint32 buy_used_times = 5;
  inline bool has_buy_used_times() const;
  inline void clear_buy_used_times();
  static const int kBuyUsedTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 buy_used_times() const;
  inline void set_buy_used_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_buy_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_buy_type();
  inline void clear_has_buy_type();
  inline void set_has_output();
  inline void clear_has_output();
  inline void set_has_buy_used_times();
  inline void clear_has_buy_used_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  int buy_type_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::struct_game_element* output_;
  ::google::protobuf::uint32 buy_used_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_buy_res* default_instance_;
};
// -------------------------------------------------------------------

class user_mission_mission_event_need : public ::google::protobuf::Message {
 public:
  user_mission_mission_event_need();
  virtual ~user_mission_mission_event_need();

  user_mission_mission_event_need(const user_mission_mission_event_need& from);

  inline user_mission_mission_event_need& operator=(const user_mission_mission_event_need& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_mission_mission_event_need& default_instance();

  void Swap(user_mission_mission_event_need* other);

  // implements Message ----------------------------------------------

  user_mission_mission_event_need* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_mission_mission_event_need& from);
  void MergeFrom(const user_mission_mission_event_need& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .user_mission.MISSION_EVENT_TYPE event_type = 1;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  inline ::user_mission_MISSION_EVENT_TYPE event_type() const;
  inline void set_event_type(::user_mission_MISSION_EVENT_TYPE value);

  // optional uint32 event_sub_type = 2;
  inline bool has_event_sub_type() const;
  inline void clear_event_sub_type();
  static const int kEventSubTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 event_sub_type() const;
  inline void set_event_sub_type(::google::protobuf::uint32 value);

  // optional uint32 cur_val = 3;
  inline bool has_cur_val() const;
  inline void clear_cur_val();
  static const int kCurValFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_val() const;
  inline void set_cur_val(::google::protobuf::uint32 value);

  // optional uint32 need_val = 4;
  inline bool has_need_val() const;
  inline void clear_need_val();
  static const int kNeedValFieldNumber = 4;
  inline ::google::protobuf::uint32 need_val() const;
  inline void set_need_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:user_mission.mission_event_need)
 private:
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_event_sub_type();
  inline void clear_has_event_sub_type();
  inline void set_has_cur_val();
  inline void clear_has_cur_val();
  inline void set_has_need_val();
  inline void clear_has_need_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int event_type_;
  ::google::protobuf::uint32 event_sub_type_;
  ::google::protobuf::uint32 cur_val_;
  ::google::protobuf::uint32 need_val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_mission_mission_event_need* default_instance_;
};
// -------------------------------------------------------------------

class user_mission : public ::google::protobuf::Message {
 public:
  user_mission();
  virtual ~user_mission();

  user_mission(const user_mission& from);

  inline user_mission& operator=(const user_mission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_mission& default_instance();

  void Swap(user_mission* other);

  // implements Message ----------------------------------------------

  user_mission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_mission& from);
  void MergeFrom(const user_mission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef user_mission_mission_event_need mission_event_need;

  typedef user_mission_MISSION_EVENT_TYPE MISSION_EVENT_TYPE;
  static const MISSION_EVENT_TYPE min = user_mission_MISSION_EVENT_TYPE_min;
  static const MISSION_EVENT_TYPE SKILL_LEVEL_UP = user_mission_MISSION_EVENT_TYPE_SKILL_LEVEL_UP;
  static const MISSION_EVENT_TYPE RECHARGE = user_mission_MISSION_EVENT_TYPE_RECHARGE;
  static const MISSION_EVENT_TYPE COMMON_FB_COMPLETE = user_mission_MISSION_EVENT_TYPE_COMMON_FB_COMPLETE;
  static const MISSION_EVENT_TYPE COMMON_FB_ALL_THROUGH = user_mission_MISSION_EVENT_TYPE_COMMON_FB_ALL_THROUGH;
  static const MISSION_EVENT_TYPE COMMON_FB_ALL_THROUGH_THREE_STAR = user_mission_MISSION_EVENT_TYPE_COMMON_FB_ALL_THROUGH_THREE_STAR;
  static const MISSION_EVENT_TYPE EQUIP_LEVEL_UP = user_mission_MISSION_EVENT_TYPE_EQUIP_LEVEL_UP;
  static const MISSION_EVENT_TYPE RECHARGE_MISSION_MONTH_CARD1 = user_mission_MISSION_EVENT_TYPE_RECHARGE_MISSION_MONTH_CARD1;
  static const MISSION_EVENT_TYPE GIVE_FRIEND_HEALTH = user_mission_MISSION_EVENT_TYPE_GIVE_FRIEND_HEALTH;
  static const MISSION_EVENT_TYPE HERO_COLLECT = user_mission_MISSION_EVENT_TYPE_HERO_COLLECT;
  static const MISSION_EVENT_TYPE HEALTH_MEAL = user_mission_MISSION_EVENT_TYPE_HEALTH_MEAL;
  static const MISSION_EVENT_TYPE GET_REWARD = user_mission_MISSION_EVENT_TYPE_GET_REWARD;
  static const MISSION_EVENT_TYPE RECHARGE_MISSION_MONTH_CARD2 = user_mission_MISSION_EVENT_TYPE_RECHARGE_MISSION_MONTH_CARD2;
  static const MISSION_EVENT_TYPE MISSION_MAIN = user_mission_MISSION_EVENT_TYPE_MISSION_MAIN;
  static const MISSION_EVENT_TYPE MISSION_FREE = user_mission_MISSION_EVENT_TYPE_MISSION_FREE;
  static const MISSION_EVENT_TYPE ACTIVITY = user_mission_MISSION_EVENT_TYPE_ACTIVITY;
  static const MISSION_EVENT_TYPE JI_TAN = user_mission_MISSION_EVENT_TYPE_JI_TAN;
  static const MISSION_EVENT_TYPE ARENA_CHALLENGE = user_mission_MISSION_EVENT_TYPE_ARENA_CHALLENGE;
  static const MISSION_EVENT_TYPE SHI_LIAN_TA = user_mission_MISSION_EVENT_TYPE_SHI_LIAN_TA;
  static const MISSION_EVENT_TYPE CRUSADE = user_mission_MISSION_EVENT_TYPE_CRUSADE;
  static const MISSION_EVENT_TYPE LEVEL_UP = user_mission_MISSION_EVENT_TYPE_LEVEL_UP;
  static const MISSION_EVENT_TYPE BUY_GOLD = user_mission_MISSION_EVENT_TYPE_BUY_GOLD;
  static const MISSION_EVENT_TYPE FB_FAIL = user_mission_MISSION_EVENT_TYPE_FB_FAIL;
  static const MISSION_EVENT_TYPE COMPLETE_CHAPTER_ALL_FB_THREE_STAR = user_mission_MISSION_EVENT_TYPE_COMPLETE_CHAPTER_ALL_FB_THREE_STAR;
  static const MISSION_EVENT_TYPE ARENA_RANK_TOP = user_mission_MISSION_EVENT_TYPE_ARENA_RANK_TOP;
  static const MISSION_EVENT_TYPE COMPLETE_CHAPTER_FB = user_mission_MISSION_EVENT_TYPE_COMPLETE_CHAPTER_FB;
  static const MISSION_EVENT_TYPE max = user_mission_MISSION_EVENT_TYPE_max;
  static inline bool MISSION_EVENT_TYPE_IsValid(int value) {
    return user_mission_MISSION_EVENT_TYPE_IsValid(value);
  }
  static const MISSION_EVENT_TYPE MISSION_EVENT_TYPE_MIN =
    user_mission_MISSION_EVENT_TYPE_MISSION_EVENT_TYPE_MIN;
  static const MISSION_EVENT_TYPE MISSION_EVENT_TYPE_MAX =
    user_mission_MISSION_EVENT_TYPE_MISSION_EVENT_TYPE_MAX;
  static const int MISSION_EVENT_TYPE_ARRAYSIZE =
    user_mission_MISSION_EVENT_TYPE_MISSION_EVENT_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MISSION_EVENT_TYPE_descriptor() {
    return user_mission_MISSION_EVENT_TYPE_descriptor();
  }
  static inline const ::std::string& MISSION_EVENT_TYPE_Name(MISSION_EVENT_TYPE value) {
    return user_mission_MISSION_EVENT_TYPE_Name(value);
  }
  static inline bool MISSION_EVENT_TYPE_Parse(const ::std::string& name,
      MISSION_EVENT_TYPE* value) {
    return user_mission_MISSION_EVENT_TYPE_Parse(name, value);
  }

  typedef user_mission_MISSION_EVENT_SUB_TYPE MISSION_EVENT_SUB_TYPE;
  static const MISSION_EVENT_SUB_TYPE MIN = user_mission_MISSION_EVENT_SUB_TYPE_MIN;
  static const MISSION_EVENT_SUB_TYPE NONE = user_mission_MISSION_EVENT_SUB_TYPE_NONE;
  static const MISSION_EVENT_SUB_TYPE HERO_QUALITY_GREEN = user_mission_MISSION_EVENT_SUB_TYPE_HERO_QUALITY_GREEN;
  static const MISSION_EVENT_SUB_TYPE HERO_QUALITY_BLUE = user_mission_MISSION_EVENT_SUB_TYPE_HERO_QUALITY_BLUE;
  static const MISSION_EVENT_SUB_TYPE HERO_STAR_FOUR = user_mission_MISSION_EVENT_SUB_TYPE_HERO_STAR_FOUR;
  static const MISSION_EVENT_SUB_TYPE HERO_STAR_THREE = user_mission_MISSION_EVENT_SUB_TYPE_HERO_STAR_THREE;
  static const MISSION_EVENT_SUB_TYPE PLAYER_LEVEL = user_mission_MISSION_EVENT_SUB_TYPE_PLAYER_LEVEL;
  static const MISSION_EVENT_SUB_TYPE VIP_LEVEL = user_mission_MISSION_EVENT_SUB_TYPE_VIP_LEVEL;
  static const MISSION_EVENT_SUB_TYPE HUAXIA = user_mission_MISSION_EVENT_SUB_TYPE_HUAXIA;
  static const MISSION_EVENT_SUB_TYPE MAX = user_mission_MISSION_EVENT_SUB_TYPE_MAX;
  static inline bool MISSION_EVENT_SUB_TYPE_IsValid(int value) {
    return user_mission_MISSION_EVENT_SUB_TYPE_IsValid(value);
  }
  static const MISSION_EVENT_SUB_TYPE MISSION_EVENT_SUB_TYPE_MIN =
    user_mission_MISSION_EVENT_SUB_TYPE_MISSION_EVENT_SUB_TYPE_MIN;
  static const MISSION_EVENT_SUB_TYPE MISSION_EVENT_SUB_TYPE_MAX =
    user_mission_MISSION_EVENT_SUB_TYPE_MISSION_EVENT_SUB_TYPE_MAX;
  static const int MISSION_EVENT_SUB_TYPE_ARRAYSIZE =
    user_mission_MISSION_EVENT_SUB_TYPE_MISSION_EVENT_SUB_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MISSION_EVENT_SUB_TYPE_descriptor() {
    return user_mission_MISSION_EVENT_SUB_TYPE_descriptor();
  }
  static inline const ::std::string& MISSION_EVENT_SUB_TYPE_Name(MISSION_EVENT_SUB_TYPE value) {
    return user_mission_MISSION_EVENT_SUB_TYPE_Name(value);
  }
  static inline bool MISSION_EVENT_SUB_TYPE_Parse(const ::std::string& name,
      MISSION_EVENT_SUB_TYPE* value) {
    return user_mission_MISSION_EVENT_SUB_TYPE_Parse(name, value);
  }

  typedef user_mission_MISSION_STATUS MISSION_STATUS;
  static const MISSION_STATUS STATUS_CAN_ATTACH = user_mission_MISSION_STATUS_STATUS_CAN_ATTACH;
  static const MISSION_STATUS STATUS_IN = user_mission_MISSION_STATUS_STATUS_IN;
  static const MISSION_STATUS STATUS_NOT_TO_TIME = user_mission_MISSION_STATUS_STATUS_NOT_TO_TIME;
  static const MISSION_STATUS STATUS_CAN_NOT_SEE = user_mission_MISSION_STATUS_STATUS_CAN_NOT_SEE;
  static const MISSION_STATUS STATUS_DELED = user_mission_MISSION_STATUS_STATUS_DELED;
  static const MISSION_STATUS STATUS_ALREADY_ATTACH = user_mission_MISSION_STATUS_STATUS_ALREADY_ATTACH;
  static inline bool MISSION_STATUS_IsValid(int value) {
    return user_mission_MISSION_STATUS_IsValid(value);
  }
  static const MISSION_STATUS MISSION_STATUS_MIN =
    user_mission_MISSION_STATUS_MISSION_STATUS_MIN;
  static const MISSION_STATUS MISSION_STATUS_MAX =
    user_mission_MISSION_STATUS_MISSION_STATUS_MAX;
  static const int MISSION_STATUS_ARRAYSIZE =
    user_mission_MISSION_STATUS_MISSION_STATUS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MISSION_STATUS_descriptor() {
    return user_mission_MISSION_STATUS_descriptor();
  }
  static inline const ::std::string& MISSION_STATUS_Name(MISSION_STATUS value) {
    return user_mission_MISSION_STATUS_Name(value);
  }
  static inline bool MISSION_STATUS_Parse(const ::std::string& name,
      MISSION_STATUS* value) {
    return user_mission_MISSION_STATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 mission_id = 1;
  inline bool has_mission_id() const;
  inline void clear_mission_id();
  static const int kMissionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mission_id() const;
  inline void set_mission_id(::google::protobuf::uint32 value);

  // required .user_mission.MISSION_STATUS mission_status = 2;
  inline bool has_mission_status() const;
  inline void clear_mission_status();
  static const int kMissionStatusFieldNumber = 2;
  inline ::user_mission_MISSION_STATUS mission_status() const;
  inline void set_mission_status(::user_mission_MISSION_STATUS value);

  // repeated .user_mission.mission_event_need event_needs = 3;
  inline int event_needs_size() const;
  inline void clear_event_needs();
  static const int kEventNeedsFieldNumber = 3;
  inline const ::user_mission_mission_event_need& event_needs(int index) const;
  inline ::user_mission_mission_event_need* mutable_event_needs(int index);
  inline ::user_mission_mission_event_need* add_event_needs();
  inline const ::google::protobuf::RepeatedPtrField< ::user_mission_mission_event_need >&
      event_needs() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_mission_mission_event_need >*
      mutable_event_needs();

  // @@protoc_insertion_point(class_scope:user_mission)
 private:
  inline void set_has_mission_id();
  inline void clear_has_mission_id();
  inline void set_has_mission_status();
  inline void clear_has_mission_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mission_id_;
  int mission_status_;
  ::google::protobuf::RepeatedPtrField< ::user_mission_mission_event_need > event_needs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_mission* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_mission_ntf_array_mission_opt : public ::google::protobuf::Message {
 public:
  gs_c_mission_ntf_array_mission_opt();
  virtual ~gs_c_mission_ntf_array_mission_opt();

  gs_c_mission_ntf_array_mission_opt(const gs_c_mission_ntf_array_mission_opt& from);

  inline gs_c_mission_ntf_array_mission_opt& operator=(const gs_c_mission_ntf_array_mission_opt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_mission_ntf_array_mission_opt& default_instance();

  void Swap(gs_c_mission_ntf_array_mission_opt* other);

  // implements Message ----------------------------------------------

  gs_c_mission_ntf_array_mission_opt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_mission_ntf_array_mission_opt& from);
  void MergeFrom(const gs_c_mission_ntf_array_mission_opt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gs_c_mission_ntf_array_mission_opt_OPT OPT;
  static const OPT ADD = gs_c_mission_ntf_array_mission_opt_OPT_ADD;
  static const OPT DEL = gs_c_mission_ntf_array_mission_opt_OPT_DEL;
  static const OPT UPDATE = gs_c_mission_ntf_array_mission_opt_OPT_UPDATE;
  static inline bool OPT_IsValid(int value) {
    return gs_c_mission_ntf_array_mission_opt_OPT_IsValid(value);
  }
  static const OPT OPT_MIN =
    gs_c_mission_ntf_array_mission_opt_OPT_OPT_MIN;
  static const OPT OPT_MAX =
    gs_c_mission_ntf_array_mission_opt_OPT_OPT_MAX;
  static const int OPT_ARRAYSIZE =
    gs_c_mission_ntf_array_mission_opt_OPT_OPT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OPT_descriptor() {
    return gs_c_mission_ntf_array_mission_opt_OPT_descriptor();
  }
  static inline const ::std::string& OPT_Name(OPT value) {
    return gs_c_mission_ntf_array_mission_opt_OPT_Name(value);
  }
  static inline bool OPT_Parse(const ::std::string& name,
      OPT* value) {
    return gs_c_mission_ntf_array_mission_opt_OPT_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .gs_c_mission_ntf_array.mission_opt.OPT opt = 1;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 1;
  inline ::gs_c_mission_ntf_array_mission_opt_OPT opt() const;
  inline void set_opt(::gs_c_mission_ntf_array_mission_opt_OPT value);

  // required .user_mission mis = 2;
  inline bool has_mis() const;
  inline void clear_mis();
  static const int kMisFieldNumber = 2;
  inline const ::user_mission& mis() const;
  inline ::user_mission* mutable_mis();
  inline ::user_mission* release_mis();
  inline void set_allocated_mis(::user_mission* mis);

  // @@protoc_insertion_point(class_scope:gs_c_mission_ntf_array.mission_opt)
 private:
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_mis();
  inline void clear_has_mis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::user_mission* mis_;
  int opt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_mission_ntf_array_mission_opt* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_mission_ntf_array : public ::google::protobuf::Message {
 public:
  gs_c_mission_ntf_array();
  virtual ~gs_c_mission_ntf_array();

  gs_c_mission_ntf_array(const gs_c_mission_ntf_array& from);

  inline gs_c_mission_ntf_array& operator=(const gs_c_mission_ntf_array& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_mission_ntf_array& default_instance();

  void Swap(gs_c_mission_ntf_array* other);

  // implements Message ----------------------------------------------

  gs_c_mission_ntf_array* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_mission_ntf_array& from);
  void MergeFrom(const gs_c_mission_ntf_array& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gs_c_mission_ntf_array_mission_opt mission_opt;

  // accessors -------------------------------------------------------

  // repeated .gs_c_mission_ntf_array.mission_opt mis_opts = 1;
  inline int mis_opts_size() const;
  inline void clear_mis_opts();
  static const int kMisOptsFieldNumber = 1;
  inline const ::gs_c_mission_ntf_array_mission_opt& mis_opts(int index) const;
  inline ::gs_c_mission_ntf_array_mission_opt* mutable_mis_opts(int index);
  inline ::gs_c_mission_ntf_array_mission_opt* add_mis_opts();
  inline const ::google::protobuf::RepeatedPtrField< ::gs_c_mission_ntf_array_mission_opt >&
      mis_opts() const;
  inline ::google::protobuf::RepeatedPtrField< ::gs_c_mission_ntf_array_mission_opt >*
      mutable_mis_opts();

  // @@protoc_insertion_point(class_scope:gs_c_mission_ntf_array)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::gs_c_mission_ntf_array_mission_opt > mis_opts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_mission_ntf_array* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_get_mission_reward_req : public ::google::protobuf::Message {
 public:
  c_gs_get_mission_reward_req();
  virtual ~c_gs_get_mission_reward_req();

  c_gs_get_mission_reward_req(const c_gs_get_mission_reward_req& from);

  inline c_gs_get_mission_reward_req& operator=(const c_gs_get_mission_reward_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_get_mission_reward_req& default_instance();

  void Swap(c_gs_get_mission_reward_req* other);

  // implements Message ----------------------------------------------

  c_gs_get_mission_reward_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_get_mission_reward_req& from);
  void MergeFrom(const c_gs_get_mission_reward_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mission_id = 1;
  inline bool has_mission_id() const;
  inline void clear_mission_id();
  static const int kMissionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mission_id() const;
  inline void set_mission_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_get_mission_reward_req)
 private:
  inline void set_has_mission_id();
  inline void clear_has_mission_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mission_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_get_mission_reward_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_get_mission_reward_res : public ::google::protobuf::Message {
 public:
  gs_c_get_mission_reward_res();
  virtual ~gs_c_get_mission_reward_res();

  gs_c_get_mission_reward_res(const gs_c_get_mission_reward_res& from);

  inline gs_c_get_mission_reward_res& operator=(const gs_c_get_mission_reward_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_get_mission_reward_res& default_instance();

  void Swap(gs_c_get_mission_reward_res* other);

  // implements Message ----------------------------------------------

  gs_c_get_mission_reward_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_get_mission_reward_res& from);
  void MergeFrom(const gs_c_get_mission_reward_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 mission_id = 2;
  inline bool has_mission_id() const;
  inline void clear_mission_id();
  static const int kMissionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mission_id() const;
  inline void set_mission_id(::google::protobuf::uint32 value);

  // optional .user_mission.MISSION_STATUS status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::user_mission_MISSION_STATUS status() const;
  inline void set_status(::user_mission_MISSION_STATUS value);

  // repeated .struct_game_element eles = 4;
  inline int eles_size() const;
  inline void clear_eles();
  static const int kElesFieldNumber = 4;
  inline const ::struct_game_element& eles(int index) const;
  inline ::struct_game_element* mutable_eles(int index);
  inline ::struct_game_element* add_eles();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      eles() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_eles();

  // @@protoc_insertion_point(class_scope:gs_c_get_mission_reward_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_mission_id();
  inline void clear_has_mission_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 mission_id_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > eles_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_get_mission_reward_res* default_instance_;
};
// -------------------------------------------------------------------

class sign_n_reward : public ::google::protobuf::Message {
 public:
  sign_n_reward();
  virtual ~sign_n_reward();

  sign_n_reward(const sign_n_reward& from);

  inline sign_n_reward& operator=(const sign_n_reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sign_n_reward& default_instance();

  void Swap(sign_n_reward* other);

  // implements Message ----------------------------------------------

  sign_n_reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sign_n_reward& from);
  void MergeFrom(const sign_n_reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef sign_n_reward_SIGN_N_REWARD_TYPE SIGN_N_REWARD_TYPE;
  static const SIGN_N_REWARD_TYPE MIN = sign_n_reward_SIGN_N_REWARD_TYPE_MIN;
  static const SIGN_N_REWARD_TYPE SIGN_N_REWARD_TYPE_FIRST = sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_FIRST;
  static const SIGN_N_REWARD_TYPE SIGN_N_REWARD_TYPE_SECOND = sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_SECOND;
  static const SIGN_N_REWARD_TYPE SIGN_N_REWARD_TYPE_THREE = sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_THREE;
  static const SIGN_N_REWARD_TYPE SIGN_N_REWARD_TYPE_FOUR = sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_FOUR;
  static const SIGN_N_REWARD_TYPE MAX = sign_n_reward_SIGN_N_REWARD_TYPE_MAX;
  static inline bool SIGN_N_REWARD_TYPE_IsValid(int value) {
    return sign_n_reward_SIGN_N_REWARD_TYPE_IsValid(value);
  }
  static const SIGN_N_REWARD_TYPE SIGN_N_REWARD_TYPE_MIN =
    sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_MIN;
  static const SIGN_N_REWARD_TYPE SIGN_N_REWARD_TYPE_MAX =
    sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_MAX;
  static const int SIGN_N_REWARD_TYPE_ARRAYSIZE =
    sign_n_reward_SIGN_N_REWARD_TYPE_SIGN_N_REWARD_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SIGN_N_REWARD_TYPE_descriptor() {
    return sign_n_reward_SIGN_N_REWARD_TYPE_descriptor();
  }
  static inline const ::std::string& SIGN_N_REWARD_TYPE_Name(SIGN_N_REWARD_TYPE value) {
    return sign_n_reward_SIGN_N_REWARD_TYPE_Name(value);
  }
  static inline bool SIGN_N_REWARD_TYPE_Parse(const ::std::string& name,
      SIGN_N_REWARD_TYPE* value) {
    return sign_n_reward_SIGN_N_REWARD_TYPE_Parse(name, value);
  }

  typedef sign_n_reward_SIGN_N_REWARD_STATUS SIGN_N_REWARD_STATUS;
  static const SIGN_N_REWARD_STATUS STATUS_CONDITION_NOT_SATISFY = sign_n_reward_SIGN_N_REWARD_STATUS_STATUS_CONDITION_NOT_SATISFY;
  static const SIGN_N_REWARD_STATUS STATUS_ALREADY_GET_ATTACH = sign_n_reward_SIGN_N_REWARD_STATUS_STATUS_ALREADY_GET_ATTACH;
  static const SIGN_N_REWARD_STATUS STATUS_CAN_ATTACH = sign_n_reward_SIGN_N_REWARD_STATUS_STATUS_CAN_ATTACH;
  static inline bool SIGN_N_REWARD_STATUS_IsValid(int value) {
    return sign_n_reward_SIGN_N_REWARD_STATUS_IsValid(value);
  }
  static const SIGN_N_REWARD_STATUS SIGN_N_REWARD_STATUS_MIN =
    sign_n_reward_SIGN_N_REWARD_STATUS_SIGN_N_REWARD_STATUS_MIN;
  static const SIGN_N_REWARD_STATUS SIGN_N_REWARD_STATUS_MAX =
    sign_n_reward_SIGN_N_REWARD_STATUS_SIGN_N_REWARD_STATUS_MAX;
  static const int SIGN_N_REWARD_STATUS_ARRAYSIZE =
    sign_n_reward_SIGN_N_REWARD_STATUS_SIGN_N_REWARD_STATUS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SIGN_N_REWARD_STATUS_descriptor() {
    return sign_n_reward_SIGN_N_REWARD_STATUS_descriptor();
  }
  static inline const ::std::string& SIGN_N_REWARD_STATUS_Name(SIGN_N_REWARD_STATUS value) {
    return sign_n_reward_SIGN_N_REWARD_STATUS_Name(value);
  }
  static inline bool SIGN_N_REWARD_STATUS_Parse(const ::std::string& name,
      SIGN_N_REWARD_STATUS* value) {
    return sign_n_reward_SIGN_N_REWARD_STATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .sign_n_reward.SIGN_N_REWARD_TYPE reward_type = 1;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 1;
  inline ::sign_n_reward_SIGN_N_REWARD_TYPE reward_type() const;
  inline void set_reward_type(::sign_n_reward_SIGN_N_REWARD_TYPE value);

  // required .sign_n_reward.SIGN_N_REWARD_STATUS status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::sign_n_reward_SIGN_N_REWARD_STATUS status() const;
  inline void set_status(::sign_n_reward_SIGN_N_REWARD_STATUS value);

  // @@protoc_insertion_point(class_scope:sign_n_reward)
 private:
  inline void set_has_reward_type();
  inline void clear_has_reward_type();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int reward_type_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static sign_n_reward* default_instance_;
};
// -------------------------------------------------------------------

class user_sign : public ::google::protobuf::Message {
 public:
  user_sign();
  virtual ~user_sign();

  user_sign(const user_sign& from);

  inline user_sign& operator=(const user_sign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_sign& default_instance();

  void Swap(user_sign* other);

  // implements Message ----------------------------------------------

  user_sign* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_sign& from);
  void MergeFrom(const user_sign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 signed_1_times = 1;
  inline bool has_signed_1_times() const;
  inline void clear_signed_1_times();
  static const int kSigned1TimesFieldNumber = 1;
  inline ::google::protobuf::uint32 signed_1_times() const;
  inline void set_signed_1_times(::google::protobuf::uint32 value);

  // repeated .sign_n_reward signed_n_reward = 2;
  inline int signed_n_reward_size() const;
  inline void clear_signed_n_reward();
  static const int kSignedNRewardFieldNumber = 2;
  inline const ::sign_n_reward& signed_n_reward(int index) const;
  inline ::sign_n_reward* mutable_signed_n_reward(int index);
  inline ::sign_n_reward* add_signed_n_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::sign_n_reward >&
      signed_n_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::sign_n_reward >*
      mutable_signed_n_reward();

  // required uint32 left_add_sign_times = 3;
  inline bool has_left_add_sign_times() const;
  inline void clear_left_add_sign_times();
  static const int kLeftAddSignTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 left_add_sign_times() const;
  inline void set_left_add_sign_times(::google::protobuf::uint32 value);

  // required bool is_already_sign = 4;
  inline bool has_is_already_sign() const;
  inline void clear_is_already_sign();
  static const int kIsAlreadySignFieldNumber = 4;
  inline bool is_already_sign() const;
  inline void set_is_already_sign(bool value);

  // @@protoc_insertion_point(class_scope:user_sign)
 private:
  inline void set_has_signed_1_times();
  inline void clear_has_signed_1_times();
  inline void set_has_left_add_sign_times();
  inline void clear_has_left_add_sign_times();
  inline void set_has_is_already_sign();
  inline void clear_has_is_already_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::sign_n_reward > signed_n_reward_;
  ::google::protobuf::uint32 signed_1_times_;
  ::google::protobuf::uint32 left_add_sign_times_;
  bool is_already_sign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_sign* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_sign_req : public ::google::protobuf::Message {
 public:
  c_gs_sign_req();
  virtual ~c_gs_sign_req();

  c_gs_sign_req(const c_gs_sign_req& from);

  inline c_gs_sign_req& operator=(const c_gs_sign_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_sign_req& default_instance();

  void Swap(c_gs_sign_req* other);

  // implements Message ----------------------------------------------

  c_gs_sign_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_sign_req& from);
  void MergeFrom(const c_gs_sign_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef c_gs_sign_req_SIGN_TYPE SIGN_TYPE;
  static const SIGN_TYPE SIGN_TYPE_1 = c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_1;
  static const SIGN_TYPE SIGN_TYPE_N = c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_N;
  static inline bool SIGN_TYPE_IsValid(int value) {
    return c_gs_sign_req_SIGN_TYPE_IsValid(value);
  }
  static const SIGN_TYPE SIGN_TYPE_MIN =
    c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_MIN;
  static const SIGN_TYPE SIGN_TYPE_MAX =
    c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_MAX;
  static const int SIGN_TYPE_ARRAYSIZE =
    c_gs_sign_req_SIGN_TYPE_SIGN_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SIGN_TYPE_descriptor() {
    return c_gs_sign_req_SIGN_TYPE_descriptor();
  }
  static inline const ::std::string& SIGN_TYPE_Name(SIGN_TYPE value) {
    return c_gs_sign_req_SIGN_TYPE_Name(value);
  }
  static inline bool SIGN_TYPE_Parse(const ::std::string& name,
      SIGN_TYPE* value) {
    return c_gs_sign_req_SIGN_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c_gs_sign_req.SIGN_TYPE sign_type = 1;
  inline bool has_sign_type() const;
  inline void clear_sign_type();
  static const int kSignTypeFieldNumber = 1;
  inline ::c_gs_sign_req_SIGN_TYPE sign_type() const;
  inline void set_sign_type(::c_gs_sign_req_SIGN_TYPE value);

  // optional .sign_n_reward.SIGN_N_REWARD_TYPE reward_type = 2;
  inline bool has_reward_type() const;
  inline void clear_reward_type();
  static const int kRewardTypeFieldNumber = 2;
  inline ::sign_n_reward_SIGN_N_REWARD_TYPE reward_type() const;
  inline void set_reward_type(::sign_n_reward_SIGN_N_REWARD_TYPE value);

  // @@protoc_insertion_point(class_scope:c_gs_sign_req)
 private:
  inline void set_has_sign_type();
  inline void clear_has_sign_type();
  inline void set_has_reward_type();
  inline void clear_has_reward_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int sign_type_;
  int reward_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_sign_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_sign_res : public ::google::protobuf::Message {
 public:
  gs_c_sign_res();
  virtual ~gs_c_sign_res();

  gs_c_sign_res(const gs_c_sign_res& from);

  inline gs_c_sign_res& operator=(const gs_c_sign_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_sign_res& default_instance();

  void Swap(gs_c_sign_res* other);

  // implements Message ----------------------------------------------

  gs_c_sign_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_sign_res& from);
  void MergeFrom(const gs_c_sign_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .e_gsc_errorcode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::e_gsc_errorcode error_code() const;
  inline void set_error_code(::e_gsc_errorcode value);

  // repeated .struct_game_element eles = 2;
  inline int eles_size() const;
  inline void clear_eles();
  static const int kElesFieldNumber = 2;
  inline const ::struct_game_element& eles(int index) const;
  inline ::struct_game_element* mutable_eles(int index);
  inline ::struct_game_element* add_eles();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      eles() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_eles();

  // @@protoc_insertion_point(class_scope:gs_c_sign_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > eles_;
  int error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_sign_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_sign_add_req : public ::google::protobuf::Message {
 public:
  c_gs_sign_add_req();
  virtual ~c_gs_sign_add_req();

  c_gs_sign_add_req(const c_gs_sign_add_req& from);

  inline c_gs_sign_add_req& operator=(const c_gs_sign_add_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_sign_add_req& default_instance();

  void Swap(c_gs_sign_add_req* other);

  // implements Message ----------------------------------------------

  c_gs_sign_add_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_sign_add_req& from);
  void MergeFrom(const c_gs_sign_add_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_sign_add_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_sign_add_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_sign_add_res : public ::google::protobuf::Message {
 public:
  gs_c_sign_add_res();
  virtual ~gs_c_sign_add_res();

  gs_c_sign_add_res(const gs_c_sign_add_res& from);

  inline gs_c_sign_add_res& operator=(const gs_c_sign_add_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_sign_add_res& default_instance();

  void Swap(gs_c_sign_add_res* other);

  // implements Message ----------------------------------------------

  gs_c_sign_add_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_sign_add_res& from);
  void MergeFrom(const gs_c_sign_add_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .e_gsc_errorcode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::e_gsc_errorcode error_code() const;
  inline void set_error_code(::e_gsc_errorcode value);

  // optional uint32 left_add_sign_times = 2;
  inline bool has_left_add_sign_times() const;
  inline void clear_left_add_sign_times();
  static const int kLeftAddSignTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 left_add_sign_times() const;
  inline void set_left_add_sign_times(::google::protobuf::uint32 value);

  // repeated .struct_game_element eles = 3;
  inline int eles_size() const;
  inline void clear_eles();
  static const int kElesFieldNumber = 3;
  inline const ::struct_game_element& eles(int index) const;
  inline ::struct_game_element* mutable_eles(int index);
  inline ::struct_game_element* add_eles();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      eles() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_eles();

  // @@protoc_insertion_point(class_scope:gs_c_sign_add_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_left_add_sign_times();
  inline void clear_has_left_add_sign_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int error_code_;
  ::google::protobuf::uint32 left_add_sign_times_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > eles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_sign_add_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_head_or_frame_change_req : public ::google::protobuf::Message {
 public:
  c_gs_head_or_frame_change_req();
  virtual ~c_gs_head_or_frame_change_req();

  c_gs_head_or_frame_change_req(const c_gs_head_or_frame_change_req& from);

  inline c_gs_head_or_frame_change_req& operator=(const c_gs_head_or_frame_change_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_head_or_frame_change_req& default_instance();

  void Swap(c_gs_head_or_frame_change_req* other);

  // implements Message ----------------------------------------------

  c_gs_head_or_frame_change_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_head_or_frame_change_req& from);
  void MergeFrom(const c_gs_head_or_frame_change_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .HEAD_CHANGE_TYPE change_type = 1;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  inline ::HEAD_CHANGE_TYPE change_type() const;
  inline void set_change_type(::HEAD_CHANGE_TYPE value);

  // required uint32 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::uint32 target_id() const;
  inline void set_target_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_head_or_frame_change_req)
 private:
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int change_type_;
  ::google::protobuf::uint32 target_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_head_or_frame_change_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_head_or_frame_change_res : public ::google::protobuf::Message {
 public:
  gs_c_head_or_frame_change_res();
  virtual ~gs_c_head_or_frame_change_res();

  gs_c_head_or_frame_change_res(const gs_c_head_or_frame_change_res& from);

  inline gs_c_head_or_frame_change_res& operator=(const gs_c_head_or_frame_change_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_head_or_frame_change_res& default_instance();

  void Swap(gs_c_head_or_frame_change_res* other);

  // implements Message ----------------------------------------------

  gs_c_head_or_frame_change_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_head_or_frame_change_res& from);
  void MergeFrom(const gs_c_head_or_frame_change_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .e_gsc_errorcode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::e_gsc_errorcode error_code() const;
  inline void set_error_code(::e_gsc_errorcode value);

  // optional .HEAD_CHANGE_TYPE change_type = 2;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 2;
  inline ::HEAD_CHANGE_TYPE change_type() const;
  inline void set_change_type(::HEAD_CHANGE_TYPE value);

  // optional uint32 target_id = 3;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 3;
  inline ::google::protobuf::uint32 target_id() const;
  inline void set_target_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_head_or_frame_change_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int error_code_;
  int change_type_;
  ::google::protobuf::uint32 target_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_head_or_frame_change_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_edit_player_info_req : public ::google::protobuf::Message {
 public:
  c_gs_edit_player_info_req();
  virtual ~c_gs_edit_player_info_req();

  c_gs_edit_player_info_req(const c_gs_edit_player_info_req& from);

  inline c_gs_edit_player_info_req& operator=(const c_gs_edit_player_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_edit_player_info_req& default_instance();

  void Swap(c_gs_edit_player_info_req* other);

  // implements Message ----------------------------------------------

  c_gs_edit_player_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_edit_player_info_req& from);
  void MergeFrom(const c_gs_edit_player_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 head_id = 2;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 2;
  inline ::google::protobuf::uint32 head_id() const;
  inline void set_head_id(::google::protobuf::uint32 value);

  // optional uint32 head_frame_id = 3;
  inline bool has_head_frame_id() const;
  inline void clear_head_frame_id();
  static const int kHeadFrameIdFieldNumber = 3;
  inline ::google::protobuf::uint32 head_frame_id() const;
  inline void set_head_frame_id(::google::protobuf::uint32 value);

  // optional string signature = 4;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 4;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:c_gs_edit_player_info_req)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head_id();
  inline void clear_has_head_id();
  inline void set_has_head_frame_id();
  inline void clear_has_head_frame_id();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 head_id_;
  ::google::protobuf::uint32 head_frame_id_;
  ::std::string* signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_edit_player_info_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_edit_player_info_res : public ::google::protobuf::Message {
 public:
  gs_c_edit_player_info_res();
  virtual ~gs_c_edit_player_info_res();

  gs_c_edit_player_info_res(const gs_c_edit_player_info_res& from);

  inline gs_c_edit_player_info_res& operator=(const gs_c_edit_player_info_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_edit_player_info_res& default_instance();

  void Swap(gs_c_edit_player_info_res* other);

  // implements Message ----------------------------------------------

  gs_c_edit_player_info_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_edit_player_info_res& from);
  void MergeFrom(const gs_c_edit_player_info_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .e_gsc_errorcode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::e_gsc_errorcode error_code() const;
  inline void set_error_code(::e_gsc_errorcode value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 head_id = 3;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 3;
  inline ::google::protobuf::uint32 head_id() const;
  inline void set_head_id(::google::protobuf::uint32 value);

  // optional uint32 head_frame_id = 4;
  inline bool has_head_frame_id() const;
  inline void clear_head_frame_id();
  static const int kHeadFrameIdFieldNumber = 4;
  inline ::google::protobuf::uint32 head_frame_id() const;
  inline void set_head_frame_id(::google::protobuf::uint32 value);

  // optional string signature = 5;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 5;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:gs_c_edit_player_info_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head_id();
  inline void clear_has_head_id();
  inline void set_has_head_frame_id();
  inline void clear_has_head_frame_id();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int error_code_;
  ::google::protobuf::uint32 head_id_;
  ::std::string* signature_;
  ::google::protobuf::uint32 head_frame_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_edit_player_info_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_finish_novice_guide_req : public ::google::protobuf::Message {
 public:
  c_gs_finish_novice_guide_req();
  virtual ~c_gs_finish_novice_guide_req();

  c_gs_finish_novice_guide_req(const c_gs_finish_novice_guide_req& from);

  inline c_gs_finish_novice_guide_req& operator=(const c_gs_finish_novice_guide_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_finish_novice_guide_req& default_instance();

  void Swap(c_gs_finish_novice_guide_req* other);

  // implements Message ----------------------------------------------

  c_gs_finish_novice_guide_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_finish_novice_guide_req& from);
  void MergeFrom(const c_gs_finish_novice_guide_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 guide_id = 1;
  inline bool has_guide_id() const;
  inline void clear_guide_id();
  static const int kGuideIdFieldNumber = 1;
  inline ::google::protobuf::uint32 guide_id() const;
  inline void set_guide_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_finish_novice_guide_req)
 private:
  inline void set_has_guide_id();
  inline void clear_has_guide_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guide_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_finish_novice_guide_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_finish_novice_guide_res : public ::google::protobuf::Message {
 public:
  gs_c_finish_novice_guide_res();
  virtual ~gs_c_finish_novice_guide_res();

  gs_c_finish_novice_guide_res(const gs_c_finish_novice_guide_res& from);

  inline gs_c_finish_novice_guide_res& operator=(const gs_c_finish_novice_guide_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_finish_novice_guide_res& default_instance();

  void Swap(gs_c_finish_novice_guide_res* other);

  // implements Message ----------------------------------------------

  gs_c_finish_novice_guide_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_finish_novice_guide_res& from);
  void MergeFrom(const gs_c_finish_novice_guide_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .e_gsc_errorcode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::e_gsc_errorcode error_code() const;
  inline void set_error_code(::e_gsc_errorcode value);

  // optional uint32 guide_id = 2;
  inline bool has_guide_id() const;
  inline void clear_guide_id();
  static const int kGuideIdFieldNumber = 2;
  inline ::google::protobuf::uint32 guide_id() const;
  inline void set_guide_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_finish_novice_guide_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_guide_id();
  inline void clear_has_guide_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int error_code_;
  ::google::protobuf::uint32 guide_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_finish_novice_guide_res* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_marquee_ntf : public ::google::protobuf::Message {
 public:
  gs_c_marquee_ntf();
  virtual ~gs_c_marquee_ntf();

  gs_c_marquee_ntf(const gs_c_marquee_ntf& from);

  inline gs_c_marquee_ntf& operator=(const gs_c_marquee_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_marquee_ntf& default_instance();

  void Swap(gs_c_marquee_ntf* other);

  // implements Message ----------------------------------------------

  gs_c_marquee_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_marquee_ntf& from);
  void MergeFrom(const gs_c_marquee_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gs_c_marquee_ntf_MARQUEE_TYPE MARQUEE_TYPE;
  static const MARQUEE_TYPE MARQUEE_MIN = gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_MIN;
  static const MARQUEE_TYPE MARQUEE_INVOKE = gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_INVOKE;
  static const MARQUEE_TYPE MARQUEE_HERO_EVOLUTION = gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_HERO_EVOLUTION;
  static const MARQUEE_TYPE MARQUEE_INVOKE_HERO = gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_INVOKE_HERO;
  static const MARQUEE_TYPE MARQUEE_HERO_STAR_UP = gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_HERO_STAR_UP;
  static const MARQUEE_TYPE MARQUEE_ARENA_CHALLENGE = gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_ARENA_CHALLENGE;
  static const MARQUEE_TYPE MARQUEE_WORD = gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_WORD;
  static const MARQUEE_TYPE MARQUEE_MAX = gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_MAX;
  static inline bool MARQUEE_TYPE_IsValid(int value) {
    return gs_c_marquee_ntf_MARQUEE_TYPE_IsValid(value);
  }
  static const MARQUEE_TYPE MARQUEE_TYPE_MIN =
    gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_TYPE_MIN;
  static const MARQUEE_TYPE MARQUEE_TYPE_MAX =
    gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_TYPE_MAX;
  static const int MARQUEE_TYPE_ARRAYSIZE =
    gs_c_marquee_ntf_MARQUEE_TYPE_MARQUEE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MARQUEE_TYPE_descriptor() {
    return gs_c_marquee_ntf_MARQUEE_TYPE_descriptor();
  }
  static inline const ::std::string& MARQUEE_TYPE_Name(MARQUEE_TYPE value) {
    return gs_c_marquee_ntf_MARQUEE_TYPE_Name(value);
  }
  static inline bool MARQUEE_TYPE_Parse(const ::std::string& name,
      MARQUEE_TYPE* value) {
    return gs_c_marquee_ntf_MARQUEE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .gs_c_marquee_ntf.MARQUEE_TYPE marquee_type = 1;
  inline bool has_marquee_type() const;
  inline void clear_marquee_type();
  static const int kMarqueeTypeFieldNumber = 1;
  inline ::gs_c_marquee_ntf_MARQUEE_TYPE marquee_type() const;
  inline void set_marquee_type(::gs_c_marquee_ntf_MARQUEE_TYPE value);

  // required uint32 marquee_times = 2;
  inline bool has_marquee_times() const;
  inline void clear_marquee_times();
  static const int kMarqueeTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 marquee_times() const;
  inline void set_marquee_times(::google::protobuf::uint32 value);

  // required string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:gs_c_marquee_ntf)
 private:
  inline void set_has_marquee_type();
  inline void clear_has_marquee_type();
  inline void set_has_marquee_times();
  inline void clear_has_marquee_times();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int marquee_type_;
  ::google::protobuf::uint32 marquee_times_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_marquee_ntf* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_element_ntf : public ::google::protobuf::Message {
 public:
  gs_c_element_ntf();
  virtual ~gs_c_element_ntf();

  gs_c_element_ntf(const gs_c_element_ntf& from);

  inline gs_c_element_ntf& operator=(const gs_c_element_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_element_ntf& default_instance();

  void Swap(gs_c_element_ntf* other);

  // implements Message ----------------------------------------------

  gs_c_element_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_element_ntf& from);
  void MergeFrom(const gs_c_element_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .struct_game_element eles = 1;
  inline int eles_size() const;
  inline void clear_eles();
  static const int kElesFieldNumber = 1;
  inline const ::struct_game_element& eles(int index) const;
  inline ::struct_game_element* mutable_eles(int index);
  inline ::struct_game_element* add_eles();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      eles() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_eles();

  // @@protoc_insertion_point(class_scope:gs_c_element_ntf)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > eles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_element_ntf* default_instance_;
};
// -------------------------------------------------------------------

class friend_base_info : public ::google::protobuf::Message {
 public:
  friend_base_info();
  virtual ~friend_base_info();

  friend_base_info(const friend_base_info& from);

  inline friend_base_info& operator=(const friend_base_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const friend_base_info& default_instance();

  void Swap(friend_base_info* other);

  // implements Message ----------------------------------------------

  friend_base_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const friend_base_info& from);
  void MergeFrom(const friend_base_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 head_id = 2;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 2;
  inline ::google::protobuf::uint32 head_id() const;
  inline void set_head_id(::google::protobuf::uint32 value);

  // required uint32 head_frame_id = 3;
  inline bool has_head_frame_id() const;
  inline void clear_head_frame_id();
  static const int kHeadFrameIdFieldNumber = 3;
  inline ::google::protobuf::uint32 head_frame_id() const;
  inline void set_head_frame_id(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 vip = 6;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 6;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // required uint32 arena_rank = 7;
  inline bool has_arena_rank() const;
  inline void clear_arena_rank();
  static const int kArenaRankFieldNumber = 7;
  inline ::google::protobuf::uint32 arena_rank() const;
  inline void set_arena_rank(::google::protobuf::uint32 value);

  // required uint32 last_login_time = 8;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::uint32 value);

  // optional string signature = 9;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 9;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:friend_base_info)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_head_id();
  inline void clear_has_head_id();
  inline void set_has_head_frame_id();
  inline void clear_has_head_frame_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_arena_rank();
  inline void clear_has_arena_rank();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 head_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 head_frame_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 vip_;
  ::google::protobuf::uint32 arena_rank_;
  ::std::string* signature_;
  ::google::protobuf::uint32 last_login_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static friend_base_info* default_instance_;
};
// -------------------------------------------------------------------

class user_friend_friend_info : public ::google::protobuf::Message {
 public:
  user_friend_friend_info();
  virtual ~user_friend_friend_info();

  user_friend_friend_info(const user_friend_friend_info& from);

  inline user_friend_friend_info& operator=(const user_friend_friend_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_friend_friend_info& default_instance();

  void Swap(user_friend_friend_info* other);

  // implements Message ----------------------------------------------

  user_friend_friend_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_friend_friend_info& from);
  void MergeFrom(const user_friend_friend_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .friend_base_info base_info = 1;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::friend_base_info& base_info() const;
  inline ::friend_base_info* mutable_base_info();
  inline ::friend_base_info* release_base_info();
  inline void set_allocated_base_info(::friend_base_info* base_info);

  // required bool is_friend_give = 2;
  inline bool has_is_friend_give() const;
  inline void clear_is_friend_give();
  static const int kIsFriendGiveFieldNumber = 2;
  inline bool is_friend_give() const;
  inline void set_is_friend_give(bool value);

  // required bool is_me_give = 3;
  inline bool has_is_me_give() const;
  inline void clear_is_me_give();
  static const int kIsMeGiveFieldNumber = 3;
  inline bool is_me_give() const;
  inline void set_is_me_give(bool value);

  // @@protoc_insertion_point(class_scope:user_friend.friend_info)
 private:
  inline void set_has_base_info();
  inline void clear_has_base_info();
  inline void set_has_is_friend_give();
  inline void clear_has_is_friend_give();
  inline void set_has_is_me_give();
  inline void clear_has_is_me_give();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::friend_base_info* base_info_;
  bool is_friend_give_;
  bool is_me_give_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_friend_friend_info* default_instance_;
};
// -------------------------------------------------------------------

class user_friend : public ::google::protobuf::Message {
 public:
  user_friend();
  virtual ~user_friend();

  user_friend(const user_friend& from);

  inline user_friend& operator=(const user_friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_friend& default_instance();

  void Swap(user_friend* other);

  // implements Message ----------------------------------------------

  user_friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_friend& from);
  void MergeFrom(const user_friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef user_friend_friend_info friend_info;

  // accessors -------------------------------------------------------

  // repeated .user_friend.friend_info friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::user_friend_friend_info& friends(int index) const;
  inline ::user_friend_friend_info* mutable_friends(int index);
  inline ::user_friend_friend_info* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::user_friend_friend_info >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_friend_friend_info >*
      mutable_friends();

  // repeated .friend_base_info applies = 2;
  inline int applies_size() const;
  inline void clear_applies();
  static const int kAppliesFieldNumber = 2;
  inline const ::friend_base_info& applies(int index) const;
  inline ::friend_base_info* mutable_applies(int index);
  inline ::friend_base_info* add_applies();
  inline const ::google::protobuf::RepeatedPtrField< ::friend_base_info >&
      applies() const;
  inline ::google::protobuf::RepeatedPtrField< ::friend_base_info >*
      mutable_applies();

  // repeated .friend_base_info confirms = 3;
  inline int confirms_size() const;
  inline void clear_confirms();
  static const int kConfirmsFieldNumber = 3;
  inline const ::friend_base_info& confirms(int index) const;
  inline ::friend_base_info* mutable_confirms(int index);
  inline ::friend_base_info* add_confirms();
  inline const ::google::protobuf::RepeatedPtrField< ::friend_base_info >&
      confirms() const;
  inline ::google::protobuf::RepeatedPtrField< ::friend_base_info >*
      mutable_confirms();

  // repeated .friend_base_info recommends = 4;
  inline int recommends_size() const;
  inline void clear_recommends();
  static const int kRecommendsFieldNumber = 4;
  inline const ::friend_base_info& recommends(int index) const;
  inline ::friend_base_info* mutable_recommends(int index);
  inline ::friend_base_info* add_recommends();
  inline const ::google::protobuf::RepeatedPtrField< ::friend_base_info >&
      recommends() const;
  inline ::google::protobuf::RepeatedPtrField< ::friend_base_info >*
      mutable_recommends();

  // @@protoc_insertion_point(class_scope:user_friend)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::user_friend_friend_info > friends_;
  ::google::protobuf::RepeatedPtrField< ::friend_base_info > applies_;
  ::google::protobuf::RepeatedPtrField< ::friend_base_info > confirms_;
  ::google::protobuf::RepeatedPtrField< ::friend_base_info > recommends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static user_friend* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_user_friend_op_req : public ::google::protobuf::Message {
 public:
  c_gs_user_friend_op_req();
  virtual ~c_gs_user_friend_op_req();

  c_gs_user_friend_op_req(const c_gs_user_friend_op_req& from);

  inline c_gs_user_friend_op_req& operator=(const c_gs_user_friend_op_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_user_friend_op_req& default_instance();

  void Swap(c_gs_user_friend_op_req* other);

  // implements Message ----------------------------------------------

  c_gs_user_friend_op_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_user_friend_op_req& from);
  void MergeFrom(const c_gs_user_friend_op_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef c_gs_user_friend_op_req_OP_TYPE OP_TYPE;
  static const OP_TYPE MIN = c_gs_user_friend_op_req_OP_TYPE_MIN;
  static const OP_TYPE GET_ELEMENT1 = c_gs_user_friend_op_req_OP_TYPE_GET_ELEMENT1;
  static const OP_TYPE GET_ELEMENTN = c_gs_user_friend_op_req_OP_TYPE_GET_ELEMENTN;
  static const OP_TYPE GIVE_ELEMENT1 = c_gs_user_friend_op_req_OP_TYPE_GIVE_ELEMENT1;
  static const OP_TYPE GIVE_ELEMENTN = c_gs_user_friend_op_req_OP_TYPE_GIVE_ELEMENTN;
  static const OP_TYPE GIVE_UP_APPLY1 = c_gs_user_friend_op_req_OP_TYPE_GIVE_UP_APPLY1;
  static const OP_TYPE GIVE_UP_APPLYN = c_gs_user_friend_op_req_OP_TYPE_GIVE_UP_APPLYN;
  static const OP_TYPE AFFIRM_AGREE1 = c_gs_user_friend_op_req_OP_TYPE_AFFIRM_AGREE1;
  static const OP_TYPE AFFIRM_AGREEN = c_gs_user_friend_op_req_OP_TYPE_AFFIRM_AGREEN;
  static const OP_TYPE AFFIRM_REFUSE1 = c_gs_user_friend_op_req_OP_TYPE_AFFIRM_REFUSE1;
  static const OP_TYPE AFFIRM_REFUSEN = c_gs_user_friend_op_req_OP_TYPE_AFFIRM_REFUSEN;
  static const OP_TYPE ADD_FRIEND = c_gs_user_friend_op_req_OP_TYPE_ADD_FRIEND;
  static const OP_TYPE DEL_FRIEND = c_gs_user_friend_op_req_OP_TYPE_DEL_FRIEND;
  static const OP_TYPE MAX = c_gs_user_friend_op_req_OP_TYPE_MAX;
  static inline bool OP_TYPE_IsValid(int value) {
    return c_gs_user_friend_op_req_OP_TYPE_IsValid(value);
  }
  static const OP_TYPE OP_TYPE_MIN =
    c_gs_user_friend_op_req_OP_TYPE_OP_TYPE_MIN;
  static const OP_TYPE OP_TYPE_MAX =
    c_gs_user_friend_op_req_OP_TYPE_OP_TYPE_MAX;
  static const int OP_TYPE_ARRAYSIZE =
    c_gs_user_friend_op_req_OP_TYPE_OP_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OP_TYPE_descriptor() {
    return c_gs_user_friend_op_req_OP_TYPE_descriptor();
  }
  static inline const ::std::string& OP_TYPE_Name(OP_TYPE value) {
    return c_gs_user_friend_op_req_OP_TYPE_Name(value);
  }
  static inline bool OP_TYPE_Parse(const ::std::string& name,
      OP_TYPE* value) {
    return c_gs_user_friend_op_req_OP_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c_gs_user_friend_op_req.OP_TYPE op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::c_gs_user_friend_op_req_OP_TYPE op_type() const;
  inline void set_op_type(::c_gs_user_friend_op_req_OP_TYPE value);

  // optional uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_user_friend_op_req)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int op_type_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_user_friend_op_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_user_friend_op_res : public ::google::protobuf::Message {
 public:
  gs_c_user_friend_op_res();
  virtual ~gs_c_user_friend_op_res();

  gs_c_user_friend_op_res(const gs_c_user_friend_op_res& from);

  inline gs_c_user_friend_op_res& operator=(const gs_c_user_friend_op_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_user_friend_op_res& default_instance();

  void Swap(gs_c_user_friend_op_res* other);

  // implements Message ----------------------------------------------

  gs_c_user_friend_op_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_user_friend_op_res& from);
  void MergeFrom(const gs_c_user_friend_op_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // required .c_gs_user_friend_op_req.OP_TYPE op_type = 2;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 2;
  inline ::c_gs_user_friend_op_req_OP_TYPE op_type() const;
  inline void set_op_type(::c_gs_user_friend_op_req_OP_TYPE value);

  // optional uint32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // repeated .struct_game_element eles = 4;
  inline int eles_size() const;
  inline void clear_eles();
  static const int kElesFieldNumber = 4;
  inline const ::struct_game_element& eles(int index) const;
  inline ::struct_game_element* mutable_eles(int index);
  inline ::struct_game_element* add_eles();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      eles() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_eles();

  // optional .friend_base_info base_info = 5;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 5;
  inline const ::friend_base_info& base_info() const;
  inline ::friend_base_info* mutable_base_info();
  inline ::friend_base_info* release_base_info();
  inline void set_allocated_base_info(::friend_base_info* base_info);

  // @@protoc_insertion_point(class_scope:gs_c_user_friend_op_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_base_info();
  inline void clear_has_base_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_code_;
  int op_type_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > eles_;
  ::friend_base_info* base_info_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_user_friend_op_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_search_user_req : public ::google::protobuf::Message {
 public:
  c_gs_search_user_req();
  virtual ~c_gs_search_user_req();

  c_gs_search_user_req(const c_gs_search_user_req& from);

  inline c_gs_search_user_req& operator=(const c_gs_search_user_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_search_user_req& default_instance();

  void Swap(c_gs_search_user_req* other);

  // implements Message ----------------------------------------------

  c_gs_search_user_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_search_user_req& from);
  void MergeFrom(const c_gs_search_user_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_search_user_req)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_search_user_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_search_user_res : public ::google::protobuf::Message {
 public:
  gs_c_search_user_res();
  virtual ~gs_c_search_user_res();

  gs_c_search_user_res(const gs_c_search_user_res& from);

  inline gs_c_search_user_res& operator=(const gs_c_search_user_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_search_user_res& default_instance();

  void Swap(gs_c_search_user_res* other);

  // implements Message ----------------------------------------------

  gs_c_search_user_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_search_user_res& from);
  void MergeFrom(const gs_c_search_user_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional .friend_base_info base_info = 2;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 2;
  inline const ::friend_base_info& base_info() const;
  inline ::friend_base_info* mutable_base_info();
  inline ::friend_base_info* release_base_info();
  inline void set_allocated_base_info(::friend_base_info* base_info);

  // @@protoc_insertion_point(class_scope:gs_c_search_user_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_base_info();
  inline void clear_has_base_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::friend_base_info* base_info_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_search_user_res* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_friend_ntf : public ::google::protobuf::Message {
 public:
  gs_c_friend_ntf();
  virtual ~gs_c_friend_ntf();

  gs_c_friend_ntf(const gs_c_friend_ntf& from);

  inline gs_c_friend_ntf& operator=(const gs_c_friend_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_friend_ntf& default_instance();

  void Swap(gs_c_friend_ntf* other);

  // implements Message ----------------------------------------------

  gs_c_friend_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_friend_ntf& from);
  void MergeFrom(const gs_c_friend_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gs_c_friend_ntf_OP_TYPE OP_TYPE;
  static const OP_TYPE FRIEND_GIVE_ELEMENT = gs_c_friend_ntf_OP_TYPE_FRIEND_GIVE_ELEMENT;
  static const OP_TYPE FRIEND_GIVE_UP_APPLY = gs_c_friend_ntf_OP_TYPE_FRIEND_GIVE_UP_APPLY;
  static const OP_TYPE FRIEND_AFFIRM_AGREE = gs_c_friend_ntf_OP_TYPE_FRIEND_AFFIRM_AGREE;
  static const OP_TYPE FRIEND_DEL_FRIEND = gs_c_friend_ntf_OP_TYPE_FRIEND_DEL_FRIEND;
  static const OP_TYPE FRIEND_AFFIRM_REFUSE = gs_c_friend_ntf_OP_TYPE_FRIEND_AFFIRM_REFUSE;
  static const OP_TYPE FRIEND_ADD_FRIEND = gs_c_friend_ntf_OP_TYPE_FRIEND_ADD_FRIEND;
  static inline bool OP_TYPE_IsValid(int value) {
    return gs_c_friend_ntf_OP_TYPE_IsValid(value);
  }
  static const OP_TYPE OP_TYPE_MIN =
    gs_c_friend_ntf_OP_TYPE_OP_TYPE_MIN;
  static const OP_TYPE OP_TYPE_MAX =
    gs_c_friend_ntf_OP_TYPE_OP_TYPE_MAX;
  static const int OP_TYPE_ARRAYSIZE =
    gs_c_friend_ntf_OP_TYPE_OP_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OP_TYPE_descriptor() {
    return gs_c_friend_ntf_OP_TYPE_descriptor();
  }
  static inline const ::std::string& OP_TYPE_Name(OP_TYPE value) {
    return gs_c_friend_ntf_OP_TYPE_Name(value);
  }
  static inline bool OP_TYPE_Parse(const ::std::string& name,
      OP_TYPE* value) {
    return gs_c_friend_ntf_OP_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .gs_c_friend_ntf.OP_TYPE op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::gs_c_friend_ntf_OP_TYPE op_type() const;
  inline void set_op_type(::gs_c_friend_ntf_OP_TYPE value);

  // optional uint32 friend_id = 2;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 2;
  inline ::google::protobuf::uint32 friend_id() const;
  inline void set_friend_id(::google::protobuf::uint32 value);

  // optional .friend_base_info base_info = 3;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 3;
  inline const ::friend_base_info& base_info() const;
  inline ::friend_base_info* mutable_base_info();
  inline ::friend_base_info* release_base_info();
  inline void set_allocated_base_info(::friend_base_info* base_info);

  // @@protoc_insertion_point(class_scope:gs_c_friend_ntf)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_base_info();
  inline void clear_has_base_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int op_type_;
  ::google::protobuf::uint32 friend_id_;
  ::friend_base_info* base_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_friend_ntf* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_chat_req : public ::google::protobuf::Message {
 public:
  c_gs_chat_req();
  virtual ~c_gs_chat_req();

  c_gs_chat_req(const c_gs_chat_req& from);

  inline c_gs_chat_req& operator=(const c_gs_chat_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_chat_req& default_instance();

  void Swap(c_gs_chat_req* other);

  // implements Message ----------------------------------------------

  c_gs_chat_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_chat_req& from);
  void MergeFrom(const c_gs_chat_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef c_gs_chat_req_CHAT_TYPE CHAT_TYPE;
  static const CHAT_TYPE WORLD = c_gs_chat_req_CHAT_TYPE_WORLD;
  static const CHAT_TYPE GUILD = c_gs_chat_req_CHAT_TYPE_GUILD;
  static const CHAT_TYPE WHISPER = c_gs_chat_req_CHAT_TYPE_WHISPER;
  static inline bool CHAT_TYPE_IsValid(int value) {
    return c_gs_chat_req_CHAT_TYPE_IsValid(value);
  }
  static const CHAT_TYPE CHAT_TYPE_MIN =
    c_gs_chat_req_CHAT_TYPE_CHAT_TYPE_MIN;
  static const CHAT_TYPE CHAT_TYPE_MAX =
    c_gs_chat_req_CHAT_TYPE_CHAT_TYPE_MAX;
  static const int CHAT_TYPE_ARRAYSIZE =
    c_gs_chat_req_CHAT_TYPE_CHAT_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CHAT_TYPE_descriptor() {
    return c_gs_chat_req_CHAT_TYPE_descriptor();
  }
  static inline const ::std::string& CHAT_TYPE_Name(CHAT_TYPE value) {
    return c_gs_chat_req_CHAT_TYPE_Name(value);
  }
  static inline bool CHAT_TYPE_Parse(const ::std::string& name,
      CHAT_TYPE* value) {
    return c_gs_chat_req_CHAT_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c_gs_chat_req.CHAT_TYPE chat_type = 1;
  inline bool has_chat_type() const;
  inline void clear_chat_type();
  static const int kChatTypeFieldNumber = 1;
  inline ::c_gs_chat_req_CHAT_TYPE chat_type() const;
  inline void set_chat_type(::c_gs_chat_req_CHAT_TYPE value);

  // optional uint32 to_id = 2;
  inline bool has_to_id() const;
  inline void clear_to_id();
  static const int kToIdFieldNumber = 2;
  inline ::google::protobuf::uint32 to_id() const;
  inline void set_to_id(::google::protobuf::uint32 value);

  // optional string to_name = 3;
  inline bool has_to_name() const;
  inline void clear_to_name();
  static const int kToNameFieldNumber = 3;
  inline const ::std::string& to_name() const;
  inline void set_to_name(const ::std::string& value);
  inline void set_to_name(const char* value);
  inline void set_to_name(const char* value, size_t size);
  inline ::std::string* mutable_to_name();
  inline ::std::string* release_to_name();
  inline void set_allocated_to_name(::std::string* to_name);

  // required string word = 4;
  inline bool has_word() const;
  inline void clear_word();
  static const int kWordFieldNumber = 4;
  inline const ::std::string& word() const;
  inline void set_word(const ::std::string& value);
  inline void set_word(const char* value);
  inline void set_word(const char* value, size_t size);
  inline ::std::string* mutable_word();
  inline ::std::string* release_word();
  inline void set_allocated_word(::std::string* word);

  // @@protoc_insertion_point(class_scope:c_gs_chat_req)
 private:
  inline void set_has_chat_type();
  inline void clear_has_chat_type();
  inline void set_has_to_id();
  inline void clear_has_to_id();
  inline void set_has_to_name();
  inline void clear_has_to_name();
  inline void set_has_word();
  inline void clear_has_word();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int chat_type_;
  ::google::protobuf::uint32 to_id_;
  ::std::string* to_name_;
  ::std::string* word_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_chat_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_chat_res : public ::google::protobuf::Message {
 public:
  gs_c_chat_res();
  virtual ~gs_c_chat_res();

  gs_c_chat_res(const gs_c_chat_res& from);

  inline gs_c_chat_res& operator=(const gs_c_chat_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_chat_res& default_instance();

  void Swap(gs_c_chat_res* other);

  // implements Message ----------------------------------------------

  gs_c_chat_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_chat_res& from);
  void MergeFrom(const gs_c_chat_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_chat_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_chat_res* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_chat_ntf : public ::google::protobuf::Message {
 public:
  gs_c_chat_ntf();
  virtual ~gs_c_chat_ntf();

  gs_c_chat_ntf(const gs_c_chat_ntf& from);

  inline gs_c_chat_ntf& operator=(const gs_c_chat_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_chat_ntf& default_instance();

  void Swap(gs_c_chat_ntf* other);

  // implements Message ----------------------------------------------

  gs_c_chat_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_chat_ntf& from);
  void MergeFrom(const gs_c_chat_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .c_gs_chat_req.CHAT_TYPE chat_type = 1;
  inline bool has_chat_type() const;
  inline void clear_chat_type();
  static const int kChatTypeFieldNumber = 1;
  inline ::c_gs_chat_req_CHAT_TYPE chat_type() const;
  inline void set_chat_type(::c_gs_chat_req_CHAT_TYPE value);

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 vip = 3;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 3;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 head_id = 5;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 5;
  inline ::google::protobuf::uint32 head_id() const;
  inline void set_head_id(::google::protobuf::uint32 value);

  // required uint32 head_frame_id = 6;
  inline bool has_head_frame_id() const;
  inline void clear_head_frame_id();
  static const int kHeadFrameIdFieldNumber = 6;
  inline ::google::protobuf::uint32 head_frame_id() const;
  inline void set_head_frame_id(::google::protobuf::uint32 value);

  // required string word = 7;
  inline bool has_word() const;
  inline void clear_word();
  static const int kWordFieldNumber = 7;
  inline const ::std::string& word() const;
  inline void set_word(const ::std::string& value);
  inline void set_word(const char* value);
  inline void set_word(const char* value, size_t size);
  inline ::std::string* mutable_word();
  inline ::std::string* release_word();
  inline void set_allocated_word(::std::string* word);

  // @@protoc_insertion_point(class_scope:gs_c_chat_ntf)
 private:
  inline void set_has_chat_type();
  inline void clear_has_chat_type();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head_id();
  inline void clear_has_head_id();
  inline void set_has_head_frame_id();
  inline void clear_has_head_frame_id();
  inline void set_has_word();
  inline void clear_has_word();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int chat_type_;
  ::google::protobuf::uint32 user_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 vip_;
  ::google::protobuf::uint32 head_id_;
  ::std::string* word_;
  ::google::protobuf::uint32 head_frame_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_chat_ntf* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_fight_power_req : public ::google::protobuf::Message {
 public:
  c_gs_fight_power_req();
  virtual ~c_gs_fight_power_req();

  c_gs_fight_power_req(const c_gs_fight_power_req& from);

  inline c_gs_fight_power_req& operator=(const c_gs_fight_power_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_fight_power_req& default_instance();

  void Swap(c_gs_fight_power_req* other);

  // implements Message ----------------------------------------------

  c_gs_fight_power_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_fight_power_req& from);
  void MergeFrom(const c_gs_fight_power_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 fight_power = 1;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 1;
  inline ::google::protobuf::uint32 fight_power() const;
  inline void set_fight_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_fight_power_req)
 private:
  inline void set_has_fight_power();
  inline void clear_has_fight_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 fight_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_fight_power_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_fight_power_res : public ::google::protobuf::Message {
 public:
  gs_c_fight_power_res();
  virtual ~gs_c_fight_power_res();

  gs_c_fight_power_res(const gs_c_fight_power_res& from);

  inline gs_c_fight_power_res& operator=(const gs_c_fight_power_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_fight_power_res& default_instance();

  void Swap(gs_c_fight_power_res* other);

  // implements Message ----------------------------------------------

  gs_c_fight_power_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_fight_power_res& from);
  void MergeFrom(const gs_c_fight_power_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_fight_power_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_fight_power_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_rank_req : public ::google::protobuf::Message {
 public:
  c_gs_rank_req();
  virtual ~c_gs_rank_req();

  c_gs_rank_req(const c_gs_rank_req& from);

  inline c_gs_rank_req& operator=(const c_gs_rank_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_rank_req& default_instance();

  void Swap(c_gs_rank_req* other);

  // implements Message ----------------------------------------------

  c_gs_rank_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_rank_req& from);
  void MergeFrom(const c_gs_rank_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef c_gs_rank_req_RANK_TYPE RANK_TYPE;
  static const RANK_TYPE ARENA = c_gs_rank_req_RANK_TYPE_ARENA;
  static const RANK_TYPE FIGHT_POWER = c_gs_rank_req_RANK_TYPE_FIGHT_POWER;
  static const RANK_TYPE LEVEL = c_gs_rank_req_RANK_TYPE_LEVEL;
  static const RANK_TYPE GUILD = c_gs_rank_req_RANK_TYPE_GUILD;
  static inline bool RANK_TYPE_IsValid(int value) {
    return c_gs_rank_req_RANK_TYPE_IsValid(value);
  }
  static const RANK_TYPE RANK_TYPE_MIN =
    c_gs_rank_req_RANK_TYPE_RANK_TYPE_MIN;
  static const RANK_TYPE RANK_TYPE_MAX =
    c_gs_rank_req_RANK_TYPE_RANK_TYPE_MAX;
  static const int RANK_TYPE_ARRAYSIZE =
    c_gs_rank_req_RANK_TYPE_RANK_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RANK_TYPE_descriptor() {
    return c_gs_rank_req_RANK_TYPE_descriptor();
  }
  static inline const ::std::string& RANK_TYPE_Name(RANK_TYPE value) {
    return c_gs_rank_req_RANK_TYPE_Name(value);
  }
  static inline bool RANK_TYPE_Parse(const ::std::string& name,
      RANK_TYPE* value) {
    return c_gs_rank_req_RANK_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c_gs_rank_req.RANK_TYPE rank_type = 1;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 1;
  inline ::c_gs_rank_req_RANK_TYPE rank_type() const;
  inline void set_rank_type(::c_gs_rank_req_RANK_TYPE value);

  // @@protoc_insertion_point(class_scope:c_gs_rank_req)
 private:
  inline void set_has_rank_type();
  inline void clear_has_rank_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int rank_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_rank_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_rank_res_user_hero_brief_info : public ::google::protobuf::Message {
 public:
  gs_c_rank_res_user_hero_brief_info();
  virtual ~gs_c_rank_res_user_hero_brief_info();

  gs_c_rank_res_user_hero_brief_info(const gs_c_rank_res_user_hero_brief_info& from);

  inline gs_c_rank_res_user_hero_brief_info& operator=(const gs_c_rank_res_user_hero_brief_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_rank_res_user_hero_brief_info& default_instance();

  void Swap(gs_c_rank_res_user_hero_brief_info* other);

  // implements Message ----------------------------------------------

  gs_c_rank_res_user_hero_brief_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_rank_res_user_hero_brief_info& from);
  void MergeFrom(const gs_c_rank_res_user_hero_brief_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 quality = 3;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 3;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // required uint32 star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_rank_res.user_hero_brief_info)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 star_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_rank_res_user_hero_brief_info* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_rank_res_rank_info : public ::google::protobuf::Message {
 public:
  gs_c_rank_res_rank_info();
  virtual ~gs_c_rank_res_rank_info();

  gs_c_rank_res_rank_info(const gs_c_rank_res_rank_info& from);

  inline gs_c_rank_res_rank_info& operator=(const gs_c_rank_res_rank_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_rank_res_rank_info& default_instance();

  void Swap(gs_c_rank_res_rank_info* other);

  // implements Message ----------------------------------------------

  gs_c_rank_res_rank_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_rank_res_rank_info& from);
  void MergeFrom(const gs_c_rank_res_rank_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 head_id = 1;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 1;
  inline ::google::protobuf::uint32 head_id() const;
  inline void set_head_id(::google::protobuf::uint32 value);

  // required uint32 head_frame_id = 2;
  inline bool has_head_frame_id() const;
  inline void clear_head_frame_id();
  static const int kHeadFrameIdFieldNumber = 2;
  inline ::google::protobuf::uint32 head_frame_id() const;
  inline void set_head_frame_id(::google::protobuf::uint32 value);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 arena_rank = 5;
  inline bool has_arena_rank() const;
  inline void clear_arena_rank();
  static const int kArenaRankFieldNumber = 5;
  inline ::google::protobuf::uint32 arena_rank() const;
  inline void set_arena_rank(::google::protobuf::uint32 value);

  // required uint32 fight_rank = 6;
  inline bool has_fight_rank() const;
  inline void clear_fight_rank();
  static const int kFightRankFieldNumber = 6;
  inline ::google::protobuf::uint32 fight_rank() const;
  inline void set_fight_rank(::google::protobuf::uint32 value);

  // required uint32 fight_power = 7;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 7;
  inline ::google::protobuf::uint32 fight_power() const;
  inline void set_fight_power(::google::protobuf::uint32 value);

  // required uint32 level_rank = 8;
  inline bool has_level_rank() const;
  inline void clear_level_rank();
  static const int kLevelRankFieldNumber = 8;
  inline ::google::protobuf::uint32 level_rank() const;
  inline void set_level_rank(::google::protobuf::uint32 value);

  // required uint32 vip = 9;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 9;
  inline ::google::protobuf::uint32 vip() const;
  inline void set_vip(::google::protobuf::uint32 value);

  // repeated .gs_c_rank_res.user_hero_brief_info heros = 10;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 10;
  inline const ::gs_c_rank_res_user_hero_brief_info& heros(int index) const;
  inline ::gs_c_rank_res_user_hero_brief_info* mutable_heros(int index);
  inline ::gs_c_rank_res_user_hero_brief_info* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::gs_c_rank_res_user_hero_brief_info >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::gs_c_rank_res_user_hero_brief_info >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:gs_c_rank_res.rank_info)
 private:
  inline void set_has_head_id();
  inline void clear_has_head_id();
  inline void set_has_head_frame_id();
  inline void clear_has_head_frame_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_arena_rank();
  inline void clear_has_arena_rank();
  inline void set_has_fight_rank();
  inline void clear_has_fight_rank();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();
  inline void set_has_level_rank();
  inline void clear_has_level_rank();
  inline void set_has_vip();
  inline void clear_has_vip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 head_id_;
  ::google::protobuf::uint32 head_frame_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 arena_rank_;
  ::google::protobuf::uint32 fight_rank_;
  ::google::protobuf::uint32 fight_power_;
  ::google::protobuf::uint32 level_rank_;
  ::google::protobuf::uint32 vip_;
  ::google::protobuf::RepeatedPtrField< ::gs_c_rank_res_user_hero_brief_info > heros_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_rank_res_rank_info* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_rank_res : public ::google::protobuf::Message {
 public:
  gs_c_rank_res();
  virtual ~gs_c_rank_res();

  gs_c_rank_res(const gs_c_rank_res& from);

  inline gs_c_rank_res& operator=(const gs_c_rank_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_rank_res& default_instance();

  void Swap(gs_c_rank_res* other);

  // implements Message ----------------------------------------------

  gs_c_rank_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_rank_res& from);
  void MergeFrom(const gs_c_rank_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gs_c_rank_res_user_hero_brief_info user_hero_brief_info;
  typedef gs_c_rank_res_rank_info rank_info;

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional .c_gs_rank_req.RANK_TYPE rank_type = 2;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 2;
  inline ::c_gs_rank_req_RANK_TYPE rank_type() const;
  inline void set_rank_type(::c_gs_rank_req_RANK_TYPE value);

  // repeated .gs_c_rank_res.rank_info ranks = 3;
  inline int ranks_size() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 3;
  inline const ::gs_c_rank_res_rank_info& ranks(int index) const;
  inline ::gs_c_rank_res_rank_info* mutable_ranks(int index);
  inline ::gs_c_rank_res_rank_info* add_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::gs_c_rank_res_rank_info >&
      ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::gs_c_rank_res_rank_info >*
      mutable_ranks();

  // optional uint32 me_cur_rank = 4;
  inline bool has_me_cur_rank() const;
  inline void clear_me_cur_rank();
  static const int kMeCurRankFieldNumber = 4;
  inline ::google::protobuf::uint32 me_cur_rank() const;
  inline void set_me_cur_rank(::google::protobuf::uint32 value);

  // optional uint32 me_cur_value = 5;
  inline bool has_me_cur_value() const;
  inline void clear_me_cur_value();
  static const int kMeCurValueFieldNumber = 5;
  inline ::google::protobuf::uint32 me_cur_value() const;
  inline void set_me_cur_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_rank_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_me_cur_rank();
  inline void clear_has_me_cur_rank();
  inline void set_has_me_cur_value();
  inline void clear_has_me_cur_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  int rank_type_;
  ::google::protobuf::RepeatedPtrField< ::gs_c_rank_res_rank_info > ranks_;
  ::google::protobuf::uint32 me_cur_rank_;
  ::google::protobuf::uint32 me_cur_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_rank_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_crusade_start_req : public ::google::protobuf::Message {
 public:
  c_gs_crusade_start_req();
  virtual ~c_gs_crusade_start_req();

  c_gs_crusade_start_req(const c_gs_crusade_start_req& from);

  inline c_gs_crusade_start_req& operator=(const c_gs_crusade_start_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_crusade_start_req& default_instance();

  void Swap(c_gs_crusade_start_req* other);

  // implements Message ----------------------------------------------

  c_gs_crusade_start_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_crusade_start_req& from);
  void MergeFrom(const c_gs_crusade_start_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 wave = 1;
  inline bool has_wave() const;
  inline void clear_wave();
  static const int kWaveFieldNumber = 1;
  inline ::google::protobuf::uint32 wave() const;
  inline void set_wave(::google::protobuf::uint32 value);

  // repeated uint32 enemy_heros = 2;
  inline int enemy_heros_size() const;
  inline void clear_enemy_heros();
  static const int kEnemyHerosFieldNumber = 2;
  inline ::google::protobuf::uint32 enemy_heros(int index) const;
  inline void set_enemy_heros(int index, ::google::protobuf::uint32 value);
  inline void add_enemy_heros(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      enemy_heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_enemy_heros();

  // repeated uint32 me_heros = 3;
  inline int me_heros_size() const;
  inline void clear_me_heros();
  static const int kMeHerosFieldNumber = 3;
  inline ::google::protobuf::uint32 me_heros(int index) const;
  inline void set_me_heros(int index, ::google::protobuf::uint32 value);
  inline void add_me_heros(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      me_heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_me_heros();

  // @@protoc_insertion_point(class_scope:c_gs_crusade_start_req)
 private:
  inline void set_has_wave();
  inline void clear_has_wave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > enemy_heros_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > me_heros_;
  ::google::protobuf::uint32 wave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_crusade_start_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_crusade_start_res : public ::google::protobuf::Message {
 public:
  gs_c_crusade_start_res();
  virtual ~gs_c_crusade_start_res();

  gs_c_crusade_start_res(const gs_c_crusade_start_res& from);

  inline gs_c_crusade_start_res& operator=(const gs_c_crusade_start_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_crusade_start_res& default_instance();

  void Swap(gs_c_crusade_start_res* other);

  // implements Message ----------------------------------------------

  gs_c_crusade_start_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_crusade_start_res& from);
  void MergeFrom(const gs_c_crusade_start_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 wave = 2;
  inline bool has_wave() const;
  inline void clear_wave();
  static const int kWaveFieldNumber = 2;
  inline ::google::protobuf::uint32 wave() const;
  inline void set_wave(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_crusade_start_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_wave();
  inline void clear_has_wave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 wave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_crusade_start_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_crusade_end_req : public ::google::protobuf::Message {
 public:
  c_gs_crusade_end_req();
  virtual ~c_gs_crusade_end_req();

  c_gs_crusade_end_req(const c_gs_crusade_end_req& from);

  inline c_gs_crusade_end_req& operator=(const c_gs_crusade_end_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_crusade_end_req& default_instance();

  void Swap(c_gs_crusade_end_req* other);

  // implements Message ----------------------------------------------

  c_gs_crusade_end_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_crusade_end_req& from);
  void MergeFrom(const c_gs_crusade_end_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_win = 1;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 1;
  inline bool is_win() const;
  inline void set_is_win(bool value);

  // repeated .user_crusade.crusade_hero enemy_heros = 2;
  inline int enemy_heros_size() const;
  inline void clear_enemy_heros();
  static const int kEnemyHerosFieldNumber = 2;
  inline const ::user_crusade_crusade_hero& enemy_heros(int index) const;
  inline ::user_crusade_crusade_hero* mutable_enemy_heros(int index);
  inline ::user_crusade_crusade_hero* add_enemy_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >&
      enemy_heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >*
      mutable_enemy_heros();

  // repeated .user_crusade.crusade_hero me_heros = 3;
  inline int me_heros_size() const;
  inline void clear_me_heros();
  static const int kMeHerosFieldNumber = 3;
  inline const ::user_crusade_crusade_hero& me_heros(int index) const;
  inline ::user_crusade_crusade_hero* mutable_me_heros(int index);
  inline ::user_crusade_crusade_hero* add_me_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >&
      me_heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >*
      mutable_me_heros();

  // @@protoc_insertion_point(class_scope:c_gs_crusade_end_req)
 private:
  inline void set_has_is_win();
  inline void clear_has_is_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero > enemy_heros_;
  ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero > me_heros_;
  bool is_win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_crusade_end_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_crusade_end_res : public ::google::protobuf::Message {
 public:
  gs_c_crusade_end_res();
  virtual ~gs_c_crusade_end_res();

  gs_c_crusade_end_res(const gs_c_crusade_end_res& from);

  inline gs_c_crusade_end_res& operator=(const gs_c_crusade_end_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_crusade_end_res& default_instance();

  void Swap(gs_c_crusade_end_res* other);

  // implements Message ----------------------------------------------

  gs_c_crusade_end_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_crusade_end_res& from);
  void MergeFrom(const gs_c_crusade_end_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .struct_game_element outputs = 2;
  inline int outputs_size() const;
  inline void clear_outputs();
  static const int kOutputsFieldNumber = 2;
  inline const ::struct_game_element& outputs(int index) const;
  inline ::struct_game_element* mutable_outputs(int index);
  inline ::struct_game_element* add_outputs();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      outputs() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_outputs();

  // @@protoc_insertion_point(class_scope:gs_c_crusade_end_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > outputs_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_crusade_end_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_crusade_hero_life_req : public ::google::protobuf::Message {
 public:
  c_gs_crusade_hero_life_req();
  virtual ~c_gs_crusade_hero_life_req();

  c_gs_crusade_hero_life_req(const c_gs_crusade_hero_life_req& from);

  inline c_gs_crusade_hero_life_req& operator=(const c_gs_crusade_hero_life_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_crusade_hero_life_req& default_instance();

  void Swap(c_gs_crusade_hero_life_req* other);

  // implements Message ----------------------------------------------

  c_gs_crusade_hero_life_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_crusade_hero_life_req& from);
  void MergeFrom(const c_gs_crusade_hero_life_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_crusade_hero_life_req)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_crusade_hero_life_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_crusade_hero_life_res : public ::google::protobuf::Message {
 public:
  gs_c_crusade_hero_life_res();
  virtual ~gs_c_crusade_hero_life_res();

  gs_c_crusade_hero_life_res(const gs_c_crusade_hero_life_res& from);

  inline gs_c_crusade_hero_life_res& operator=(const gs_c_crusade_hero_life_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_crusade_hero_life_res& default_instance();

  void Swap(gs_c_crusade_hero_life_res* other);

  // implements Message ----------------------------------------------

  gs_c_crusade_hero_life_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_crusade_hero_life_res& from);
  void MergeFrom(const gs_c_crusade_hero_life_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // repeated .struct_game_element consumes = 3;
  inline int consumes_size() const;
  inline void clear_consumes();
  static const int kConsumesFieldNumber = 3;
  inline const ::struct_game_element& consumes(int index) const;
  inline ::struct_game_element* mutable_consumes(int index);
  inline ::struct_game_element* add_consumes();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consumes() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consumes();

  // @@protoc_insertion_point(class_scope:gs_c_crusade_hero_life_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consumes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_crusade_hero_life_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_crusade_reset_req : public ::google::protobuf::Message {
 public:
  c_gs_crusade_reset_req();
  virtual ~c_gs_crusade_reset_req();

  c_gs_crusade_reset_req(const c_gs_crusade_reset_req& from);

  inline c_gs_crusade_reset_req& operator=(const c_gs_crusade_reset_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_crusade_reset_req& default_instance();

  void Swap(c_gs_crusade_reset_req* other);

  // implements Message ----------------------------------------------

  c_gs_crusade_reset_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_crusade_reset_req& from);
  void MergeFrom(const c_gs_crusade_reset_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_crusade_reset_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_crusade_reset_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_crusade_reset_res : public ::google::protobuf::Message {
 public:
  gs_c_crusade_reset_res();
  virtual ~gs_c_crusade_reset_res();

  gs_c_crusade_reset_res(const gs_c_crusade_reset_res& from);

  inline gs_c_crusade_reset_res& operator=(const gs_c_crusade_reset_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_crusade_reset_res& default_instance();

  void Swap(gs_c_crusade_reset_res* other);

  // implements Message ----------------------------------------------

  gs_c_crusade_reset_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_crusade_reset_res& from);
  void MergeFrom(const gs_c_crusade_reset_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_crusade_reset_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_crusade_reset_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_crusade_promote_award_req : public ::google::protobuf::Message {
 public:
  c_gs_crusade_promote_award_req();
  virtual ~c_gs_crusade_promote_award_req();

  c_gs_crusade_promote_award_req(const c_gs_crusade_promote_award_req& from);

  inline c_gs_crusade_promote_award_req& operator=(const c_gs_crusade_promote_award_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_crusade_promote_award_req& default_instance();

  void Swap(c_gs_crusade_promote_award_req* other);

  // implements Message ----------------------------------------------

  c_gs_crusade_promote_award_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_crusade_promote_award_req& from);
  void MergeFrom(const c_gs_crusade_promote_award_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_crusade_promote_award_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_crusade_promote_award_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_crusade_promote_award_res : public ::google::protobuf::Message {
 public:
  gs_c_crusade_promote_award_res();
  virtual ~gs_c_crusade_promote_award_res();

  gs_c_crusade_promote_award_res(const gs_c_crusade_promote_award_res& from);

  inline gs_c_crusade_promote_award_res& operator=(const gs_c_crusade_promote_award_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_crusade_promote_award_res& default_instance();

  void Swap(gs_c_crusade_promote_award_res* other);

  // implements Message ----------------------------------------------

  gs_c_crusade_promote_award_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_crusade_promote_award_res& from);
  void MergeFrom(const gs_c_crusade_promote_award_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .struct_game_element consumes = 2;
  inline int consumes_size() const;
  inline void clear_consumes();
  static const int kConsumesFieldNumber = 2;
  inline const ::struct_game_element& consumes(int index) const;
  inline ::struct_game_element* mutable_consumes(int index);
  inline ::struct_game_element* add_consumes();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consumes() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consumes();

  // @@protoc_insertion_point(class_scope:gs_c_crusade_promote_award_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consumes_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_crusade_promote_award_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_crusade_buff_refresh_req : public ::google::protobuf::Message {
 public:
  c_gs_crusade_buff_refresh_req();
  virtual ~c_gs_crusade_buff_refresh_req();

  c_gs_crusade_buff_refresh_req(const c_gs_crusade_buff_refresh_req& from);

  inline c_gs_crusade_buff_refresh_req& operator=(const c_gs_crusade_buff_refresh_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_crusade_buff_refresh_req& default_instance();

  void Swap(c_gs_crusade_buff_refresh_req* other);

  // implements Message ----------------------------------------------

  c_gs_crusade_buff_refresh_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_crusade_buff_refresh_req& from);
  void MergeFrom(const c_gs_crusade_buff_refresh_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_crusade_buff_refresh_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_crusade_buff_refresh_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_crusade_buff_refresh_res : public ::google::protobuf::Message {
 public:
  gs_c_crusade_buff_refresh_res();
  virtual ~gs_c_crusade_buff_refresh_res();

  gs_c_crusade_buff_refresh_res(const gs_c_crusade_buff_refresh_res& from);

  inline gs_c_crusade_buff_refresh_res& operator=(const gs_c_crusade_buff_refresh_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_crusade_buff_refresh_res& default_instance();

  void Swap(gs_c_crusade_buff_refresh_res* other);

  // implements Message ----------------------------------------------

  gs_c_crusade_buff_refresh_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_crusade_buff_refresh_res& from);
  void MergeFrom(const gs_c_crusade_buff_refresh_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // repeated .struct_game_element consumes = 2;
  inline int consumes_size() const;
  inline void clear_consumes();
  static const int kConsumesFieldNumber = 2;
  inline const ::struct_game_element& consumes(int index) const;
  inline ::struct_game_element* mutable_consumes(int index);
  inline ::struct_game_element* add_consumes();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consumes() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consumes();

  // @@protoc_insertion_point(class_scope:gs_c_crusade_buff_refresh_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consumes_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_crusade_buff_refresh_res* default_instance_;
};
// -------------------------------------------------------------------

class struct_guild_list_item : public ::google::protobuf::Message {
 public:
  struct_guild_list_item();
  virtual ~struct_guild_list_item();

  struct_guild_list_item(const struct_guild_list_item& from);

  inline struct_guild_list_item& operator=(const struct_guild_list_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const struct_guild_list_item& default_instance();

  void Swap(struct_guild_list_item* other);

  // implements Message ----------------------------------------------

  struct_guild_list_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const struct_guild_list_item& from);
  void MergeFrom(const struct_guild_list_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 president_user_id = 2;
  inline bool has_president_user_id() const;
  inline void clear_president_user_id();
  static const int kPresidentUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 president_user_id() const;
  inline void set_president_user_id(::google::protobuf::uint32 value);

  // required .e_apply_switch_status status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::e_apply_switch_status status() const;
  inline void set_status(::e_apply_switch_status value);

  // required uint32 flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // required uint32 guild_id = 5;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 5;
  inline ::google::protobuf::uint32 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint32 value);

  // required string president_name = 6;
  inline bool has_president_name() const;
  inline void clear_president_name();
  static const int kPresidentNameFieldNumber = 6;
  inline const ::std::string& president_name() const;
  inline void set_president_name(const ::std::string& value);
  inline void set_president_name(const char* value);
  inline void set_president_name(const char* value, size_t size);
  inline ::std::string* mutable_president_name();
  inline ::std::string* release_president_name();
  inline void set_allocated_president_name(::std::string* president_name);

  // required uint32 member_num = 7;
  inline bool has_member_num() const;
  inline void clear_member_num();
  static const int kMemberNumFieldNumber = 7;
  inline ::google::protobuf::uint32 member_num() const;
  inline void set_member_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:struct_guild_list_item)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_president_user_id();
  inline void clear_has_president_user_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_president_name();
  inline void clear_has_president_name();
  inline void set_has_member_num();
  inline void clear_has_member_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 president_user_id_;
  int status_;
  ::google::protobuf::uint32 flag_;
  ::google::protobuf::uint32 guild_id_;
  ::std::string* president_name_;
  ::google::protobuf::uint32 member_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static struct_guild_list_item* default_instance_;
};
// -------------------------------------------------------------------

class struct_user_guild_info_struct_guild_member : public ::google::protobuf::Message {
 public:
  struct_user_guild_info_struct_guild_member();
  virtual ~struct_user_guild_info_struct_guild_member();

  struct_user_guild_info_struct_guild_member(const struct_user_guild_info_struct_guild_member& from);

  inline struct_user_guild_info_struct_guild_member& operator=(const struct_user_guild_info_struct_guild_member& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const struct_user_guild_info_struct_guild_member& default_instance();

  void Swap(struct_user_guild_info_struct_guild_member* other);

  // implements Message ----------------------------------------------

  struct_user_guild_info_struct_guild_member* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const struct_user_guild_info_struct_guild_member& from);
  void MergeFrom(const struct_user_guild_info_struct_guild_member& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // required uint32 contribution_point = 3;
  inline bool has_contribution_point() const;
  inline void clear_contribution_point();
  static const int kContributionPointFieldNumber = 3;
  inline ::google::protobuf::uint32 contribution_point() const;
  inline void set_contribution_point(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 head_id = 5;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 5;
  inline ::google::protobuf::uint32 head_id() const;
  inline void set_head_id(::google::protobuf::uint32 value);

  // required uint32 head_frame_id = 6;
  inline bool has_head_frame_id() const;
  inline void clear_head_frame_id();
  static const int kHeadFrameIdFieldNumber = 6;
  inline ::google::protobuf::uint32 head_frame_id() const;
  inline void set_head_frame_id(::google::protobuf::uint32 value);

  // required uint32 last_online_time = 7;
  inline bool has_last_online_time() const;
  inline void clear_last_online_time();
  static const int kLastOnlineTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 last_online_time() const;
  inline void set_last_online_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:struct_user_guild_info.struct_guild_member)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_contribution_point();
  inline void clear_has_contribution_point();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head_id();
  inline void clear_has_head_id();
  inline void set_has_head_frame_id();
  inline void clear_has_head_frame_id();
  inline void set_has_last_online_time();
  inline void clear_has_last_online_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 position_;
  ::std::string* name_;
  ::google::protobuf::uint32 contribution_point_;
  ::google::protobuf::uint32 head_id_;
  ::google::protobuf::uint32 head_frame_id_;
  ::google::protobuf::uint32 last_online_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static struct_user_guild_info_struct_guild_member* default_instance_;
};
// -------------------------------------------------------------------

class struct_user_guild_info : public ::google::protobuf::Message {
 public:
  struct_user_guild_info();
  virtual ~struct_user_guild_info();

  struct_user_guild_info(const struct_user_guild_info& from);

  inline struct_user_guild_info& operator=(const struct_user_guild_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const struct_user_guild_info& default_instance();

  void Swap(struct_user_guild_info* other);

  // implements Message ----------------------------------------------

  struct_user_guild_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const struct_user_guild_info& from);
  void MergeFrom(const struct_user_guild_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef struct_user_guild_info_struct_guild_member struct_guild_member;

  // accessors -------------------------------------------------------

  // required .e_guild_position position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline ::e_guild_position position() const;
  inline void set_position(::e_guild_position value);

  // required uint32 leave_time = 2;
  inline bool has_leave_time() const;
  inline void clear_leave_time();
  static const int kLeaveTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 leave_time() const;
  inline void set_leave_time(::google::protobuf::uint32 value);

  // required uint32 my_coin = 3;
  inline bool has_my_coin() const;
  inline void clear_my_coin();
  static const int kMyCoinFieldNumber = 3;
  inline ::google::protobuf::uint32 my_coin() const;
  inline void set_my_coin(::google::protobuf::uint32 value);

  // optional uint32 my_contribution_point = 4;
  inline bool has_my_contribution_point() const;
  inline void clear_my_contribution_point();
  static const int kMyContributionPointFieldNumber = 4;
  inline ::google::protobuf::uint32 my_contribution_point() const;
  inline void set_my_contribution_point(::google::protobuf::uint32 value);

  // optional uint32 guild_id = 5;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 5;
  inline ::google::protobuf::uint32 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint32 value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 president_user_id = 7;
  inline bool has_president_user_id() const;
  inline void clear_president_user_id();
  static const int kPresidentUserIdFieldNumber = 7;
  inline ::google::protobuf::uint32 president_user_id() const;
  inline void set_president_user_id(::google::protobuf::uint32 value);

  // optional .e_apply_switch_status status = 8;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 8;
  inline ::e_apply_switch_status status() const;
  inline void set_status(::e_apply_switch_status value);

  // optional uint32 flag = 9;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 9;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // optional uint32 contribution_point = 11;
  inline bool has_contribution_point() const;
  inline void clear_contribution_point();
  static const int kContributionPointFieldNumber = 11;
  inline ::google::protobuf::uint32 contribution_point() const;
  inline void set_contribution_point(::google::protobuf::uint32 value);

  // optional uint32 coin = 12;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 12;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // optional string announcement = 13;
  inline bool has_announcement() const;
  inline void clear_announcement();
  static const int kAnnouncementFieldNumber = 13;
  inline const ::std::string& announcement() const;
  inline void set_announcement(const ::std::string& value);
  inline void set_announcement(const char* value);
  inline void set_announcement(const char* value, size_t size);
  inline ::std::string* mutable_announcement();
  inline ::std::string* release_announcement();
  inline void set_allocated_announcement(::std::string* announcement);

  // repeated .struct_user_guild_info.struct_guild_member members = 14;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 14;
  inline const ::struct_user_guild_info_struct_guild_member& members(int index) const;
  inline ::struct_user_guild_info_struct_guild_member* mutable_members(int index);
  inline ::struct_user_guild_info_struct_guild_member* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_user_guild_info_struct_guild_member >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_user_guild_info_struct_guild_member >*
      mutable_members();

  // optional uint32 max_boss_position = 15;
  inline bool has_max_boss_position() const;
  inline void clear_max_boss_position();
  static const int kMaxBossPositionFieldNumber = 15;
  inline ::google::protobuf::uint32 max_boss_position() const;
  inline void set_max_boss_position(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:struct_user_guild_info)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_leave_time();
  inline void clear_has_leave_time();
  inline void set_has_my_coin();
  inline void clear_has_my_coin();
  inline void set_has_my_contribution_point();
  inline void clear_has_my_contribution_point();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_president_user_id();
  inline void clear_has_president_user_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_contribution_point();
  inline void clear_has_contribution_point();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_announcement();
  inline void clear_has_announcement();
  inline void set_has_max_boss_position();
  inline void clear_has_max_boss_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int position_;
  ::google::protobuf::uint32 leave_time_;
  ::google::protobuf::uint32 my_coin_;
  ::google::protobuf::uint32 my_contribution_point_;
  ::std::string* name_;
  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint32 president_user_id_;
  int status_;
  ::google::protobuf::uint32 flag_;
  ::google::protobuf::uint32 contribution_point_;
  ::google::protobuf::uint32 coin_;
  ::std::string* announcement_;
  ::google::protobuf::RepeatedPtrField< ::struct_user_guild_info_struct_guild_member > members_;
  ::google::protobuf::uint32 max_boss_position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static struct_user_guild_info* default_instance_;
};
// -------------------------------------------------------------------

class struct_guild_boss : public ::google::protobuf::Message {
 public:
  struct_guild_boss();
  virtual ~struct_guild_boss();

  struct_guild_boss(const struct_guild_boss& from);

  inline struct_guild_boss& operator=(const struct_guild_boss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const struct_guild_boss& default_instance();

  void Swap(struct_guild_boss* other);

  // implements Message ----------------------------------------------

  struct_guild_boss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const struct_guild_boss& from);
  void MergeFrom(const struct_guild_boss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // required uint32 lose_hp = 3;
  inline bool has_lose_hp() const;
  inline void clear_lose_hp();
  static const int kLoseHpFieldNumber = 3;
  inline ::google::protobuf::uint32 lose_hp() const;
  inline void set_lose_hp(::google::protobuf::uint32 value);

  // required uint32 killed_num = 4;
  inline bool has_killed_num() const;
  inline void clear_killed_num();
  static const int kKilledNumFieldNumber = 4;
  inline ::google::protobuf::uint32 killed_num() const;
  inline void set_killed_num(::google::protobuf::uint32 value);

  // optional uint32 killer_user_id = 5;
  inline bool has_killer_user_id() const;
  inline void clear_killer_user_id();
  static const int kKillerUserIdFieldNumber = 5;
  inline ::google::protobuf::uint32 killer_user_id() const;
  inline void set_killer_user_id(::google::protobuf::uint32 value);

  // optional string killer_name = 6;
  inline bool has_killer_name() const;
  inline void clear_killer_name();
  static const int kKillerNameFieldNumber = 6;
  inline const ::std::string& killer_name() const;
  inline void set_killer_name(const ::std::string& value);
  inline void set_killer_name(const char* value);
  inline void set_killer_name(const char* value, size_t size);
  inline ::std::string* mutable_killer_name();
  inline ::std::string* release_killer_name();
  inline void set_allocated_killer_name(::std::string* killer_name);

  // optional uint32 killer_head_id = 7;
  inline bool has_killer_head_id() const;
  inline void clear_killer_head_id();
  static const int kKillerHeadIdFieldNumber = 7;
  inline ::google::protobuf::uint32 killer_head_id() const;
  inline void set_killer_head_id(::google::protobuf::uint32 value);

  // optional uint32 killer_head_frame_id = 8;
  inline bool has_killer_head_frame_id() const;
  inline void clear_killer_head_frame_id();
  static const int kKillerHeadFrameIdFieldNumber = 8;
  inline ::google::protobuf::uint32 killer_head_frame_id() const;
  inline void set_killer_head_frame_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:struct_guild_boss)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_lose_hp();
  inline void clear_has_lose_hp();
  inline void set_has_killed_num();
  inline void clear_has_killed_num();
  inline void set_has_killer_user_id();
  inline void clear_has_killer_user_id();
  inline void set_has_killer_name();
  inline void clear_has_killer_name();
  inline void set_has_killer_head_id();
  inline void clear_has_killer_head_id();
  inline void set_has_killer_head_frame_id();
  inline void clear_has_killer_head_frame_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 lose_hp_;
  ::google::protobuf::uint32 killed_num_;
  ::google::protobuf::uint32 killer_user_id_;
  ::std::string* killer_name_;
  ::google::protobuf::uint32 killer_head_id_;
  ::google::protobuf::uint32 killer_head_frame_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static struct_guild_boss* default_instance_;
};
// -------------------------------------------------------------------

class struct_guild_boss_attacker_dead_hero : public ::google::protobuf::Message {
 public:
  struct_guild_boss_attacker_dead_hero();
  virtual ~struct_guild_boss_attacker_dead_hero();

  struct_guild_boss_attacker_dead_hero(const struct_guild_boss_attacker_dead_hero& from);

  inline struct_guild_boss_attacker_dead_hero& operator=(const struct_guild_boss_attacker_dead_hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const struct_guild_boss_attacker_dead_hero& default_instance();

  void Swap(struct_guild_boss_attacker_dead_hero* other);

  // implements Message ----------------------------------------------

  struct_guild_boss_attacker_dead_hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const struct_guild_boss_attacker_dead_hero& from);
  void MergeFrom(const struct_guild_boss_attacker_dead_hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // required uint32 dead_time = 4;
  inline bool has_dead_time() const;
  inline void clear_dead_time();
  static const int kDeadTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 dead_time() const;
  inline void set_dead_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:struct_guild_boss_attacker_dead_hero)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_dead_time();
  inline void clear_has_dead_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 dead_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static struct_guild_boss_attacker_dead_hero* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_new_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_new_req();
  virtual ~c_gs_guild_new_req();

  c_gs_guild_new_req(const c_gs_guild_new_req& from);

  inline c_gs_guild_new_req& operator=(const c_gs_guild_new_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_new_req& default_instance();

  void Swap(c_gs_guild_new_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_new_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_new_req& from);
  void MergeFrom(const c_gs_guild_new_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_guild_new_req)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_new_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_new_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_new_res();
  virtual ~gs_c_guild_new_res();

  gs_c_guild_new_res(const gs_c_guild_new_res& from);

  inline gs_c_guild_new_res& operator=(const gs_c_guild_new_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_new_res& default_instance();

  void Swap(gs_c_guild_new_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_new_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_new_res& from);
  void MergeFrom(const gs_c_guild_new_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // repeated .struct_game_element consume = 2;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 2;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // @@protoc_insertion_point(class_scope:gs_c_guild_new_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_new_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_edit_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_edit_req();
  virtual ~c_gs_guild_edit_req();

  c_gs_guild_edit_req(const c_gs_guild_edit_req& from);

  inline c_gs_guild_edit_req& operator=(const c_gs_guild_edit_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_edit_req& default_instance();

  void Swap(c_gs_guild_edit_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_edit_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_edit_req& from);
  void MergeFrom(const c_gs_guild_edit_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 president_user_id = 4;
  inline bool has_president_user_id() const;
  inline void clear_president_user_id();
  static const int kPresidentUserIdFieldNumber = 4;
  inline ::google::protobuf::uint32 president_user_id() const;
  inline void set_president_user_id(::google::protobuf::uint32 value);

  // required .e_apply_switch_status status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::e_apply_switch_status status() const;
  inline void set_status(::e_apply_switch_status value);

  // required uint32 flag = 6;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 6;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // required string announcement = 10;
  inline bool has_announcement() const;
  inline void clear_announcement();
  static const int kAnnouncementFieldNumber = 10;
  inline const ::std::string& announcement() const;
  inline void set_announcement(const ::std::string& value);
  inline void set_announcement(const char* value);
  inline void set_announcement(const char* value, size_t size);
  inline ::std::string* mutable_announcement();
  inline ::std::string* release_announcement();
  inline void set_allocated_announcement(::std::string* announcement);

  // @@protoc_insertion_point(class_scope:c_gs_guild_edit_req)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_president_user_id();
  inline void clear_has_president_user_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_announcement();
  inline void clear_has_announcement();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 president_user_id_;
  int status_;
  ::std::string* announcement_;
  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_edit_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_edit_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_edit_res();
  virtual ~gs_c_guild_edit_res();

  gs_c_guild_edit_res(const gs_c_guild_edit_res& from);

  inline gs_c_guild_edit_res& operator=(const gs_c_guild_edit_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_edit_res& default_instance();

  void Swap(gs_c_guild_edit_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_edit_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_edit_res& from);
  void MergeFrom(const gs_c_guild_edit_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gs_c_guild_edit_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_edit_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_delete_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_delete_req();
  virtual ~c_gs_guild_delete_req();

  c_gs_guild_delete_req(const c_gs_guild_delete_req& from);

  inline c_gs_guild_delete_req& operator=(const c_gs_guild_delete_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_delete_req& default_instance();

  void Swap(c_gs_guild_delete_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_delete_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_delete_req& from);
  void MergeFrom(const c_gs_guild_delete_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_guild_delete_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_delete_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_delete_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_delete_res();
  virtual ~gs_c_guild_delete_res();

  gs_c_guild_delete_res(const gs_c_guild_delete_res& from);

  inline gs_c_guild_delete_res& operator=(const gs_c_guild_delete_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_delete_res& default_instance();

  void Swap(gs_c_guild_delete_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_delete_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_delete_res& from);
  void MergeFrom(const gs_c_guild_delete_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gs_c_guild_delete_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_delete_res* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_quit_ntf : public ::google::protobuf::Message {
 public:
  gs_c_guild_quit_ntf();
  virtual ~gs_c_guild_quit_ntf();

  gs_c_guild_quit_ntf(const gs_c_guild_quit_ntf& from);

  inline gs_c_guild_quit_ntf& operator=(const gs_c_guild_quit_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_quit_ntf& default_instance();

  void Swap(gs_c_guild_quit_ntf* other);

  // implements Message ----------------------------------------------

  gs_c_guild_quit_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_quit_ntf& from);
  void MergeFrom(const gs_c_guild_quit_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gs_c_guild_quit_ntf)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_quit_ntf* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_join_ntf : public ::google::protobuf::Message {
 public:
  gs_c_guild_join_ntf();
  virtual ~gs_c_guild_join_ntf();

  gs_c_guild_join_ntf(const gs_c_guild_join_ntf& from);

  inline gs_c_guild_join_ntf& operator=(const gs_c_guild_join_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_join_ntf& default_instance();

  void Swap(gs_c_guild_join_ntf* other);

  // implements Message ----------------------------------------------

  gs_c_guild_join_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_join_ntf& from);
  void MergeFrom(const gs_c_guild_join_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gs_c_guild_join_ntf)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_join_ntf* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_apply_list_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_apply_list_req();
  virtual ~c_gs_guild_apply_list_req();

  c_gs_guild_apply_list_req(const c_gs_guild_apply_list_req& from);

  inline c_gs_guild_apply_list_req& operator=(const c_gs_guild_apply_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_apply_list_req& default_instance();

  void Swap(c_gs_guild_apply_list_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_apply_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_apply_list_req& from);
  void MergeFrom(const c_gs_guild_apply_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef c_gs_guild_apply_list_req_e_show_for e_show_for;
  static const e_show_for EOutsider = c_gs_guild_apply_list_req_e_show_for_EOutsider;
  static const e_show_for EManager = c_gs_guild_apply_list_req_e_show_for_EManager;
  static inline bool e_show_for_IsValid(int value) {
    return c_gs_guild_apply_list_req_e_show_for_IsValid(value);
  }
  static const e_show_for e_show_for_MIN =
    c_gs_guild_apply_list_req_e_show_for_e_show_for_MIN;
  static const e_show_for e_show_for_MAX =
    c_gs_guild_apply_list_req_e_show_for_e_show_for_MAX;
  static const int e_show_for_ARRAYSIZE =
    c_gs_guild_apply_list_req_e_show_for_e_show_for_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  e_show_for_descriptor() {
    return c_gs_guild_apply_list_req_e_show_for_descriptor();
  }
  static inline const ::std::string& e_show_for_Name(e_show_for value) {
    return c_gs_guild_apply_list_req_e_show_for_Name(value);
  }
  static inline bool e_show_for_Parse(const ::std::string& name,
      e_show_for* value) {
    return c_gs_guild_apply_list_req_e_show_for_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c_gs_guild_apply_list_req.e_show_for who = 1;
  inline bool has_who() const;
  inline void clear_who();
  static const int kWhoFieldNumber = 1;
  inline ::c_gs_guild_apply_list_req_e_show_for who() const;
  inline void set_who(::c_gs_guild_apply_list_req_e_show_for value);

  // @@protoc_insertion_point(class_scope:c_gs_guild_apply_list_req)
 private:
  inline void set_has_who();
  inline void clear_has_who();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int who_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_apply_list_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_apply_list_res_struct_apply_for_outsider : public ::google::protobuf::Message {
 public:
  gs_c_guild_apply_list_res_struct_apply_for_outsider();
  virtual ~gs_c_guild_apply_list_res_struct_apply_for_outsider();

  gs_c_guild_apply_list_res_struct_apply_for_outsider(const gs_c_guild_apply_list_res_struct_apply_for_outsider& from);

  inline gs_c_guild_apply_list_res_struct_apply_for_outsider& operator=(const gs_c_guild_apply_list_res_struct_apply_for_outsider& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_apply_list_res_struct_apply_for_outsider& default_instance();

  void Swap(gs_c_guild_apply_list_res_struct_apply_for_outsider* other);

  // implements Message ----------------------------------------------

  gs_c_guild_apply_list_res_struct_apply_for_outsider* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_apply_list_res_struct_apply_for_outsider& from);
  void MergeFrom(const gs_c_guild_apply_list_res_struct_apply_for_outsider& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 fight_power = 7;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 7;
  inline ::google::protobuf::uint32 fight_power() const;
  inline void set_fight_power(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_guild_apply_list_res.struct_apply_for_outsider)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 time_;
  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 fight_power_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_apply_list_res_struct_apply_for_outsider* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_apply_list_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_apply_list_res();
  virtual ~gs_c_guild_apply_list_res();

  gs_c_guild_apply_list_res(const gs_c_guild_apply_list_res& from);

  inline gs_c_guild_apply_list_res& operator=(const gs_c_guild_apply_list_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_apply_list_res& default_instance();

  void Swap(gs_c_guild_apply_list_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_apply_list_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_apply_list_res& from);
  void MergeFrom(const gs_c_guild_apply_list_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gs_c_guild_apply_list_res_struct_apply_for_outsider struct_apply_for_outsider;

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // repeated .gs_c_guild_apply_list_res.struct_apply_for_outsider applys_for_manager = 2;
  inline int applys_for_manager_size() const;
  inline void clear_applys_for_manager();
  static const int kApplysForManagerFieldNumber = 2;
  inline const ::gs_c_guild_apply_list_res_struct_apply_for_outsider& applys_for_manager(int index) const;
  inline ::gs_c_guild_apply_list_res_struct_apply_for_outsider* mutable_applys_for_manager(int index);
  inline ::gs_c_guild_apply_list_res_struct_apply_for_outsider* add_applys_for_manager();
  inline const ::google::protobuf::RepeatedPtrField< ::gs_c_guild_apply_list_res_struct_apply_for_outsider >&
      applys_for_manager() const;
  inline ::google::protobuf::RepeatedPtrField< ::gs_c_guild_apply_list_res_struct_apply_for_outsider >*
      mutable_applys_for_manager();

  // repeated .struct_guild_list_item applys_for_outsider = 3;
  inline int applys_for_outsider_size() const;
  inline void clear_applys_for_outsider();
  static const int kApplysForOutsiderFieldNumber = 3;
  inline const ::struct_guild_list_item& applys_for_outsider(int index) const;
  inline ::struct_guild_list_item* mutable_applys_for_outsider(int index);
  inline ::struct_guild_list_item* add_applys_for_outsider();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item >&
      applys_for_outsider() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item >*
      mutable_applys_for_outsider();

  // @@protoc_insertion_point(class_scope:gs_c_guild_apply_list_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::gs_c_guild_apply_list_res_struct_apply_for_outsider > applys_for_manager_;
  ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item > applys_for_outsider_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_apply_list_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_apply_op_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_apply_op_req();
  virtual ~c_gs_guild_apply_op_req();

  c_gs_guild_apply_op_req(const c_gs_guild_apply_op_req& from);

  inline c_gs_guild_apply_op_req& operator=(const c_gs_guild_apply_op_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_apply_op_req& default_instance();

  void Swap(c_gs_guild_apply_op_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_apply_op_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_apply_op_req& from);
  void MergeFrom(const c_gs_guild_apply_op_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef c_gs_guild_apply_op_req_e_op_type e_op_type;
  static const e_op_type EUser_Send = c_gs_guild_apply_op_req_e_op_type_EUser_Send;
  static const e_op_type EUser_Quick_Send = c_gs_guild_apply_op_req_e_op_type_EUser_Quick_Send;
  static const e_op_type EUser_Cancel = c_gs_guild_apply_op_req_e_op_type_EUser_Cancel;
  static const e_op_type EGuild_Accept = c_gs_guild_apply_op_req_e_op_type_EGuild_Accept;
  static const e_op_type EGuild_Refuse = c_gs_guild_apply_op_req_e_op_type_EGuild_Refuse;
  static inline bool e_op_type_IsValid(int value) {
    return c_gs_guild_apply_op_req_e_op_type_IsValid(value);
  }
  static const e_op_type e_op_type_MIN =
    c_gs_guild_apply_op_req_e_op_type_e_op_type_MIN;
  static const e_op_type e_op_type_MAX =
    c_gs_guild_apply_op_req_e_op_type_e_op_type_MAX;
  static const int e_op_type_ARRAYSIZE =
    c_gs_guild_apply_op_req_e_op_type_e_op_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  e_op_type_descriptor() {
    return c_gs_guild_apply_op_req_e_op_type_descriptor();
  }
  static inline const ::std::string& e_op_type_Name(e_op_type value) {
    return c_gs_guild_apply_op_req_e_op_type_Name(value);
  }
  static inline bool e_op_type_Parse(const ::std::string& name,
      e_op_type* value) {
    return c_gs_guild_apply_op_req_e_op_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c_gs_guild_apply_op_req.e_op_type op_type = 1;
  inline bool has_op_type() const;
  inline void clear_op_type();
  static const int kOpTypeFieldNumber = 1;
  inline ::c_gs_guild_apply_op_req_e_op_type op_type() const;
  inline void set_op_type(::c_gs_guild_apply_op_req_e_op_type value);

  // optional uint32 guild_id = 2;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  inline ::google::protobuf::uint32 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint32 value);

  // optional uint32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_guild_apply_op_req)
 private:
  inline void set_has_op_type();
  inline void clear_has_op_type();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int op_type_;
  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_apply_op_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_apply_op_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_apply_op_res();
  virtual ~gs_c_guild_apply_op_res();

  gs_c_guild_apply_op_res(const gs_c_guild_apply_op_res& from);

  inline gs_c_guild_apply_op_res& operator=(const gs_c_guild_apply_op_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_apply_op_res& default_instance();

  void Swap(gs_c_guild_apply_op_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_apply_op_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_apply_op_res& from);
  void MergeFrom(const gs_c_guild_apply_op_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gs_c_guild_apply_op_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_apply_op_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_member_op_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_member_op_req();
  virtual ~c_gs_guild_member_op_req();

  c_gs_guild_member_op_req(const c_gs_guild_member_op_req& from);

  inline c_gs_guild_member_op_req& operator=(const c_gs_guild_member_op_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_member_op_req& default_instance();

  void Swap(c_gs_guild_member_op_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_member_op_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_member_op_req& from);
  void MergeFrom(const c_gs_guild_member_op_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .e_guild_position new_position = 2;
  inline bool has_new_position() const;
  inline void clear_new_position();
  static const int kNewPositionFieldNumber = 2;
  inline ::e_guild_position new_position() const;
  inline void set_new_position(::e_guild_position value);

  // @@protoc_insertion_point(class_scope:c_gs_guild_member_op_req)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_new_position();
  inline void clear_has_new_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 user_id_;
  int new_position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_member_op_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_member_op_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_member_op_res();
  virtual ~gs_c_guild_member_op_res();

  gs_c_guild_member_op_res(const gs_c_guild_member_op_res& from);

  inline gs_c_guild_member_op_res& operator=(const gs_c_guild_member_op_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_member_op_res& default_instance();

  void Swap(gs_c_guild_member_op_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_member_op_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_member_op_res& from);
  void MergeFrom(const gs_c_guild_member_op_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gs_c_guild_member_op_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_member_op_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_boss_refresh_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_boss_refresh_req();
  virtual ~c_gs_guild_boss_refresh_req();

  c_gs_guild_boss_refresh_req(const c_gs_guild_boss_refresh_req& from);

  inline c_gs_guild_boss_refresh_req& operator=(const c_gs_guild_boss_refresh_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_boss_refresh_req& default_instance();

  void Swap(c_gs_guild_boss_refresh_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_boss_refresh_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_boss_refresh_req& from);
  void MergeFrom(const c_gs_guild_boss_refresh_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_guild_boss_refresh_req)
 private:
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_boss_refresh_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_boss_refresh_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_boss_refresh_res();
  virtual ~gs_c_guild_boss_refresh_res();

  gs_c_guild_boss_refresh_res(const gs_c_guild_boss_refresh_res& from);

  inline gs_c_guild_boss_refresh_res& operator=(const gs_c_guild_boss_refresh_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_boss_refresh_res& default_instance();

  void Swap(gs_c_guild_boss_refresh_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_boss_refresh_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_boss_refresh_res& from);
  void MergeFrom(const gs_c_guild_boss_refresh_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // repeated .struct_game_element consume = 2;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 2;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // optional .struct_guild_boss boss = 3;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 3;
  inline const ::struct_guild_boss& boss() const;
  inline ::struct_guild_boss* mutable_boss();
  inline ::struct_guild_boss* release_boss();
  inline void set_allocated_boss(::struct_guild_boss* boss);

  // @@protoc_insertion_point(class_scope:gs_c_guild_boss_refresh_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_boss();
  inline void clear_has_boss();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::struct_guild_boss* boss_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_boss_refresh_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_search_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_search_req();
  virtual ~c_gs_guild_search_req();

  c_gs_guild_search_req(const c_gs_guild_search_req& from);

  inline c_gs_guild_search_req& operator=(const c_gs_guild_search_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_search_req& default_instance();

  void Swap(c_gs_guild_search_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_search_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_search_req& from);
  void MergeFrom(const c_gs_guild_search_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 guild_id = 2;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  inline ::google::protobuf::uint32 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_guild_search_req)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 guild_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_search_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_search_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_search_res();
  virtual ~gs_c_guild_search_res();

  gs_c_guild_search_res(const gs_c_guild_search_res& from);

  inline gs_c_guild_search_res& operator=(const gs_c_guild_search_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_search_res& default_instance();

  void Swap(gs_c_guild_search_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_search_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_search_res& from);
  void MergeFrom(const gs_c_guild_search_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // repeated .struct_guild_list_item guilds = 2;
  inline int guilds_size() const;
  inline void clear_guilds();
  static const int kGuildsFieldNumber = 2;
  inline const ::struct_guild_list_item& guilds(int index) const;
  inline ::struct_guild_list_item* mutable_guilds(int index);
  inline ::struct_guild_list_item* add_guilds();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item >&
      guilds() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item >*
      mutable_guilds();

  // @@protoc_insertion_point(class_scope:gs_c_guild_search_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item > guilds_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_search_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_list_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_list_req();
  virtual ~c_gs_guild_list_req();

  c_gs_guild_list_req(const c_gs_guild_list_req& from);

  inline c_gs_guild_list_req& operator=(const c_gs_guild_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_list_req& default_instance();

  void Swap(c_gs_guild_list_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_list_req& from);
  void MergeFrom(const c_gs_guild_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef c_gs_guild_list_req_e_list_type e_list_type;
  static const e_list_type ERecommend = c_gs_guild_list_req_e_list_type_ERecommend;
  static const e_list_type EApplied = c_gs_guild_list_req_e_list_type_EApplied;
  static const e_list_type EActive = c_gs_guild_list_req_e_list_type_EActive;
  static inline bool e_list_type_IsValid(int value) {
    return c_gs_guild_list_req_e_list_type_IsValid(value);
  }
  static const e_list_type e_list_type_MIN =
    c_gs_guild_list_req_e_list_type_e_list_type_MIN;
  static const e_list_type e_list_type_MAX =
    c_gs_guild_list_req_e_list_type_e_list_type_MAX;
  static const int e_list_type_ARRAYSIZE =
    c_gs_guild_list_req_e_list_type_e_list_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  e_list_type_descriptor() {
    return c_gs_guild_list_req_e_list_type_descriptor();
  }
  static inline const ::std::string& e_list_type_Name(e_list_type value) {
    return c_gs_guild_list_req_e_list_type_Name(value);
  }
  static inline bool e_list_type_Parse(const ::std::string& name,
      e_list_type* value) {
    return c_gs_guild_list_req_e_list_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .c_gs_guild_list_req.e_list_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::c_gs_guild_list_req_e_list_type type() const;
  inline void set_type(::c_gs_guild_list_req_e_list_type value);

  // @@protoc_insertion_point(class_scope:c_gs_guild_list_req)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_list_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_list_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_list_res();
  virtual ~gs_c_guild_list_res();

  gs_c_guild_list_res(const gs_c_guild_list_res& from);

  inline gs_c_guild_list_res& operator=(const gs_c_guild_list_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_list_res& default_instance();

  void Swap(gs_c_guild_list_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_list_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_list_res& from);
  void MergeFrom(const gs_c_guild_list_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // repeated .struct_guild_list_item guilds = 2;
  inline int guilds_size() const;
  inline void clear_guilds();
  static const int kGuildsFieldNumber = 2;
  inline const ::struct_guild_list_item& guilds(int index) const;
  inline ::struct_guild_list_item* mutable_guilds(int index);
  inline ::struct_guild_list_item* add_guilds();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item >&
      guilds() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item >*
      mutable_guilds();

  // @@protoc_insertion_point(class_scope:gs_c_guild_list_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item > guilds_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_list_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_info_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_info_req();
  virtual ~c_gs_guild_info_req();

  c_gs_guild_info_req(const c_gs_guild_info_req& from);

  inline c_gs_guild_info_req& operator=(const c_gs_guild_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_info_req& default_instance();

  void Swap(c_gs_guild_info_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_info_req& from);
  void MergeFrom(const c_gs_guild_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_guild_info_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_info_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_info_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_info_res();
  virtual ~gs_c_guild_info_res();

  gs_c_guild_info_res(const gs_c_guild_info_res& from);

  inline gs_c_guild_info_res& operator=(const gs_c_guild_info_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_info_res& default_instance();

  void Swap(gs_c_guild_info_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_info_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_info_res& from);
  void MergeFrom(const gs_c_guild_info_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional .struct_user_guild_info my_guild = 2;
  inline bool has_my_guild() const;
  inline void clear_my_guild();
  static const int kMyGuildFieldNumber = 2;
  inline const ::struct_user_guild_info& my_guild() const;
  inline ::struct_user_guild_info* mutable_my_guild();
  inline ::struct_user_guild_info* release_my_guild();
  inline void set_allocated_my_guild(::struct_user_guild_info* my_guild);

  // @@protoc_insertion_point(class_scope:gs_c_guild_info_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_my_guild();
  inline void clear_has_my_guild();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::struct_user_guild_info* my_guild_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_info_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_boss_list_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_boss_list_req();
  virtual ~c_gs_guild_boss_list_req();

  c_gs_guild_boss_list_req(const c_gs_guild_boss_list_req& from);

  inline c_gs_guild_boss_list_req& operator=(const c_gs_guild_boss_list_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_boss_list_req& default_instance();

  void Swap(c_gs_guild_boss_list_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_boss_list_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_boss_list_req& from);
  void MergeFrom(const c_gs_guild_boss_list_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_guild_boss_list_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_boss_list_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_boss_list_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_boss_list_res();
  virtual ~gs_c_guild_boss_list_res();

  gs_c_guild_boss_list_res(const gs_c_guild_boss_list_res& from);

  inline gs_c_guild_boss_list_res& operator=(const gs_c_guild_boss_list_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_boss_list_res& default_instance();

  void Swap(gs_c_guild_boss_list_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_boss_list_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_boss_list_res& from);
  void MergeFrom(const gs_c_guild_boss_list_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // repeated .struct_guild_boss bosses = 2;
  inline int bosses_size() const;
  inline void clear_bosses();
  static const int kBossesFieldNumber = 2;
  inline const ::struct_guild_boss& bosses(int index) const;
  inline ::struct_guild_boss* mutable_bosses(int index);
  inline ::struct_guild_boss* add_bosses();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_guild_boss >&
      bosses() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_guild_boss >*
      mutable_bosses();

  // @@protoc_insertion_point(class_scope:gs_c_guild_boss_list_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::struct_guild_boss > bosses_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_boss_list_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_boss_info_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_boss_info_req();
  virtual ~c_gs_guild_boss_info_req();

  c_gs_guild_boss_info_req(const c_gs_guild_boss_info_req& from);

  inline c_gs_guild_boss_info_req& operator=(const c_gs_guild_boss_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_boss_info_req& default_instance();

  void Swap(c_gs_guild_boss_info_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_boss_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_boss_info_req& from);
  void MergeFrom(const c_gs_guild_boss_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_guild_boss_info_req)
 private:
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_boss_info_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_boss_info_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_boss_info_res();
  virtual ~gs_c_guild_boss_info_res();

  gs_c_guild_boss_info_res(const gs_c_guild_boss_info_res& from);

  inline gs_c_guild_boss_info_res& operator=(const gs_c_guild_boss_info_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_boss_info_res& default_instance();

  void Swap(gs_c_guild_boss_info_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_boss_info_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_boss_info_res& from);
  void MergeFrom(const gs_c_guild_boss_info_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional .struct_guild_boss boss = 2;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 2;
  inline const ::struct_guild_boss& boss() const;
  inline ::struct_guild_boss* mutable_boss();
  inline ::struct_guild_boss* release_boss();
  inline void set_allocated_boss(::struct_guild_boss* boss);

  // optional uint32 last_reset_time = 3;
  inline bool has_last_reset_time() const;
  inline void clear_last_reset_time();
  static const int kLastResetTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 last_reset_time() const;
  inline void set_last_reset_time(::google::protobuf::uint32 value);

  // optional uint32 last_day_reset_num = 4;
  inline bool has_last_day_reset_num() const;
  inline void clear_last_day_reset_num();
  static const int kLastDayResetNumFieldNumber = 4;
  inline ::google::protobuf::uint32 last_day_reset_num() const;
  inline void set_last_day_reset_num(::google::protobuf::uint32 value);

  // repeated .struct_guild_boss_attacker_dead_hero dead_heros = 5;
  inline int dead_heros_size() const;
  inline void clear_dead_heros();
  static const int kDeadHerosFieldNumber = 5;
  inline const ::struct_guild_boss_attacker_dead_hero& dead_heros(int index) const;
  inline ::struct_guild_boss_attacker_dead_hero* mutable_dead_heros(int index);
  inline ::struct_guild_boss_attacker_dead_hero* add_dead_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_guild_boss_attacker_dead_hero >&
      dead_heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_guild_boss_attacker_dead_hero >*
      mutable_dead_heros();

  // @@protoc_insertion_point(class_scope:gs_c_guild_boss_info_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_boss();
  inline void clear_has_boss();
  inline void set_has_last_reset_time();
  inline void clear_has_last_reset_time();
  inline void set_has_last_day_reset_num();
  inline void clear_has_last_day_reset_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::struct_guild_boss* boss_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::uint32 last_reset_time_;
  ::google::protobuf::RepeatedPtrField< ::struct_guild_boss_attacker_dead_hero > dead_heros_;
  ::google::protobuf::uint32 last_day_reset_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_boss_info_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_boss_attack_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_boss_attack_req();
  virtual ~c_gs_guild_boss_attack_req();

  c_gs_guild_boss_attack_req(const c_gs_guild_boss_attack_req& from);

  inline c_gs_guild_boss_attack_req& operator=(const c_gs_guild_boss_attack_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_boss_attack_req& default_instance();

  void Swap(c_gs_guild_boss_attack_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_boss_attack_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_boss_attack_req& from);
  void MergeFrom(const c_gs_guild_boss_attack_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 boss_position = 1;
  inline bool has_boss_position() const;
  inline void clear_boss_position();
  static const int kBossPositionFieldNumber = 1;
  inline ::google::protobuf::uint32 boss_position() const;
  inline void set_boss_position(::google::protobuf::uint32 value);

  // required uint32 lose_hp = 2;
  inline bool has_lose_hp() const;
  inline void clear_lose_hp();
  static const int kLoseHpFieldNumber = 2;
  inline ::google::protobuf::uint32 lose_hp() const;
  inline void set_lose_hp(::google::protobuf::uint32 value);

  // repeated uint32 dead_heros = 3;
  inline int dead_heros_size() const;
  inline void clear_dead_heros();
  static const int kDeadHerosFieldNumber = 3;
  inline ::google::protobuf::uint32 dead_heros(int index) const;
  inline void set_dead_heros(int index, ::google::protobuf::uint32 value);
  inline void add_dead_heros(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dead_heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dead_heros();

  // @@protoc_insertion_point(class_scope:c_gs_guild_boss_attack_req)
 private:
  inline void set_has_boss_position();
  inline void clear_has_boss_position();
  inline void set_has_lose_hp();
  inline void clear_has_lose_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 boss_position_;
  ::google::protobuf::uint32 lose_hp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dead_heros_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_boss_attack_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_boss_attack_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_boss_attack_res();
  virtual ~gs_c_guild_boss_attack_res();

  gs_c_guild_boss_attack_res(const gs_c_guild_boss_attack_res& from);

  inline gs_c_guild_boss_attack_res& operator=(const gs_c_guild_boss_attack_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_boss_attack_res& default_instance();

  void Swap(gs_c_guild_boss_attack_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_boss_attack_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_boss_attack_res& from);
  void MergeFrom(const gs_c_guild_boss_attack_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional uint32 is_killer = 2;
  inline bool has_is_killer() const;
  inline void clear_is_killer();
  static const int kIsKillerFieldNumber = 2;
  inline ::google::protobuf::uint32 is_killer() const;
  inline void set_is_killer(::google::protobuf::uint32 value);

  // repeated .struct_game_element consume = 4;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 4;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // repeated .struct_game_element output = 5;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 5;
  inline const ::struct_game_element& output(int index) const;
  inline ::struct_game_element* mutable_output(int index);
  inline ::struct_game_element* add_output();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      output() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_output();

  // @@protoc_insertion_point(class_scope:gs_c_guild_boss_attack_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_is_killer();
  inline void clear_has_is_killer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_code_;
  ::google::protobuf::uint32 is_killer_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > output_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_boss_attack_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_boss_dead_hero_reset_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_boss_dead_hero_reset_req();
  virtual ~c_gs_guild_boss_dead_hero_reset_req();

  c_gs_guild_boss_dead_hero_reset_req(const c_gs_guild_boss_dead_hero_reset_req& from);

  inline c_gs_guild_boss_dead_hero_reset_req& operator=(const c_gs_guild_boss_dead_hero_reset_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_boss_dead_hero_reset_req& default_instance();

  void Swap(c_gs_guild_boss_dead_hero_reset_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_boss_dead_hero_reset_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_boss_dead_hero_reset_req& from);
  void MergeFrom(const c_gs_guild_boss_dead_hero_reset_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 boss_position = 1;
  inline bool has_boss_position() const;
  inline void clear_boss_position();
  static const int kBossPositionFieldNumber = 1;
  inline ::google::protobuf::uint32 boss_position() const;
  inline void set_boss_position(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_guild_boss_dead_hero_reset_req)
 private:
  inline void set_has_boss_position();
  inline void clear_has_boss_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 boss_position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_boss_dead_hero_reset_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_boss_dead_hero_reset_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_boss_dead_hero_reset_res();
  virtual ~gs_c_guild_boss_dead_hero_reset_res();

  gs_c_guild_boss_dead_hero_reset_res(const gs_c_guild_boss_dead_hero_reset_res& from);

  inline gs_c_guild_boss_dead_hero_reset_res& operator=(const gs_c_guild_boss_dead_hero_reset_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_boss_dead_hero_reset_res& default_instance();

  void Swap(gs_c_guild_boss_dead_hero_reset_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_boss_dead_hero_reset_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_boss_dead_hero_reset_res& from);
  void MergeFrom(const gs_c_guild_boss_dead_hero_reset_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional uint32 boss_position = 2;
  inline bool has_boss_position() const;
  inline void clear_boss_position();
  static const int kBossPositionFieldNumber = 2;
  inline ::google::protobuf::uint32 boss_position() const;
  inline void set_boss_position(::google::protobuf::uint32 value);

  // optional uint32 reset_num = 3;
  inline bool has_reset_num() const;
  inline void clear_reset_num();
  static const int kResetNumFieldNumber = 3;
  inline ::google::protobuf::uint32 reset_num() const;
  inline void set_reset_num(::google::protobuf::uint32 value);

  // optional uint32 last_reset_time = 4;
  inline bool has_last_reset_time() const;
  inline void clear_last_reset_time();
  static const int kLastResetTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 last_reset_time() const;
  inline void set_last_reset_time(::google::protobuf::uint32 value);

  // repeated .struct_game_element consume = 5;
  inline int consume_size() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 5;
  inline const ::struct_game_element& consume(int index) const;
  inline ::struct_game_element* mutable_consume(int index);
  inline ::struct_game_element* add_consume();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
      consume() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
      mutable_consume();

  // @@protoc_insertion_point(class_scope:gs_c_guild_boss_dead_hero_reset_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_boss_position();
  inline void clear_has_boss_position();
  inline void set_has_reset_num();
  inline void clear_has_reset_num();
  inline void set_has_last_reset_time();
  inline void clear_has_last_reset_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_code_;
  ::google::protobuf::uint32 boss_position_;
  ::google::protobuf::uint32 reset_num_;
  ::google::protobuf::uint32 last_reset_time_;
  ::google::protobuf::RepeatedPtrField< ::struct_game_element > consume_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_boss_dead_hero_reset_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_guild_boss_attacker_rank_req : public ::google::protobuf::Message {
 public:
  c_gs_guild_boss_attacker_rank_req();
  virtual ~c_gs_guild_boss_attacker_rank_req();

  c_gs_guild_boss_attacker_rank_req(const c_gs_guild_boss_attacker_rank_req& from);

  inline c_gs_guild_boss_attacker_rank_req& operator=(const c_gs_guild_boss_attacker_rank_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_guild_boss_attacker_rank_req& default_instance();

  void Swap(c_gs_guild_boss_attacker_rank_req* other);

  // implements Message ----------------------------------------------

  c_gs_guild_boss_attacker_rank_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_guild_boss_attacker_rank_req& from);
  void MergeFrom(const c_gs_guild_boss_attacker_rank_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 boss_position = 1;
  inline bool has_boss_position() const;
  inline void clear_boss_position();
  static const int kBossPositionFieldNumber = 1;
  inline ::google::protobuf::uint32 boss_position() const;
  inline void set_boss_position(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:c_gs_guild_boss_attacker_rank_req)
 private:
  inline void set_has_boss_position();
  inline void clear_has_boss_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 boss_position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_guild_boss_attacker_rank_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_boss_attacker_rank_res_struct_boss_attacker : public ::google::protobuf::Message {
 public:
  gs_c_guild_boss_attacker_rank_res_struct_boss_attacker();
  virtual ~gs_c_guild_boss_attacker_rank_res_struct_boss_attacker();

  gs_c_guild_boss_attacker_rank_res_struct_boss_attacker(const gs_c_guild_boss_attacker_rank_res_struct_boss_attacker& from);

  inline gs_c_guild_boss_attacker_rank_res_struct_boss_attacker& operator=(const gs_c_guild_boss_attacker_rank_res_struct_boss_attacker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_boss_attacker_rank_res_struct_boss_attacker& default_instance();

  void Swap(gs_c_guild_boss_attacker_rank_res_struct_boss_attacker* other);

  // implements Message ----------------------------------------------

  gs_c_guild_boss_attacker_rank_res_struct_boss_attacker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_boss_attacker_rank_res_struct_boss_attacker& from);
  void MergeFrom(const gs_c_guild_boss_attacker_rank_res_struct_boss_attacker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 lose_hp = 3;
  inline bool has_lose_hp() const;
  inline void clear_lose_hp();
  static const int kLoseHpFieldNumber = 3;
  inline ::google::protobuf::uint32 lose_hp() const;
  inline void set_lose_hp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_guild_boss_attacker_rank_res.struct_boss_attacker)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lose_hp();
  inline void clear_has_lose_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 lose_hp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_boss_attacker_rank_res_struct_boss_attacker* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_guild_boss_attacker_rank_res : public ::google::protobuf::Message {
 public:
  gs_c_guild_boss_attacker_rank_res();
  virtual ~gs_c_guild_boss_attacker_rank_res();

  gs_c_guild_boss_attacker_rank_res(const gs_c_guild_boss_attacker_rank_res& from);

  inline gs_c_guild_boss_attacker_rank_res& operator=(const gs_c_guild_boss_attacker_rank_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_guild_boss_attacker_rank_res& default_instance();

  void Swap(gs_c_guild_boss_attacker_rank_res* other);

  // implements Message ----------------------------------------------

  gs_c_guild_boss_attacker_rank_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_guild_boss_attacker_rank_res& from);
  void MergeFrom(const gs_c_guild_boss_attacker_rank_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef gs_c_guild_boss_attacker_rank_res_struct_boss_attacker struct_boss_attacker;

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // repeated .gs_c_guild_boss_attacker_rank_res.struct_boss_attacker attckers = 2;
  inline int attckers_size() const;
  inline void clear_attckers();
  static const int kAttckersFieldNumber = 2;
  inline const ::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker& attckers(int index) const;
  inline ::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker* mutable_attckers(int index);
  inline ::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker* add_attckers();
  inline const ::google::protobuf::RepeatedPtrField< ::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker >&
      attckers() const;
  inline ::google::protobuf::RepeatedPtrField< ::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker >*
      mutable_attckers();

  // @@protoc_insertion_point(class_scope:gs_c_guild_boss_attacker_rank_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker > attckers_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_guild_boss_attacker_rank_res* default_instance_;
};
// -------------------------------------------------------------------

class c_gs_server_time_req : public ::google::protobuf::Message {
 public:
  c_gs_server_time_req();
  virtual ~c_gs_server_time_req();

  c_gs_server_time_req(const c_gs_server_time_req& from);

  inline c_gs_server_time_req& operator=(const c_gs_server_time_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const c_gs_server_time_req& default_instance();

  void Swap(c_gs_server_time_req* other);

  // implements Message ----------------------------------------------

  c_gs_server_time_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const c_gs_server_time_req& from);
  void MergeFrom(const c_gs_server_time_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:c_gs_server_time_req)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static c_gs_server_time_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_c_server_time_res : public ::google::protobuf::Message {
 public:
  gs_c_server_time_res();
  virtual ~gs_c_server_time_res();

  gs_c_server_time_res(const gs_c_server_time_res& from);

  inline gs_c_server_time_res& operator=(const gs_c_server_time_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_c_server_time_res& default_instance();

  void Swap(gs_c_server_time_res* other);

  // implements Message ----------------------------------------------

  gs_c_server_time_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_c_server_time_res& from);
  void MergeFrom(const gs_c_server_time_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional uint32 server_time = 2;
  inline bool has_server_time() const;
  inline void clear_server_time();
  static const int kServerTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 server_time() const;
  inline void set_server_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:gs_c_server_time_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_server_time();
  inline void clear_has_server_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_code_;
  ::google::protobuf::uint32 server_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_AssignDesc_gs_5fc_5fproto_2eproto();
  friend void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_c_server_time_res* default_instance_;
};
// ===================================================================


// ===================================================================

// AOYI

// required string id = 1 [default = ""];
inline bool AOYI::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AOYI::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AOYI::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AOYI::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& AOYI::id() const {
  return *id_;
}
inline void AOYI::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void AOYI::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void AOYI::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AOYI::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* AOYI::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AOYI::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float factor = 2 [default = 0];
inline bool AOYI::has_factor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AOYI::set_has_factor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AOYI::clear_has_factor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AOYI::clear_factor() {
  factor_ = 0;
  clear_has_factor();
}
inline float AOYI::factor() const {
  return factor_;
}
inline void AOYI::set_factor(float value) {
  set_has_factor();
  factor_ = value;
}

// -------------------------------------------------------------------

// AOYI_ARRAY

// repeated .AOYI items = 1;
inline int AOYI_ARRAY::items_size() const {
  return items_.size();
}
inline void AOYI_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::AOYI& AOYI_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::AOYI* AOYI_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::AOYI* AOYI_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AOYI >&
AOYI_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::AOYI >*
AOYI_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// ARENAPRICE

// required string id = 1 [default = ""];
inline bool ARENAPRICE::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ARENAPRICE::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ARENAPRICE::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ARENAPRICE::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ARENAPRICE::id() const {
  return *id_;
}
inline void ARENAPRICE::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ARENAPRICE::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ARENAPRICE::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ARENAPRICE::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ARENAPRICE::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ARENAPRICE::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 price = 2 [default = 0];
inline bool ARENAPRICE::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ARENAPRICE::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ARENAPRICE::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ARENAPRICE::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 ARENAPRICE::price() const {
  return price_;
}
inline void ARENAPRICE::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// -------------------------------------------------------------------

// ARENAPRICE_ARRAY

// repeated .ARENAPRICE items = 1;
inline int ARENAPRICE_ARRAY::items_size() const {
  return items_.size();
}
inline void ARENAPRICE_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::ARENAPRICE& ARENAPRICE_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::ARENAPRICE* ARENAPRICE_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::ARENAPRICE* ARENAPRICE_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ARENAPRICE >&
ARENAPRICE_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ARENAPRICE >*
ARENAPRICE_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// BAG

// required string id = 1 [default = ""];
inline bool BAG::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BAG::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BAG::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BAG::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BAG::id() const {
  return *id_;
}
inline void BAG::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BAG::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BAG::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BAG::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BAG::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BAG::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 useType = 2 [default = 0];
inline bool BAG::has_usetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BAG::set_has_usetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BAG::clear_has_usetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BAG::clear_usetype() {
  usetype_ = 0;
  clear_has_usetype();
}
inline ::google::protobuf::int32 BAG::usetype() const {
  return usetype_;
}
inline void BAG::set_usetype(::google::protobuf::int32 value) {
  set_has_usetype();
  usetype_ = value;
}

// required int32 quality = 3 [default = 0];
inline bool BAG::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BAG::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BAG::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BAG::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 BAG::quality() const {
  return quality_;
}
inline void BAG::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// required int32 sellPrice = 4 [default = 0];
inline bool BAG::has_sellprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BAG::set_has_sellprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BAG::clear_has_sellprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BAG::clear_sellprice() {
  sellprice_ = 0;
  clear_has_sellprice();
}
inline ::google::protobuf::int32 BAG::sellprice() const {
  return sellprice_;
}
inline void BAG::set_sellprice(::google::protobuf::int32 value) {
  set_has_sellprice();
  sellprice_ = value;
}

// required string exp = 5 [default = ""];
inline bool BAG::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BAG::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BAG::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BAG::clear_exp() {
  if (exp_ != &::google::protobuf::internal::kEmptyString) {
    exp_->clear();
  }
  clear_has_exp();
}
inline const ::std::string& BAG::exp() const {
  return *exp_;
}
inline void BAG::set_exp(const ::std::string& value) {
  set_has_exp();
  if (exp_ == &::google::protobuf::internal::kEmptyString) {
    exp_ = new ::std::string;
  }
  exp_->assign(value);
}
inline void BAG::set_exp(const char* value) {
  set_has_exp();
  if (exp_ == &::google::protobuf::internal::kEmptyString) {
    exp_ = new ::std::string;
  }
  exp_->assign(value);
}
inline void BAG::set_exp(const char* value, size_t size) {
  set_has_exp();
  if (exp_ == &::google::protobuf::internal::kEmptyString) {
    exp_ = new ::std::string;
  }
  exp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BAG::mutable_exp() {
  set_has_exp();
  if (exp_ == &::google::protobuf::internal::kEmptyString) {
    exp_ = new ::std::string;
  }
  return exp_;
}
inline ::std::string* BAG::release_exp() {
  clear_has_exp();
  if (exp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exp_;
    exp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BAG::set_allocated_exp(::std::string* exp) {
  if (exp_ != &::google::protobuf::internal::kEmptyString) {
    delete exp_;
  }
  if (exp) {
    set_has_exp();
    exp_ = exp;
  } else {
    clear_has_exp();
    exp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string needs = 6 [default = ""];
inline bool BAG::has_needs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BAG::set_has_needs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BAG::clear_has_needs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BAG::clear_needs() {
  if (needs_ != &::google::protobuf::internal::kEmptyString) {
    needs_->clear();
  }
  clear_has_needs();
}
inline const ::std::string& BAG::needs() const {
  return *needs_;
}
inline void BAG::set_needs(const ::std::string& value) {
  set_has_needs();
  if (needs_ == &::google::protobuf::internal::kEmptyString) {
    needs_ = new ::std::string;
  }
  needs_->assign(value);
}
inline void BAG::set_needs(const char* value) {
  set_has_needs();
  if (needs_ == &::google::protobuf::internal::kEmptyString) {
    needs_ = new ::std::string;
  }
  needs_->assign(value);
}
inline void BAG::set_needs(const char* value, size_t size) {
  set_has_needs();
  if (needs_ == &::google::protobuf::internal::kEmptyString) {
    needs_ = new ::std::string;
  }
  needs_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BAG::mutable_needs() {
  set_has_needs();
  if (needs_ == &::google::protobuf::internal::kEmptyString) {
    needs_ = new ::std::string;
  }
  return needs_;
}
inline ::std::string* BAG::release_needs() {
  clear_has_needs();
  if (needs_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = needs_;
    needs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BAG::set_allocated_needs(::std::string* needs) {
  if (needs_ != &::google::protobuf::internal::kEmptyString) {
    delete needs_;
  }
  if (needs) {
    set_has_needs();
    needs_ = needs;
  } else {
    clear_has_needs();
    needs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string needCounts = 7 [default = ""];
inline bool BAG::has_needcounts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BAG::set_has_needcounts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BAG::clear_has_needcounts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BAG::clear_needcounts() {
  if (needcounts_ != &::google::protobuf::internal::kEmptyString) {
    needcounts_->clear();
  }
  clear_has_needcounts();
}
inline const ::std::string& BAG::needcounts() const {
  return *needcounts_;
}
inline void BAG::set_needcounts(const ::std::string& value) {
  set_has_needcounts();
  if (needcounts_ == &::google::protobuf::internal::kEmptyString) {
    needcounts_ = new ::std::string;
  }
  needcounts_->assign(value);
}
inline void BAG::set_needcounts(const char* value) {
  set_has_needcounts();
  if (needcounts_ == &::google::protobuf::internal::kEmptyString) {
    needcounts_ = new ::std::string;
  }
  needcounts_->assign(value);
}
inline void BAG::set_needcounts(const char* value, size_t size) {
  set_has_needcounts();
  if (needcounts_ == &::google::protobuf::internal::kEmptyString) {
    needcounts_ = new ::std::string;
  }
  needcounts_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BAG::mutable_needcounts() {
  set_has_needcounts();
  if (needcounts_ == &::google::protobuf::internal::kEmptyString) {
    needcounts_ = new ::std::string;
  }
  return needcounts_;
}
inline ::std::string* BAG::release_needcounts() {
  clear_has_needcounts();
  if (needcounts_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = needcounts_;
    needcounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BAG::set_allocated_needcounts(::std::string* needcounts) {
  if (needcounts_ != &::google::protobuf::internal::kEmptyString) {
    delete needcounts_;
  }
  if (needcounts) {
    set_has_needcounts();
    needcounts_ = needcounts;
  } else {
    clear_has_needcounts();
    needcounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 needGolds = 8 [default = 0];
inline bool BAG::has_needgolds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BAG::set_has_needgolds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BAG::clear_has_needgolds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BAG::clear_needgolds() {
  needgolds_ = 0;
  clear_has_needgolds();
}
inline ::google::protobuf::int32 BAG::needgolds() const {
  return needgolds_;
}
inline void BAG::set_needgolds(::google::protobuf::int32 value) {
  set_has_needgolds();
  needgolds_ = value;
}

// -------------------------------------------------------------------

// BAG_ARRAY

// repeated .BAG items = 1;
inline int BAG_ARRAY::items_size() const {
  return items_.size();
}
inline void BAG_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::BAG& BAG_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::BAG* BAG_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::BAG* BAG_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BAG >&
BAG_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::BAG >*
BAG_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// BATTLE

// required string id = 1 [default = ""];
inline bool BATTLE::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BATTLE::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BATTLE::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BATTLE::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BATTLE::id() const {
  return *id_;
}
inline void BATTLE::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BATTLE::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BATTLE::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BATTLE::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BATTLE::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BATTLE::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string infos = 2 [default = ""];
inline bool BATTLE::has_infos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BATTLE::set_has_infos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BATTLE::clear_has_infos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BATTLE::clear_infos() {
  if (infos_ != &::google::protobuf::internal::kEmptyString) {
    infos_->clear();
  }
  clear_has_infos();
}
inline const ::std::string& BATTLE::infos() const {
  return *infos_;
}
inline void BATTLE::set_infos(const ::std::string& value) {
  set_has_infos();
  if (infos_ == &::google::protobuf::internal::kEmptyString) {
    infos_ = new ::std::string;
  }
  infos_->assign(value);
}
inline void BATTLE::set_infos(const char* value) {
  set_has_infos();
  if (infos_ == &::google::protobuf::internal::kEmptyString) {
    infos_ = new ::std::string;
  }
  infos_->assign(value);
}
inline void BATTLE::set_infos(const char* value, size_t size) {
  set_has_infos();
  if (infos_ == &::google::protobuf::internal::kEmptyString) {
    infos_ = new ::std::string;
  }
  infos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BATTLE::mutable_infos() {
  set_has_infos();
  if (infos_ == &::google::protobuf::internal::kEmptyString) {
    infos_ = new ::std::string;
  }
  return infos_;
}
inline ::std::string* BATTLE::release_infos() {
  clear_has_infos();
  if (infos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = infos_;
    infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BATTLE::set_allocated_infos(::std::string* infos) {
  if (infos_ != &::google::protobuf::internal::kEmptyString) {
    delete infos_;
  }
  if (infos) {
    set_has_infos();
    infos_ = infos;
  } else {
    clear_has_infos();
    infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string positions = 3 [default = ""];
inline bool BATTLE::has_positions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BATTLE::set_has_positions() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BATTLE::clear_has_positions() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BATTLE::clear_positions() {
  if (positions_ != &::google::protobuf::internal::kEmptyString) {
    positions_->clear();
  }
  clear_has_positions();
}
inline const ::std::string& BATTLE::positions() const {
  return *positions_;
}
inline void BATTLE::set_positions(const ::std::string& value) {
  set_has_positions();
  if (positions_ == &::google::protobuf::internal::kEmptyString) {
    positions_ = new ::std::string;
  }
  positions_->assign(value);
}
inline void BATTLE::set_positions(const char* value) {
  set_has_positions();
  if (positions_ == &::google::protobuf::internal::kEmptyString) {
    positions_ = new ::std::string;
  }
  positions_->assign(value);
}
inline void BATTLE::set_positions(const char* value, size_t size) {
  set_has_positions();
  if (positions_ == &::google::protobuf::internal::kEmptyString) {
    positions_ = new ::std::string;
  }
  positions_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BATTLE::mutable_positions() {
  set_has_positions();
  if (positions_ == &::google::protobuf::internal::kEmptyString) {
    positions_ = new ::std::string;
  }
  return positions_;
}
inline ::std::string* BATTLE::release_positions() {
  clear_has_positions();
  if (positions_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = positions_;
    positions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BATTLE::set_allocated_positions(::std::string* positions) {
  if (positions_ != &::google::protobuf::internal::kEmptyString) {
    delete positions_;
  }
  if (positions) {
    set_has_positions();
    positions_ = positions;
  } else {
    clear_has_positions();
    positions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BATTLE_ARRAY

// repeated .BATTLE items = 1;
inline int BATTLE_ARRAY::items_size() const {
  return items_.size();
}
inline void BATTLE_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::BATTLE& BATTLE_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::BATTLE* BATTLE_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::BATTLE* BATTLE_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BATTLE >&
BATTLE_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::BATTLE >*
BATTLE_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// BOSSPROP

// required string id = 1 [default = ""];
inline bool BOSSPROP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BOSSPROP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BOSSPROP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BOSSPROP::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BOSSPROP::id() const {
  return *id_;
}
inline void BOSSPROP::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BOSSPROP::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BOSSPROP::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BOSSPROP::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BOSSPROP::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BOSSPROP::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pointId = 2 [default = ""];
inline bool BOSSPROP::has_pointid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BOSSPROP::set_has_pointid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BOSSPROP::clear_has_pointid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BOSSPROP::clear_pointid() {
  if (pointid_ != &::google::protobuf::internal::kEmptyString) {
    pointid_->clear();
  }
  clear_has_pointid();
}
inline const ::std::string& BOSSPROP::pointid() const {
  return *pointid_;
}
inline void BOSSPROP::set_pointid(const ::std::string& value) {
  set_has_pointid();
  if (pointid_ == &::google::protobuf::internal::kEmptyString) {
    pointid_ = new ::std::string;
  }
  pointid_->assign(value);
}
inline void BOSSPROP::set_pointid(const char* value) {
  set_has_pointid();
  if (pointid_ == &::google::protobuf::internal::kEmptyString) {
    pointid_ = new ::std::string;
  }
  pointid_->assign(value);
}
inline void BOSSPROP::set_pointid(const char* value, size_t size) {
  set_has_pointid();
  if (pointid_ == &::google::protobuf::internal::kEmptyString) {
    pointid_ = new ::std::string;
  }
  pointid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BOSSPROP::mutable_pointid() {
  set_has_pointid();
  if (pointid_ == &::google::protobuf::internal::kEmptyString) {
    pointid_ = new ::std::string;
  }
  return pointid_;
}
inline ::std::string* BOSSPROP::release_pointid() {
  clear_has_pointid();
  if (pointid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pointid_;
    pointid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BOSSPROP::set_allocated_pointid(::std::string* pointid) {
  if (pointid_ != &::google::protobuf::internal::kEmptyString) {
    delete pointid_;
  }
  if (pointid) {
    set_has_pointid();
    pointid_ = pointid;
  } else {
    clear_has_pointid();
    pointid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 area = 3 [default = 0];
inline bool BOSSPROP::has_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BOSSPROP::set_has_area() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BOSSPROP::clear_has_area() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BOSSPROP::clear_area() {
  area_ = 0;
  clear_has_area();
}
inline ::google::protobuf::int32 BOSSPROP::area() const {
  return area_;
}
inline void BOSSPROP::set_area(::google::protobuf::int32 value) {
  set_has_area();
  area_ = value;
}

// required int32 occupation = 4 [default = 0];
inline bool BOSSPROP::has_occupation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BOSSPROP::set_has_occupation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BOSSPROP::clear_has_occupation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BOSSPROP::clear_occupation() {
  occupation_ = 0;
  clear_has_occupation();
}
inline ::google::protobuf::int32 BOSSPROP::occupation() const {
  return occupation_;
}
inline void BOSSPROP::set_occupation(::google::protobuf::int32 value) {
  set_has_occupation();
  occupation_ = value;
}

// required int32 level = 5 [default = 0];
inline bool BOSSPROP::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BOSSPROP::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BOSSPROP::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BOSSPROP::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BOSSPROP::level() const {
  return level_;
}
inline void BOSSPROP::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 health = 6 [default = 0];
inline bool BOSSPROP::has_health() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BOSSPROP::set_has_health() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BOSSPROP::clear_has_health() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BOSSPROP::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 BOSSPROP::health() const {
  return health_;
}
inline void BOSSPROP::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// required int32 damage = 7 [default = 0];
inline bool BOSSPROP::has_damage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BOSSPROP::set_has_damage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BOSSPROP::clear_has_damage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BOSSPROP::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 BOSSPROP::damage() const {
  return damage_;
}
inline void BOSSPROP::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// required int32 pdd = 8 [default = 0];
inline bool BOSSPROP::has_pdd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BOSSPROP::set_has_pdd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BOSSPROP::clear_has_pdd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BOSSPROP::clear_pdd() {
  pdd_ = 0;
  clear_has_pdd();
}
inline ::google::protobuf::int32 BOSSPROP::pdd() const {
  return pdd_;
}
inline void BOSSPROP::set_pdd(::google::protobuf::int32 value) {
  set_has_pdd();
  pdd_ = value;
}

// required int32 mdd = 9 [default = 0];
inline bool BOSSPROP::has_mdd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BOSSPROP::set_has_mdd() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BOSSPROP::clear_has_mdd() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BOSSPROP::clear_mdd() {
  mdd_ = 0;
  clear_has_mdd();
}
inline ::google::protobuf::int32 BOSSPROP::mdd() const {
  return mdd_;
}
inline void BOSSPROP::set_mdd(::google::protobuf::int32 value) {
  set_has_mdd();
  mdd_ = value;
}

// required int32 hitLevel = 10 [default = 0];
inline bool BOSSPROP::has_hitlevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BOSSPROP::set_has_hitlevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BOSSPROP::clear_has_hitlevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BOSSPROP::clear_hitlevel() {
  hitlevel_ = 0;
  clear_has_hitlevel();
}
inline ::google::protobuf::int32 BOSSPROP::hitlevel() const {
  return hitlevel_;
}
inline void BOSSPROP::set_hitlevel(::google::protobuf::int32 value) {
  set_has_hitlevel();
  hitlevel_ = value;
}

// required int32 dodgeLevel = 11 [default = 0];
inline bool BOSSPROP::has_dodgelevel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BOSSPROP::set_has_dodgelevel() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BOSSPROP::clear_has_dodgelevel() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BOSSPROP::clear_dodgelevel() {
  dodgelevel_ = 0;
  clear_has_dodgelevel();
}
inline ::google::protobuf::int32 BOSSPROP::dodgelevel() const {
  return dodgelevel_;
}
inline void BOSSPROP::set_dodgelevel(::google::protobuf::int32 value) {
  set_has_dodgelevel();
  dodgelevel_ = value;
}

// required int32 criLevel = 12 [default = 0];
inline bool BOSSPROP::has_crilevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BOSSPROP::set_has_crilevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BOSSPROP::clear_has_crilevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BOSSPROP::clear_crilevel() {
  crilevel_ = 0;
  clear_has_crilevel();
}
inline ::google::protobuf::int32 BOSSPROP::crilevel() const {
  return crilevel_;
}
inline void BOSSPROP::set_crilevel(::google::protobuf::int32 value) {
  set_has_crilevel();
  crilevel_ = value;
}

// required int32 tenacityLevel = 13 [default = 0];
inline bool BOSSPROP::has_tenacitylevel() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BOSSPROP::set_has_tenacitylevel() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BOSSPROP::clear_has_tenacitylevel() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BOSSPROP::clear_tenacitylevel() {
  tenacitylevel_ = 0;
  clear_has_tenacitylevel();
}
inline ::google::protobuf::int32 BOSSPROP::tenacitylevel() const {
  return tenacitylevel_;
}
inline void BOSSPROP::set_tenacitylevel(::google::protobuf::int32 value) {
  set_has_tenacitylevel();
  tenacitylevel_ = value;
}

// required int32 pddPierce = 14 [default = 0];
inline bool BOSSPROP::has_pddpierce() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BOSSPROP::set_has_pddpierce() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BOSSPROP::clear_has_pddpierce() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BOSSPROP::clear_pddpierce() {
  pddpierce_ = 0;
  clear_has_pddpierce();
}
inline ::google::protobuf::int32 BOSSPROP::pddpierce() const {
  return pddpierce_;
}
inline void BOSSPROP::set_pddpierce(::google::protobuf::int32 value) {
  set_has_pddpierce();
  pddpierce_ = value;
}

// required string passiveSkillId = 15 [default = ""];
inline bool BOSSPROP::has_passiveskillid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BOSSPROP::set_has_passiveskillid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BOSSPROP::clear_has_passiveskillid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BOSSPROP::clear_passiveskillid() {
  if (passiveskillid_ != &::google::protobuf::internal::kEmptyString) {
    passiveskillid_->clear();
  }
  clear_has_passiveskillid();
}
inline const ::std::string& BOSSPROP::passiveskillid() const {
  return *passiveskillid_;
}
inline void BOSSPROP::set_passiveskillid(const ::std::string& value) {
  set_has_passiveskillid();
  if (passiveskillid_ == &::google::protobuf::internal::kEmptyString) {
    passiveskillid_ = new ::std::string;
  }
  passiveskillid_->assign(value);
}
inline void BOSSPROP::set_passiveskillid(const char* value) {
  set_has_passiveskillid();
  if (passiveskillid_ == &::google::protobuf::internal::kEmptyString) {
    passiveskillid_ = new ::std::string;
  }
  passiveskillid_->assign(value);
}
inline void BOSSPROP::set_passiveskillid(const char* value, size_t size) {
  set_has_passiveskillid();
  if (passiveskillid_ == &::google::protobuf::internal::kEmptyString) {
    passiveskillid_ = new ::std::string;
  }
  passiveskillid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BOSSPROP::mutable_passiveskillid() {
  set_has_passiveskillid();
  if (passiveskillid_ == &::google::protobuf::internal::kEmptyString) {
    passiveskillid_ = new ::std::string;
  }
  return passiveskillid_;
}
inline ::std::string* BOSSPROP::release_passiveskillid() {
  clear_has_passiveskillid();
  if (passiveskillid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passiveskillid_;
    passiveskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BOSSPROP::set_allocated_passiveskillid(::std::string* passiveskillid) {
  if (passiveskillid_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskillid_;
  }
  if (passiveskillid) {
    set_has_passiveskillid();
    passiveskillid_ = passiveskillid;
  } else {
    clear_has_passiveskillid();
    passiveskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passiveSkillLevel = 16 [default = ""];
inline bool BOSSPROP::has_passiveskilllevel() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BOSSPROP::set_has_passiveskilllevel() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BOSSPROP::clear_has_passiveskilllevel() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BOSSPROP::clear_passiveskilllevel() {
  if (passiveskilllevel_ != &::google::protobuf::internal::kEmptyString) {
    passiveskilllevel_->clear();
  }
  clear_has_passiveskilllevel();
}
inline const ::std::string& BOSSPROP::passiveskilllevel() const {
  return *passiveskilllevel_;
}
inline void BOSSPROP::set_passiveskilllevel(const ::std::string& value) {
  set_has_passiveskilllevel();
  if (passiveskilllevel_ == &::google::protobuf::internal::kEmptyString) {
    passiveskilllevel_ = new ::std::string;
  }
  passiveskilllevel_->assign(value);
}
inline void BOSSPROP::set_passiveskilllevel(const char* value) {
  set_has_passiveskilllevel();
  if (passiveskilllevel_ == &::google::protobuf::internal::kEmptyString) {
    passiveskilllevel_ = new ::std::string;
  }
  passiveskilllevel_->assign(value);
}
inline void BOSSPROP::set_passiveskilllevel(const char* value, size_t size) {
  set_has_passiveskilllevel();
  if (passiveskilllevel_ == &::google::protobuf::internal::kEmptyString) {
    passiveskilllevel_ = new ::std::string;
  }
  passiveskilllevel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BOSSPROP::mutable_passiveskilllevel() {
  set_has_passiveskilllevel();
  if (passiveskilllevel_ == &::google::protobuf::internal::kEmptyString) {
    passiveskilllevel_ = new ::std::string;
  }
  return passiveskilllevel_;
}
inline ::std::string* BOSSPROP::release_passiveskilllevel() {
  clear_has_passiveskilllevel();
  if (passiveskilllevel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passiveskilllevel_;
    passiveskilllevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BOSSPROP::set_allocated_passiveskilllevel(::std::string* passiveskilllevel) {
  if (passiveskilllevel_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskilllevel_;
  }
  if (passiveskilllevel) {
    set_has_passiveskilllevel();
    passiveskilllevel_ = passiveskilllevel;
  } else {
    clear_has_passiveskilllevel();
    passiveskilllevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float range_X = 17 [default = 0];
inline bool BOSSPROP::has_range_x() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BOSSPROP::set_has_range_x() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BOSSPROP::clear_has_range_x() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BOSSPROP::clear_range_x() {
  range_x_ = 0;
  clear_has_range_x();
}
inline float BOSSPROP::range_x() const {
  return range_x_;
}
inline void BOSSPROP::set_range_x(float value) {
  set_has_range_x();
  range_x_ = value;
}

// required float range_Y = 18 [default = 0];
inline bool BOSSPROP::has_range_y() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BOSSPROP::set_has_range_y() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BOSSPROP::clear_has_range_y() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BOSSPROP::clear_range_y() {
  range_y_ = 0;
  clear_has_range_y();
}
inline float BOSSPROP::range_y() const {
  return range_y_;
}
inline void BOSSPROP::set_range_y(float value) {
  set_has_range_y();
  range_y_ = value;
}

// required float range_Z = 19 [default = 0];
inline bool BOSSPROP::has_range_z() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BOSSPROP::set_has_range_z() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BOSSPROP::clear_has_range_z() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BOSSPROP::clear_range_z() {
  range_z_ = 0;
  clear_has_range_z();
}
inline float BOSSPROP::range_z() const {
  return range_z_;
}
inline void BOSSPROP::set_range_z(float value) {
  set_has_range_z();
  range_z_ = value;
}

// required float attackSpeed = 20 [default = 0];
inline bool BOSSPROP::has_attackspeed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BOSSPROP::set_has_attackspeed() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BOSSPROP::clear_has_attackspeed() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BOSSPROP::clear_attackspeed() {
  attackspeed_ = 0;
  clear_has_attackspeed();
}
inline float BOSSPROP::attackspeed() const {
  return attackspeed_;
}
inline void BOSSPROP::set_attackspeed(float value) {
  set_has_attackspeed();
  attackspeed_ = value;
}

// required float h_Dis = 21 [default = 0];
inline bool BOSSPROP::has_h_dis() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BOSSPROP::set_has_h_dis() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BOSSPROP::clear_has_h_dis() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BOSSPROP::clear_h_dis() {
  h_dis_ = 0;
  clear_has_h_dis();
}
inline float BOSSPROP::h_dis() const {
  return h_dis_;
}
inline void BOSSPROP::set_h_dis(float value) {
  set_has_h_dis();
  h_dis_ = value;
}

// required float v_Dis = 22 [default = 0];
inline bool BOSSPROP::has_v_dis() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BOSSPROP::set_has_v_dis() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BOSSPROP::clear_has_v_dis() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BOSSPROP::clear_v_dis() {
  v_dis_ = 0;
  clear_has_v_dis();
}
inline float BOSSPROP::v_dis() const {
  return v_dis_;
}
inline void BOSSPROP::set_v_dis(float value) {
  set_has_v_dis();
  v_dis_ = value;
}

// required float moveSpeed = 23 [default = 0];
inline bool BOSSPROP::has_movespeed() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BOSSPROP::set_has_movespeed() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BOSSPROP::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BOSSPROP::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline float BOSSPROP::movespeed() const {
  return movespeed_;
}
inline void BOSSPROP::set_movespeed(float value) {
  set_has_movespeed();
  movespeed_ = value;
}

// required int32 star = 24 [default = 0];
inline bool BOSSPROP::has_star() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BOSSPROP::set_has_star() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BOSSPROP::clear_has_star() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BOSSPROP::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 BOSSPROP::star() const {
  return star_;
}
inline void BOSSPROP::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// required int32 stage_B = 25 [default = 0];
inline bool BOSSPROP::has_stage_b() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BOSSPROP::set_has_stage_b() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BOSSPROP::clear_has_stage_b() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BOSSPROP::clear_stage_b() {
  stage_b_ = 0;
  clear_has_stage_b();
}
inline ::google::protobuf::int32 BOSSPROP::stage_b() const {
  return stage_b_;
}
inline void BOSSPROP::set_stage_b(::google::protobuf::int32 value) {
  set_has_stage_b();
  stage_b_ = value;
}

// required string hitNum_B = 26 [default = ""];
inline bool BOSSPROP::has_hitnum_b() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BOSSPROP::set_has_hitnum_b() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BOSSPROP::clear_has_hitnum_b() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BOSSPROP::clear_hitnum_b() {
  if (hitnum_b_ != &::google::protobuf::internal::kEmptyString) {
    hitnum_b_->clear();
  }
  clear_has_hitnum_b();
}
inline const ::std::string& BOSSPROP::hitnum_b() const {
  return *hitnum_b_;
}
inline void BOSSPROP::set_hitnum_b(const ::std::string& value) {
  set_has_hitnum_b();
  if (hitnum_b_ == &::google::protobuf::internal::kEmptyString) {
    hitnum_b_ = new ::std::string;
  }
  hitnum_b_->assign(value);
}
inline void BOSSPROP::set_hitnum_b(const char* value) {
  set_has_hitnum_b();
  if (hitnum_b_ == &::google::protobuf::internal::kEmptyString) {
    hitnum_b_ = new ::std::string;
  }
  hitnum_b_->assign(value);
}
inline void BOSSPROP::set_hitnum_b(const char* value, size_t size) {
  set_has_hitnum_b();
  if (hitnum_b_ == &::google::protobuf::internal::kEmptyString) {
    hitnum_b_ = new ::std::string;
  }
  hitnum_b_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BOSSPROP::mutable_hitnum_b() {
  set_has_hitnum_b();
  if (hitnum_b_ == &::google::protobuf::internal::kEmptyString) {
    hitnum_b_ = new ::std::string;
  }
  return hitnum_b_;
}
inline ::std::string* BOSSPROP::release_hitnum_b() {
  clear_has_hitnum_b();
  if (hitnum_b_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hitnum_b_;
    hitnum_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BOSSPROP::set_allocated_hitnum_b(::std::string* hitnum_b) {
  if (hitnum_b_ != &::google::protobuf::internal::kEmptyString) {
    delete hitnum_b_;
  }
  if (hitnum_b) {
    set_has_hitnum_b();
    hitnum_b_ = hitnum_b;
  } else {
    clear_has_hitnum_b();
    hitnum_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string skillTimeList = 27 [default = ""];
inline bool BOSSPROP::has_skilltimelist() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BOSSPROP::set_has_skilltimelist() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BOSSPROP::clear_has_skilltimelist() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BOSSPROP::clear_skilltimelist() {
  if (skilltimelist_ != &::google::protobuf::internal::kEmptyString) {
    skilltimelist_->clear();
  }
  clear_has_skilltimelist();
}
inline const ::std::string& BOSSPROP::skilltimelist() const {
  return *skilltimelist_;
}
inline void BOSSPROP::set_skilltimelist(const ::std::string& value) {
  set_has_skilltimelist();
  if (skilltimelist_ == &::google::protobuf::internal::kEmptyString) {
    skilltimelist_ = new ::std::string;
  }
  skilltimelist_->assign(value);
}
inline void BOSSPROP::set_skilltimelist(const char* value) {
  set_has_skilltimelist();
  if (skilltimelist_ == &::google::protobuf::internal::kEmptyString) {
    skilltimelist_ = new ::std::string;
  }
  skilltimelist_->assign(value);
}
inline void BOSSPROP::set_skilltimelist(const char* value, size_t size) {
  set_has_skilltimelist();
  if (skilltimelist_ == &::google::protobuf::internal::kEmptyString) {
    skilltimelist_ = new ::std::string;
  }
  skilltimelist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BOSSPROP::mutable_skilltimelist() {
  set_has_skilltimelist();
  if (skilltimelist_ == &::google::protobuf::internal::kEmptyString) {
    skilltimelist_ = new ::std::string;
  }
  return skilltimelist_;
}
inline ::std::string* BOSSPROP::release_skilltimelist() {
  clear_has_skilltimelist();
  if (skilltimelist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skilltimelist_;
    skilltimelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BOSSPROP::set_allocated_skilltimelist(::std::string* skilltimelist) {
  if (skilltimelist_ != &::google::protobuf::internal::kEmptyString) {
    delete skilltimelist_;
  }
  if (skilltimelist) {
    set_has_skilltimelist();
    skilltimelist_ = skilltimelist;
  } else {
    clear_has_skilltimelist();
    skilltimelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string warningTimeList = 28 [default = ""];
inline bool BOSSPROP::has_warningtimelist() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BOSSPROP::set_has_warningtimelist() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BOSSPROP::clear_has_warningtimelist() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BOSSPROP::clear_warningtimelist() {
  if (warningtimelist_ != &::google::protobuf::internal::kEmptyString) {
    warningtimelist_->clear();
  }
  clear_has_warningtimelist();
}
inline const ::std::string& BOSSPROP::warningtimelist() const {
  return *warningtimelist_;
}
inline void BOSSPROP::set_warningtimelist(const ::std::string& value) {
  set_has_warningtimelist();
  if (warningtimelist_ == &::google::protobuf::internal::kEmptyString) {
    warningtimelist_ = new ::std::string;
  }
  warningtimelist_->assign(value);
}
inline void BOSSPROP::set_warningtimelist(const char* value) {
  set_has_warningtimelist();
  if (warningtimelist_ == &::google::protobuf::internal::kEmptyString) {
    warningtimelist_ = new ::std::string;
  }
  warningtimelist_->assign(value);
}
inline void BOSSPROP::set_warningtimelist(const char* value, size_t size) {
  set_has_warningtimelist();
  if (warningtimelist_ == &::google::protobuf::internal::kEmptyString) {
    warningtimelist_ = new ::std::string;
  }
  warningtimelist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BOSSPROP::mutable_warningtimelist() {
  set_has_warningtimelist();
  if (warningtimelist_ == &::google::protobuf::internal::kEmptyString) {
    warningtimelist_ = new ::std::string;
  }
  return warningtimelist_;
}
inline ::std::string* BOSSPROP::release_warningtimelist() {
  clear_has_warningtimelist();
  if (warningtimelist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = warningtimelist_;
    warningtimelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BOSSPROP::set_allocated_warningtimelist(::std::string* warningtimelist) {
  if (warningtimelist_ != &::google::protobuf::internal::kEmptyString) {
    delete warningtimelist_;
  }
  if (warningtimelist) {
    set_has_warningtimelist();
    warningtimelist_ = warningtimelist;
  } else {
    clear_has_warningtimelist();
    warningtimelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 maxIntensity = 29 [default = 0];
inline bool BOSSPROP::has_maxintensity() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BOSSPROP::set_has_maxintensity() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BOSSPROP::clear_has_maxintensity() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BOSSPROP::clear_maxintensity() {
  maxintensity_ = 0;
  clear_has_maxintensity();
}
inline ::google::protobuf::int32 BOSSPROP::maxintensity() const {
  return maxintensity_;
}
inline void BOSSPROP::set_maxintensity(::google::protobuf::int32 value) {
  set_has_maxintensity();
  maxintensity_ = value;
}

// required int32 recoverIntensityRate = 30 [default = 0];
inline bool BOSSPROP::has_recoverintensityrate() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BOSSPROP::set_has_recoverintensityrate() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BOSSPROP::clear_has_recoverintensityrate() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BOSSPROP::clear_recoverintensityrate() {
  recoverintensityrate_ = 0;
  clear_has_recoverintensityrate();
}
inline ::google::protobuf::int32 BOSSPROP::recoverintensityrate() const {
  return recoverintensityrate_;
}
inline void BOSSPROP::set_recoverintensityrate(::google::protobuf::int32 value) {
  set_has_recoverintensityrate();
  recoverintensityrate_ = value;
}

// required int32 minIntensity = 31 [default = 0];
inline bool BOSSPROP::has_minintensity() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BOSSPROP::set_has_minintensity() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BOSSPROP::clear_has_minintensity() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BOSSPROP::clear_minintensity() {
  minintensity_ = 0;
  clear_has_minintensity();
}
inline ::google::protobuf::int32 BOSSPROP::minintensity() const {
  return minintensity_;
}
inline void BOSSPROP::set_minintensity(::google::protobuf::int32 value) {
  set_has_minintensity();
  minintensity_ = value;
}

// required int32 type_Normal = 32 [default = 0];
inline bool BOSSPROP::has_type_normal() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BOSSPROP::set_has_type_normal() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BOSSPROP::clear_has_type_normal() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BOSSPROP::clear_type_normal() {
  type_normal_ = 0;
  clear_has_type_normal();
}
inline ::google::protobuf::int32 BOSSPROP::type_normal() const {
  return type_normal_;
}
inline void BOSSPROP::set_type_normal(::google::protobuf::int32 value) {
  set_has_type_normal();
  type_normal_ = value;
}

// -------------------------------------------------------------------

// BOSSPROP_ARRAY

// repeated .BOSSPROP items = 1;
inline int BOSSPROP_ARRAY::items_size() const {
  return items_.size();
}
inline void BOSSPROP_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::BOSSPROP& BOSSPROP_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::BOSSPROP* BOSSPROP_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::BOSSPROP* BOSSPROP_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BOSSPROP >&
BOSSPROP_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::BOSSPROP >*
BOSSPROP_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// BOSSSKILL

// required string id = 1 [default = ""];
inline bool BOSSSKILL::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BOSSSKILL::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BOSSSKILL::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BOSSSKILL::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BOSSSKILL::id() const {
  return *id_;
}
inline void BOSSSKILL::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BOSSSKILL::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BOSSSKILL::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BOSSSKILL::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BOSSSKILL::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BOSSSKILL::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float factor = 2 [default = 0];
inline bool BOSSSKILL::has_factor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BOSSSKILL::set_has_factor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BOSSSKILL::clear_has_factor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BOSSSKILL::clear_factor() {
  factor_ = 0;
  clear_has_factor();
}
inline float BOSSSKILL::factor() const {
  return factor_;
}
inline void BOSSSKILL::set_factor(float value) {
  set_has_factor();
  factor_ = value;
}

// required float distance = 3 [default = 0];
inline bool BOSSSKILL::has_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BOSSSKILL::set_has_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BOSSSKILL::clear_has_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BOSSSKILL::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float BOSSSKILL::distance() const {
  return distance_;
}
inline void BOSSSKILL::set_distance(float value) {
  set_has_distance();
  distance_ = value;
}

// required float height = 4 [default = 0];
inline bool BOSSSKILL::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BOSSSKILL::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BOSSSKILL::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BOSSSKILL::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float BOSSSKILL::height() const {
  return height_;
}
inline void BOSSSKILL::set_height(float value) {
  set_has_height();
  height_ = value;
}

// required float range_x = 5 [default = 0];
inline bool BOSSSKILL::has_range_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BOSSSKILL::set_has_range_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BOSSSKILL::clear_has_range_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BOSSSKILL::clear_range_x() {
  range_x_ = 0;
  clear_has_range_x();
}
inline float BOSSSKILL::range_x() const {
  return range_x_;
}
inline void BOSSSKILL::set_range_x(float value) {
  set_has_range_x();
  range_x_ = value;
}

// required float range_y = 6 [default = 0];
inline bool BOSSSKILL::has_range_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BOSSSKILL::set_has_range_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BOSSSKILL::clear_has_range_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BOSSSKILL::clear_range_y() {
  range_y_ = 0;
  clear_has_range_y();
}
inline float BOSSSKILL::range_y() const {
  return range_y_;
}
inline void BOSSSKILL::set_range_y(float value) {
  set_has_range_y();
  range_y_ = value;
}

// required float range_z = 7 [default = 0];
inline bool BOSSSKILL::has_range_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BOSSSKILL::set_has_range_z() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BOSSSKILL::clear_has_range_z() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BOSSSKILL::clear_range_z() {
  range_z_ = 0;
  clear_has_range_z();
}
inline float BOSSSKILL::range_z() const {
  return range_z_;
}
inline void BOSSSKILL::set_range_z(float value) {
  set_has_range_z();
  range_z_ = value;
}

// required float waitTime = 8 [default = 0];
inline bool BOSSSKILL::has_waittime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BOSSSKILL::set_has_waittime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BOSSSKILL::clear_has_waittime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BOSSSKILL::clear_waittime() {
  waittime_ = 0;
  clear_has_waittime();
}
inline float BOSSSKILL::waittime() const {
  return waittime_;
}
inline void BOSSSKILL::set_waittime(float value) {
  set_has_waittime();
  waittime_ = value;
}

// -------------------------------------------------------------------

// BOSSSKILL_ARRAY

// repeated .BOSSSKILL items = 1;
inline int BOSSSKILL_ARRAY::items_size() const {
  return items_.size();
}
inline void BOSSSKILL_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::BOSSSKILL& BOSSSKILL_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::BOSSSKILL* BOSSSKILL_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::BOSSSKILL* BOSSSKILL_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BOSSSKILL >&
BOSSSKILL_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::BOSSSKILL >*
BOSSSKILL_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// BUFF

// required string id = 1 [default = ""];
inline bool BUFF::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BUFF::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BUFF::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BUFF::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BUFF::id() const {
  return *id_;
}
inline void BUFF::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BUFF::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BUFF::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BUFF::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* BUFF::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BUFF::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 type = 2 [default = 0];
inline bool BUFF::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BUFF::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BUFF::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BUFF::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BUFF::type() const {
  return type_;
}
inline void BUFF::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required float duration = 3 [default = 0];
inline bool BUFF::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BUFF::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BUFF::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BUFF::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float BUFF::duration() const {
  return duration_;
}
inline void BUFF::set_duration(float value) {
  set_has_duration();
  duration_ = value;
}

// required float durationGrow = 4 [default = 0];
inline bool BUFF::has_durationgrow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BUFF::set_has_durationgrow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BUFF::clear_has_durationgrow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BUFF::clear_durationgrow() {
  durationgrow_ = 0;
  clear_has_durationgrow();
}
inline float BUFF::durationgrow() const {
  return durationgrow_;
}
inline void BUFF::set_durationgrow(float value) {
  set_has_durationgrow();
  durationgrow_ = value;
}

// required float interval = 5 [default = 0];
inline bool BUFF::has_interval() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BUFF::set_has_interval() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BUFF::clear_has_interval() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BUFF::clear_interval() {
  interval_ = 0;
  clear_has_interval();
}
inline float BUFF::interval() const {
  return interval_;
}
inline void BUFF::set_interval(float value) {
  set_has_interval();
  interval_ = value;
}

// required int32 value = 6 [default = 0];
inline bool BUFF::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BUFF::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BUFF::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BUFF::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 BUFF::value() const {
  return value_;
}
inline void BUFF::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// required int32 valueGrow = 7 [default = 0];
inline bool BUFF::has_valuegrow() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BUFF::set_has_valuegrow() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BUFF::clear_has_valuegrow() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BUFF::clear_valuegrow() {
  valuegrow_ = 0;
  clear_has_valuegrow();
}
inline ::google::protobuf::int32 BUFF::valuegrow() const {
  return valuegrow_;
}
inline void BUFF::set_valuegrow(::google::protobuf::int32 value) {
  set_has_valuegrow();
  valuegrow_ = value;
}

// required int32 useType = 8 [default = 0];
inline bool BUFF::has_usetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BUFF::set_has_usetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BUFF::clear_has_usetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BUFF::clear_usetype() {
  usetype_ = 0;
  clear_has_usetype();
}
inline ::google::protobuf::int32 BUFF::usetype() const {
  return usetype_;
}
inline void BUFF::set_usetype(::google::protobuf::int32 value) {
  set_has_usetype();
  usetype_ = value;
}

// required int32 lifeLine = 9 [default = 0];
inline bool BUFF::has_lifeline() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BUFF::set_has_lifeline() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BUFF::clear_has_lifeline() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BUFF::clear_lifeline() {
  lifeline_ = 0;
  clear_has_lifeline();
}
inline ::google::protobuf::int32 BUFF::lifeline() const {
  return lifeline_;
}
inline void BUFF::set_lifeline(::google::protobuf::int32 value) {
  set_has_lifeline();
  lifeline_ = value;
}

// required int32 buffType = 10 [default = 0];
inline bool BUFF::has_bufftype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BUFF::set_has_bufftype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BUFF::clear_has_bufftype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BUFF::clear_bufftype() {
  bufftype_ = 0;
  clear_has_bufftype();
}
inline ::google::protobuf::int32 BUFF::bufftype() const {
  return bufftype_;
}
inline void BUFF::set_bufftype(::google::protobuf::int32 value) {
  set_has_bufftype();
  bufftype_ = value;
}

// required int32 maxLimitCount = 11 [default = 0];
inline bool BUFF::has_maxlimitcount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BUFF::set_has_maxlimitcount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BUFF::clear_has_maxlimitcount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BUFF::clear_maxlimitcount() {
  maxlimitcount_ = 0;
  clear_has_maxlimitcount();
}
inline ::google::protobuf::int32 BUFF::maxlimitcount() const {
  return maxlimitcount_;
}
inline void BUFF::set_maxlimitcount(::google::protobuf::int32 value) {
  set_has_maxlimitcount();
  maxlimitcount_ = value;
}

// -------------------------------------------------------------------

// BUFF_ARRAY

// repeated .BUFF items = 1;
inline int BUFF_ARRAY::items_size() const {
  return items_.size();
}
inline void BUFF_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::BUFF& BUFF_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::BUFF* BUFF_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::BUFF* BUFF_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BUFF >&
BUFF_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::BUFF >*
BUFF_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// CHAPTERMAP

// required string id = 1 [default = ""];
inline bool CHAPTERMAP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CHAPTERMAP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CHAPTERMAP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CHAPTERMAP::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& CHAPTERMAP::id() const {
  return *id_;
}
inline void CHAPTERMAP::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void CHAPTERMAP::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void CHAPTERMAP::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CHAPTERMAP::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* CHAPTERMAP::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CHAPTERMAP::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 capterType = 2 [default = 0];
inline bool CHAPTERMAP::has_captertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CHAPTERMAP::set_has_captertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CHAPTERMAP::clear_has_captertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CHAPTERMAP::clear_captertype() {
  captertype_ = 0;
  clear_has_captertype();
}
inline ::google::protobuf::int32 CHAPTERMAP::captertype() const {
  return captertype_;
}
inline void CHAPTERMAP::set_captertype(::google::protobuf::int32 value) {
  set_has_captertype();
  captertype_ = value;
}

// required int32 pointType = 3 [default = 0];
inline bool CHAPTERMAP::has_pointtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CHAPTERMAP::set_has_pointtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CHAPTERMAP::clear_has_pointtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CHAPTERMAP::clear_pointtype() {
  pointtype_ = 0;
  clear_has_pointtype();
}
inline ::google::protobuf::int32 CHAPTERMAP::pointtype() const {
  return pointtype_;
}
inline void CHAPTERMAP::set_pointtype(::google::protobuf::int32 value) {
  set_has_pointtype();
  pointtype_ = value;
}

// required int32 openLevel = 4 [default = 0];
inline bool CHAPTERMAP::has_openlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CHAPTERMAP::set_has_openlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CHAPTERMAP::clear_has_openlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CHAPTERMAP::clear_openlevel() {
  openlevel_ = 0;
  clear_has_openlevel();
}
inline ::google::protobuf::int32 CHAPTERMAP::openlevel() const {
  return openlevel_;
}
inline void CHAPTERMAP::set_openlevel(::google::protobuf::int32 value) {
  set_has_openlevel();
  openlevel_ = value;
}

// -------------------------------------------------------------------

// CHAPTERMAP_ARRAY

// repeated .CHAPTERMAP items = 1;
inline int CHAPTERMAP_ARRAY::items_size() const {
  return items_.size();
}
inline void CHAPTERMAP_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::CHAPTERMAP& CHAPTERMAP_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::CHAPTERMAP* CHAPTERMAP_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::CHAPTERMAP* CHAPTERMAP_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CHAPTERMAP >&
CHAPTERMAP_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::CHAPTERMAP >*
CHAPTERMAP_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// COINPRICE

// required string id = 1 [default = ""];
inline bool COINPRICE::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void COINPRICE::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void COINPRICE::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void COINPRICE::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& COINPRICE::id() const {
  return *id_;
}
inline void COINPRICE::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void COINPRICE::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void COINPRICE::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* COINPRICE::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* COINPRICE::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void COINPRICE::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 needGems = 2 [default = 0];
inline bool COINPRICE::has_needgems() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void COINPRICE::set_has_needgems() {
  _has_bits_[0] |= 0x00000002u;
}
inline void COINPRICE::clear_has_needgems() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void COINPRICE::clear_needgems() {
  needgems_ = 0;
  clear_has_needgems();
}
inline ::google::protobuf::int32 COINPRICE::needgems() const {
  return needgems_;
}
inline void COINPRICE::set_needgems(::google::protobuf::int32 value) {
  set_has_needgems();
  needgems_ = value;
}

// -------------------------------------------------------------------

// COINPRICE_ARRAY

// repeated .COINPRICE items = 1;
inline int COINPRICE_ARRAY::items_size() const {
  return items_.size();
}
inline void COINPRICE_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::COINPRICE& COINPRICE_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::COINPRICE* COINPRICE_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::COINPRICE* COINPRICE_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::COINPRICE >&
COINPRICE_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::COINPRICE >*
COINPRICE_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// EQUIP

// required string id = 1 [default = ""];
inline bool EQUIP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EQUIP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EQUIP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EQUIP::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& EQUIP::id() const {
  return *id_;
}
inline void EQUIP::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EQUIP::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EQUIP::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EQUIP::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* EQUIP::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EQUIP::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pos = 2 [default = 0];
inline bool EQUIP::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EQUIP::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EQUIP::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EQUIP::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 EQUIP::pos() const {
  return pos_;
}
inline void EQUIP::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// required string name_ch = 3 [default = ""];
inline bool EQUIP::has_name_ch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EQUIP::set_has_name_ch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EQUIP::clear_has_name_ch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EQUIP::clear_name_ch() {
  if (name_ch_ != &::google::protobuf::internal::kEmptyString) {
    name_ch_->clear();
  }
  clear_has_name_ch();
}
inline const ::std::string& EQUIP::name_ch() const {
  return *name_ch_;
}
inline void EQUIP::set_name_ch(const ::std::string& value) {
  set_has_name_ch();
  if (name_ch_ == &::google::protobuf::internal::kEmptyString) {
    name_ch_ = new ::std::string;
  }
  name_ch_->assign(value);
}
inline void EQUIP::set_name_ch(const char* value) {
  set_has_name_ch();
  if (name_ch_ == &::google::protobuf::internal::kEmptyString) {
    name_ch_ = new ::std::string;
  }
  name_ch_->assign(value);
}
inline void EQUIP::set_name_ch(const char* value, size_t size) {
  set_has_name_ch();
  if (name_ch_ == &::google::protobuf::internal::kEmptyString) {
    name_ch_ = new ::std::string;
  }
  name_ch_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EQUIP::mutable_name_ch() {
  set_has_name_ch();
  if (name_ch_ == &::google::protobuf::internal::kEmptyString) {
    name_ch_ = new ::std::string;
  }
  return name_ch_;
}
inline ::std::string* EQUIP::release_name_ch() {
  clear_has_name_ch();
  if (name_ch_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_ch_;
    name_ch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EQUIP::set_allocated_name_ch(::std::string* name_ch) {
  if (name_ch_ != &::google::protobuf::internal::kEmptyString) {
    delete name_ch_;
  }
  if (name_ch) {
    set_has_name_ch();
    name_ch_ = name_ch;
  } else {
    clear_has_name_ch();
    name_ch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name_en = 4 [default = ""];
inline bool EQUIP::has_name_en() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EQUIP::set_has_name_en() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EQUIP::clear_has_name_en() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EQUIP::clear_name_en() {
  if (name_en_ != &::google::protobuf::internal::kEmptyString) {
    name_en_->clear();
  }
  clear_has_name_en();
}
inline const ::std::string& EQUIP::name_en() const {
  return *name_en_;
}
inline void EQUIP::set_name_en(const ::std::string& value) {
  set_has_name_en();
  if (name_en_ == &::google::protobuf::internal::kEmptyString) {
    name_en_ = new ::std::string;
  }
  name_en_->assign(value);
}
inline void EQUIP::set_name_en(const char* value) {
  set_has_name_en();
  if (name_en_ == &::google::protobuf::internal::kEmptyString) {
    name_en_ = new ::std::string;
  }
  name_en_->assign(value);
}
inline void EQUIP::set_name_en(const char* value, size_t size) {
  set_has_name_en();
  if (name_en_ == &::google::protobuf::internal::kEmptyString) {
    name_en_ = new ::std::string;
  }
  name_en_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EQUIP::mutable_name_en() {
  set_has_name_en();
  if (name_en_ == &::google::protobuf::internal::kEmptyString) {
    name_en_ = new ::std::string;
  }
  return name_en_;
}
inline ::std::string* EQUIP::release_name_en() {
  clear_has_name_en();
  if (name_en_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_en_;
    name_en_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EQUIP::set_allocated_name_en(::std::string* name_en) {
  if (name_en_ != &::google::protobuf::internal::kEmptyString) {
    delete name_en_;
  }
  if (name_en) {
    set_has_name_en();
    name_en_ = name_en;
  } else {
    clear_has_name_en();
    name_en_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 quality = 5 [default = 0];
inline bool EQUIP::has_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EQUIP::set_has_quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EQUIP::clear_has_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EQUIP::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 EQUIP::quality() const {
  return quality_;
}
inline void EQUIP::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// required int32 health = 6 [default = 0];
inline bool EQUIP::has_health() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EQUIP::set_has_health() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EQUIP::clear_has_health() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EQUIP::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 EQUIP::health() const {
  return health_;
}
inline void EQUIP::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// required int32 healthGrow = 7 [default = 0];
inline bool EQUIP::has_healthgrow() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EQUIP::set_has_healthgrow() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EQUIP::clear_has_healthgrow() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EQUIP::clear_healthgrow() {
  healthgrow_ = 0;
  clear_has_healthgrow();
}
inline ::google::protobuf::int32 EQUIP::healthgrow() const {
  return healthgrow_;
}
inline void EQUIP::set_healthgrow(::google::protobuf::int32 value) {
  set_has_healthgrow();
  healthgrow_ = value;
}

// required int32 damage = 8 [default = 0];
inline bool EQUIP::has_damage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EQUIP::set_has_damage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EQUIP::clear_has_damage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EQUIP::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 EQUIP::damage() const {
  return damage_;
}
inline void EQUIP::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// required int32 damageGrow = 9 [default = 0];
inline bool EQUIP::has_damagegrow() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EQUIP::set_has_damagegrow() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EQUIP::clear_has_damagegrow() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EQUIP::clear_damagegrow() {
  damagegrow_ = 0;
  clear_has_damagegrow();
}
inline ::google::protobuf::int32 EQUIP::damagegrow() const {
  return damagegrow_;
}
inline void EQUIP::set_damagegrow(::google::protobuf::int32 value) {
  set_has_damagegrow();
  damagegrow_ = value;
}

// required int32 pdd = 10 [default = 0];
inline bool EQUIP::has_pdd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EQUIP::set_has_pdd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EQUIP::clear_has_pdd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EQUIP::clear_pdd() {
  pdd_ = 0;
  clear_has_pdd();
}
inline ::google::protobuf::int32 EQUIP::pdd() const {
  return pdd_;
}
inline void EQUIP::set_pdd(::google::protobuf::int32 value) {
  set_has_pdd();
  pdd_ = value;
}

// required int32 pddGrow = 11 [default = 0];
inline bool EQUIP::has_pddgrow() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EQUIP::set_has_pddgrow() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EQUIP::clear_has_pddgrow() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EQUIP::clear_pddgrow() {
  pddgrow_ = 0;
  clear_has_pddgrow();
}
inline ::google::protobuf::int32 EQUIP::pddgrow() const {
  return pddgrow_;
}
inline void EQUIP::set_pddgrow(::google::protobuf::int32 value) {
  set_has_pddgrow();
  pddgrow_ = value;
}

// required int32 mdd = 12 [default = 0];
inline bool EQUIP::has_mdd() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EQUIP::set_has_mdd() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EQUIP::clear_has_mdd() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EQUIP::clear_mdd() {
  mdd_ = 0;
  clear_has_mdd();
}
inline ::google::protobuf::int32 EQUIP::mdd() const {
  return mdd_;
}
inline void EQUIP::set_mdd(::google::protobuf::int32 value) {
  set_has_mdd();
  mdd_ = value;
}

// required int32 mddGrow = 13 [default = 0];
inline bool EQUIP::has_mddgrow() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void EQUIP::set_has_mddgrow() {
  _has_bits_[0] |= 0x00001000u;
}
inline void EQUIP::clear_has_mddgrow() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void EQUIP::clear_mddgrow() {
  mddgrow_ = 0;
  clear_has_mddgrow();
}
inline ::google::protobuf::int32 EQUIP::mddgrow() const {
  return mddgrow_;
}
inline void EQUIP::set_mddgrow(::google::protobuf::int32 value) {
  set_has_mddgrow();
  mddgrow_ = value;
}

// required int32 hitLevel = 14 [default = 0];
inline bool EQUIP::has_hitlevel() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void EQUIP::set_has_hitlevel() {
  _has_bits_[0] |= 0x00002000u;
}
inline void EQUIP::clear_has_hitlevel() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void EQUIP::clear_hitlevel() {
  hitlevel_ = 0;
  clear_has_hitlevel();
}
inline ::google::protobuf::int32 EQUIP::hitlevel() const {
  return hitlevel_;
}
inline void EQUIP::set_hitlevel(::google::protobuf::int32 value) {
  set_has_hitlevel();
  hitlevel_ = value;
}

// required int32 hitGrow = 15 [default = 0];
inline bool EQUIP::has_hitgrow() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void EQUIP::set_has_hitgrow() {
  _has_bits_[0] |= 0x00004000u;
}
inline void EQUIP::clear_has_hitgrow() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void EQUIP::clear_hitgrow() {
  hitgrow_ = 0;
  clear_has_hitgrow();
}
inline ::google::protobuf::int32 EQUIP::hitgrow() const {
  return hitgrow_;
}
inline void EQUIP::set_hitgrow(::google::protobuf::int32 value) {
  set_has_hitgrow();
  hitgrow_ = value;
}

// required int32 dodgeLevel = 16 [default = 0];
inline bool EQUIP::has_dodgelevel() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void EQUIP::set_has_dodgelevel() {
  _has_bits_[0] |= 0x00008000u;
}
inline void EQUIP::clear_has_dodgelevel() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void EQUIP::clear_dodgelevel() {
  dodgelevel_ = 0;
  clear_has_dodgelevel();
}
inline ::google::protobuf::int32 EQUIP::dodgelevel() const {
  return dodgelevel_;
}
inline void EQUIP::set_dodgelevel(::google::protobuf::int32 value) {
  set_has_dodgelevel();
  dodgelevel_ = value;
}

// required int32 dodgeGrow = 17 [default = 0];
inline bool EQUIP::has_dodgegrow() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void EQUIP::set_has_dodgegrow() {
  _has_bits_[0] |= 0x00010000u;
}
inline void EQUIP::clear_has_dodgegrow() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void EQUIP::clear_dodgegrow() {
  dodgegrow_ = 0;
  clear_has_dodgegrow();
}
inline ::google::protobuf::int32 EQUIP::dodgegrow() const {
  return dodgegrow_;
}
inline void EQUIP::set_dodgegrow(::google::protobuf::int32 value) {
  set_has_dodgegrow();
  dodgegrow_ = value;
}

// required int32 criLevel = 18 [default = 0];
inline bool EQUIP::has_crilevel() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void EQUIP::set_has_crilevel() {
  _has_bits_[0] |= 0x00020000u;
}
inline void EQUIP::clear_has_crilevel() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void EQUIP::clear_crilevel() {
  crilevel_ = 0;
  clear_has_crilevel();
}
inline ::google::protobuf::int32 EQUIP::crilevel() const {
  return crilevel_;
}
inline void EQUIP::set_crilevel(::google::protobuf::int32 value) {
  set_has_crilevel();
  crilevel_ = value;
}

// required int32 criGrow = 19 [default = 0];
inline bool EQUIP::has_crigrow() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void EQUIP::set_has_crigrow() {
  _has_bits_[0] |= 0x00040000u;
}
inline void EQUIP::clear_has_crigrow() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void EQUIP::clear_crigrow() {
  crigrow_ = 0;
  clear_has_crigrow();
}
inline ::google::protobuf::int32 EQUIP::crigrow() const {
  return crigrow_;
}
inline void EQUIP::set_crigrow(::google::protobuf::int32 value) {
  set_has_crigrow();
  crigrow_ = value;
}

// required int32 tenacityLevel = 20 [default = 0];
inline bool EQUIP::has_tenacitylevel() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void EQUIP::set_has_tenacitylevel() {
  _has_bits_[0] |= 0x00080000u;
}
inline void EQUIP::clear_has_tenacitylevel() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void EQUIP::clear_tenacitylevel() {
  tenacitylevel_ = 0;
  clear_has_tenacitylevel();
}
inline ::google::protobuf::int32 EQUIP::tenacitylevel() const {
  return tenacitylevel_;
}
inline void EQUIP::set_tenacitylevel(::google::protobuf::int32 value) {
  set_has_tenacitylevel();
  tenacitylevel_ = value;
}

// required int32 tenacityGrow = 21 [default = 0];
inline bool EQUIP::has_tenacitygrow() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void EQUIP::set_has_tenacitygrow() {
  _has_bits_[0] |= 0x00100000u;
}
inline void EQUIP::clear_has_tenacitygrow() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void EQUIP::clear_tenacitygrow() {
  tenacitygrow_ = 0;
  clear_has_tenacitygrow();
}
inline ::google::protobuf::int32 EQUIP::tenacitygrow() const {
  return tenacitygrow_;
}
inline void EQUIP::set_tenacitygrow(::google::protobuf::int32 value) {
  set_has_tenacitygrow();
  tenacitygrow_ = value;
}

// required int32 pddPierce = 22 [default = 0];
inline bool EQUIP::has_pddpierce() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void EQUIP::set_has_pddpierce() {
  _has_bits_[0] |= 0x00200000u;
}
inline void EQUIP::clear_has_pddpierce() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void EQUIP::clear_pddpierce() {
  pddpierce_ = 0;
  clear_has_pddpierce();
}
inline ::google::protobuf::int32 EQUIP::pddpierce() const {
  return pddpierce_;
}
inline void EQUIP::set_pddpierce(::google::protobuf::int32 value) {
  set_has_pddpierce();
  pddpierce_ = value;
}

// required int32 pddPierceGrow = 23 [default = 0];
inline bool EQUIP::has_pddpiercegrow() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void EQUIP::set_has_pddpiercegrow() {
  _has_bits_[0] |= 0x00400000u;
}
inline void EQUIP::clear_has_pddpiercegrow() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void EQUIP::clear_pddpiercegrow() {
  pddpiercegrow_ = 0;
  clear_has_pddpiercegrow();
}
inline ::google::protobuf::int32 EQUIP::pddpiercegrow() const {
  return pddpiercegrow_;
}
inline void EQUIP::set_pddpiercegrow(::google::protobuf::int32 value) {
  set_has_pddpiercegrow();
  pddpiercegrow_ = value;
}

// required string needs = 24 [default = ""];
inline bool EQUIP::has_needs() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void EQUIP::set_has_needs() {
  _has_bits_[0] |= 0x00800000u;
}
inline void EQUIP::clear_has_needs() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void EQUIP::clear_needs() {
  if (needs_ != &::google::protobuf::internal::kEmptyString) {
    needs_->clear();
  }
  clear_has_needs();
}
inline const ::std::string& EQUIP::needs() const {
  return *needs_;
}
inline void EQUIP::set_needs(const ::std::string& value) {
  set_has_needs();
  if (needs_ == &::google::protobuf::internal::kEmptyString) {
    needs_ = new ::std::string;
  }
  needs_->assign(value);
}
inline void EQUIP::set_needs(const char* value) {
  set_has_needs();
  if (needs_ == &::google::protobuf::internal::kEmptyString) {
    needs_ = new ::std::string;
  }
  needs_->assign(value);
}
inline void EQUIP::set_needs(const char* value, size_t size) {
  set_has_needs();
  if (needs_ == &::google::protobuf::internal::kEmptyString) {
    needs_ = new ::std::string;
  }
  needs_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EQUIP::mutable_needs() {
  set_has_needs();
  if (needs_ == &::google::protobuf::internal::kEmptyString) {
    needs_ = new ::std::string;
  }
  return needs_;
}
inline ::std::string* EQUIP::release_needs() {
  clear_has_needs();
  if (needs_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = needs_;
    needs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EQUIP::set_allocated_needs(::std::string* needs) {
  if (needs_ != &::google::protobuf::internal::kEmptyString) {
    delete needs_;
  }
  if (needs) {
    set_has_needs();
    needs_ = needs;
  } else {
    clear_has_needs();
    needs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string needCounts = 25 [default = ""];
inline bool EQUIP::has_needcounts() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void EQUIP::set_has_needcounts() {
  _has_bits_[0] |= 0x01000000u;
}
inline void EQUIP::clear_has_needcounts() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void EQUIP::clear_needcounts() {
  if (needcounts_ != &::google::protobuf::internal::kEmptyString) {
    needcounts_->clear();
  }
  clear_has_needcounts();
}
inline const ::std::string& EQUIP::needcounts() const {
  return *needcounts_;
}
inline void EQUIP::set_needcounts(const ::std::string& value) {
  set_has_needcounts();
  if (needcounts_ == &::google::protobuf::internal::kEmptyString) {
    needcounts_ = new ::std::string;
  }
  needcounts_->assign(value);
}
inline void EQUIP::set_needcounts(const char* value) {
  set_has_needcounts();
  if (needcounts_ == &::google::protobuf::internal::kEmptyString) {
    needcounts_ = new ::std::string;
  }
  needcounts_->assign(value);
}
inline void EQUIP::set_needcounts(const char* value, size_t size) {
  set_has_needcounts();
  if (needcounts_ == &::google::protobuf::internal::kEmptyString) {
    needcounts_ = new ::std::string;
  }
  needcounts_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EQUIP::mutable_needcounts() {
  set_has_needcounts();
  if (needcounts_ == &::google::protobuf::internal::kEmptyString) {
    needcounts_ = new ::std::string;
  }
  return needcounts_;
}
inline ::std::string* EQUIP::release_needcounts() {
  clear_has_needcounts();
  if (needcounts_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = needcounts_;
    needcounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EQUIP::set_allocated_needcounts(::std::string* needcounts) {
  if (needcounts_ != &::google::protobuf::internal::kEmptyString) {
    delete needcounts_;
  }
  if (needcounts) {
    set_has_needcounts();
    needcounts_ = needcounts;
  } else {
    clear_has_needcounts();
    needcounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string nextId = 26 [default = ""];
inline bool EQUIP::has_nextid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void EQUIP::set_has_nextid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void EQUIP::clear_has_nextid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void EQUIP::clear_nextid() {
  if (nextid_ != &::google::protobuf::internal::kEmptyString) {
    nextid_->clear();
  }
  clear_has_nextid();
}
inline const ::std::string& EQUIP::nextid() const {
  return *nextid_;
}
inline void EQUIP::set_nextid(const ::std::string& value) {
  set_has_nextid();
  if (nextid_ == &::google::protobuf::internal::kEmptyString) {
    nextid_ = new ::std::string;
  }
  nextid_->assign(value);
}
inline void EQUIP::set_nextid(const char* value) {
  set_has_nextid();
  if (nextid_ == &::google::protobuf::internal::kEmptyString) {
    nextid_ = new ::std::string;
  }
  nextid_->assign(value);
}
inline void EQUIP::set_nextid(const char* value, size_t size) {
  set_has_nextid();
  if (nextid_ == &::google::protobuf::internal::kEmptyString) {
    nextid_ = new ::std::string;
  }
  nextid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EQUIP::mutable_nextid() {
  set_has_nextid();
  if (nextid_ == &::google::protobuf::internal::kEmptyString) {
    nextid_ = new ::std::string;
  }
  return nextid_;
}
inline ::std::string* EQUIP::release_nextid() {
  clear_has_nextid();
  if (nextid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nextid_;
    nextid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EQUIP::set_allocated_nextid(::std::string* nextid) {
  if (nextid_ != &::google::protobuf::internal::kEmptyString) {
    delete nextid_;
  }
  if (nextid) {
    set_has_nextid();
    nextid_ = nextid;
  } else {
    clear_has_nextid();
    nextid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string icon = 27 [default = ""];
inline bool EQUIP::has_icon() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void EQUIP::set_has_icon() {
  _has_bits_[0] |= 0x04000000u;
}
inline void EQUIP::clear_has_icon() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void EQUIP::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& EQUIP::icon() const {
  return *icon_;
}
inline void EQUIP::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void EQUIP::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void EQUIP::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EQUIP::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* EQUIP::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EQUIP::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EQUIP_ARRAY

// repeated .EQUIP items = 1;
inline int EQUIP_ARRAY::items_size() const {
  return items_.size();
}
inline void EQUIP_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::EQUIP& EQUIP_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::EQUIP* EQUIP_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::EQUIP* EQUIP_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EQUIP >&
EQUIP_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::EQUIP >*
EQUIP_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// EVOLUTIONCOIN

// required string id = 1 [default = ""];
inline bool EVOLUTIONCOIN::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EVOLUTIONCOIN::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EVOLUTIONCOIN::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EVOLUTIONCOIN::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& EVOLUTIONCOIN::id() const {
  return *id_;
}
inline void EVOLUTIONCOIN::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EVOLUTIONCOIN::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void EVOLUTIONCOIN::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EVOLUTIONCOIN::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* EVOLUTIONCOIN::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EVOLUTIONCOIN::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string equip_Weapon = 2 [default = ""];
inline bool EVOLUTIONCOIN::has_equip_weapon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EVOLUTIONCOIN::set_has_equip_weapon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EVOLUTIONCOIN::clear_has_equip_weapon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EVOLUTIONCOIN::clear_equip_weapon() {
  if (equip_weapon_ != &::google::protobuf::internal::kEmptyString) {
    equip_weapon_->clear();
  }
  clear_has_equip_weapon();
}
inline const ::std::string& EVOLUTIONCOIN::equip_weapon() const {
  return *equip_weapon_;
}
inline void EVOLUTIONCOIN::set_equip_weapon(const ::std::string& value) {
  set_has_equip_weapon();
  if (equip_weapon_ == &::google::protobuf::internal::kEmptyString) {
    equip_weapon_ = new ::std::string;
  }
  equip_weapon_->assign(value);
}
inline void EVOLUTIONCOIN::set_equip_weapon(const char* value) {
  set_has_equip_weapon();
  if (equip_weapon_ == &::google::protobuf::internal::kEmptyString) {
    equip_weapon_ = new ::std::string;
  }
  equip_weapon_->assign(value);
}
inline void EVOLUTIONCOIN::set_equip_weapon(const char* value, size_t size) {
  set_has_equip_weapon();
  if (equip_weapon_ == &::google::protobuf::internal::kEmptyString) {
    equip_weapon_ = new ::std::string;
  }
  equip_weapon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EVOLUTIONCOIN::mutable_equip_weapon() {
  set_has_equip_weapon();
  if (equip_weapon_ == &::google::protobuf::internal::kEmptyString) {
    equip_weapon_ = new ::std::string;
  }
  return equip_weapon_;
}
inline ::std::string* EVOLUTIONCOIN::release_equip_weapon() {
  clear_has_equip_weapon();
  if (equip_weapon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_weapon_;
    equip_weapon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EVOLUTIONCOIN::set_allocated_equip_weapon(::std::string* equip_weapon) {
  if (equip_weapon_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_weapon_;
  }
  if (equip_weapon) {
    set_has_equip_weapon();
    equip_weapon_ = equip_weapon;
  } else {
    clear_has_equip_weapon();
    equip_weapon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string equip_Necklace = 3 [default = ""];
inline bool EVOLUTIONCOIN::has_equip_necklace() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EVOLUTIONCOIN::set_has_equip_necklace() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EVOLUTIONCOIN::clear_has_equip_necklace() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EVOLUTIONCOIN::clear_equip_necklace() {
  if (equip_necklace_ != &::google::protobuf::internal::kEmptyString) {
    equip_necklace_->clear();
  }
  clear_has_equip_necklace();
}
inline const ::std::string& EVOLUTIONCOIN::equip_necklace() const {
  return *equip_necklace_;
}
inline void EVOLUTIONCOIN::set_equip_necklace(const ::std::string& value) {
  set_has_equip_necklace();
  if (equip_necklace_ == &::google::protobuf::internal::kEmptyString) {
    equip_necklace_ = new ::std::string;
  }
  equip_necklace_->assign(value);
}
inline void EVOLUTIONCOIN::set_equip_necklace(const char* value) {
  set_has_equip_necklace();
  if (equip_necklace_ == &::google::protobuf::internal::kEmptyString) {
    equip_necklace_ = new ::std::string;
  }
  equip_necklace_->assign(value);
}
inline void EVOLUTIONCOIN::set_equip_necklace(const char* value, size_t size) {
  set_has_equip_necklace();
  if (equip_necklace_ == &::google::protobuf::internal::kEmptyString) {
    equip_necklace_ = new ::std::string;
  }
  equip_necklace_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EVOLUTIONCOIN::mutable_equip_necklace() {
  set_has_equip_necklace();
  if (equip_necklace_ == &::google::protobuf::internal::kEmptyString) {
    equip_necklace_ = new ::std::string;
  }
  return equip_necklace_;
}
inline ::std::string* EVOLUTIONCOIN::release_equip_necklace() {
  clear_has_equip_necklace();
  if (equip_necklace_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_necklace_;
    equip_necklace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EVOLUTIONCOIN::set_allocated_equip_necklace(::std::string* equip_necklace) {
  if (equip_necklace_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_necklace_;
  }
  if (equip_necklace) {
    set_has_equip_necklace();
    equip_necklace_ = equip_necklace;
  } else {
    clear_has_equip_necklace();
    equip_necklace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string equip_Clothes = 4 [default = ""];
inline bool EVOLUTIONCOIN::has_equip_clothes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EVOLUTIONCOIN::set_has_equip_clothes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EVOLUTIONCOIN::clear_has_equip_clothes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EVOLUTIONCOIN::clear_equip_clothes() {
  if (equip_clothes_ != &::google::protobuf::internal::kEmptyString) {
    equip_clothes_->clear();
  }
  clear_has_equip_clothes();
}
inline const ::std::string& EVOLUTIONCOIN::equip_clothes() const {
  return *equip_clothes_;
}
inline void EVOLUTIONCOIN::set_equip_clothes(const ::std::string& value) {
  set_has_equip_clothes();
  if (equip_clothes_ == &::google::protobuf::internal::kEmptyString) {
    equip_clothes_ = new ::std::string;
  }
  equip_clothes_->assign(value);
}
inline void EVOLUTIONCOIN::set_equip_clothes(const char* value) {
  set_has_equip_clothes();
  if (equip_clothes_ == &::google::protobuf::internal::kEmptyString) {
    equip_clothes_ = new ::std::string;
  }
  equip_clothes_->assign(value);
}
inline void EVOLUTIONCOIN::set_equip_clothes(const char* value, size_t size) {
  set_has_equip_clothes();
  if (equip_clothes_ == &::google::protobuf::internal::kEmptyString) {
    equip_clothes_ = new ::std::string;
  }
  equip_clothes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EVOLUTIONCOIN::mutable_equip_clothes() {
  set_has_equip_clothes();
  if (equip_clothes_ == &::google::protobuf::internal::kEmptyString) {
    equip_clothes_ = new ::std::string;
  }
  return equip_clothes_;
}
inline ::std::string* EVOLUTIONCOIN::release_equip_clothes() {
  clear_has_equip_clothes();
  if (equip_clothes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_clothes_;
    equip_clothes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EVOLUTIONCOIN::set_allocated_equip_clothes(::std::string* equip_clothes) {
  if (equip_clothes_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_clothes_;
  }
  if (equip_clothes) {
    set_has_equip_clothes();
    equip_clothes_ = equip_clothes;
  } else {
    clear_has_equip_clothes();
    equip_clothes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string equip_Belt = 5 [default = ""];
inline bool EVOLUTIONCOIN::has_equip_belt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EVOLUTIONCOIN::set_has_equip_belt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EVOLUTIONCOIN::clear_has_equip_belt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EVOLUTIONCOIN::clear_equip_belt() {
  if (equip_belt_ != &::google::protobuf::internal::kEmptyString) {
    equip_belt_->clear();
  }
  clear_has_equip_belt();
}
inline const ::std::string& EVOLUTIONCOIN::equip_belt() const {
  return *equip_belt_;
}
inline void EVOLUTIONCOIN::set_equip_belt(const ::std::string& value) {
  set_has_equip_belt();
  if (equip_belt_ == &::google::protobuf::internal::kEmptyString) {
    equip_belt_ = new ::std::string;
  }
  equip_belt_->assign(value);
}
inline void EVOLUTIONCOIN::set_equip_belt(const char* value) {
  set_has_equip_belt();
  if (equip_belt_ == &::google::protobuf::internal::kEmptyString) {
    equip_belt_ = new ::std::string;
  }
  equip_belt_->assign(value);
}
inline void EVOLUTIONCOIN::set_equip_belt(const char* value, size_t size) {
  set_has_equip_belt();
  if (equip_belt_ == &::google::protobuf::internal::kEmptyString) {
    equip_belt_ = new ::std::string;
  }
  equip_belt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EVOLUTIONCOIN::mutable_equip_belt() {
  set_has_equip_belt();
  if (equip_belt_ == &::google::protobuf::internal::kEmptyString) {
    equip_belt_ = new ::std::string;
  }
  return equip_belt_;
}
inline ::std::string* EVOLUTIONCOIN::release_equip_belt() {
  clear_has_equip_belt();
  if (equip_belt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_belt_;
    equip_belt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EVOLUTIONCOIN::set_allocated_equip_belt(::std::string* equip_belt) {
  if (equip_belt_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_belt_;
  }
  if (equip_belt) {
    set_has_equip_belt();
    equip_belt_ = equip_belt;
  } else {
    clear_has_equip_belt();
    equip_belt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string equip_Ring = 6 [default = ""];
inline bool EVOLUTIONCOIN::has_equip_ring() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EVOLUTIONCOIN::set_has_equip_ring() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EVOLUTIONCOIN::clear_has_equip_ring() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EVOLUTIONCOIN::clear_equip_ring() {
  if (equip_ring_ != &::google::protobuf::internal::kEmptyString) {
    equip_ring_->clear();
  }
  clear_has_equip_ring();
}
inline const ::std::string& EVOLUTIONCOIN::equip_ring() const {
  return *equip_ring_;
}
inline void EVOLUTIONCOIN::set_equip_ring(const ::std::string& value) {
  set_has_equip_ring();
  if (equip_ring_ == &::google::protobuf::internal::kEmptyString) {
    equip_ring_ = new ::std::string;
  }
  equip_ring_->assign(value);
}
inline void EVOLUTIONCOIN::set_equip_ring(const char* value) {
  set_has_equip_ring();
  if (equip_ring_ == &::google::protobuf::internal::kEmptyString) {
    equip_ring_ = new ::std::string;
  }
  equip_ring_->assign(value);
}
inline void EVOLUTIONCOIN::set_equip_ring(const char* value, size_t size) {
  set_has_equip_ring();
  if (equip_ring_ == &::google::protobuf::internal::kEmptyString) {
    equip_ring_ = new ::std::string;
  }
  equip_ring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EVOLUTIONCOIN::mutable_equip_ring() {
  set_has_equip_ring();
  if (equip_ring_ == &::google::protobuf::internal::kEmptyString) {
    equip_ring_ = new ::std::string;
  }
  return equip_ring_;
}
inline ::std::string* EVOLUTIONCOIN::release_equip_ring() {
  clear_has_equip_ring();
  if (equip_ring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_ring_;
    equip_ring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EVOLUTIONCOIN::set_allocated_equip_ring(::std::string* equip_ring) {
  if (equip_ring_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_ring_;
  }
  if (equip_ring) {
    set_has_equip_ring();
    equip_ring_ = equip_ring;
  } else {
    clear_has_equip_ring();
    equip_ring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string equip_Boot = 7 [default = ""];
inline bool EVOLUTIONCOIN::has_equip_boot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EVOLUTIONCOIN::set_has_equip_boot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EVOLUTIONCOIN::clear_has_equip_boot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EVOLUTIONCOIN::clear_equip_boot() {
  if (equip_boot_ != &::google::protobuf::internal::kEmptyString) {
    equip_boot_->clear();
  }
  clear_has_equip_boot();
}
inline const ::std::string& EVOLUTIONCOIN::equip_boot() const {
  return *equip_boot_;
}
inline void EVOLUTIONCOIN::set_equip_boot(const ::std::string& value) {
  set_has_equip_boot();
  if (equip_boot_ == &::google::protobuf::internal::kEmptyString) {
    equip_boot_ = new ::std::string;
  }
  equip_boot_->assign(value);
}
inline void EVOLUTIONCOIN::set_equip_boot(const char* value) {
  set_has_equip_boot();
  if (equip_boot_ == &::google::protobuf::internal::kEmptyString) {
    equip_boot_ = new ::std::string;
  }
  equip_boot_->assign(value);
}
inline void EVOLUTIONCOIN::set_equip_boot(const char* value, size_t size) {
  set_has_equip_boot();
  if (equip_boot_ == &::google::protobuf::internal::kEmptyString) {
    equip_boot_ = new ::std::string;
  }
  equip_boot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EVOLUTIONCOIN::mutable_equip_boot() {
  set_has_equip_boot();
  if (equip_boot_ == &::google::protobuf::internal::kEmptyString) {
    equip_boot_ = new ::std::string;
  }
  return equip_boot_;
}
inline ::std::string* EVOLUTIONCOIN::release_equip_boot() {
  clear_has_equip_boot();
  if (equip_boot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_boot_;
    equip_boot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EVOLUTIONCOIN::set_allocated_equip_boot(::std::string* equip_boot) {
  if (equip_boot_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_boot_;
  }
  if (equip_boot) {
    set_has_equip_boot();
    equip_boot_ = equip_boot;
  } else {
    clear_has_equip_boot();
    equip_boot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EVOLUTIONCOIN_ARRAY

// repeated .EVOLUTIONCOIN items = 1;
inline int EVOLUTIONCOIN_ARRAY::items_size() const {
  return items_.size();
}
inline void EVOLUTIONCOIN_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::EVOLUTIONCOIN& EVOLUTIONCOIN_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::EVOLUTIONCOIN* EVOLUTIONCOIN_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::EVOLUTIONCOIN* EVOLUTIONCOIN_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EVOLUTIONCOIN >&
EVOLUTIONCOIN_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::EVOLUTIONCOIN >*
EVOLUTIONCOIN_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// HEROPROP

// required string id = 1 [default = ""];
inline bool HEROPROP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HEROPROP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HEROPROP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HEROPROP::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& HEROPROP::id() const {
  return *id_;
}
inline void HEROPROP::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void HEROPROP::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void HEROPROP::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* HEROPROP::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 area = 2 [default = 0];
inline bool HEROPROP::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HEROPROP::set_has_area() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HEROPROP::clear_has_area() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HEROPROP::clear_area() {
  area_ = 0;
  clear_has_area();
}
inline ::google::protobuf::int32 HEROPROP::area() const {
  return area_;
}
inline void HEROPROP::set_area(::google::protobuf::int32 value) {
  set_has_area();
  area_ = value;
}

// required int32 property = 3 [default = 0];
inline bool HEROPROP::has_property() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HEROPROP::set_has_property() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HEROPROP::clear_has_property() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HEROPROP::clear_property() {
  property_ = 0;
  clear_has_property();
}
inline ::google::protobuf::int32 HEROPROP::property() const {
  return property_;
}
inline void HEROPROP::set_property(::google::protobuf::int32 value) {
  set_has_property();
  property_ = value;
}

// required int32 occupation = 4 [default = 0];
inline bool HEROPROP::has_occupation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HEROPROP::set_has_occupation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HEROPROP::clear_has_occupation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HEROPROP::clear_occupation() {
  occupation_ = 0;
  clear_has_occupation();
}
inline ::google::protobuf::int32 HEROPROP::occupation() const {
  return occupation_;
}
inline void HEROPROP::set_occupation(::google::protobuf::int32 value) {
  set_has_occupation();
  occupation_ = value;
}

// required int32 health = 5 [default = 0];
inline bool HEROPROP::has_health() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HEROPROP::set_has_health() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HEROPROP::clear_has_health() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HEROPROP::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 HEROPROP::health() const {
  return health_;
}
inline void HEROPROP::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// required string healthGrow = 6 [default = ""];
inline bool HEROPROP::has_healthgrow() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HEROPROP::set_has_healthgrow() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HEROPROP::clear_has_healthgrow() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HEROPROP::clear_healthgrow() {
  if (healthgrow_ != &::google::protobuf::internal::kEmptyString) {
    healthgrow_->clear();
  }
  clear_has_healthgrow();
}
inline const ::std::string& HEROPROP::healthgrow() const {
  return *healthgrow_;
}
inline void HEROPROP::set_healthgrow(const ::std::string& value) {
  set_has_healthgrow();
  if (healthgrow_ == &::google::protobuf::internal::kEmptyString) {
    healthgrow_ = new ::std::string;
  }
  healthgrow_->assign(value);
}
inline void HEROPROP::set_healthgrow(const char* value) {
  set_has_healthgrow();
  if (healthgrow_ == &::google::protobuf::internal::kEmptyString) {
    healthgrow_ = new ::std::string;
  }
  healthgrow_->assign(value);
}
inline void HEROPROP::set_healthgrow(const char* value, size_t size) {
  set_has_healthgrow();
  if (healthgrow_ == &::google::protobuf::internal::kEmptyString) {
    healthgrow_ = new ::std::string;
  }
  healthgrow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_healthgrow() {
  set_has_healthgrow();
  if (healthgrow_ == &::google::protobuf::internal::kEmptyString) {
    healthgrow_ = new ::std::string;
  }
  return healthgrow_;
}
inline ::std::string* HEROPROP::release_healthgrow() {
  clear_has_healthgrow();
  if (healthgrow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = healthgrow_;
    healthgrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_healthgrow(::std::string* healthgrow) {
  if (healthgrow_ != &::google::protobuf::internal::kEmptyString) {
    delete healthgrow_;
  }
  if (healthgrow) {
    set_has_healthgrow();
    healthgrow_ = healthgrow;
  } else {
    clear_has_healthgrow();
    healthgrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 damage = 7 [default = 0];
inline bool HEROPROP::has_damage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HEROPROP::set_has_damage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HEROPROP::clear_has_damage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HEROPROP::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 HEROPROP::damage() const {
  return damage_;
}
inline void HEROPROP::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// required string damageGrow = 8 [default = ""];
inline bool HEROPROP::has_damagegrow() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HEROPROP::set_has_damagegrow() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HEROPROP::clear_has_damagegrow() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HEROPROP::clear_damagegrow() {
  if (damagegrow_ != &::google::protobuf::internal::kEmptyString) {
    damagegrow_->clear();
  }
  clear_has_damagegrow();
}
inline const ::std::string& HEROPROP::damagegrow() const {
  return *damagegrow_;
}
inline void HEROPROP::set_damagegrow(const ::std::string& value) {
  set_has_damagegrow();
  if (damagegrow_ == &::google::protobuf::internal::kEmptyString) {
    damagegrow_ = new ::std::string;
  }
  damagegrow_->assign(value);
}
inline void HEROPROP::set_damagegrow(const char* value) {
  set_has_damagegrow();
  if (damagegrow_ == &::google::protobuf::internal::kEmptyString) {
    damagegrow_ = new ::std::string;
  }
  damagegrow_->assign(value);
}
inline void HEROPROP::set_damagegrow(const char* value, size_t size) {
  set_has_damagegrow();
  if (damagegrow_ == &::google::protobuf::internal::kEmptyString) {
    damagegrow_ = new ::std::string;
  }
  damagegrow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_damagegrow() {
  set_has_damagegrow();
  if (damagegrow_ == &::google::protobuf::internal::kEmptyString) {
    damagegrow_ = new ::std::string;
  }
  return damagegrow_;
}
inline ::std::string* HEROPROP::release_damagegrow() {
  clear_has_damagegrow();
  if (damagegrow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = damagegrow_;
    damagegrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_damagegrow(::std::string* damagegrow) {
  if (damagegrow_ != &::google::protobuf::internal::kEmptyString) {
    delete damagegrow_;
  }
  if (damagegrow) {
    set_has_damagegrow();
    damagegrow_ = damagegrow;
  } else {
    clear_has_damagegrow();
    damagegrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pdd = 9 [default = 0];
inline bool HEROPROP::has_pdd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HEROPROP::set_has_pdd() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HEROPROP::clear_has_pdd() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HEROPROP::clear_pdd() {
  pdd_ = 0;
  clear_has_pdd();
}
inline ::google::protobuf::int32 HEROPROP::pdd() const {
  return pdd_;
}
inline void HEROPROP::set_pdd(::google::protobuf::int32 value) {
  set_has_pdd();
  pdd_ = value;
}

// required string pddGrow = 10 [default = ""];
inline bool HEROPROP::has_pddgrow() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HEROPROP::set_has_pddgrow() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HEROPROP::clear_has_pddgrow() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HEROPROP::clear_pddgrow() {
  if (pddgrow_ != &::google::protobuf::internal::kEmptyString) {
    pddgrow_->clear();
  }
  clear_has_pddgrow();
}
inline const ::std::string& HEROPROP::pddgrow() const {
  return *pddgrow_;
}
inline void HEROPROP::set_pddgrow(const ::std::string& value) {
  set_has_pddgrow();
  if (pddgrow_ == &::google::protobuf::internal::kEmptyString) {
    pddgrow_ = new ::std::string;
  }
  pddgrow_->assign(value);
}
inline void HEROPROP::set_pddgrow(const char* value) {
  set_has_pddgrow();
  if (pddgrow_ == &::google::protobuf::internal::kEmptyString) {
    pddgrow_ = new ::std::string;
  }
  pddgrow_->assign(value);
}
inline void HEROPROP::set_pddgrow(const char* value, size_t size) {
  set_has_pddgrow();
  if (pddgrow_ == &::google::protobuf::internal::kEmptyString) {
    pddgrow_ = new ::std::string;
  }
  pddgrow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_pddgrow() {
  set_has_pddgrow();
  if (pddgrow_ == &::google::protobuf::internal::kEmptyString) {
    pddgrow_ = new ::std::string;
  }
  return pddgrow_;
}
inline ::std::string* HEROPROP::release_pddgrow() {
  clear_has_pddgrow();
  if (pddgrow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pddgrow_;
    pddgrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_pddgrow(::std::string* pddgrow) {
  if (pddgrow_ != &::google::protobuf::internal::kEmptyString) {
    delete pddgrow_;
  }
  if (pddgrow) {
    set_has_pddgrow();
    pddgrow_ = pddgrow;
  } else {
    clear_has_pddgrow();
    pddgrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 mdd = 11 [default = 0];
inline bool HEROPROP::has_mdd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HEROPROP::set_has_mdd() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HEROPROP::clear_has_mdd() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HEROPROP::clear_mdd() {
  mdd_ = 0;
  clear_has_mdd();
}
inline ::google::protobuf::int32 HEROPROP::mdd() const {
  return mdd_;
}
inline void HEROPROP::set_mdd(::google::protobuf::int32 value) {
  set_has_mdd();
  mdd_ = value;
}

// required string mddGrow = 12 [default = ""];
inline bool HEROPROP::has_mddgrow() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HEROPROP::set_has_mddgrow() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HEROPROP::clear_has_mddgrow() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HEROPROP::clear_mddgrow() {
  if (mddgrow_ != &::google::protobuf::internal::kEmptyString) {
    mddgrow_->clear();
  }
  clear_has_mddgrow();
}
inline const ::std::string& HEROPROP::mddgrow() const {
  return *mddgrow_;
}
inline void HEROPROP::set_mddgrow(const ::std::string& value) {
  set_has_mddgrow();
  if (mddgrow_ == &::google::protobuf::internal::kEmptyString) {
    mddgrow_ = new ::std::string;
  }
  mddgrow_->assign(value);
}
inline void HEROPROP::set_mddgrow(const char* value) {
  set_has_mddgrow();
  if (mddgrow_ == &::google::protobuf::internal::kEmptyString) {
    mddgrow_ = new ::std::string;
  }
  mddgrow_->assign(value);
}
inline void HEROPROP::set_mddgrow(const char* value, size_t size) {
  set_has_mddgrow();
  if (mddgrow_ == &::google::protobuf::internal::kEmptyString) {
    mddgrow_ = new ::std::string;
  }
  mddgrow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_mddgrow() {
  set_has_mddgrow();
  if (mddgrow_ == &::google::protobuf::internal::kEmptyString) {
    mddgrow_ = new ::std::string;
  }
  return mddgrow_;
}
inline ::std::string* HEROPROP::release_mddgrow() {
  clear_has_mddgrow();
  if (mddgrow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mddgrow_;
    mddgrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_mddgrow(::std::string* mddgrow) {
  if (mddgrow_ != &::google::protobuf::internal::kEmptyString) {
    delete mddgrow_;
  }
  if (mddgrow) {
    set_has_mddgrow();
    mddgrow_ = mddgrow;
  } else {
    clear_has_mddgrow();
    mddgrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 hitLevel = 13 [default = 0];
inline bool HEROPROP::has_hitlevel() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HEROPROP::set_has_hitlevel() {
  _has_bits_[0] |= 0x00001000u;
}
inline void HEROPROP::clear_has_hitlevel() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void HEROPROP::clear_hitlevel() {
  hitlevel_ = 0;
  clear_has_hitlevel();
}
inline ::google::protobuf::int32 HEROPROP::hitlevel() const {
  return hitlevel_;
}
inline void HEROPROP::set_hitlevel(::google::protobuf::int32 value) {
  set_has_hitlevel();
  hitlevel_ = value;
}

// required string hitGrow = 14 [default = ""];
inline bool HEROPROP::has_hitgrow() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void HEROPROP::set_has_hitgrow() {
  _has_bits_[0] |= 0x00002000u;
}
inline void HEROPROP::clear_has_hitgrow() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void HEROPROP::clear_hitgrow() {
  if (hitgrow_ != &::google::protobuf::internal::kEmptyString) {
    hitgrow_->clear();
  }
  clear_has_hitgrow();
}
inline const ::std::string& HEROPROP::hitgrow() const {
  return *hitgrow_;
}
inline void HEROPROP::set_hitgrow(const ::std::string& value) {
  set_has_hitgrow();
  if (hitgrow_ == &::google::protobuf::internal::kEmptyString) {
    hitgrow_ = new ::std::string;
  }
  hitgrow_->assign(value);
}
inline void HEROPROP::set_hitgrow(const char* value) {
  set_has_hitgrow();
  if (hitgrow_ == &::google::protobuf::internal::kEmptyString) {
    hitgrow_ = new ::std::string;
  }
  hitgrow_->assign(value);
}
inline void HEROPROP::set_hitgrow(const char* value, size_t size) {
  set_has_hitgrow();
  if (hitgrow_ == &::google::protobuf::internal::kEmptyString) {
    hitgrow_ = new ::std::string;
  }
  hitgrow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_hitgrow() {
  set_has_hitgrow();
  if (hitgrow_ == &::google::protobuf::internal::kEmptyString) {
    hitgrow_ = new ::std::string;
  }
  return hitgrow_;
}
inline ::std::string* HEROPROP::release_hitgrow() {
  clear_has_hitgrow();
  if (hitgrow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hitgrow_;
    hitgrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_hitgrow(::std::string* hitgrow) {
  if (hitgrow_ != &::google::protobuf::internal::kEmptyString) {
    delete hitgrow_;
  }
  if (hitgrow) {
    set_has_hitgrow();
    hitgrow_ = hitgrow;
  } else {
    clear_has_hitgrow();
    hitgrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 dodgeLevel = 15 [default = 0];
inline bool HEROPROP::has_dodgelevel() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void HEROPROP::set_has_dodgelevel() {
  _has_bits_[0] |= 0x00004000u;
}
inline void HEROPROP::clear_has_dodgelevel() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void HEROPROP::clear_dodgelevel() {
  dodgelevel_ = 0;
  clear_has_dodgelevel();
}
inline ::google::protobuf::int32 HEROPROP::dodgelevel() const {
  return dodgelevel_;
}
inline void HEROPROP::set_dodgelevel(::google::protobuf::int32 value) {
  set_has_dodgelevel();
  dodgelevel_ = value;
}

// required string dodgeGrow = 16 [default = ""];
inline bool HEROPROP::has_dodgegrow() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void HEROPROP::set_has_dodgegrow() {
  _has_bits_[0] |= 0x00008000u;
}
inline void HEROPROP::clear_has_dodgegrow() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void HEROPROP::clear_dodgegrow() {
  if (dodgegrow_ != &::google::protobuf::internal::kEmptyString) {
    dodgegrow_->clear();
  }
  clear_has_dodgegrow();
}
inline const ::std::string& HEROPROP::dodgegrow() const {
  return *dodgegrow_;
}
inline void HEROPROP::set_dodgegrow(const ::std::string& value) {
  set_has_dodgegrow();
  if (dodgegrow_ == &::google::protobuf::internal::kEmptyString) {
    dodgegrow_ = new ::std::string;
  }
  dodgegrow_->assign(value);
}
inline void HEROPROP::set_dodgegrow(const char* value) {
  set_has_dodgegrow();
  if (dodgegrow_ == &::google::protobuf::internal::kEmptyString) {
    dodgegrow_ = new ::std::string;
  }
  dodgegrow_->assign(value);
}
inline void HEROPROP::set_dodgegrow(const char* value, size_t size) {
  set_has_dodgegrow();
  if (dodgegrow_ == &::google::protobuf::internal::kEmptyString) {
    dodgegrow_ = new ::std::string;
  }
  dodgegrow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_dodgegrow() {
  set_has_dodgegrow();
  if (dodgegrow_ == &::google::protobuf::internal::kEmptyString) {
    dodgegrow_ = new ::std::string;
  }
  return dodgegrow_;
}
inline ::std::string* HEROPROP::release_dodgegrow() {
  clear_has_dodgegrow();
  if (dodgegrow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dodgegrow_;
    dodgegrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_dodgegrow(::std::string* dodgegrow) {
  if (dodgegrow_ != &::google::protobuf::internal::kEmptyString) {
    delete dodgegrow_;
  }
  if (dodgegrow) {
    set_has_dodgegrow();
    dodgegrow_ = dodgegrow;
  } else {
    clear_has_dodgegrow();
    dodgegrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 criLevel = 17 [default = 0];
inline bool HEROPROP::has_crilevel() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void HEROPROP::set_has_crilevel() {
  _has_bits_[0] |= 0x00010000u;
}
inline void HEROPROP::clear_has_crilevel() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void HEROPROP::clear_crilevel() {
  crilevel_ = 0;
  clear_has_crilevel();
}
inline ::google::protobuf::int32 HEROPROP::crilevel() const {
  return crilevel_;
}
inline void HEROPROP::set_crilevel(::google::protobuf::int32 value) {
  set_has_crilevel();
  crilevel_ = value;
}

// required string criGrow = 18 [default = ""];
inline bool HEROPROP::has_crigrow() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void HEROPROP::set_has_crigrow() {
  _has_bits_[0] |= 0x00020000u;
}
inline void HEROPROP::clear_has_crigrow() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void HEROPROP::clear_crigrow() {
  if (crigrow_ != &::google::protobuf::internal::kEmptyString) {
    crigrow_->clear();
  }
  clear_has_crigrow();
}
inline const ::std::string& HEROPROP::crigrow() const {
  return *crigrow_;
}
inline void HEROPROP::set_crigrow(const ::std::string& value) {
  set_has_crigrow();
  if (crigrow_ == &::google::protobuf::internal::kEmptyString) {
    crigrow_ = new ::std::string;
  }
  crigrow_->assign(value);
}
inline void HEROPROP::set_crigrow(const char* value) {
  set_has_crigrow();
  if (crigrow_ == &::google::protobuf::internal::kEmptyString) {
    crigrow_ = new ::std::string;
  }
  crigrow_->assign(value);
}
inline void HEROPROP::set_crigrow(const char* value, size_t size) {
  set_has_crigrow();
  if (crigrow_ == &::google::protobuf::internal::kEmptyString) {
    crigrow_ = new ::std::string;
  }
  crigrow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_crigrow() {
  set_has_crigrow();
  if (crigrow_ == &::google::protobuf::internal::kEmptyString) {
    crigrow_ = new ::std::string;
  }
  return crigrow_;
}
inline ::std::string* HEROPROP::release_crigrow() {
  clear_has_crigrow();
  if (crigrow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = crigrow_;
    crigrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_crigrow(::std::string* crigrow) {
  if (crigrow_ != &::google::protobuf::internal::kEmptyString) {
    delete crigrow_;
  }
  if (crigrow) {
    set_has_crigrow();
    crigrow_ = crigrow;
  } else {
    clear_has_crigrow();
    crigrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 tenacityLevel = 19 [default = 0];
inline bool HEROPROP::has_tenacitylevel() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void HEROPROP::set_has_tenacitylevel() {
  _has_bits_[0] |= 0x00040000u;
}
inline void HEROPROP::clear_has_tenacitylevel() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void HEROPROP::clear_tenacitylevel() {
  tenacitylevel_ = 0;
  clear_has_tenacitylevel();
}
inline ::google::protobuf::int32 HEROPROP::tenacitylevel() const {
  return tenacitylevel_;
}
inline void HEROPROP::set_tenacitylevel(::google::protobuf::int32 value) {
  set_has_tenacitylevel();
  tenacitylevel_ = value;
}

// required string tenacityGrow = 20 [default = ""];
inline bool HEROPROP::has_tenacitygrow() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void HEROPROP::set_has_tenacitygrow() {
  _has_bits_[0] |= 0x00080000u;
}
inline void HEROPROP::clear_has_tenacitygrow() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void HEROPROP::clear_tenacitygrow() {
  if (tenacitygrow_ != &::google::protobuf::internal::kEmptyString) {
    tenacitygrow_->clear();
  }
  clear_has_tenacitygrow();
}
inline const ::std::string& HEROPROP::tenacitygrow() const {
  return *tenacitygrow_;
}
inline void HEROPROP::set_tenacitygrow(const ::std::string& value) {
  set_has_tenacitygrow();
  if (tenacitygrow_ == &::google::protobuf::internal::kEmptyString) {
    tenacitygrow_ = new ::std::string;
  }
  tenacitygrow_->assign(value);
}
inline void HEROPROP::set_tenacitygrow(const char* value) {
  set_has_tenacitygrow();
  if (tenacitygrow_ == &::google::protobuf::internal::kEmptyString) {
    tenacitygrow_ = new ::std::string;
  }
  tenacitygrow_->assign(value);
}
inline void HEROPROP::set_tenacitygrow(const char* value, size_t size) {
  set_has_tenacitygrow();
  if (tenacitygrow_ == &::google::protobuf::internal::kEmptyString) {
    tenacitygrow_ = new ::std::string;
  }
  tenacitygrow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_tenacitygrow() {
  set_has_tenacitygrow();
  if (tenacitygrow_ == &::google::protobuf::internal::kEmptyString) {
    tenacitygrow_ = new ::std::string;
  }
  return tenacitygrow_;
}
inline ::std::string* HEROPROP::release_tenacitygrow() {
  clear_has_tenacitygrow();
  if (tenacitygrow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tenacitygrow_;
    tenacitygrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_tenacitygrow(::std::string* tenacitygrow) {
  if (tenacitygrow_ != &::google::protobuf::internal::kEmptyString) {
    delete tenacitygrow_;
  }
  if (tenacitygrow) {
    set_has_tenacitygrow();
    tenacitygrow_ = tenacitygrow;
  } else {
    clear_has_tenacitygrow();
    tenacitygrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 pddPierce = 21 [default = 0];
inline bool HEROPROP::has_pddpierce() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void HEROPROP::set_has_pddpierce() {
  _has_bits_[0] |= 0x00100000u;
}
inline void HEROPROP::clear_has_pddpierce() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void HEROPROP::clear_pddpierce() {
  pddpierce_ = 0;
  clear_has_pddpierce();
}
inline ::google::protobuf::int32 HEROPROP::pddpierce() const {
  return pddpierce_;
}
inline void HEROPROP::set_pddpierce(::google::protobuf::int32 value) {
  set_has_pddpierce();
  pddpierce_ = value;
}

// required string pddPierceGrow = 22 [default = ""];
inline bool HEROPROP::has_pddpiercegrow() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void HEROPROP::set_has_pddpiercegrow() {
  _has_bits_[0] |= 0x00200000u;
}
inline void HEROPROP::clear_has_pddpiercegrow() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void HEROPROP::clear_pddpiercegrow() {
  if (pddpiercegrow_ != &::google::protobuf::internal::kEmptyString) {
    pddpiercegrow_->clear();
  }
  clear_has_pddpiercegrow();
}
inline const ::std::string& HEROPROP::pddpiercegrow() const {
  return *pddpiercegrow_;
}
inline void HEROPROP::set_pddpiercegrow(const ::std::string& value) {
  set_has_pddpiercegrow();
  if (pddpiercegrow_ == &::google::protobuf::internal::kEmptyString) {
    pddpiercegrow_ = new ::std::string;
  }
  pddpiercegrow_->assign(value);
}
inline void HEROPROP::set_pddpiercegrow(const char* value) {
  set_has_pddpiercegrow();
  if (pddpiercegrow_ == &::google::protobuf::internal::kEmptyString) {
    pddpiercegrow_ = new ::std::string;
  }
  pddpiercegrow_->assign(value);
}
inline void HEROPROP::set_pddpiercegrow(const char* value, size_t size) {
  set_has_pddpiercegrow();
  if (pddpiercegrow_ == &::google::protobuf::internal::kEmptyString) {
    pddpiercegrow_ = new ::std::string;
  }
  pddpiercegrow_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_pddpiercegrow() {
  set_has_pddpiercegrow();
  if (pddpiercegrow_ == &::google::protobuf::internal::kEmptyString) {
    pddpiercegrow_ = new ::std::string;
  }
  return pddpiercegrow_;
}
inline ::std::string* HEROPROP::release_pddpiercegrow() {
  clear_has_pddpiercegrow();
  if (pddpiercegrow_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pddpiercegrow_;
    pddpiercegrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_pddpiercegrow(::std::string* pddpiercegrow) {
  if (pddpiercegrow_ != &::google::protobuf::internal::kEmptyString) {
    delete pddpiercegrow_;
  }
  if (pddpiercegrow) {
    set_has_pddpiercegrow();
    pddpiercegrow_ = pddpiercegrow;
  } else {
    clear_has_pddpiercegrow();
    pddpiercegrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 type_Normal = 23 [default = 0];
inline bool HEROPROP::has_type_normal() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void HEROPROP::set_has_type_normal() {
  _has_bits_[0] |= 0x00400000u;
}
inline void HEROPROP::clear_has_type_normal() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void HEROPROP::clear_type_normal() {
  type_normal_ = 0;
  clear_has_type_normal();
}
inline ::google::protobuf::int32 HEROPROP::type_normal() const {
  return type_normal_;
}
inline void HEROPROP::set_type_normal(::google::protobuf::int32 value) {
  set_has_type_normal();
  type_normal_ = value;
}

// required int32 type_Skill = 24 [default = 0];
inline bool HEROPROP::has_type_skill() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void HEROPROP::set_has_type_skill() {
  _has_bits_[0] |= 0x00800000u;
}
inline void HEROPROP::clear_has_type_skill() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void HEROPROP::clear_type_skill() {
  type_skill_ = 0;
  clear_has_type_skill();
}
inline ::google::protobuf::int32 HEROPROP::type_skill() const {
  return type_skill_;
}
inline void HEROPROP::set_type_skill(::google::protobuf::int32 value) {
  set_has_type_skill();
  type_skill_ = value;
}

// required int32 percent_Skill = 25 [default = 0];
inline bool HEROPROP::has_percent_skill() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void HEROPROP::set_has_percent_skill() {
  _has_bits_[0] |= 0x01000000u;
}
inline void HEROPROP::clear_has_percent_skill() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void HEROPROP::clear_percent_skill() {
  percent_skill_ = 0;
  clear_has_percent_skill();
}
inline ::google::protobuf::int32 HEROPROP::percent_skill() const {
  return percent_skill_;
}
inline void HEROPROP::set_percent_skill(::google::protobuf::int32 value) {
  set_has_percent_skill();
  percent_skill_ = value;
}

// required int32 addNum_Skill = 26 [default = 0];
inline bool HEROPROP::has_addnum_skill() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void HEROPROP::set_has_addnum_skill() {
  _has_bits_[0] |= 0x02000000u;
}
inline void HEROPROP::clear_has_addnum_skill() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void HEROPROP::clear_addnum_skill() {
  addnum_skill_ = 0;
  clear_has_addnum_skill();
}
inline ::google::protobuf::int32 HEROPROP::addnum_skill() const {
  return addnum_skill_;
}
inline void HEROPROP::set_addnum_skill(::google::protobuf::int32 value) {
  set_has_addnum_skill();
  addnum_skill_ = value;
}

// required int32 addNumGrow_Skill = 27 [default = 0];
inline bool HEROPROP::has_addnumgrow_skill() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void HEROPROP::set_has_addnumgrow_skill() {
  _has_bits_[0] |= 0x04000000u;
}
inline void HEROPROP::clear_has_addnumgrow_skill() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void HEROPROP::clear_addnumgrow_skill() {
  addnumgrow_skill_ = 0;
  clear_has_addnumgrow_skill();
}
inline ::google::protobuf::int32 HEROPROP::addnumgrow_skill() const {
  return addnumgrow_skill_;
}
inline void HEROPROP::set_addnumgrow_skill(::google::protobuf::int32 value) {
  set_has_addnumgrow_skill();
  addnumgrow_skill_ = value;
}

// required int32 type_AoYi = 28 [default = 0];
inline bool HEROPROP::has_type_aoyi() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void HEROPROP::set_has_type_aoyi() {
  _has_bits_[0] |= 0x08000000u;
}
inline void HEROPROP::clear_has_type_aoyi() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void HEROPROP::clear_type_aoyi() {
  type_aoyi_ = 0;
  clear_has_type_aoyi();
}
inline ::google::protobuf::int32 HEROPROP::type_aoyi() const {
  return type_aoyi_;
}
inline void HEROPROP::set_type_aoyi(::google::protobuf::int32 value) {
  set_has_type_aoyi();
  type_aoyi_ = value;
}

// required int32 percent_AoYi = 29 [default = 0];
inline bool HEROPROP::has_percent_aoyi() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void HEROPROP::set_has_percent_aoyi() {
  _has_bits_[0] |= 0x10000000u;
}
inline void HEROPROP::clear_has_percent_aoyi() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void HEROPROP::clear_percent_aoyi() {
  percent_aoyi_ = 0;
  clear_has_percent_aoyi();
}
inline ::google::protobuf::int32 HEROPROP::percent_aoyi() const {
  return percent_aoyi_;
}
inline void HEROPROP::set_percent_aoyi(::google::protobuf::int32 value) {
  set_has_percent_aoyi();
  percent_aoyi_ = value;
}

// required int32 addNum_AoYi = 30 [default = 0];
inline bool HEROPROP::has_addnum_aoyi() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void HEROPROP::set_has_addnum_aoyi() {
  _has_bits_[0] |= 0x20000000u;
}
inline void HEROPROP::clear_has_addnum_aoyi() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void HEROPROP::clear_addnum_aoyi() {
  addnum_aoyi_ = 0;
  clear_has_addnum_aoyi();
}
inline ::google::protobuf::int32 HEROPROP::addnum_aoyi() const {
  return addnum_aoyi_;
}
inline void HEROPROP::set_addnum_aoyi(::google::protobuf::int32 value) {
  set_has_addnum_aoyi();
  addnum_aoyi_ = value;
}

// required int32 addNumGrow_AoYi = 31 [default = 0];
inline bool HEROPROP::has_addnumgrow_aoyi() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void HEROPROP::set_has_addnumgrow_aoyi() {
  _has_bits_[0] |= 0x40000000u;
}
inline void HEROPROP::clear_has_addnumgrow_aoyi() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void HEROPROP::clear_addnumgrow_aoyi() {
  addnumgrow_aoyi_ = 0;
  clear_has_addnumgrow_aoyi();
}
inline ::google::protobuf::int32 HEROPROP::addnumgrow_aoyi() const {
  return addnumgrow_aoyi_;
}
inline void HEROPROP::set_addnumgrow_aoyi(::google::protobuf::int32 value) {
  set_has_addnumgrow_aoyi();
  addnumgrow_aoyi_ = value;
}

// required string passiveSkill_1 = 32 [default = ""];
inline bool HEROPROP::has_passiveskill_1() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void HEROPROP::set_has_passiveskill_1() {
  _has_bits_[0] |= 0x80000000u;
}
inline void HEROPROP::clear_has_passiveskill_1() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void HEROPROP::clear_passiveskill_1() {
  if (passiveskill_1_ != &::google::protobuf::internal::kEmptyString) {
    passiveskill_1_->clear();
  }
  clear_has_passiveskill_1();
}
inline const ::std::string& HEROPROP::passiveskill_1() const {
  return *passiveskill_1_;
}
inline void HEROPROP::set_passiveskill_1(const ::std::string& value) {
  set_has_passiveskill_1();
  if (passiveskill_1_ == &::google::protobuf::internal::kEmptyString) {
    passiveskill_1_ = new ::std::string;
  }
  passiveskill_1_->assign(value);
}
inline void HEROPROP::set_passiveskill_1(const char* value) {
  set_has_passiveskill_1();
  if (passiveskill_1_ == &::google::protobuf::internal::kEmptyString) {
    passiveskill_1_ = new ::std::string;
  }
  passiveskill_1_->assign(value);
}
inline void HEROPROP::set_passiveskill_1(const char* value, size_t size) {
  set_has_passiveskill_1();
  if (passiveskill_1_ == &::google::protobuf::internal::kEmptyString) {
    passiveskill_1_ = new ::std::string;
  }
  passiveskill_1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_passiveskill_1() {
  set_has_passiveskill_1();
  if (passiveskill_1_ == &::google::protobuf::internal::kEmptyString) {
    passiveskill_1_ = new ::std::string;
  }
  return passiveskill_1_;
}
inline ::std::string* HEROPROP::release_passiveskill_1() {
  clear_has_passiveskill_1();
  if (passiveskill_1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passiveskill_1_;
    passiveskill_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_passiveskill_1(::std::string* passiveskill_1) {
  if (passiveskill_1_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskill_1_;
  }
  if (passiveskill_1) {
    set_has_passiveskill_1();
    passiveskill_1_ = passiveskill_1;
  } else {
    clear_has_passiveskill_1();
    passiveskill_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passiveSkill_2 = 33 [default = ""];
inline bool HEROPROP::has_passiveskill_2() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void HEROPROP::set_has_passiveskill_2() {
  _has_bits_[1] |= 0x00000001u;
}
inline void HEROPROP::clear_has_passiveskill_2() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void HEROPROP::clear_passiveskill_2() {
  if (passiveskill_2_ != &::google::protobuf::internal::kEmptyString) {
    passiveskill_2_->clear();
  }
  clear_has_passiveskill_2();
}
inline const ::std::string& HEROPROP::passiveskill_2() const {
  return *passiveskill_2_;
}
inline void HEROPROP::set_passiveskill_2(const ::std::string& value) {
  set_has_passiveskill_2();
  if (passiveskill_2_ == &::google::protobuf::internal::kEmptyString) {
    passiveskill_2_ = new ::std::string;
  }
  passiveskill_2_->assign(value);
}
inline void HEROPROP::set_passiveskill_2(const char* value) {
  set_has_passiveskill_2();
  if (passiveskill_2_ == &::google::protobuf::internal::kEmptyString) {
    passiveskill_2_ = new ::std::string;
  }
  passiveskill_2_->assign(value);
}
inline void HEROPROP::set_passiveskill_2(const char* value, size_t size) {
  set_has_passiveskill_2();
  if (passiveskill_2_ == &::google::protobuf::internal::kEmptyString) {
    passiveskill_2_ = new ::std::string;
  }
  passiveskill_2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_passiveskill_2() {
  set_has_passiveskill_2();
  if (passiveskill_2_ == &::google::protobuf::internal::kEmptyString) {
    passiveskill_2_ = new ::std::string;
  }
  return passiveskill_2_;
}
inline ::std::string* HEROPROP::release_passiveskill_2() {
  clear_has_passiveskill_2();
  if (passiveskill_2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passiveskill_2_;
    passiveskill_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_passiveskill_2(::std::string* passiveskill_2) {
  if (passiveskill_2_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskill_2_;
  }
  if (passiveskill_2) {
    set_has_passiveskill_2();
    passiveskill_2_ = passiveskill_2;
  } else {
    clear_has_passiveskill_2();
    passiveskill_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passiveSkill_3 = 34 [default = ""];
inline bool HEROPROP::has_passiveskill_3() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void HEROPROP::set_has_passiveskill_3() {
  _has_bits_[1] |= 0x00000002u;
}
inline void HEROPROP::clear_has_passiveskill_3() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void HEROPROP::clear_passiveskill_3() {
  if (passiveskill_3_ != &::google::protobuf::internal::kEmptyString) {
    passiveskill_3_->clear();
  }
  clear_has_passiveskill_3();
}
inline const ::std::string& HEROPROP::passiveskill_3() const {
  return *passiveskill_3_;
}
inline void HEROPROP::set_passiveskill_3(const ::std::string& value) {
  set_has_passiveskill_3();
  if (passiveskill_3_ == &::google::protobuf::internal::kEmptyString) {
    passiveskill_3_ = new ::std::string;
  }
  passiveskill_3_->assign(value);
}
inline void HEROPROP::set_passiveskill_3(const char* value) {
  set_has_passiveskill_3();
  if (passiveskill_3_ == &::google::protobuf::internal::kEmptyString) {
    passiveskill_3_ = new ::std::string;
  }
  passiveskill_3_->assign(value);
}
inline void HEROPROP::set_passiveskill_3(const char* value, size_t size) {
  set_has_passiveskill_3();
  if (passiveskill_3_ == &::google::protobuf::internal::kEmptyString) {
    passiveskill_3_ = new ::std::string;
  }
  passiveskill_3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_passiveskill_3() {
  set_has_passiveskill_3();
  if (passiveskill_3_ == &::google::protobuf::internal::kEmptyString) {
    passiveskill_3_ = new ::std::string;
  }
  return passiveskill_3_;
}
inline ::std::string* HEROPROP::release_passiveskill_3() {
  clear_has_passiveskill_3();
  if (passiveskill_3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passiveskill_3_;
    passiveskill_3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_passiveskill_3(::std::string* passiveskill_3) {
  if (passiveskill_3_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskill_3_;
  }
  if (passiveskill_3) {
    set_has_passiveskill_3();
    passiveskill_3_ = passiveskill_3;
  } else {
    clear_has_passiveskill_3();
    passiveskill_3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float range_X = 35 [default = 0];
inline bool HEROPROP::has_range_x() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void HEROPROP::set_has_range_x() {
  _has_bits_[1] |= 0x00000004u;
}
inline void HEROPROP::clear_has_range_x() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void HEROPROP::clear_range_x() {
  range_x_ = 0;
  clear_has_range_x();
}
inline float HEROPROP::range_x() const {
  return range_x_;
}
inline void HEROPROP::set_range_x(float value) {
  set_has_range_x();
  range_x_ = value;
}

// required float range_Y = 36 [default = 0];
inline bool HEROPROP::has_range_y() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void HEROPROP::set_has_range_y() {
  _has_bits_[1] |= 0x00000008u;
}
inline void HEROPROP::clear_has_range_y() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void HEROPROP::clear_range_y() {
  range_y_ = 0;
  clear_has_range_y();
}
inline float HEROPROP::range_y() const {
  return range_y_;
}
inline void HEROPROP::set_range_y(float value) {
  set_has_range_y();
  range_y_ = value;
}

// required float range_Z = 37 [default = 0];
inline bool HEROPROP::has_range_z() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void HEROPROP::set_has_range_z() {
  _has_bits_[1] |= 0x00000010u;
}
inline void HEROPROP::clear_has_range_z() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void HEROPROP::clear_range_z() {
  range_z_ = 0;
  clear_has_range_z();
}
inline float HEROPROP::range_z() const {
  return range_z_;
}
inline void HEROPROP::set_range_z(float value) {
  set_has_range_z();
  range_z_ = value;
}

// required float attackSpeed = 38 [default = 0];
inline bool HEROPROP::has_attackspeed() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void HEROPROP::set_has_attackspeed() {
  _has_bits_[1] |= 0x00000020u;
}
inline void HEROPROP::clear_has_attackspeed() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void HEROPROP::clear_attackspeed() {
  attackspeed_ = 0;
  clear_has_attackspeed();
}
inline float HEROPROP::attackspeed() const {
  return attackspeed_;
}
inline void HEROPROP::set_attackspeed(float value) {
  set_has_attackspeed();
  attackspeed_ = value;
}

// required float h_Dis = 39 [default = 0];
inline bool HEROPROP::has_h_dis() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void HEROPROP::set_has_h_dis() {
  _has_bits_[1] |= 0x00000040u;
}
inline void HEROPROP::clear_has_h_dis() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void HEROPROP::clear_h_dis() {
  h_dis_ = 0;
  clear_has_h_dis();
}
inline float HEROPROP::h_dis() const {
  return h_dis_;
}
inline void HEROPROP::set_h_dis(float value) {
  set_has_h_dis();
  h_dis_ = value;
}

// required float v_Dis = 40 [default = 0];
inline bool HEROPROP::has_v_dis() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void HEROPROP::set_has_v_dis() {
  _has_bits_[1] |= 0x00000080u;
}
inline void HEROPROP::clear_has_v_dis() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void HEROPROP::clear_v_dis() {
  v_dis_ = 0;
  clear_has_v_dis();
}
inline float HEROPROP::v_dis() const {
  return v_dis_;
}
inline void HEROPROP::set_v_dis(float value) {
  set_has_v_dis();
  v_dis_ = value;
}

// required float moveSpeed = 41 [default = 0];
inline bool HEROPROP::has_movespeed() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void HEROPROP::set_has_movespeed() {
  _has_bits_[1] |= 0x00000100u;
}
inline void HEROPROP::clear_has_movespeed() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void HEROPROP::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline float HEROPROP::movespeed() const {
  return movespeed_;
}
inline void HEROPROP::set_movespeed(float value) {
  set_has_movespeed();
  movespeed_ = value;
}

// required int32 star = 42 [default = 0];
inline bool HEROPROP::has_star() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void HEROPROP::set_has_star() {
  _has_bits_[1] |= 0x00000200u;
}
inline void HEROPROP::clear_has_star() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void HEROPROP::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 HEROPROP::star() const {
  return star_;
}
inline void HEROPROP::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// required int32 stage_B = 43 [default = 0];
inline bool HEROPROP::has_stage_b() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void HEROPROP::set_has_stage_b() {
  _has_bits_[1] |= 0x00000400u;
}
inline void HEROPROP::clear_has_stage_b() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void HEROPROP::clear_stage_b() {
  stage_b_ = 0;
  clear_has_stage_b();
}
inline ::google::protobuf::int32 HEROPROP::stage_b() const {
  return stage_b_;
}
inline void HEROPROP::set_stage_b(::google::protobuf::int32 value) {
  set_has_stage_b();
  stage_b_ = value;
}

// required string hitNum_B = 44 [default = ""];
inline bool HEROPROP::has_hitnum_b() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void HEROPROP::set_has_hitnum_b() {
  _has_bits_[1] |= 0x00000800u;
}
inline void HEROPROP::clear_has_hitnum_b() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void HEROPROP::clear_hitnum_b() {
  if (hitnum_b_ != &::google::protobuf::internal::kEmptyString) {
    hitnum_b_->clear();
  }
  clear_has_hitnum_b();
}
inline const ::std::string& HEROPROP::hitnum_b() const {
  return *hitnum_b_;
}
inline void HEROPROP::set_hitnum_b(const ::std::string& value) {
  set_has_hitnum_b();
  if (hitnum_b_ == &::google::protobuf::internal::kEmptyString) {
    hitnum_b_ = new ::std::string;
  }
  hitnum_b_->assign(value);
}
inline void HEROPROP::set_hitnum_b(const char* value) {
  set_has_hitnum_b();
  if (hitnum_b_ == &::google::protobuf::internal::kEmptyString) {
    hitnum_b_ = new ::std::string;
  }
  hitnum_b_->assign(value);
}
inline void HEROPROP::set_hitnum_b(const char* value, size_t size) {
  set_has_hitnum_b();
  if (hitnum_b_ == &::google::protobuf::internal::kEmptyString) {
    hitnum_b_ = new ::std::string;
  }
  hitnum_b_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_hitnum_b() {
  set_has_hitnum_b();
  if (hitnum_b_ == &::google::protobuf::internal::kEmptyString) {
    hitnum_b_ = new ::std::string;
  }
  return hitnum_b_;
}
inline ::std::string* HEROPROP::release_hitnum_b() {
  clear_has_hitnum_b();
  if (hitnum_b_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hitnum_b_;
    hitnum_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_hitnum_b(::std::string* hitnum_b) {
  if (hitnum_b_ != &::google::protobuf::internal::kEmptyString) {
    delete hitnum_b_;
  }
  if (hitnum_b) {
    set_has_hitnum_b();
    hitnum_b_ = hitnum_b;
  } else {
    clear_has_hitnum_b();
    hitnum_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 hitNum_A = 45 [default = 0];
inline bool HEROPROP::has_hitnum_a() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void HEROPROP::set_has_hitnum_a() {
  _has_bits_[1] |= 0x00001000u;
}
inline void HEROPROP::clear_has_hitnum_a() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void HEROPROP::clear_hitnum_a() {
  hitnum_a_ = 0;
  clear_has_hitnum_a();
}
inline ::google::protobuf::int32 HEROPROP::hitnum_a() const {
  return hitnum_a_;
}
inline void HEROPROP::set_hitnum_a(::google::protobuf::int32 value) {
  set_has_hitnum_a();
  hitnum_a_ = value;
}

// required int32 posNum = 46 [default = 0];
inline bool HEROPROP::has_posnum() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void HEROPROP::set_has_posnum() {
  _has_bits_[1] |= 0x00002000u;
}
inline void HEROPROP::clear_has_posnum() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void HEROPROP::clear_posnum() {
  posnum_ = 0;
  clear_has_posnum();
}
inline ::google::protobuf::int32 HEROPROP::posnum() const {
  return posnum_;
}
inline void HEROPROP::set_posnum(::google::protobuf::int32 value) {
  set_has_posnum();
  posnum_ = value;
}

// required float recoverTime_Skill = 47 [default = 0];
inline bool HEROPROP::has_recovertime_skill() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void HEROPROP::set_has_recovertime_skill() {
  _has_bits_[1] |= 0x00004000u;
}
inline void HEROPROP::clear_has_recovertime_skill() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void HEROPROP::clear_recovertime_skill() {
  recovertime_skill_ = 0;
  clear_has_recovertime_skill();
}
inline float HEROPROP::recovertime_skill() const {
  return recovertime_skill_;
}
inline void HEROPROP::set_recovertime_skill(float value) {
  set_has_recovertime_skill();
  recovertime_skill_ = value;
}

// required int32 aoYiNum = 48 [default = 0];
inline bool HEROPROP::has_aoyinum() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void HEROPROP::set_has_aoyinum() {
  _has_bits_[1] |= 0x00008000u;
}
inline void HEROPROP::clear_has_aoyinum() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void HEROPROP::clear_aoyinum() {
  aoyinum_ = 0;
  clear_has_aoyinum();
}
inline ::google::protobuf::int32 HEROPROP::aoyinum() const {
  return aoyinum_;
}
inline void HEROPROP::set_aoyinum(::google::protobuf::int32 value) {
  set_has_aoyinum();
  aoyinum_ = value;
}

// required string equip_Weapon = 49 [default = ""];
inline bool HEROPROP::has_equip_weapon() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void HEROPROP::set_has_equip_weapon() {
  _has_bits_[1] |= 0x00010000u;
}
inline void HEROPROP::clear_has_equip_weapon() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void HEROPROP::clear_equip_weapon() {
  if (equip_weapon_ != &::google::protobuf::internal::kEmptyString) {
    equip_weapon_->clear();
  }
  clear_has_equip_weapon();
}
inline const ::std::string& HEROPROP::equip_weapon() const {
  return *equip_weapon_;
}
inline void HEROPROP::set_equip_weapon(const ::std::string& value) {
  set_has_equip_weapon();
  if (equip_weapon_ == &::google::protobuf::internal::kEmptyString) {
    equip_weapon_ = new ::std::string;
  }
  equip_weapon_->assign(value);
}
inline void HEROPROP::set_equip_weapon(const char* value) {
  set_has_equip_weapon();
  if (equip_weapon_ == &::google::protobuf::internal::kEmptyString) {
    equip_weapon_ = new ::std::string;
  }
  equip_weapon_->assign(value);
}
inline void HEROPROP::set_equip_weapon(const char* value, size_t size) {
  set_has_equip_weapon();
  if (equip_weapon_ == &::google::protobuf::internal::kEmptyString) {
    equip_weapon_ = new ::std::string;
  }
  equip_weapon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_equip_weapon() {
  set_has_equip_weapon();
  if (equip_weapon_ == &::google::protobuf::internal::kEmptyString) {
    equip_weapon_ = new ::std::string;
  }
  return equip_weapon_;
}
inline ::std::string* HEROPROP::release_equip_weapon() {
  clear_has_equip_weapon();
  if (equip_weapon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_weapon_;
    equip_weapon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_equip_weapon(::std::string* equip_weapon) {
  if (equip_weapon_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_weapon_;
  }
  if (equip_weapon) {
    set_has_equip_weapon();
    equip_weapon_ = equip_weapon;
  } else {
    clear_has_equip_weapon();
    equip_weapon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string equip_Necklace = 50 [default = ""];
inline bool HEROPROP::has_equip_necklace() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void HEROPROP::set_has_equip_necklace() {
  _has_bits_[1] |= 0x00020000u;
}
inline void HEROPROP::clear_has_equip_necklace() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void HEROPROP::clear_equip_necklace() {
  if (equip_necklace_ != &::google::protobuf::internal::kEmptyString) {
    equip_necklace_->clear();
  }
  clear_has_equip_necklace();
}
inline const ::std::string& HEROPROP::equip_necklace() const {
  return *equip_necklace_;
}
inline void HEROPROP::set_equip_necklace(const ::std::string& value) {
  set_has_equip_necklace();
  if (equip_necklace_ == &::google::protobuf::internal::kEmptyString) {
    equip_necklace_ = new ::std::string;
  }
  equip_necklace_->assign(value);
}
inline void HEROPROP::set_equip_necklace(const char* value) {
  set_has_equip_necklace();
  if (equip_necklace_ == &::google::protobuf::internal::kEmptyString) {
    equip_necklace_ = new ::std::string;
  }
  equip_necklace_->assign(value);
}
inline void HEROPROP::set_equip_necklace(const char* value, size_t size) {
  set_has_equip_necklace();
  if (equip_necklace_ == &::google::protobuf::internal::kEmptyString) {
    equip_necklace_ = new ::std::string;
  }
  equip_necklace_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_equip_necklace() {
  set_has_equip_necklace();
  if (equip_necklace_ == &::google::protobuf::internal::kEmptyString) {
    equip_necklace_ = new ::std::string;
  }
  return equip_necklace_;
}
inline ::std::string* HEROPROP::release_equip_necklace() {
  clear_has_equip_necklace();
  if (equip_necklace_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_necklace_;
    equip_necklace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_equip_necklace(::std::string* equip_necklace) {
  if (equip_necklace_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_necklace_;
  }
  if (equip_necklace) {
    set_has_equip_necklace();
    equip_necklace_ = equip_necklace;
  } else {
    clear_has_equip_necklace();
    equip_necklace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string equip_Clothes = 51 [default = ""];
inline bool HEROPROP::has_equip_clothes() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void HEROPROP::set_has_equip_clothes() {
  _has_bits_[1] |= 0x00040000u;
}
inline void HEROPROP::clear_has_equip_clothes() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void HEROPROP::clear_equip_clothes() {
  if (equip_clothes_ != &::google::protobuf::internal::kEmptyString) {
    equip_clothes_->clear();
  }
  clear_has_equip_clothes();
}
inline const ::std::string& HEROPROP::equip_clothes() const {
  return *equip_clothes_;
}
inline void HEROPROP::set_equip_clothes(const ::std::string& value) {
  set_has_equip_clothes();
  if (equip_clothes_ == &::google::protobuf::internal::kEmptyString) {
    equip_clothes_ = new ::std::string;
  }
  equip_clothes_->assign(value);
}
inline void HEROPROP::set_equip_clothes(const char* value) {
  set_has_equip_clothes();
  if (equip_clothes_ == &::google::protobuf::internal::kEmptyString) {
    equip_clothes_ = new ::std::string;
  }
  equip_clothes_->assign(value);
}
inline void HEROPROP::set_equip_clothes(const char* value, size_t size) {
  set_has_equip_clothes();
  if (equip_clothes_ == &::google::protobuf::internal::kEmptyString) {
    equip_clothes_ = new ::std::string;
  }
  equip_clothes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_equip_clothes() {
  set_has_equip_clothes();
  if (equip_clothes_ == &::google::protobuf::internal::kEmptyString) {
    equip_clothes_ = new ::std::string;
  }
  return equip_clothes_;
}
inline ::std::string* HEROPROP::release_equip_clothes() {
  clear_has_equip_clothes();
  if (equip_clothes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_clothes_;
    equip_clothes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_equip_clothes(::std::string* equip_clothes) {
  if (equip_clothes_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_clothes_;
  }
  if (equip_clothes) {
    set_has_equip_clothes();
    equip_clothes_ = equip_clothes;
  } else {
    clear_has_equip_clothes();
    equip_clothes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string equip_Belt = 52 [default = ""];
inline bool HEROPROP::has_equip_belt() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void HEROPROP::set_has_equip_belt() {
  _has_bits_[1] |= 0x00080000u;
}
inline void HEROPROP::clear_has_equip_belt() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void HEROPROP::clear_equip_belt() {
  if (equip_belt_ != &::google::protobuf::internal::kEmptyString) {
    equip_belt_->clear();
  }
  clear_has_equip_belt();
}
inline const ::std::string& HEROPROP::equip_belt() const {
  return *equip_belt_;
}
inline void HEROPROP::set_equip_belt(const ::std::string& value) {
  set_has_equip_belt();
  if (equip_belt_ == &::google::protobuf::internal::kEmptyString) {
    equip_belt_ = new ::std::string;
  }
  equip_belt_->assign(value);
}
inline void HEROPROP::set_equip_belt(const char* value) {
  set_has_equip_belt();
  if (equip_belt_ == &::google::protobuf::internal::kEmptyString) {
    equip_belt_ = new ::std::string;
  }
  equip_belt_->assign(value);
}
inline void HEROPROP::set_equip_belt(const char* value, size_t size) {
  set_has_equip_belt();
  if (equip_belt_ == &::google::protobuf::internal::kEmptyString) {
    equip_belt_ = new ::std::string;
  }
  equip_belt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_equip_belt() {
  set_has_equip_belt();
  if (equip_belt_ == &::google::protobuf::internal::kEmptyString) {
    equip_belt_ = new ::std::string;
  }
  return equip_belt_;
}
inline ::std::string* HEROPROP::release_equip_belt() {
  clear_has_equip_belt();
  if (equip_belt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_belt_;
    equip_belt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_equip_belt(::std::string* equip_belt) {
  if (equip_belt_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_belt_;
  }
  if (equip_belt) {
    set_has_equip_belt();
    equip_belt_ = equip_belt;
  } else {
    clear_has_equip_belt();
    equip_belt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string equip_Ring = 53 [default = ""];
inline bool HEROPROP::has_equip_ring() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void HEROPROP::set_has_equip_ring() {
  _has_bits_[1] |= 0x00100000u;
}
inline void HEROPROP::clear_has_equip_ring() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void HEROPROP::clear_equip_ring() {
  if (equip_ring_ != &::google::protobuf::internal::kEmptyString) {
    equip_ring_->clear();
  }
  clear_has_equip_ring();
}
inline const ::std::string& HEROPROP::equip_ring() const {
  return *equip_ring_;
}
inline void HEROPROP::set_equip_ring(const ::std::string& value) {
  set_has_equip_ring();
  if (equip_ring_ == &::google::protobuf::internal::kEmptyString) {
    equip_ring_ = new ::std::string;
  }
  equip_ring_->assign(value);
}
inline void HEROPROP::set_equip_ring(const char* value) {
  set_has_equip_ring();
  if (equip_ring_ == &::google::protobuf::internal::kEmptyString) {
    equip_ring_ = new ::std::string;
  }
  equip_ring_->assign(value);
}
inline void HEROPROP::set_equip_ring(const char* value, size_t size) {
  set_has_equip_ring();
  if (equip_ring_ == &::google::protobuf::internal::kEmptyString) {
    equip_ring_ = new ::std::string;
  }
  equip_ring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_equip_ring() {
  set_has_equip_ring();
  if (equip_ring_ == &::google::protobuf::internal::kEmptyString) {
    equip_ring_ = new ::std::string;
  }
  return equip_ring_;
}
inline ::std::string* HEROPROP::release_equip_ring() {
  clear_has_equip_ring();
  if (equip_ring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_ring_;
    equip_ring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_equip_ring(::std::string* equip_ring) {
  if (equip_ring_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_ring_;
  }
  if (equip_ring) {
    set_has_equip_ring();
    equip_ring_ = equip_ring;
  } else {
    clear_has_equip_ring();
    equip_ring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string equip_Boot = 54 [default = ""];
inline bool HEROPROP::has_equip_boot() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void HEROPROP::set_has_equip_boot() {
  _has_bits_[1] |= 0x00200000u;
}
inline void HEROPROP::clear_has_equip_boot() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void HEROPROP::clear_equip_boot() {
  if (equip_boot_ != &::google::protobuf::internal::kEmptyString) {
    equip_boot_->clear();
  }
  clear_has_equip_boot();
}
inline const ::std::string& HEROPROP::equip_boot() const {
  return *equip_boot_;
}
inline void HEROPROP::set_equip_boot(const ::std::string& value) {
  set_has_equip_boot();
  if (equip_boot_ == &::google::protobuf::internal::kEmptyString) {
    equip_boot_ = new ::std::string;
  }
  equip_boot_->assign(value);
}
inline void HEROPROP::set_equip_boot(const char* value) {
  set_has_equip_boot();
  if (equip_boot_ == &::google::protobuf::internal::kEmptyString) {
    equip_boot_ = new ::std::string;
  }
  equip_boot_->assign(value);
}
inline void HEROPROP::set_equip_boot(const char* value, size_t size) {
  set_has_equip_boot();
  if (equip_boot_ == &::google::protobuf::internal::kEmptyString) {
    equip_boot_ = new ::std::string;
  }
  equip_boot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_equip_boot() {
  set_has_equip_boot();
  if (equip_boot_ == &::google::protobuf::internal::kEmptyString) {
    equip_boot_ = new ::std::string;
  }
  return equip_boot_;
}
inline ::std::string* HEROPROP::release_equip_boot() {
  clear_has_equip_boot();
  if (equip_boot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_boot_;
    equip_boot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_equip_boot(::std::string* equip_boot) {
  if (equip_boot_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_boot_;
  }
  if (equip_boot) {
    set_has_equip_boot();
    equip_boot_ = equip_boot;
  } else {
    clear_has_equip_boot();
    equip_boot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string needId = 55 [default = ""];
inline bool HEROPROP::has_needid() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void HEROPROP::set_has_needid() {
  _has_bits_[1] |= 0x00400000u;
}
inline void HEROPROP::clear_has_needid() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void HEROPROP::clear_needid() {
  if (needid_ != &::google::protobuf::internal::kEmptyString) {
    needid_->clear();
  }
  clear_has_needid();
}
inline const ::std::string& HEROPROP::needid() const {
  return *needid_;
}
inline void HEROPROP::set_needid(const ::std::string& value) {
  set_has_needid();
  if (needid_ == &::google::protobuf::internal::kEmptyString) {
    needid_ = new ::std::string;
  }
  needid_->assign(value);
}
inline void HEROPROP::set_needid(const char* value) {
  set_has_needid();
  if (needid_ == &::google::protobuf::internal::kEmptyString) {
    needid_ = new ::std::string;
  }
  needid_->assign(value);
}
inline void HEROPROP::set_needid(const char* value, size_t size) {
  set_has_needid();
  if (needid_ == &::google::protobuf::internal::kEmptyString) {
    needid_ = new ::std::string;
  }
  needid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROPROP::mutable_needid() {
  set_has_needid();
  if (needid_ == &::google::protobuf::internal::kEmptyString) {
    needid_ = new ::std::string;
  }
  return needid_;
}
inline ::std::string* HEROPROP::release_needid() {
  clear_has_needid();
  if (needid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = needid_;
    needid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROPROP::set_allocated_needid(::std::string* needid) {
  if (needid_ != &::google::protobuf::internal::kEmptyString) {
    delete needid_;
  }
  if (needid) {
    set_has_needid();
    needid_ = needid;
  } else {
    clear_has_needid();
    needid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 skillTriggerProbability = 56 [default = 0];
inline bool HEROPROP::has_skilltriggerprobability() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void HEROPROP::set_has_skilltriggerprobability() {
  _has_bits_[1] |= 0x00800000u;
}
inline void HEROPROP::clear_has_skilltriggerprobability() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void HEROPROP::clear_skilltriggerprobability() {
  skilltriggerprobability_ = 0;
  clear_has_skilltriggerprobability();
}
inline ::google::protobuf::int32 HEROPROP::skilltriggerprobability() const {
  return skilltriggerprobability_;
}
inline void HEROPROP::set_skilltriggerprobability(::google::protobuf::int32 value) {
  set_has_skilltriggerprobability();
  skilltriggerprobability_ = value;
}

// required float skillTriggerDuration = 57 [default = 0];
inline bool HEROPROP::has_skilltriggerduration() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void HEROPROP::set_has_skilltriggerduration() {
  _has_bits_[1] |= 0x01000000u;
}
inline void HEROPROP::clear_has_skilltriggerduration() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void HEROPROP::clear_skilltriggerduration() {
  skilltriggerduration_ = 0;
  clear_has_skilltriggerduration();
}
inline float HEROPROP::skilltriggerduration() const {
  return skilltriggerduration_;
}
inline void HEROPROP::set_skilltriggerduration(float value) {
  set_has_skilltriggerduration();
  skilltriggerduration_ = value;
}

// -------------------------------------------------------------------

// HEROPROP_ARRAY

// repeated .HEROPROP items = 1;
inline int HEROPROP_ARRAY::items_size() const {
  return items_.size();
}
inline void HEROPROP_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::HEROPROP& HEROPROP_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::HEROPROP* HEROPROP_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::HEROPROP* HEROPROP_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HEROPROP >&
HEROPROP_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::HEROPROP >*
HEROPROP_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// HEROSKILL

// required string id = 1 [default = ""];
inline bool HEROSKILL::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HEROSKILL::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HEROSKILL::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HEROSKILL::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& HEROSKILL::id() const {
  return *id_;
}
inline void HEROSKILL::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void HEROSKILL::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void HEROSKILL::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROSKILL::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* HEROSKILL::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROSKILL::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float factor = 2 [default = 0];
inline bool HEROSKILL::has_factor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HEROSKILL::set_has_factor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HEROSKILL::clear_has_factor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HEROSKILL::clear_factor() {
  factor_ = 0;
  clear_has_factor();
}
inline float HEROSKILL::factor() const {
  return factor_;
}
inline void HEROSKILL::set_factor(float value) {
  set_has_factor();
  factor_ = value;
}

// required float distance = 3 [default = 0];
inline bool HEROSKILL::has_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HEROSKILL::set_has_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HEROSKILL::clear_has_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HEROSKILL::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float HEROSKILL::distance() const {
  return distance_;
}
inline void HEROSKILL::set_distance(float value) {
  set_has_distance();
  distance_ = value;
}

// required float height = 4 [default = 0];
inline bool HEROSKILL::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HEROSKILL::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HEROSKILL::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HEROSKILL::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float HEROSKILL::height() const {
  return height_;
}
inline void HEROSKILL::set_height(float value) {
  set_has_height();
  height_ = value;
}

// required float range_x = 5 [default = 0];
inline bool HEROSKILL::has_range_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HEROSKILL::set_has_range_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HEROSKILL::clear_has_range_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HEROSKILL::clear_range_x() {
  range_x_ = 0;
  clear_has_range_x();
}
inline float HEROSKILL::range_x() const {
  return range_x_;
}
inline void HEROSKILL::set_range_x(float value) {
  set_has_range_x();
  range_x_ = value;
}

// required float range_y = 6 [default = 0];
inline bool HEROSKILL::has_range_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HEROSKILL::set_has_range_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HEROSKILL::clear_has_range_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HEROSKILL::clear_range_y() {
  range_y_ = 0;
  clear_has_range_y();
}
inline float HEROSKILL::range_y() const {
  return range_y_;
}
inline void HEROSKILL::set_range_y(float value) {
  set_has_range_y();
  range_y_ = value;
}

// required float range_z = 7 [default = 0];
inline bool HEROSKILL::has_range_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HEROSKILL::set_has_range_z() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HEROSKILL::clear_has_range_z() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HEROSKILL::clear_range_z() {
  range_z_ = 0;
  clear_has_range_z();
}
inline float HEROSKILL::range_z() const {
  return range_z_;
}
inline void HEROSKILL::set_range_z(float value) {
  set_has_range_z();
  range_z_ = value;
}

// required float waitTime = 8 [default = 0];
inline bool HEROSKILL::has_waittime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HEROSKILL::set_has_waittime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HEROSKILL::clear_has_waittime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HEROSKILL::clear_waittime() {
  waittime_ = 0;
  clear_has_waittime();
}
inline float HEROSKILL::waittime() const {
  return waittime_;
}
inline void HEROSKILL::set_waittime(float value) {
  set_has_waittime();
  waittime_ = value;
}

// required int32 intensity = 9 [default = 0];
inline bool HEROSKILL::has_intensity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HEROSKILL::set_has_intensity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HEROSKILL::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HEROSKILL::clear_intensity() {
  intensity_ = 0;
  clear_has_intensity();
}
inline ::google::protobuf::int32 HEROSKILL::intensity() const {
  return intensity_;
}
inline void HEROSKILL::set_intensity(::google::protobuf::int32 value) {
  set_has_intensity();
  intensity_ = value;
}

// -------------------------------------------------------------------

// HEROSKILL_ARRAY

// repeated .HEROSKILL items = 1;
inline int HEROSKILL_ARRAY::items_size() const {
  return items_.size();
}
inline void HEROSKILL_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::HEROSKILL& HEROSKILL_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::HEROSKILL* HEROSKILL_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::HEROSKILL* HEROSKILL_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HEROSKILL >&
HEROSKILL_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::HEROSKILL >*
HEROSKILL_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// HEROSTAR

// required string id = 1 [default = ""];
inline bool HEROSTAR::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HEROSTAR::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HEROSTAR::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HEROSTAR::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& HEROSTAR::id() const {
  return *id_;
}
inline void HEROSTAR::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void HEROSTAR::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void HEROSTAR::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HEROSTAR::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* HEROSTAR::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HEROSTAR::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 needNum = 2 [default = 0];
inline bool HEROSTAR::has_neednum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HEROSTAR::set_has_neednum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HEROSTAR::clear_has_neednum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HEROSTAR::clear_neednum() {
  neednum_ = 0;
  clear_has_neednum();
}
inline ::google::protobuf::int32 HEROSTAR::neednum() const {
  return neednum_;
}
inline void HEROSTAR::set_neednum(::google::protobuf::int32 value) {
  set_has_neednum();
  neednum_ = value;
}

// -------------------------------------------------------------------

// HEROSTAR_ARRAY

// repeated .HEROSTAR items = 1;
inline int HEROSTAR_ARRAY::items_size() const {
  return items_.size();
}
inline void HEROSTAR_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::HEROSTAR& HEROSTAR_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::HEROSTAR* HEROSTAR_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::HEROSTAR* HEROSTAR_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HEROSTAR >&
HEROSTAR_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::HEROSTAR >*
HEROSTAR_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// MONSTERPROP

// required string id = 1 [default = ""];
inline bool MONSTERPROP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MONSTERPROP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MONSTERPROP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MONSTERPROP::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MONSTERPROP::id() const {
  return *id_;
}
inline void MONSTERPROP::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MONSTERPROP::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void MONSTERPROP::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MONSTERPROP::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* MONSTERPROP::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MONSTERPROP::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 area = 2 [default = 0];
inline bool MONSTERPROP::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MONSTERPROP::set_has_area() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MONSTERPROP::clear_has_area() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MONSTERPROP::clear_area() {
  area_ = 0;
  clear_has_area();
}
inline ::google::protobuf::int32 MONSTERPROP::area() const {
  return area_;
}
inline void MONSTERPROP::set_area(::google::protobuf::int32 value) {
  set_has_area();
  area_ = value;
}

// required int32 occupation = 3 [default = 0];
inline bool MONSTERPROP::has_occupation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MONSTERPROP::set_has_occupation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MONSTERPROP::clear_has_occupation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MONSTERPROP::clear_occupation() {
  occupation_ = 0;
  clear_has_occupation();
}
inline ::google::protobuf::int32 MONSTERPROP::occupation() const {
  return occupation_;
}
inline void MONSTERPROP::set_occupation(::google::protobuf::int32 value) {
  set_has_occupation();
  occupation_ = value;
}

// required int32 level = 4 [default = 0];
inline bool MONSTERPROP::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MONSTERPROP::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MONSTERPROP::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MONSTERPROP::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 MONSTERPROP::level() const {
  return level_;
}
inline void MONSTERPROP::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 health = 5 [default = 0];
inline bool MONSTERPROP::has_health() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MONSTERPROP::set_has_health() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MONSTERPROP::clear_has_health() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MONSTERPROP::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 MONSTERPROP::health() const {
  return health_;
}
inline void MONSTERPROP::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// required int32 damage = 6 [default = 0];
inline bool MONSTERPROP::has_damage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MONSTERPROP::set_has_damage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MONSTERPROP::clear_has_damage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MONSTERPROP::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 MONSTERPROP::damage() const {
  return damage_;
}
inline void MONSTERPROP::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// required int32 pdd = 7 [default = 0];
inline bool MONSTERPROP::has_pdd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MONSTERPROP::set_has_pdd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MONSTERPROP::clear_has_pdd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MONSTERPROP::clear_pdd() {
  pdd_ = 0;
  clear_has_pdd();
}
inline ::google::protobuf::int32 MONSTERPROP::pdd() const {
  return pdd_;
}
inline void MONSTERPROP::set_pdd(::google::protobuf::int32 value) {
  set_has_pdd();
  pdd_ = value;
}

// required int32 mdd = 8 [default = 0];
inline bool MONSTERPROP::has_mdd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MONSTERPROP::set_has_mdd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MONSTERPROP::clear_has_mdd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MONSTERPROP::clear_mdd() {
  mdd_ = 0;
  clear_has_mdd();
}
inline ::google::protobuf::int32 MONSTERPROP::mdd() const {
  return mdd_;
}
inline void MONSTERPROP::set_mdd(::google::protobuf::int32 value) {
  set_has_mdd();
  mdd_ = value;
}

// required int32 hitLevel = 9 [default = 0];
inline bool MONSTERPROP::has_hitlevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MONSTERPROP::set_has_hitlevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MONSTERPROP::clear_has_hitlevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MONSTERPROP::clear_hitlevel() {
  hitlevel_ = 0;
  clear_has_hitlevel();
}
inline ::google::protobuf::int32 MONSTERPROP::hitlevel() const {
  return hitlevel_;
}
inline void MONSTERPROP::set_hitlevel(::google::protobuf::int32 value) {
  set_has_hitlevel();
  hitlevel_ = value;
}

// required int32 dodgeLevel = 10 [default = 0];
inline bool MONSTERPROP::has_dodgelevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MONSTERPROP::set_has_dodgelevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MONSTERPROP::clear_has_dodgelevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MONSTERPROP::clear_dodgelevel() {
  dodgelevel_ = 0;
  clear_has_dodgelevel();
}
inline ::google::protobuf::int32 MONSTERPROP::dodgelevel() const {
  return dodgelevel_;
}
inline void MONSTERPROP::set_dodgelevel(::google::protobuf::int32 value) {
  set_has_dodgelevel();
  dodgelevel_ = value;
}

// required int32 criLevel = 11 [default = 0];
inline bool MONSTERPROP::has_crilevel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MONSTERPROP::set_has_crilevel() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MONSTERPROP::clear_has_crilevel() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MONSTERPROP::clear_crilevel() {
  crilevel_ = 0;
  clear_has_crilevel();
}
inline ::google::protobuf::int32 MONSTERPROP::crilevel() const {
  return crilevel_;
}
inline void MONSTERPROP::set_crilevel(::google::protobuf::int32 value) {
  set_has_crilevel();
  crilevel_ = value;
}

// required int32 tenacityLevel = 12 [default = 0];
inline bool MONSTERPROP::has_tenacitylevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MONSTERPROP::set_has_tenacitylevel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MONSTERPROP::clear_has_tenacitylevel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MONSTERPROP::clear_tenacitylevel() {
  tenacitylevel_ = 0;
  clear_has_tenacitylevel();
}
inline ::google::protobuf::int32 MONSTERPROP::tenacitylevel() const {
  return tenacitylevel_;
}
inline void MONSTERPROP::set_tenacitylevel(::google::protobuf::int32 value) {
  set_has_tenacitylevel();
  tenacitylevel_ = value;
}

// required int32 pddPierce = 13 [default = 0];
inline bool MONSTERPROP::has_pddpierce() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MONSTERPROP::set_has_pddpierce() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MONSTERPROP::clear_has_pddpierce() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MONSTERPROP::clear_pddpierce() {
  pddpierce_ = 0;
  clear_has_pddpierce();
}
inline ::google::protobuf::int32 MONSTERPROP::pddpierce() const {
  return pddpierce_;
}
inline void MONSTERPROP::set_pddpierce(::google::protobuf::int32 value) {
  set_has_pddpierce();
  pddpierce_ = value;
}

// required float range_X = 14 [default = 0];
inline bool MONSTERPROP::has_range_x() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MONSTERPROP::set_has_range_x() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MONSTERPROP::clear_has_range_x() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MONSTERPROP::clear_range_x() {
  range_x_ = 0;
  clear_has_range_x();
}
inline float MONSTERPROP::range_x() const {
  return range_x_;
}
inline void MONSTERPROP::set_range_x(float value) {
  set_has_range_x();
  range_x_ = value;
}

// required float range_Y = 15 [default = 0];
inline bool MONSTERPROP::has_range_y() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MONSTERPROP::set_has_range_y() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MONSTERPROP::clear_has_range_y() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MONSTERPROP::clear_range_y() {
  range_y_ = 0;
  clear_has_range_y();
}
inline float MONSTERPROP::range_y() const {
  return range_y_;
}
inline void MONSTERPROP::set_range_y(float value) {
  set_has_range_y();
  range_y_ = value;
}

// required float range_Z = 16 [default = 0];
inline bool MONSTERPROP::has_range_z() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MONSTERPROP::set_has_range_z() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MONSTERPROP::clear_has_range_z() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MONSTERPROP::clear_range_z() {
  range_z_ = 0;
  clear_has_range_z();
}
inline float MONSTERPROP::range_z() const {
  return range_z_;
}
inline void MONSTERPROP::set_range_z(float value) {
  set_has_range_z();
  range_z_ = value;
}

// required float attackSpeed = 17 [default = 0];
inline bool MONSTERPROP::has_attackspeed() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MONSTERPROP::set_has_attackspeed() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MONSTERPROP::clear_has_attackspeed() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MONSTERPROP::clear_attackspeed() {
  attackspeed_ = 0;
  clear_has_attackspeed();
}
inline float MONSTERPROP::attackspeed() const {
  return attackspeed_;
}
inline void MONSTERPROP::set_attackspeed(float value) {
  set_has_attackspeed();
  attackspeed_ = value;
}

// required float h_Dis = 18 [default = 0];
inline bool MONSTERPROP::has_h_dis() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MONSTERPROP::set_has_h_dis() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MONSTERPROP::clear_has_h_dis() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MONSTERPROP::clear_h_dis() {
  h_dis_ = 0;
  clear_has_h_dis();
}
inline float MONSTERPROP::h_dis() const {
  return h_dis_;
}
inline void MONSTERPROP::set_h_dis(float value) {
  set_has_h_dis();
  h_dis_ = value;
}

// required float v_Dis = 19 [default = 0];
inline bool MONSTERPROP::has_v_dis() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MONSTERPROP::set_has_v_dis() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MONSTERPROP::clear_has_v_dis() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MONSTERPROP::clear_v_dis() {
  v_dis_ = 0;
  clear_has_v_dis();
}
inline float MONSTERPROP::v_dis() const {
  return v_dis_;
}
inline void MONSTERPROP::set_v_dis(float value) {
  set_has_v_dis();
  v_dis_ = value;
}

// required float moveSpeed = 20 [default = 0];
inline bool MONSTERPROP::has_movespeed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MONSTERPROP::set_has_movespeed() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MONSTERPROP::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MONSTERPROP::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline float MONSTERPROP::movespeed() const {
  return movespeed_;
}
inline void MONSTERPROP::set_movespeed(float value) {
  set_has_movespeed();
  movespeed_ = value;
}

// required int32 star = 21 [default = 0];
inline bool MONSTERPROP::has_star() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MONSTERPROP::set_has_star() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MONSTERPROP::clear_has_star() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MONSTERPROP::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 MONSTERPROP::star() const {
  return star_;
}
inline void MONSTERPROP::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// required int32 maxIntensity = 22 [default = 0];
inline bool MONSTERPROP::has_maxintensity() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MONSTERPROP::set_has_maxintensity() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MONSTERPROP::clear_has_maxintensity() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MONSTERPROP::clear_maxintensity() {
  maxintensity_ = 0;
  clear_has_maxintensity();
}
inline ::google::protobuf::int32 MONSTERPROP::maxintensity() const {
  return maxintensity_;
}
inline void MONSTERPROP::set_maxintensity(::google::protobuf::int32 value) {
  set_has_maxintensity();
  maxintensity_ = value;
}

// required int32 recoverIntensityRate = 23 [default = 0];
inline bool MONSTERPROP::has_recoverintensityrate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MONSTERPROP::set_has_recoverintensityrate() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MONSTERPROP::clear_has_recoverintensityrate() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MONSTERPROP::clear_recoverintensityrate() {
  recoverintensityrate_ = 0;
  clear_has_recoverintensityrate();
}
inline ::google::protobuf::int32 MONSTERPROP::recoverintensityrate() const {
  return recoverintensityrate_;
}
inline void MONSTERPROP::set_recoverintensityrate(::google::protobuf::int32 value) {
  set_has_recoverintensityrate();
  recoverintensityrate_ = value;
}

// required int32 minIntensity = 24 [default = 0];
inline bool MONSTERPROP::has_minintensity() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MONSTERPROP::set_has_minintensity() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MONSTERPROP::clear_has_minintensity() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MONSTERPROP::clear_minintensity() {
  minintensity_ = 0;
  clear_has_minintensity();
}
inline ::google::protobuf::int32 MONSTERPROP::minintensity() const {
  return minintensity_;
}
inline void MONSTERPROP::set_minintensity(::google::protobuf::int32 value) {
  set_has_minintensity();
  minintensity_ = value;
}

// required int32 type_Normal = 25 [default = 0];
inline bool MONSTERPROP::has_type_normal() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MONSTERPROP::set_has_type_normal() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MONSTERPROP::clear_has_type_normal() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MONSTERPROP::clear_type_normal() {
  type_normal_ = 0;
  clear_has_type_normal();
}
inline ::google::protobuf::int32 MONSTERPROP::type_normal() const {
  return type_normal_;
}
inline void MONSTERPROP::set_type_normal(::google::protobuf::int32 value) {
  set_has_type_normal();
  type_normal_ = value;
}

// required string passiveSkillId = 26 [default = ""];
inline bool MONSTERPROP::has_passiveskillid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MONSTERPROP::set_has_passiveskillid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MONSTERPROP::clear_has_passiveskillid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MONSTERPROP::clear_passiveskillid() {
  if (passiveskillid_ != &::google::protobuf::internal::kEmptyString) {
    passiveskillid_->clear();
  }
  clear_has_passiveskillid();
}
inline const ::std::string& MONSTERPROP::passiveskillid() const {
  return *passiveskillid_;
}
inline void MONSTERPROP::set_passiveskillid(const ::std::string& value) {
  set_has_passiveskillid();
  if (passiveskillid_ == &::google::protobuf::internal::kEmptyString) {
    passiveskillid_ = new ::std::string;
  }
  passiveskillid_->assign(value);
}
inline void MONSTERPROP::set_passiveskillid(const char* value) {
  set_has_passiveskillid();
  if (passiveskillid_ == &::google::protobuf::internal::kEmptyString) {
    passiveskillid_ = new ::std::string;
  }
  passiveskillid_->assign(value);
}
inline void MONSTERPROP::set_passiveskillid(const char* value, size_t size) {
  set_has_passiveskillid();
  if (passiveskillid_ == &::google::protobuf::internal::kEmptyString) {
    passiveskillid_ = new ::std::string;
  }
  passiveskillid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MONSTERPROP::mutable_passiveskillid() {
  set_has_passiveskillid();
  if (passiveskillid_ == &::google::protobuf::internal::kEmptyString) {
    passiveskillid_ = new ::std::string;
  }
  return passiveskillid_;
}
inline ::std::string* MONSTERPROP::release_passiveskillid() {
  clear_has_passiveskillid();
  if (passiveskillid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passiveskillid_;
    passiveskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MONSTERPROP::set_allocated_passiveskillid(::std::string* passiveskillid) {
  if (passiveskillid_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskillid_;
  }
  if (passiveskillid) {
    set_has_passiveskillid();
    passiveskillid_ = passiveskillid;
  } else {
    clear_has_passiveskillid();
    passiveskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string passiveSkillLevel = 27 [default = ""];
inline bool MONSTERPROP::has_passiveskilllevel() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MONSTERPROP::set_has_passiveskilllevel() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MONSTERPROP::clear_has_passiveskilllevel() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MONSTERPROP::clear_passiveskilllevel() {
  if (passiveskilllevel_ != &::google::protobuf::internal::kEmptyString) {
    passiveskilllevel_->clear();
  }
  clear_has_passiveskilllevel();
}
inline const ::std::string& MONSTERPROP::passiveskilllevel() const {
  return *passiveskilllevel_;
}
inline void MONSTERPROP::set_passiveskilllevel(const ::std::string& value) {
  set_has_passiveskilllevel();
  if (passiveskilllevel_ == &::google::protobuf::internal::kEmptyString) {
    passiveskilllevel_ = new ::std::string;
  }
  passiveskilllevel_->assign(value);
}
inline void MONSTERPROP::set_passiveskilllevel(const char* value) {
  set_has_passiveskilllevel();
  if (passiveskilllevel_ == &::google::protobuf::internal::kEmptyString) {
    passiveskilllevel_ = new ::std::string;
  }
  passiveskilllevel_->assign(value);
}
inline void MONSTERPROP::set_passiveskilllevel(const char* value, size_t size) {
  set_has_passiveskilllevel();
  if (passiveskilllevel_ == &::google::protobuf::internal::kEmptyString) {
    passiveskilllevel_ = new ::std::string;
  }
  passiveskilllevel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MONSTERPROP::mutable_passiveskilllevel() {
  set_has_passiveskilllevel();
  if (passiveskilllevel_ == &::google::protobuf::internal::kEmptyString) {
    passiveskilllevel_ = new ::std::string;
  }
  return passiveskilllevel_;
}
inline ::std::string* MONSTERPROP::release_passiveskilllevel() {
  clear_has_passiveskilllevel();
  if (passiveskilllevel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passiveskilllevel_;
    passiveskilllevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MONSTERPROP::set_allocated_passiveskilllevel(::std::string* passiveskilllevel) {
  if (passiveskilllevel_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskilllevel_;
  }
  if (passiveskilllevel) {
    set_has_passiveskilllevel();
    passiveskilllevel_ = passiveskilllevel;
  } else {
    clear_has_passiveskilllevel();
    passiveskilllevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MONSTERPROP_ARRAY

// repeated .MONSTERPROP items = 1;
inline int MONSTERPROP_ARRAY::items_size() const {
  return items_.size();
}
inline void MONSTERPROP_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::MONSTERPROP& MONSTERPROP_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::MONSTERPROP* MONSTERPROP_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::MONSTERPROP* MONSTERPROP_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MONSTERPROP >&
MONSTERPROP_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::MONSTERPROP >*
MONSTERPROP_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// PASSIVE

// required string id = 1 [default = ""];
inline bool PASSIVE::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PASSIVE::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PASSIVE::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PASSIVE::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& PASSIVE::id() const {
  return *id_;
}
inline void PASSIVE::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PASSIVE::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PASSIVE::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PASSIVE::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* PASSIVE::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PASSIVE::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 triggerEnum = 2 [default = 0];
inline bool PASSIVE::has_triggerenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PASSIVE::set_has_triggerenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PASSIVE::clear_has_triggerenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PASSIVE::clear_triggerenum() {
  triggerenum_ = 0;
  clear_has_triggerenum();
}
inline ::google::protobuf::int32 PASSIVE::triggerenum() const {
  return triggerenum_;
}
inline void PASSIVE::set_triggerenum(::google::protobuf::int32 value) {
  set_has_triggerenum();
  triggerenum_ = value;
}

// required string triggerId = 3 [default = ""];
inline bool PASSIVE::has_triggerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PASSIVE::set_has_triggerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PASSIVE::clear_has_triggerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PASSIVE::clear_triggerid() {
  if (triggerid_ != &::google::protobuf::internal::kEmptyString) {
    triggerid_->clear();
  }
  clear_has_triggerid();
}
inline const ::std::string& PASSIVE::triggerid() const {
  return *triggerid_;
}
inline void PASSIVE::set_triggerid(const ::std::string& value) {
  set_has_triggerid();
  if (triggerid_ == &::google::protobuf::internal::kEmptyString) {
    triggerid_ = new ::std::string;
  }
  triggerid_->assign(value);
}
inline void PASSIVE::set_triggerid(const char* value) {
  set_has_triggerid();
  if (triggerid_ == &::google::protobuf::internal::kEmptyString) {
    triggerid_ = new ::std::string;
  }
  triggerid_->assign(value);
}
inline void PASSIVE::set_triggerid(const char* value, size_t size) {
  set_has_triggerid();
  if (triggerid_ == &::google::protobuf::internal::kEmptyString) {
    triggerid_ = new ::std::string;
  }
  triggerid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PASSIVE::mutable_triggerid() {
  set_has_triggerid();
  if (triggerid_ == &::google::protobuf::internal::kEmptyString) {
    triggerid_ = new ::std::string;
  }
  return triggerid_;
}
inline ::std::string* PASSIVE::release_triggerid() {
  clear_has_triggerid();
  if (triggerid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = triggerid_;
    triggerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PASSIVE::set_allocated_triggerid(::std::string* triggerid) {
  if (triggerid_ != &::google::protobuf::internal::kEmptyString) {
    delete triggerid_;
  }
  if (triggerid) {
    set_has_triggerid();
    triggerid_ = triggerid;
  } else {
    clear_has_triggerid();
    triggerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string buffId = 4 [default = ""];
inline bool PASSIVE::has_buffid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PASSIVE::set_has_buffid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PASSIVE::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PASSIVE::clear_buffid() {
  if (buffid_ != &::google::protobuf::internal::kEmptyString) {
    buffid_->clear();
  }
  clear_has_buffid();
}
inline const ::std::string& PASSIVE::buffid() const {
  return *buffid_;
}
inline void PASSIVE::set_buffid(const ::std::string& value) {
  set_has_buffid();
  if (buffid_ == &::google::protobuf::internal::kEmptyString) {
    buffid_ = new ::std::string;
  }
  buffid_->assign(value);
}
inline void PASSIVE::set_buffid(const char* value) {
  set_has_buffid();
  if (buffid_ == &::google::protobuf::internal::kEmptyString) {
    buffid_ = new ::std::string;
  }
  buffid_->assign(value);
}
inline void PASSIVE::set_buffid(const char* value, size_t size) {
  set_has_buffid();
  if (buffid_ == &::google::protobuf::internal::kEmptyString) {
    buffid_ = new ::std::string;
  }
  buffid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PASSIVE::mutable_buffid() {
  set_has_buffid();
  if (buffid_ == &::google::protobuf::internal::kEmptyString) {
    buffid_ = new ::std::string;
  }
  return buffid_;
}
inline ::std::string* PASSIVE::release_buffid() {
  clear_has_buffid();
  if (buffid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buffid_;
    buffid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PASSIVE::set_allocated_buffid(::std::string* buffid) {
  if (buffid_ != &::google::protobuf::internal::kEmptyString) {
    delete buffid_;
  }
  if (buffid) {
    set_has_buffid();
    buffid_ = buffid;
  } else {
    clear_has_buffid();
    buffid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 target_Team = 5 [default = 0];
inline bool PASSIVE::has_target_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PASSIVE::set_has_target_team() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PASSIVE::clear_has_target_team() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PASSIVE::clear_target_team() {
  target_team_ = 0;
  clear_has_target_team();
}
inline ::google::protobuf::int32 PASSIVE::target_team() const {
  return target_team_;
}
inline void PASSIVE::set_target_team(::google::protobuf::int32 value) {
  set_has_target_team();
  target_team_ = value;
}

// required int32 target_State = 6 [default = 0];
inline bool PASSIVE::has_target_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PASSIVE::set_has_target_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PASSIVE::clear_has_target_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PASSIVE::clear_target_state() {
  target_state_ = 0;
  clear_has_target_state();
}
inline ::google::protobuf::int32 PASSIVE::target_state() const {
  return target_state_;
}
inline void PASSIVE::set_target_state(::google::protobuf::int32 value) {
  set_has_target_state();
  target_state_ = value;
}

// required int32 target_Occupation = 7 [default = 0];
inline bool PASSIVE::has_target_occupation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PASSIVE::set_has_target_occupation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PASSIVE::clear_has_target_occupation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PASSIVE::clear_target_occupation() {
  target_occupation_ = 0;
  clear_has_target_occupation();
}
inline ::google::protobuf::int32 PASSIVE::target_occupation() const {
  return target_occupation_;
}
inline void PASSIVE::set_target_occupation(::google::protobuf::int32 value) {
  set_has_target_occupation();
  target_occupation_ = value;
}

// -------------------------------------------------------------------

// PASSIVE_ARRAY

// repeated .PASSIVE items = 1;
inline int PASSIVE_ARRAY::items_size() const {
  return items_.size();
}
inline void PASSIVE_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::PASSIVE& PASSIVE_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::PASSIVE* PASSIVE_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::PASSIVE* PASSIVE_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PASSIVE >&
PASSIVE_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::PASSIVE >*
PASSIVE_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// PRIZESHOW

// required string id = 1 [default = ""];
inline bool PRIZESHOW::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PRIZESHOW::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PRIZESHOW::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PRIZESHOW::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& PRIZESHOW::id() const {
  return *id_;
}
inline void PRIZESHOW::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PRIZESHOW::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void PRIZESHOW::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PRIZESHOW::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* PRIZESHOW::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PRIZESHOW::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 2 [default = ""];
inline bool PRIZESHOW::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PRIZESHOW::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PRIZESHOW::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PRIZESHOW::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& PRIZESHOW::type() const {
  return *type_;
}
inline void PRIZESHOW::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PRIZESHOW::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PRIZESHOW::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PRIZESHOW::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* PRIZESHOW::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PRIZESHOW::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string counts = 3 [default = ""];
inline bool PRIZESHOW::has_counts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PRIZESHOW::set_has_counts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PRIZESHOW::clear_has_counts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PRIZESHOW::clear_counts() {
  if (counts_ != &::google::protobuf::internal::kEmptyString) {
    counts_->clear();
  }
  clear_has_counts();
}
inline const ::std::string& PRIZESHOW::counts() const {
  return *counts_;
}
inline void PRIZESHOW::set_counts(const ::std::string& value) {
  set_has_counts();
  if (counts_ == &::google::protobuf::internal::kEmptyString) {
    counts_ = new ::std::string;
  }
  counts_->assign(value);
}
inline void PRIZESHOW::set_counts(const char* value) {
  set_has_counts();
  if (counts_ == &::google::protobuf::internal::kEmptyString) {
    counts_ = new ::std::string;
  }
  counts_->assign(value);
}
inline void PRIZESHOW::set_counts(const char* value, size_t size) {
  set_has_counts();
  if (counts_ == &::google::protobuf::internal::kEmptyString) {
    counts_ = new ::std::string;
  }
  counts_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PRIZESHOW::mutable_counts() {
  set_has_counts();
  if (counts_ == &::google::protobuf::internal::kEmptyString) {
    counts_ = new ::std::string;
  }
  return counts_;
}
inline ::std::string* PRIZESHOW::release_counts() {
  clear_has_counts();
  if (counts_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = counts_;
    counts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PRIZESHOW::set_allocated_counts(::std::string* counts) {
  if (counts_ != &::google::protobuf::internal::kEmptyString) {
    delete counts_;
  }
  if (counts) {
    set_has_counts();
    counts_ = counts;
  } else {
    clear_has_counts();
    counts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string awards = 4 [default = ""];
inline bool PRIZESHOW::has_awards() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PRIZESHOW::set_has_awards() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PRIZESHOW::clear_has_awards() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PRIZESHOW::clear_awards() {
  if (awards_ != &::google::protobuf::internal::kEmptyString) {
    awards_->clear();
  }
  clear_has_awards();
}
inline const ::std::string& PRIZESHOW::awards() const {
  return *awards_;
}
inline void PRIZESHOW::set_awards(const ::std::string& value) {
  set_has_awards();
  if (awards_ == &::google::protobuf::internal::kEmptyString) {
    awards_ = new ::std::string;
  }
  awards_->assign(value);
}
inline void PRIZESHOW::set_awards(const char* value) {
  set_has_awards();
  if (awards_ == &::google::protobuf::internal::kEmptyString) {
    awards_ = new ::std::string;
  }
  awards_->assign(value);
}
inline void PRIZESHOW::set_awards(const char* value, size_t size) {
  set_has_awards();
  if (awards_ == &::google::protobuf::internal::kEmptyString) {
    awards_ = new ::std::string;
  }
  awards_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PRIZESHOW::mutable_awards() {
  set_has_awards();
  if (awards_ == &::google::protobuf::internal::kEmptyString) {
    awards_ = new ::std::string;
  }
  return awards_;
}
inline ::std::string* PRIZESHOW::release_awards() {
  clear_has_awards();
  if (awards_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = awards_;
    awards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PRIZESHOW::set_allocated_awards(::std::string* awards) {
  if (awards_ != &::google::protobuf::internal::kEmptyString) {
    delete awards_;
  }
  if (awards) {
    set_has_awards();
    awards_ = awards;
  } else {
    clear_has_awards();
    awards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PRIZESHOW_ARRAY

// repeated .PRIZESHOW items = 1;
inline int PRIZESHOW_ARRAY::items_size() const {
  return items_.size();
}
inline void PRIZESHOW_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::PRIZESHOW& PRIZESHOW_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::PRIZESHOW* PRIZESHOW_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::PRIZESHOW* PRIZESHOW_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PRIZESHOW >&
PRIZESHOW_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::PRIZESHOW >*
PRIZESHOW_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// QUALITYRULE

// required string id = 1 [default = ""];
inline bool QUALITYRULE::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QUALITYRULE::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QUALITYRULE::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QUALITYRULE::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& QUALITYRULE::id() const {
  return *id_;
}
inline void QUALITYRULE::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void QUALITYRULE::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void QUALITYRULE::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QUALITYRULE::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* QUALITYRULE::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QUALITYRULE::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 needLevel = 2 [default = 0];
inline bool QUALITYRULE::has_needlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QUALITYRULE::set_has_needlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QUALITYRULE::clear_has_needlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QUALITYRULE::clear_needlevel() {
  needlevel_ = 0;
  clear_has_needlevel();
}
inline ::google::protobuf::int32 QUALITYRULE::needlevel() const {
  return needlevel_;
}
inline void QUALITYRULE::set_needlevel(::google::protobuf::int32 value) {
  set_has_needlevel();
  needlevel_ = value;
}

// required int32 needGolds = 3 [default = 0];
inline bool QUALITYRULE::has_needgolds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QUALITYRULE::set_has_needgolds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QUALITYRULE::clear_has_needgolds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QUALITYRULE::clear_needgolds() {
  needgolds_ = 0;
  clear_has_needgolds();
}
inline ::google::protobuf::int32 QUALITYRULE::needgolds() const {
  return needgolds_;
}
inline void QUALITYRULE::set_needgolds(::google::protobuf::int32 value) {
  set_has_needgolds();
  needgolds_ = value;
}

// required int32 health = 4 [default = 0];
inline bool QUALITYRULE::has_health() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QUALITYRULE::set_has_health() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QUALITYRULE::clear_has_health() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QUALITYRULE::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 QUALITYRULE::health() const {
  return health_;
}
inline void QUALITYRULE::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// required int32 damage = 5 [default = 0];
inline bool QUALITYRULE::has_damage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QUALITYRULE::set_has_damage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QUALITYRULE::clear_has_damage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QUALITYRULE::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 QUALITYRULE::damage() const {
  return damage_;
}
inline void QUALITYRULE::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// required int32 pdd = 6 [default = 0];
inline bool QUALITYRULE::has_pdd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QUALITYRULE::set_has_pdd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QUALITYRULE::clear_has_pdd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QUALITYRULE::clear_pdd() {
  pdd_ = 0;
  clear_has_pdd();
}
inline ::google::protobuf::int32 QUALITYRULE::pdd() const {
  return pdd_;
}
inline void QUALITYRULE::set_pdd(::google::protobuf::int32 value) {
  set_has_pdd();
  pdd_ = value;
}

// required int32 mdd = 7 [default = 0];
inline bool QUALITYRULE::has_mdd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QUALITYRULE::set_has_mdd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QUALITYRULE::clear_has_mdd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QUALITYRULE::clear_mdd() {
  mdd_ = 0;
  clear_has_mdd();
}
inline ::google::protobuf::int32 QUALITYRULE::mdd() const {
  return mdd_;
}
inline void QUALITYRULE::set_mdd(::google::protobuf::int32 value) {
  set_has_mdd();
  mdd_ = value;
}

// required int32 hitLevel = 8 [default = 0];
inline bool QUALITYRULE::has_hitlevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QUALITYRULE::set_has_hitlevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QUALITYRULE::clear_has_hitlevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QUALITYRULE::clear_hitlevel() {
  hitlevel_ = 0;
  clear_has_hitlevel();
}
inline ::google::protobuf::int32 QUALITYRULE::hitlevel() const {
  return hitlevel_;
}
inline void QUALITYRULE::set_hitlevel(::google::protobuf::int32 value) {
  set_has_hitlevel();
  hitlevel_ = value;
}

// required int32 dodgeLevel = 9 [default = 0];
inline bool QUALITYRULE::has_dodgelevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QUALITYRULE::set_has_dodgelevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QUALITYRULE::clear_has_dodgelevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QUALITYRULE::clear_dodgelevel() {
  dodgelevel_ = 0;
  clear_has_dodgelevel();
}
inline ::google::protobuf::int32 QUALITYRULE::dodgelevel() const {
  return dodgelevel_;
}
inline void QUALITYRULE::set_dodgelevel(::google::protobuf::int32 value) {
  set_has_dodgelevel();
  dodgelevel_ = value;
}

// required int32 criLevel = 10 [default = 0];
inline bool QUALITYRULE::has_crilevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QUALITYRULE::set_has_crilevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QUALITYRULE::clear_has_crilevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QUALITYRULE::clear_crilevel() {
  crilevel_ = 0;
  clear_has_crilevel();
}
inline ::google::protobuf::int32 QUALITYRULE::crilevel() const {
  return crilevel_;
}
inline void QUALITYRULE::set_crilevel(::google::protobuf::int32 value) {
  set_has_crilevel();
  crilevel_ = value;
}

// required int32 tenacityLevel = 11 [default = 0];
inline bool QUALITYRULE::has_tenacitylevel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QUALITYRULE::set_has_tenacitylevel() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QUALITYRULE::clear_has_tenacitylevel() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QUALITYRULE::clear_tenacitylevel() {
  tenacitylevel_ = 0;
  clear_has_tenacitylevel();
}
inline ::google::protobuf::int32 QUALITYRULE::tenacitylevel() const {
  return tenacitylevel_;
}
inline void QUALITYRULE::set_tenacitylevel(::google::protobuf::int32 value) {
  set_has_tenacitylevel();
  tenacitylevel_ = value;
}

// required int32 pddPierce = 12 [default = 0];
inline bool QUALITYRULE::has_pddpierce() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QUALITYRULE::set_has_pddpierce() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QUALITYRULE::clear_has_pddpierce() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QUALITYRULE::clear_pddpierce() {
  pddpierce_ = 0;
  clear_has_pddpierce();
}
inline ::google::protobuf::int32 QUALITYRULE::pddpierce() const {
  return pddpierce_;
}
inline void QUALITYRULE::set_pddpierce(::google::protobuf::int32 value) {
  set_has_pddpierce();
  pddpierce_ = value;
}

// required int32 open = 13 [default = 0];
inline bool QUALITYRULE::has_open() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QUALITYRULE::set_has_open() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QUALITYRULE::clear_has_open() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QUALITYRULE::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline ::google::protobuf::int32 QUALITYRULE::open() const {
  return open_;
}
inline void QUALITYRULE::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
}

// -------------------------------------------------------------------

// QUALITYRULE_ARRAY

// repeated .QUALITYRULE items = 1;
inline int QUALITYRULE_ARRAY::items_size() const {
  return items_.size();
}
inline void QUALITYRULE_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::QUALITYRULE& QUALITYRULE_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::QUALITYRULE* QUALITYRULE_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::QUALITYRULE* QUALITYRULE_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QUALITYRULE >&
QUALITYRULE_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::QUALITYRULE >*
QUALITYRULE_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// REALTIMECHECK

// required string id = 1 [default = ""];
inline bool REALTIMECHECK::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void REALTIMECHECK::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void REALTIMECHECK::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void REALTIMECHECK::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& REALTIMECHECK::id() const {
  return *id_;
}
inline void REALTIMECHECK::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void REALTIMECHECK::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void REALTIMECHECK::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* REALTIMECHECK::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* REALTIMECHECK::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void REALTIMECHECK::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 type = 2 [default = 0];
inline bool REALTIMECHECK::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void REALTIMECHECK::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void REALTIMECHECK::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void REALTIMECHECK::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 REALTIMECHECK::type() const {
  return type_;
}
inline void REALTIMECHECK::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 num = 3 [default = 0];
inline bool REALTIMECHECK::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void REALTIMECHECK::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void REALTIMECHECK::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void REALTIMECHECK::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 REALTIMECHECK::num() const {
  return num_;
}
inline void REALTIMECHECK::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// REALTIMECHECK_ARRAY

// repeated .REALTIMECHECK items = 1;
inline int REALTIMECHECK_ARRAY::items_size() const {
  return items_.size();
}
inline void REALTIMECHECK_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::REALTIMECHECK& REALTIMECHECK_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::REALTIMECHECK* REALTIMECHECK_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::REALTIMECHECK* REALTIMECHECK_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::REALTIMECHECK >&
REALTIMECHECK_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::REALTIMECHECK >*
REALTIMECHECK_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// RESETPRICE

// required string id = 1 [default = ""];
inline bool RESETPRICE::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RESETPRICE::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RESETPRICE::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RESETPRICE::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RESETPRICE::id() const {
  return *id_;
}
inline void RESETPRICE::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RESETPRICE::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RESETPRICE::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RESETPRICE::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* RESETPRICE::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RESETPRICE::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 needGems = 2 [default = 0];
inline bool RESETPRICE::has_needgems() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RESETPRICE::set_has_needgems() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RESETPRICE::clear_has_needgems() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RESETPRICE::clear_needgems() {
  needgems_ = 0;
  clear_has_needgems();
}
inline ::google::protobuf::int32 RESETPRICE::needgems() const {
  return needgems_;
}
inline void RESETPRICE::set_needgems(::google::protobuf::int32 value) {
  set_has_needgems();
  needgems_ = value;
}

// -------------------------------------------------------------------

// RESETPRICE_ARRAY

// repeated .RESETPRICE items = 1;
inline int RESETPRICE_ARRAY::items_size() const {
  return items_.size();
}
inline void RESETPRICE_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::RESETPRICE& RESETPRICE_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::RESETPRICE* RESETPRICE_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::RESETPRICE* RESETPRICE_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RESETPRICE >&
RESETPRICE_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::RESETPRICE >*
RESETPRICE_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// RULE

// required string id = 1 [default = ""];
inline bool RULE::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RULE::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RULE::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RULE::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RULE::id() const {
  return *id_;
}
inline void RULE::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RULE::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RULE::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RULE::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* RULE::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RULE::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 upgrade_Exp_User = 2 [default = 0];
inline bool RULE::has_upgrade_exp_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RULE::set_has_upgrade_exp_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RULE::clear_has_upgrade_exp_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RULE::clear_upgrade_exp_user() {
  upgrade_exp_user_ = 0;
  clear_has_upgrade_exp_user();
}
inline ::google::protobuf::int32 RULE::upgrade_exp_user() const {
  return upgrade_exp_user_;
}
inline void RULE::set_upgrade_exp_user(::google::protobuf::int32 value) {
  set_has_upgrade_exp_user();
  upgrade_exp_user_ = value;
}

// required int32 upgrade_Exp_Hero = 3 [default = 0];
inline bool RULE::has_upgrade_exp_hero() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RULE::set_has_upgrade_exp_hero() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RULE::clear_has_upgrade_exp_hero() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RULE::clear_upgrade_exp_hero() {
  upgrade_exp_hero_ = 0;
  clear_has_upgrade_exp_hero();
}
inline ::google::protobuf::int32 RULE::upgrade_exp_hero() const {
  return upgrade_exp_hero_;
}
inline void RULE::set_upgrade_exp_hero(::google::protobuf::int32 value) {
  set_has_upgrade_exp_hero();
  upgrade_exp_hero_ = value;
}

// required int32 factor_Hit = 4 [default = 0];
inline bool RULE::has_factor_hit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RULE::set_has_factor_hit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RULE::clear_has_factor_hit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RULE::clear_factor_hit() {
  factor_hit_ = 0;
  clear_has_factor_hit();
}
inline ::google::protobuf::int32 RULE::factor_hit() const {
  return factor_hit_;
}
inline void RULE::set_factor_hit(::google::protobuf::int32 value) {
  set_has_factor_hit();
  factor_hit_ = value;
}

// required int32 factor_Dodge = 5 [default = 0];
inline bool RULE::has_factor_dodge() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RULE::set_has_factor_dodge() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RULE::clear_has_factor_dodge() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RULE::clear_factor_dodge() {
  factor_dodge_ = 0;
  clear_has_factor_dodge();
}
inline ::google::protobuf::int32 RULE::factor_dodge() const {
  return factor_dodge_;
}
inline void RULE::set_factor_dodge(::google::protobuf::int32 value) {
  set_has_factor_dodge();
  factor_dodge_ = value;
}

// required int32 factor_Cri = 6 [default = 0];
inline bool RULE::has_factor_cri() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RULE::set_has_factor_cri() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RULE::clear_has_factor_cri() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RULE::clear_factor_cri() {
  factor_cri_ = 0;
  clear_has_factor_cri();
}
inline ::google::protobuf::int32 RULE::factor_cri() const {
  return factor_cri_;
}
inline void RULE::set_factor_cri(::google::protobuf::int32 value) {
  set_has_factor_cri();
  factor_cri_ = value;
}

// required int32 factor_Tenacity = 7 [default = 0];
inline bool RULE::has_factor_tenacity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RULE::set_has_factor_tenacity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RULE::clear_has_factor_tenacity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RULE::clear_factor_tenacity() {
  factor_tenacity_ = 0;
  clear_has_factor_tenacity();
}
inline ::google::protobuf::int32 RULE::factor_tenacity() const {
  return factor_tenacity_;
}
inline void RULE::set_factor_tenacity(::google::protobuf::int32 value) {
  set_has_factor_tenacity();
  factor_tenacity_ = value;
}

// required int32 upgrade_Gold_Skill = 8 [default = 0];
inline bool RULE::has_upgrade_gold_skill() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RULE::set_has_upgrade_gold_skill() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RULE::clear_has_upgrade_gold_skill() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RULE::clear_upgrade_gold_skill() {
  upgrade_gold_skill_ = 0;
  clear_has_upgrade_gold_skill();
}
inline ::google::protobuf::int32 RULE::upgrade_gold_skill() const {
  return upgrade_gold_skill_;
}
inline void RULE::set_upgrade_gold_skill(::google::protobuf::int32 value) {
  set_has_upgrade_gold_skill();
  upgrade_gold_skill_ = value;
}

// required int32 upgrade_Gold_AoYi = 9 [default = 0];
inline bool RULE::has_upgrade_gold_aoyi() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RULE::set_has_upgrade_gold_aoyi() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RULE::clear_has_upgrade_gold_aoyi() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RULE::clear_upgrade_gold_aoyi() {
  upgrade_gold_aoyi_ = 0;
  clear_has_upgrade_gold_aoyi();
}
inline ::google::protobuf::int32 RULE::upgrade_gold_aoyi() const {
  return upgrade_gold_aoyi_;
}
inline void RULE::set_upgrade_gold_aoyi(::google::protobuf::int32 value) {
  set_has_upgrade_gold_aoyi();
  upgrade_gold_aoyi_ = value;
}

// required int32 upgrade_Gold_Passive_1 = 10 [default = 0];
inline bool RULE::has_upgrade_gold_passive_1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RULE::set_has_upgrade_gold_passive_1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RULE::clear_has_upgrade_gold_passive_1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RULE::clear_upgrade_gold_passive_1() {
  upgrade_gold_passive_1_ = 0;
  clear_has_upgrade_gold_passive_1();
}
inline ::google::protobuf::int32 RULE::upgrade_gold_passive_1() const {
  return upgrade_gold_passive_1_;
}
inline void RULE::set_upgrade_gold_passive_1(::google::protobuf::int32 value) {
  set_has_upgrade_gold_passive_1();
  upgrade_gold_passive_1_ = value;
}

// required int32 upgrade_Gold_Passive_2 = 11 [default = 0];
inline bool RULE::has_upgrade_gold_passive_2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RULE::set_has_upgrade_gold_passive_2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RULE::clear_has_upgrade_gold_passive_2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RULE::clear_upgrade_gold_passive_2() {
  upgrade_gold_passive_2_ = 0;
  clear_has_upgrade_gold_passive_2();
}
inline ::google::protobuf::int32 RULE::upgrade_gold_passive_2() const {
  return upgrade_gold_passive_2_;
}
inline void RULE::set_upgrade_gold_passive_2(::google::protobuf::int32 value) {
  set_has_upgrade_gold_passive_2();
  upgrade_gold_passive_2_ = value;
}

// required int32 upgrade_Gold_Passive_3 = 12 [default = 0];
inline bool RULE::has_upgrade_gold_passive_3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RULE::set_has_upgrade_gold_passive_3() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RULE::clear_has_upgrade_gold_passive_3() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RULE::clear_upgrade_gold_passive_3() {
  upgrade_gold_passive_3_ = 0;
  clear_has_upgrade_gold_passive_3();
}
inline ::google::protobuf::int32 RULE::upgrade_gold_passive_3() const {
  return upgrade_gold_passive_3_;
}
inline void RULE::set_upgrade_gold_passive_3(::google::protobuf::int32 value) {
  set_has_upgrade_gold_passive_3();
  upgrade_gold_passive_3_ = value;
}

// required int32 upgrade_Gold_Weapon = 13 [default = 0];
inline bool RULE::has_upgrade_gold_weapon() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RULE::set_has_upgrade_gold_weapon() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RULE::clear_has_upgrade_gold_weapon() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RULE::clear_upgrade_gold_weapon() {
  upgrade_gold_weapon_ = 0;
  clear_has_upgrade_gold_weapon();
}
inline ::google::protobuf::int32 RULE::upgrade_gold_weapon() const {
  return upgrade_gold_weapon_;
}
inline void RULE::set_upgrade_gold_weapon(::google::protobuf::int32 value) {
  set_has_upgrade_gold_weapon();
  upgrade_gold_weapon_ = value;
}

// required int32 upgrade_Gold_Necklace = 14 [default = 0];
inline bool RULE::has_upgrade_gold_necklace() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RULE::set_has_upgrade_gold_necklace() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RULE::clear_has_upgrade_gold_necklace() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RULE::clear_upgrade_gold_necklace() {
  upgrade_gold_necklace_ = 0;
  clear_has_upgrade_gold_necklace();
}
inline ::google::protobuf::int32 RULE::upgrade_gold_necklace() const {
  return upgrade_gold_necklace_;
}
inline void RULE::set_upgrade_gold_necklace(::google::protobuf::int32 value) {
  set_has_upgrade_gold_necklace();
  upgrade_gold_necklace_ = value;
}

// required int32 upgrade_Gold_Clothes = 15 [default = 0];
inline bool RULE::has_upgrade_gold_clothes() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RULE::set_has_upgrade_gold_clothes() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RULE::clear_has_upgrade_gold_clothes() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RULE::clear_upgrade_gold_clothes() {
  upgrade_gold_clothes_ = 0;
  clear_has_upgrade_gold_clothes();
}
inline ::google::protobuf::int32 RULE::upgrade_gold_clothes() const {
  return upgrade_gold_clothes_;
}
inline void RULE::set_upgrade_gold_clothes(::google::protobuf::int32 value) {
  set_has_upgrade_gold_clothes();
  upgrade_gold_clothes_ = value;
}

// required int32 upgrade_Gold_Belt = 16 [default = 0];
inline bool RULE::has_upgrade_gold_belt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RULE::set_has_upgrade_gold_belt() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RULE::clear_has_upgrade_gold_belt() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RULE::clear_upgrade_gold_belt() {
  upgrade_gold_belt_ = 0;
  clear_has_upgrade_gold_belt();
}
inline ::google::protobuf::int32 RULE::upgrade_gold_belt() const {
  return upgrade_gold_belt_;
}
inline void RULE::set_upgrade_gold_belt(::google::protobuf::int32 value) {
  set_has_upgrade_gold_belt();
  upgrade_gold_belt_ = value;
}

// required int32 upgrade_Gold_Ring = 17 [default = 0];
inline bool RULE::has_upgrade_gold_ring() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RULE::set_has_upgrade_gold_ring() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RULE::clear_has_upgrade_gold_ring() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RULE::clear_upgrade_gold_ring() {
  upgrade_gold_ring_ = 0;
  clear_has_upgrade_gold_ring();
}
inline ::google::protobuf::int32 RULE::upgrade_gold_ring() const {
  return upgrade_gold_ring_;
}
inline void RULE::set_upgrade_gold_ring(::google::protobuf::int32 value) {
  set_has_upgrade_gold_ring();
  upgrade_gold_ring_ = value;
}

// required int32 upgrade_Gold_Boot = 18 [default = 0];
inline bool RULE::has_upgrade_gold_boot() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RULE::set_has_upgrade_gold_boot() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RULE::clear_has_upgrade_gold_boot() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RULE::clear_upgrade_gold_boot() {
  upgrade_gold_boot_ = 0;
  clear_has_upgrade_gold_boot();
}
inline ::google::protobuf::int32 RULE::upgrade_gold_boot() const {
  return upgrade_gold_boot_;
}
inline void RULE::set_upgrade_gold_boot(::google::protobuf::int32 value) {
  set_has_upgrade_gold_boot();
  upgrade_gold_boot_ = value;
}

// -------------------------------------------------------------------

// RULE_ARRAY

// repeated .RULE items = 1;
inline int RULE_ARRAY::items_size() const {
  return items_.size();
}
inline void RULE_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::RULE& RULE_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::RULE* RULE_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::RULE* RULE_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RULE >&
RULE_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::RULE >*
RULE_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// SHOPRESETPRICE

// required string id = 1 [default = ""];
inline bool SHOPRESETPRICE::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SHOPRESETPRICE::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SHOPRESETPRICE::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SHOPRESETPRICE::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SHOPRESETPRICE::id() const {
  return *id_;
}
inline void SHOPRESETPRICE::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SHOPRESETPRICE::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SHOPRESETPRICE::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SHOPRESETPRICE::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SHOPRESETPRICE::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SHOPRESETPRICE::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 needGems = 2 [default = 0];
inline bool SHOPRESETPRICE::has_needgems() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SHOPRESETPRICE::set_has_needgems() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SHOPRESETPRICE::clear_has_needgems() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SHOPRESETPRICE::clear_needgems() {
  needgems_ = 0;
  clear_has_needgems();
}
inline ::google::protobuf::int32 SHOPRESETPRICE::needgems() const {
  return needgems_;
}
inline void SHOPRESETPRICE::set_needgems(::google::protobuf::int32 value) {
  set_has_needgems();
  needgems_ = value;
}

// -------------------------------------------------------------------

// SHOPRESETPRICE_ARRAY

// repeated .SHOPRESETPRICE items = 1;
inline int SHOPRESETPRICE_ARRAY::items_size() const {
  return items_.size();
}
inline void SHOPRESETPRICE_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::SHOPRESETPRICE& SHOPRESETPRICE_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::SHOPRESETPRICE* SHOPRESETPRICE_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SHOPRESETPRICE* SHOPRESETPRICE_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SHOPRESETPRICE >&
SHOPRESETPRICE_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SHOPRESETPRICE >*
SHOPRESETPRICE_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// SPPRICE

// required string id = 1 [default = ""];
inline bool SPPRICE::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPPRICE::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPPRICE::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPPRICE::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SPPRICE::id() const {
  return *id_;
}
inline void SPPRICE::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SPPRICE::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SPPRICE::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SPPRICE::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SPPRICE::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SPPRICE::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 needGems = 2 [default = 0];
inline bool SPPRICE::has_needgems() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SPPRICE::set_has_needgems() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SPPRICE::clear_has_needgems() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SPPRICE::clear_needgems() {
  needgems_ = 0;
  clear_has_needgems();
}
inline ::google::protobuf::int32 SPPRICE::needgems() const {
  return needgems_;
}
inline void SPPRICE::set_needgems(::google::protobuf::int32 value) {
  set_has_needgems();
  needgems_ = value;
}

// -------------------------------------------------------------------

// SPPRICE_ARRAY

// repeated .SPPRICE items = 1;
inline int SPPRICE_ARRAY::items_size() const {
  return items_.size();
}
inline void SPPRICE_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::SPPRICE& SPPRICE_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::SPPRICE* SPPRICE_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SPPRICE* SPPRICE_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SPPRICE >&
SPPRICE_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SPPRICE >*
SPPRICE_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// STAPRICE

// required string id = 1 [default = ""];
inline bool STAPRICE::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void STAPRICE::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void STAPRICE::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void STAPRICE::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& STAPRICE::id() const {
  return *id_;
}
inline void STAPRICE::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void STAPRICE::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void STAPRICE::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* STAPRICE::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* STAPRICE::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void STAPRICE::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 needGems = 2 [default = 0];
inline bool STAPRICE::has_needgems() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void STAPRICE::set_has_needgems() {
  _has_bits_[0] |= 0x00000002u;
}
inline void STAPRICE::clear_has_needgems() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void STAPRICE::clear_needgems() {
  needgems_ = 0;
  clear_has_needgems();
}
inline ::google::protobuf::int32 STAPRICE::needgems() const {
  return needgems_;
}
inline void STAPRICE::set_needgems(::google::protobuf::int32 value) {
  set_has_needgems();
  needgems_ = value;
}

// -------------------------------------------------------------------

// STAPRICE_ARRAY

// repeated .STAPRICE items = 1;
inline int STAPRICE_ARRAY::items_size() const {
  return items_.size();
}
inline void STAPRICE_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::STAPRICE& STAPRICE_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::STAPRICE* STAPRICE_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::STAPRICE* STAPRICE_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::STAPRICE >&
STAPRICE_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::STAPRICE >*
STAPRICE_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// SUBTASK

// required string id = 1 [default = ""];
inline bool SUBTASK::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SUBTASK::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SUBTASK::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SUBTASK::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SUBTASK::id() const {
  return *id_;
}
inline void SUBTASK::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SUBTASK::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SUBTASK::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUBTASK::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SUBTASK::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUBTASK::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string battleData = 2 [default = ""];
inline bool SUBTASK::has_battledata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SUBTASK::set_has_battledata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SUBTASK::clear_has_battledata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SUBTASK::clear_battledata() {
  if (battledata_ != &::google::protobuf::internal::kEmptyString) {
    battledata_->clear();
  }
  clear_has_battledata();
}
inline const ::std::string& SUBTASK::battledata() const {
  return *battledata_;
}
inline void SUBTASK::set_battledata(const ::std::string& value) {
  set_has_battledata();
  if (battledata_ == &::google::protobuf::internal::kEmptyString) {
    battledata_ = new ::std::string;
  }
  battledata_->assign(value);
}
inline void SUBTASK::set_battledata(const char* value) {
  set_has_battledata();
  if (battledata_ == &::google::protobuf::internal::kEmptyString) {
    battledata_ = new ::std::string;
  }
  battledata_->assign(value);
}
inline void SUBTASK::set_battledata(const char* value, size_t size) {
  set_has_battledata();
  if (battledata_ == &::google::protobuf::internal::kEmptyString) {
    battledata_ = new ::std::string;
  }
  battledata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUBTASK::mutable_battledata() {
  set_has_battledata();
  if (battledata_ == &::google::protobuf::internal::kEmptyString) {
    battledata_ = new ::std::string;
  }
  return battledata_;
}
inline ::std::string* SUBTASK::release_battledata() {
  clear_has_battledata();
  if (battledata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = battledata_;
    battledata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUBTASK::set_allocated_battledata(::std::string* battledata) {
  if (battledata_ != &::google::protobuf::internal::kEmptyString) {
    delete battledata_;
  }
  if (battledata) {
    set_has_battledata();
    battledata_ = battledata;
  } else {
    clear_has_battledata();
    battledata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string diffs = 3 [default = ""];
inline bool SUBTASK::has_diffs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SUBTASK::set_has_diffs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SUBTASK::clear_has_diffs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SUBTASK::clear_diffs() {
  if (diffs_ != &::google::protobuf::internal::kEmptyString) {
    diffs_->clear();
  }
  clear_has_diffs();
}
inline const ::std::string& SUBTASK::diffs() const {
  return *diffs_;
}
inline void SUBTASK::set_diffs(const ::std::string& value) {
  set_has_diffs();
  if (diffs_ == &::google::protobuf::internal::kEmptyString) {
    diffs_ = new ::std::string;
  }
  diffs_->assign(value);
}
inline void SUBTASK::set_diffs(const char* value) {
  set_has_diffs();
  if (diffs_ == &::google::protobuf::internal::kEmptyString) {
    diffs_ = new ::std::string;
  }
  diffs_->assign(value);
}
inline void SUBTASK::set_diffs(const char* value, size_t size) {
  set_has_diffs();
  if (diffs_ == &::google::protobuf::internal::kEmptyString) {
    diffs_ = new ::std::string;
  }
  diffs_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUBTASK::mutable_diffs() {
  set_has_diffs();
  if (diffs_ == &::google::protobuf::internal::kEmptyString) {
    diffs_ = new ::std::string;
  }
  return diffs_;
}
inline ::std::string* SUBTASK::release_diffs() {
  clear_has_diffs();
  if (diffs_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = diffs_;
    diffs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUBTASK::set_allocated_diffs(::std::string* diffs) {
  if (diffs_ != &::google::protobuf::internal::kEmptyString) {
    delete diffs_;
  }
  if (diffs) {
    set_has_diffs();
    diffs_ = diffs;
  } else {
    clear_has_diffs();
    diffs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string totalTimes = 4 [default = ""];
inline bool SUBTASK::has_totaltimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SUBTASK::set_has_totaltimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SUBTASK::clear_has_totaltimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SUBTASK::clear_totaltimes() {
  if (totaltimes_ != &::google::protobuf::internal::kEmptyString) {
    totaltimes_->clear();
  }
  clear_has_totaltimes();
}
inline const ::std::string& SUBTASK::totaltimes() const {
  return *totaltimes_;
}
inline void SUBTASK::set_totaltimes(const ::std::string& value) {
  set_has_totaltimes();
  if (totaltimes_ == &::google::protobuf::internal::kEmptyString) {
    totaltimes_ = new ::std::string;
  }
  totaltimes_->assign(value);
}
inline void SUBTASK::set_totaltimes(const char* value) {
  set_has_totaltimes();
  if (totaltimes_ == &::google::protobuf::internal::kEmptyString) {
    totaltimes_ = new ::std::string;
  }
  totaltimes_->assign(value);
}
inline void SUBTASK::set_totaltimes(const char* value, size_t size) {
  set_has_totaltimes();
  if (totaltimes_ == &::google::protobuf::internal::kEmptyString) {
    totaltimes_ = new ::std::string;
  }
  totaltimes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUBTASK::mutable_totaltimes() {
  set_has_totaltimes();
  if (totaltimes_ == &::google::protobuf::internal::kEmptyString) {
    totaltimes_ = new ::std::string;
  }
  return totaltimes_;
}
inline ::std::string* SUBTASK::release_totaltimes() {
  clear_has_totaltimes();
  if (totaltimes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = totaltimes_;
    totaltimes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUBTASK::set_allocated_totaltimes(::std::string* totaltimes) {
  if (totaltimes_ != &::google::protobuf::internal::kEmptyString) {
    delete totaltimes_;
  }
  if (totaltimes) {
    set_has_totaltimes();
    totaltimes_ = totaltimes;
  } else {
    clear_has_totaltimes();
    totaltimes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name_ch = 5 [default = ""];
inline bool SUBTASK::has_name_ch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SUBTASK::set_has_name_ch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SUBTASK::clear_has_name_ch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SUBTASK::clear_name_ch() {
  if (name_ch_ != &::google::protobuf::internal::kEmptyString) {
    name_ch_->clear();
  }
  clear_has_name_ch();
}
inline const ::std::string& SUBTASK::name_ch() const {
  return *name_ch_;
}
inline void SUBTASK::set_name_ch(const ::std::string& value) {
  set_has_name_ch();
  if (name_ch_ == &::google::protobuf::internal::kEmptyString) {
    name_ch_ = new ::std::string;
  }
  name_ch_->assign(value);
}
inline void SUBTASK::set_name_ch(const char* value) {
  set_has_name_ch();
  if (name_ch_ == &::google::protobuf::internal::kEmptyString) {
    name_ch_ = new ::std::string;
  }
  name_ch_->assign(value);
}
inline void SUBTASK::set_name_ch(const char* value, size_t size) {
  set_has_name_ch();
  if (name_ch_ == &::google::protobuf::internal::kEmptyString) {
    name_ch_ = new ::std::string;
  }
  name_ch_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUBTASK::mutable_name_ch() {
  set_has_name_ch();
  if (name_ch_ == &::google::protobuf::internal::kEmptyString) {
    name_ch_ = new ::std::string;
  }
  return name_ch_;
}
inline ::std::string* SUBTASK::release_name_ch() {
  clear_has_name_ch();
  if (name_ch_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_ch_;
    name_ch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUBTASK::set_allocated_name_ch(::std::string* name_ch) {
  if (name_ch_ != &::google::protobuf::internal::kEmptyString) {
    delete name_ch_;
  }
  if (name_ch) {
    set_has_name_ch();
    name_ch_ = name_ch;
  } else {
    clear_has_name_ch();
    name_ch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 expendSt = 6 [default = 0];
inline bool SUBTASK::has_expendst() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SUBTASK::set_has_expendst() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SUBTASK::clear_has_expendst() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SUBTASK::clear_expendst() {
  expendst_ = 0;
  clear_has_expendst();
}
inline ::google::protobuf::int32 SUBTASK::expendst() const {
  return expendst_;
}
inline void SUBTASK::set_expendst(::google::protobuf::int32 value) {
  set_has_expendst();
  expendst_ = value;
}

// required int32 fightCount = 7 [default = 0];
inline bool SUBTASK::has_fightcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SUBTASK::set_has_fightcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SUBTASK::clear_has_fightcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SUBTASK::clear_fightcount() {
  fightcount_ = 0;
  clear_has_fightcount();
}
inline ::google::protobuf::int32 SUBTASK::fightcount() const {
  return fightcount_;
}
inline void SUBTASK::set_fightcount(::google::protobuf::int32 value) {
  set_has_fightcount();
  fightcount_ = value;
}

// required int32 idExp = 8 [default = 0];
inline bool SUBTASK::has_idexp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SUBTASK::set_has_idexp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SUBTASK::clear_has_idexp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SUBTASK::clear_idexp() {
  idexp_ = 0;
  clear_has_idexp();
}
inline ::google::protobuf::int32 SUBTASK::idexp() const {
  return idexp_;
}
inline void SUBTASK::set_idexp(::google::protobuf::int32 value) {
  set_has_idexp();
  idexp_ = value;
}

// required int32 heroExp = 9 [default = 0];
inline bool SUBTASK::has_heroexp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SUBTASK::set_has_heroexp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SUBTASK::clear_has_heroexp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SUBTASK::clear_heroexp() {
  heroexp_ = 0;
  clear_has_heroexp();
}
inline ::google::protobuf::int32 SUBTASK::heroexp() const {
  return heroexp_;
}
inline void SUBTASK::set_heroexp(::google::protobuf::int32 value) {
  set_has_heroexp();
  heroexp_ = value;
}

// required int32 dropGold = 10 [default = 0];
inline bool SUBTASK::has_dropgold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SUBTASK::set_has_dropgold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SUBTASK::clear_has_dropgold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SUBTASK::clear_dropgold() {
  dropgold_ = 0;
  clear_has_dropgold();
}
inline ::google::protobuf::int32 SUBTASK::dropgold() const {
  return dropgold_;
}
inline void SUBTASK::set_dropgold(::google::protobuf::int32 value) {
  set_has_dropgold();
  dropgold_ = value;
}

// required string pointParentId = 11 [default = ""];
inline bool SUBTASK::has_pointparentid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SUBTASK::set_has_pointparentid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SUBTASK::clear_has_pointparentid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SUBTASK::clear_pointparentid() {
  if (pointparentid_ != &::google::protobuf::internal::kEmptyString) {
    pointparentid_->clear();
  }
  clear_has_pointparentid();
}
inline const ::std::string& SUBTASK::pointparentid() const {
  return *pointparentid_;
}
inline void SUBTASK::set_pointparentid(const ::std::string& value) {
  set_has_pointparentid();
  if (pointparentid_ == &::google::protobuf::internal::kEmptyString) {
    pointparentid_ = new ::std::string;
  }
  pointparentid_->assign(value);
}
inline void SUBTASK::set_pointparentid(const char* value) {
  set_has_pointparentid();
  if (pointparentid_ == &::google::protobuf::internal::kEmptyString) {
    pointparentid_ = new ::std::string;
  }
  pointparentid_->assign(value);
}
inline void SUBTASK::set_pointparentid(const char* value, size_t size) {
  set_has_pointparentid();
  if (pointparentid_ == &::google::protobuf::internal::kEmptyString) {
    pointparentid_ = new ::std::string;
  }
  pointparentid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SUBTASK::mutable_pointparentid() {
  set_has_pointparentid();
  if (pointparentid_ == &::google::protobuf::internal::kEmptyString) {
    pointparentid_ = new ::std::string;
  }
  return pointparentid_;
}
inline ::std::string* SUBTASK::release_pointparentid() {
  clear_has_pointparentid();
  if (pointparentid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pointparentid_;
    pointparentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SUBTASK::set_allocated_pointparentid(::std::string* pointparentid) {
  if (pointparentid_ != &::google::protobuf::internal::kEmptyString) {
    delete pointparentid_;
  }
  if (pointparentid) {
    set_has_pointparentid();
    pointparentid_ = pointparentid;
  } else {
    clear_has_pointparentid();
    pointparentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float priority = 12 [default = 0];
inline bool SUBTASK::has_priority() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SUBTASK::set_has_priority() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SUBTASK::clear_has_priority() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SUBTASK::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline float SUBTASK::priority() const {
  return priority_;
}
inline void SUBTASK::set_priority(float value) {
  set_has_priority();
  priority_ = value;
}

// required int32 fightPower = 13 [default = 0];
inline bool SUBTASK::has_fightpower() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SUBTASK::set_has_fightpower() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SUBTASK::clear_has_fightpower() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SUBTASK::clear_fightpower() {
  fightpower_ = 0;
  clear_has_fightpower();
}
inline ::google::protobuf::int32 SUBTASK::fightpower() const {
  return fightpower_;
}
inline void SUBTASK::set_fightpower(::google::protobuf::int32 value) {
  set_has_fightpower();
  fightpower_ = value;
}

// -------------------------------------------------------------------

// SUBTASK_ARRAY

// repeated .SUBTASK items = 1;
inline int SUBTASK_ARRAY::items_size() const {
  return items_.size();
}
inline void SUBTASK_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::SUBTASK& SUBTASK_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::SUBTASK* SUBTASK_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SUBTASK* SUBTASK_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SUBTASK >&
SUBTASK_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SUBTASK >*
SUBTASK_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// TASK

// required string id = 1 [default = ""];
inline bool TASK::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TASK::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TASK::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TASK::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& TASK::id() const {
  return *id_;
}
inline void TASK::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void TASK::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void TASK::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TASK::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* TASK::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TASK::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 seriesType = 2 [default = 0];
inline bool TASK::has_seriestype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TASK::set_has_seriestype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TASK::clear_has_seriestype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TASK::clear_seriestype() {
  seriestype_ = 0;
  clear_has_seriestype();
}
inline ::google::protobuf::int32 TASK::seriestype() const {
  return seriestype_;
}
inline void TASK::set_seriestype(::google::protobuf::int32 value) {
  set_has_seriestype();
  seriestype_ = value;
}

// required string seriesName_ch = 3 [default = ""];
inline bool TASK::has_seriesname_ch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TASK::set_has_seriesname_ch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TASK::clear_has_seriesname_ch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TASK::clear_seriesname_ch() {
  if (seriesname_ch_ != &::google::protobuf::internal::kEmptyString) {
    seriesname_ch_->clear();
  }
  clear_has_seriesname_ch();
}
inline const ::std::string& TASK::seriesname_ch() const {
  return *seriesname_ch_;
}
inline void TASK::set_seriesname_ch(const ::std::string& value) {
  set_has_seriesname_ch();
  if (seriesname_ch_ == &::google::protobuf::internal::kEmptyString) {
    seriesname_ch_ = new ::std::string;
  }
  seriesname_ch_->assign(value);
}
inline void TASK::set_seriesname_ch(const char* value) {
  set_has_seriesname_ch();
  if (seriesname_ch_ == &::google::protobuf::internal::kEmptyString) {
    seriesname_ch_ = new ::std::string;
  }
  seriesname_ch_->assign(value);
}
inline void TASK::set_seriesname_ch(const char* value, size_t size) {
  set_has_seriesname_ch();
  if (seriesname_ch_ == &::google::protobuf::internal::kEmptyString) {
    seriesname_ch_ = new ::std::string;
  }
  seriesname_ch_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TASK::mutable_seriesname_ch() {
  set_has_seriesname_ch();
  if (seriesname_ch_ == &::google::protobuf::internal::kEmptyString) {
    seriesname_ch_ = new ::std::string;
  }
  return seriesname_ch_;
}
inline ::std::string* TASK::release_seriesname_ch() {
  clear_has_seriesname_ch();
  if (seriesname_ch_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesname_ch_;
    seriesname_ch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TASK::set_allocated_seriesname_ch(::std::string* seriesname_ch) {
  if (seriesname_ch_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesname_ch_;
  }
  if (seriesname_ch) {
    set_has_seriesname_ch();
    seriesname_ch_ = seriesname_ch;
  } else {
    clear_has_seriesname_ch();
    seriesname_ch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string rewardId = 4 [default = ""];
inline bool TASK::has_rewardid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TASK::set_has_rewardid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TASK::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TASK::clear_rewardid() {
  if (rewardid_ != &::google::protobuf::internal::kEmptyString) {
    rewardid_->clear();
  }
  clear_has_rewardid();
}
inline const ::std::string& TASK::rewardid() const {
  return *rewardid_;
}
inline void TASK::set_rewardid(const ::std::string& value) {
  set_has_rewardid();
  if (rewardid_ == &::google::protobuf::internal::kEmptyString) {
    rewardid_ = new ::std::string;
  }
  rewardid_->assign(value);
}
inline void TASK::set_rewardid(const char* value) {
  set_has_rewardid();
  if (rewardid_ == &::google::protobuf::internal::kEmptyString) {
    rewardid_ = new ::std::string;
  }
  rewardid_->assign(value);
}
inline void TASK::set_rewardid(const char* value, size_t size) {
  set_has_rewardid();
  if (rewardid_ == &::google::protobuf::internal::kEmptyString) {
    rewardid_ = new ::std::string;
  }
  rewardid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TASK::mutable_rewardid() {
  set_has_rewardid();
  if (rewardid_ == &::google::protobuf::internal::kEmptyString) {
    rewardid_ = new ::std::string;
  }
  return rewardid_;
}
inline ::std::string* TASK::release_rewardid() {
  clear_has_rewardid();
  if (rewardid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rewardid_;
    rewardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TASK::set_allocated_rewardid(::std::string* rewardid) {
  if (rewardid_ != &::google::protobuf::internal::kEmptyString) {
    delete rewardid_;
  }
  if (rewardid) {
    set_has_rewardid();
    rewardid_ = rewardid;
  } else {
    clear_has_rewardid();
    rewardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 openTimeType = 5 [default = 0];
inline bool TASK::has_opentimetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TASK::set_has_opentimetype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TASK::clear_has_opentimetype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TASK::clear_opentimetype() {
  opentimetype_ = 0;
  clear_has_opentimetype();
}
inline ::google::protobuf::int32 TASK::opentimetype() const {
  return opentimetype_;
}
inline void TASK::set_opentimetype(::google::protobuf::int32 value) {
  set_has_opentimetype();
  opentimetype_ = value;
}

// required string openTime = 6 [default = ""];
inline bool TASK::has_opentime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TASK::set_has_opentime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TASK::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TASK::clear_opentime() {
  if (opentime_ != &::google::protobuf::internal::kEmptyString) {
    opentime_->clear();
  }
  clear_has_opentime();
}
inline const ::std::string& TASK::opentime() const {
  return *opentime_;
}
inline void TASK::set_opentime(const ::std::string& value) {
  set_has_opentime();
  if (opentime_ == &::google::protobuf::internal::kEmptyString) {
    opentime_ = new ::std::string;
  }
  opentime_->assign(value);
}
inline void TASK::set_opentime(const char* value) {
  set_has_opentime();
  if (opentime_ == &::google::protobuf::internal::kEmptyString) {
    opentime_ = new ::std::string;
  }
  opentime_->assign(value);
}
inline void TASK::set_opentime(const char* value, size_t size) {
  set_has_opentime();
  if (opentime_ == &::google::protobuf::internal::kEmptyString) {
    opentime_ = new ::std::string;
  }
  opentime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TASK::mutable_opentime() {
  set_has_opentime();
  if (opentime_ == &::google::protobuf::internal::kEmptyString) {
    opentime_ = new ::std::string;
  }
  return opentime_;
}
inline ::std::string* TASK::release_opentime() {
  clear_has_opentime();
  if (opentime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opentime_;
    opentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TASK::set_allocated_opentime(::std::string* opentime) {
  if (opentime_ != &::google::protobuf::internal::kEmptyString) {
    delete opentime_;
  }
  if (opentime) {
    set_has_opentime();
    opentime_ = opentime;
  } else {
    clear_has_opentime();
    opentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 totalEnterNum = 7 [default = 0];
inline bool TASK::has_totalenternum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TASK::set_has_totalenternum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TASK::clear_has_totalenternum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TASK::clear_totalenternum() {
  totalenternum_ = 0;
  clear_has_totalenternum();
}
inline ::google::protobuf::int32 TASK::totalenternum() const {
  return totalenternum_;
}
inline void TASK::set_totalenternum(::google::protobuf::int32 value) {
  set_has_totalenternum();
  totalenternum_ = value;
}

// required string enterLimit = 8 [default = ""];
inline bool TASK::has_enterlimit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TASK::set_has_enterlimit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TASK::clear_has_enterlimit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TASK::clear_enterlimit() {
  if (enterlimit_ != &::google::protobuf::internal::kEmptyString) {
    enterlimit_->clear();
  }
  clear_has_enterlimit();
}
inline const ::std::string& TASK::enterlimit() const {
  return *enterlimit_;
}
inline void TASK::set_enterlimit(const ::std::string& value) {
  set_has_enterlimit();
  if (enterlimit_ == &::google::protobuf::internal::kEmptyString) {
    enterlimit_ = new ::std::string;
  }
  enterlimit_->assign(value);
}
inline void TASK::set_enterlimit(const char* value) {
  set_has_enterlimit();
  if (enterlimit_ == &::google::protobuf::internal::kEmptyString) {
    enterlimit_ = new ::std::string;
  }
  enterlimit_->assign(value);
}
inline void TASK::set_enterlimit(const char* value, size_t size) {
  set_has_enterlimit();
  if (enterlimit_ == &::google::protobuf::internal::kEmptyString) {
    enterlimit_ = new ::std::string;
  }
  enterlimit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TASK::mutable_enterlimit() {
  set_has_enterlimit();
  if (enterlimit_ == &::google::protobuf::internal::kEmptyString) {
    enterlimit_ = new ::std::string;
  }
  return enterlimit_;
}
inline ::std::string* TASK::release_enterlimit() {
  clear_has_enterlimit();
  if (enterlimit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = enterlimit_;
    enterlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TASK::set_allocated_enterlimit(::std::string* enterlimit) {
  if (enterlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete enterlimit_;
  }
  if (enterlimit) {
    set_has_enterlimit();
    enterlimit_ = enterlimit;
  } else {
    clear_has_enterlimit();
    enterlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pointParentId = 9 [default = ""];
inline bool TASK::has_pointparentid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TASK::set_has_pointparentid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TASK::clear_has_pointparentid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TASK::clear_pointparentid() {
  if (pointparentid_ != &::google::protobuf::internal::kEmptyString) {
    pointparentid_->clear();
  }
  clear_has_pointparentid();
}
inline const ::std::string& TASK::pointparentid() const {
  return *pointparentid_;
}
inline void TASK::set_pointparentid(const ::std::string& value) {
  set_has_pointparentid();
  if (pointparentid_ == &::google::protobuf::internal::kEmptyString) {
    pointparentid_ = new ::std::string;
  }
  pointparentid_->assign(value);
}
inline void TASK::set_pointparentid(const char* value) {
  set_has_pointparentid();
  if (pointparentid_ == &::google::protobuf::internal::kEmptyString) {
    pointparentid_ = new ::std::string;
  }
  pointparentid_->assign(value);
}
inline void TASK::set_pointparentid(const char* value, size_t size) {
  set_has_pointparentid();
  if (pointparentid_ == &::google::protobuf::internal::kEmptyString) {
    pointparentid_ = new ::std::string;
  }
  pointparentid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TASK::mutable_pointparentid() {
  set_has_pointparentid();
  if (pointparentid_ == &::google::protobuf::internal::kEmptyString) {
    pointparentid_ = new ::std::string;
  }
  return pointparentid_;
}
inline ::std::string* TASK::release_pointparentid() {
  clear_has_pointparentid();
  if (pointparentid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pointparentid_;
    pointparentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TASK::set_allocated_pointparentid(::std::string* pointparentid) {
  if (pointparentid_ != &::google::protobuf::internal::kEmptyString) {
    delete pointparentid_;
  }
  if (pointparentid) {
    set_has_pointparentid();
    pointparentid_ = pointparentid;
  } else {
    clear_has_pointparentid();
    pointparentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string nextPoint = 10 [default = ""];
inline bool TASK::has_nextpoint() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TASK::set_has_nextpoint() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TASK::clear_has_nextpoint() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TASK::clear_nextpoint() {
  if (nextpoint_ != &::google::protobuf::internal::kEmptyString) {
    nextpoint_->clear();
  }
  clear_has_nextpoint();
}
inline const ::std::string& TASK::nextpoint() const {
  return *nextpoint_;
}
inline void TASK::set_nextpoint(const ::std::string& value) {
  set_has_nextpoint();
  if (nextpoint_ == &::google::protobuf::internal::kEmptyString) {
    nextpoint_ = new ::std::string;
  }
  nextpoint_->assign(value);
}
inline void TASK::set_nextpoint(const char* value) {
  set_has_nextpoint();
  if (nextpoint_ == &::google::protobuf::internal::kEmptyString) {
    nextpoint_ = new ::std::string;
  }
  nextpoint_->assign(value);
}
inline void TASK::set_nextpoint(const char* value, size_t size) {
  set_has_nextpoint();
  if (nextpoint_ == &::google::protobuf::internal::kEmptyString) {
    nextpoint_ = new ::std::string;
  }
  nextpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TASK::mutable_nextpoint() {
  set_has_nextpoint();
  if (nextpoint_ == &::google::protobuf::internal::kEmptyString) {
    nextpoint_ = new ::std::string;
  }
  return nextpoint_;
}
inline ::std::string* TASK::release_nextpoint() {
  clear_has_nextpoint();
  if (nextpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nextpoint_;
    nextpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TASK::set_allocated_nextpoint(::std::string* nextpoint) {
  if (nextpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete nextpoint_;
  }
  if (nextpoint) {
    set_has_nextpoint();
    nextpoint_ = nextpoint;
  } else {
    clear_has_nextpoint();
    nextpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float priority = 11 [default = 0];
inline bool TASK::has_priority() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TASK::set_has_priority() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TASK::clear_has_priority() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TASK::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline float TASK::priority() const {
  return priority_;
}
inline void TASK::set_priority(float value) {
  set_has_priority();
  priority_ = value;
}

// -------------------------------------------------------------------

// TASK_ARRAY

// repeated .TASK items = 1;
inline int TASK_ARRAY::items_size() const {
  return items_.size();
}
inline void TASK_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::TASK& TASK_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::TASK* TASK_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::TASK* TASK_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TASK >&
TASK_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::TASK >*
TASK_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// TRIGGERATTACK

// required string id = 1 [default = ""];
inline bool TRIGGERATTACK::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRIGGERATTACK::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRIGGERATTACK::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRIGGERATTACK::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& TRIGGERATTACK::id() const {
  return *id_;
}
inline void TRIGGERATTACK::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void TRIGGERATTACK::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void TRIGGERATTACK::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TRIGGERATTACK::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* TRIGGERATTACK::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TRIGGERATTACK::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 type = 2 [default = 0];
inline bool TRIGGERATTACK::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRIGGERATTACK::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRIGGERATTACK::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRIGGERATTACK::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 TRIGGERATTACK::type() const {
  return type_;
}
inline void TRIGGERATTACK::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required float cd = 3 [default = 0];
inline bool TRIGGERATTACK::has_cd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRIGGERATTACK::set_has_cd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRIGGERATTACK::clear_has_cd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRIGGERATTACK::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline float TRIGGERATTACK::cd() const {
  return cd_;
}
inline void TRIGGERATTACK::set_cd(float value) {
  set_has_cd();
  cd_ = value;
}

// -------------------------------------------------------------------

// TRIGGERATTACK_ARRAY

// repeated .TRIGGERATTACK items = 1;
inline int TRIGGERATTACK_ARRAY::items_size() const {
  return items_.size();
}
inline void TRIGGERATTACK_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::TRIGGERATTACK& TRIGGERATTACK_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::TRIGGERATTACK* TRIGGERATTACK_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::TRIGGERATTACK* TRIGGERATTACK_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TRIGGERATTACK >&
TRIGGERATTACK_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::TRIGGERATTACK >*
TRIGGERATTACK_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// TRIGGERSTARTCONDITION

// required string id = 1 [default = ""];
inline bool TRIGGERSTARTCONDITION::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRIGGERSTARTCONDITION::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRIGGERSTARTCONDITION::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRIGGERSTARTCONDITION::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& TRIGGERSTARTCONDITION::id() const {
  return *id_;
}
inline void TRIGGERSTARTCONDITION::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void TRIGGERSTARTCONDITION::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void TRIGGERSTARTCONDITION::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TRIGGERSTARTCONDITION::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* TRIGGERSTARTCONDITION::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TRIGGERSTARTCONDITION::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 trigger_Time = 2 [default = 0];
inline bool TRIGGERSTARTCONDITION::has_trigger_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRIGGERSTARTCONDITION::set_has_trigger_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRIGGERSTARTCONDITION::clear_has_trigger_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRIGGERSTARTCONDITION::clear_trigger_time() {
  trigger_time_ = 0;
  clear_has_trigger_time();
}
inline ::google::protobuf::int32 TRIGGERSTARTCONDITION::trigger_time() const {
  return trigger_time_;
}
inline void TRIGGERSTARTCONDITION::set_trigger_time(::google::protobuf::int32 value) {
  set_has_trigger_time();
  trigger_time_ = value;
}

// required int32 trigger_Team = 3 [default = 0];
inline bool TRIGGERSTARTCONDITION::has_trigger_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRIGGERSTARTCONDITION::set_has_trigger_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRIGGERSTARTCONDITION::clear_has_trigger_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRIGGERSTARTCONDITION::clear_trigger_team() {
  trigger_team_ = 0;
  clear_has_trigger_team();
}
inline ::google::protobuf::int32 TRIGGERSTARTCONDITION::trigger_team() const {
  return trigger_team_;
}
inline void TRIGGERSTARTCONDITION::set_trigger_team(::google::protobuf::int32 value) {
  set_has_trigger_team();
  trigger_team_ = value;
}

// required int32 trigger_State = 4 [default = 0];
inline bool TRIGGERSTARTCONDITION::has_trigger_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRIGGERSTARTCONDITION::set_has_trigger_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRIGGERSTARTCONDITION::clear_has_trigger_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRIGGERSTARTCONDITION::clear_trigger_state() {
  trigger_state_ = 0;
  clear_has_trigger_state();
}
inline ::google::protobuf::int32 TRIGGERSTARTCONDITION::trigger_state() const {
  return trigger_state_;
}
inline void TRIGGERSTARTCONDITION::set_trigger_state(::google::protobuf::int32 value) {
  set_has_trigger_state();
  trigger_state_ = value;
}

// required int32 trigger_Occupation = 5 [default = 0];
inline bool TRIGGERSTARTCONDITION::has_trigger_occupation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TRIGGERSTARTCONDITION::set_has_trigger_occupation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TRIGGERSTARTCONDITION::clear_has_trigger_occupation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TRIGGERSTARTCONDITION::clear_trigger_occupation() {
  trigger_occupation_ = 0;
  clear_has_trigger_occupation();
}
inline ::google::protobuf::int32 TRIGGERSTARTCONDITION::trigger_occupation() const {
  return trigger_occupation_;
}
inline void TRIGGERSTARTCONDITION::set_trigger_occupation(::google::protobuf::int32 value) {
  set_has_trigger_occupation();
  trigger_occupation_ = value;
}

// required int32 trigger_Mark = 6 [default = 0];
inline bool TRIGGERSTARTCONDITION::has_trigger_mark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TRIGGERSTARTCONDITION::set_has_trigger_mark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TRIGGERSTARTCONDITION::clear_has_trigger_mark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TRIGGERSTARTCONDITION::clear_trigger_mark() {
  trigger_mark_ = 0;
  clear_has_trigger_mark();
}
inline ::google::protobuf::int32 TRIGGERSTARTCONDITION::trigger_mark() const {
  return trigger_mark_;
}
inline void TRIGGERSTARTCONDITION::set_trigger_mark(::google::protobuf::int32 value) {
  set_has_trigger_mark();
  trigger_mark_ = value;
}

// required int32 trigger_Count = 7 [default = 0];
inline bool TRIGGERSTARTCONDITION::has_trigger_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TRIGGERSTARTCONDITION::set_has_trigger_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TRIGGERSTARTCONDITION::clear_has_trigger_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TRIGGERSTARTCONDITION::clear_trigger_count() {
  trigger_count_ = 0;
  clear_has_trigger_count();
}
inline ::google::protobuf::int32 TRIGGERSTARTCONDITION::trigger_count() const {
  return trigger_count_;
}
inline void TRIGGERSTARTCONDITION::set_trigger_count(::google::protobuf::int32 value) {
  set_has_trigger_count();
  trigger_count_ = value;
}

// -------------------------------------------------------------------

// TRIGGERSTARTCONDITION_ARRAY

// repeated .TRIGGERSTARTCONDITION items = 1;
inline int TRIGGERSTARTCONDITION_ARRAY::items_size() const {
  return items_.size();
}
inline void TRIGGERSTARTCONDITION_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::TRIGGERSTARTCONDITION& TRIGGERSTARTCONDITION_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::TRIGGERSTARTCONDITION* TRIGGERSTARTCONDITION_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::TRIGGERSTARTCONDITION* TRIGGERSTARTCONDITION_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TRIGGERSTARTCONDITION >&
TRIGGERSTARTCONDITION_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::TRIGGERSTARTCONDITION >*
TRIGGERSTARTCONDITION_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// VIP

// required string id = 1 [default = ""];
inline bool VIP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VIP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VIP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VIP::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& VIP::id() const {
  return *id_;
}
inline void VIP::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void VIP::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void VIP::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VIP::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* VIP::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VIP::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 needRMB = 2 [default = 0];
inline bool VIP::has_needrmb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VIP::set_has_needrmb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VIP::clear_has_needrmb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VIP::clear_needrmb() {
  needrmb_ = 0;
  clear_has_needrmb();
}
inline ::google::protobuf::int32 VIP::needrmb() const {
  return needrmb_;
}
inline void VIP::set_needrmb(::google::protobuf::int32 value) {
  set_has_needrmb();
  needrmb_ = value;
}

// required int32 freeItemCount = 3 [default = 0];
inline bool VIP::has_freeitemcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VIP::set_has_freeitemcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VIP::clear_has_freeitemcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VIP::clear_freeitemcount() {
  freeitemcount_ = 0;
  clear_has_freeitemcount();
}
inline ::google::protobuf::int32 VIP::freeitemcount() const {
  return freeitemcount_;
}
inline void VIP::set_freeitemcount(::google::protobuf::int32 value) {
  set_has_freeitemcount();
  freeitemcount_ = value;
}

// required int32 buyPowerCount = 4 [default = 0];
inline bool VIP::has_buypowercount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VIP::set_has_buypowercount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VIP::clear_has_buypowercount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VIP::clear_buypowercount() {
  buypowercount_ = 0;
  clear_has_buypowercount();
}
inline ::google::protobuf::int32 VIP::buypowercount() const {
  return buypowercount_;
}
inline void VIP::set_buypowercount(::google::protobuf::int32 value) {
  set_has_buypowercount();
  buypowercount_ = value;
}

// required int32 buyFBCount = 5 [default = 0];
inline bool VIP::has_buyfbcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VIP::set_has_buyfbcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VIP::clear_has_buyfbcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VIP::clear_buyfbcount() {
  buyfbcount_ = 0;
  clear_has_buyfbcount();
}
inline ::google::protobuf::int32 VIP::buyfbcount() const {
  return buyfbcount_;
}
inline void VIP::set_buyfbcount(::google::protobuf::int32 value) {
  set_has_buyfbcount();
  buyfbcount_ = value;
}

// required int32 buyArenaCount = 6 [default = 0];
inline bool VIP::has_buyarenacount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VIP::set_has_buyarenacount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VIP::clear_has_buyarenacount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VIP::clear_buyarenacount() {
  buyarenacount_ = 0;
  clear_has_buyarenacount();
}
inline ::google::protobuf::int32 VIP::buyarenacount() const {
  return buyarenacount_;
}
inline void VIP::set_buyarenacount(::google::protobuf::int32 value) {
  set_has_buyarenacount();
  buyarenacount_ = value;
}

// required int32 buyGoldsCount = 7 [default = 0];
inline bool VIP::has_buygoldscount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VIP::set_has_buygoldscount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VIP::clear_has_buygoldscount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VIP::clear_buygoldscount() {
  buygoldscount_ = 0;
  clear_has_buygoldscount();
}
inline ::google::protobuf::int32 VIP::buygoldscount() const {
  return buygoldscount_;
}
inline void VIP::set_buygoldscount(::google::protobuf::int32 value) {
  set_has_buygoldscount();
  buygoldscount_ = value;
}

// required int32 maxSkillPoint = 8 [default = 0];
inline bool VIP::has_maxskillpoint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VIP::set_has_maxskillpoint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VIP::clear_has_maxskillpoint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VIP::clear_maxskillpoint() {
  maxskillpoint_ = 0;
  clear_has_maxskillpoint();
}
inline ::google::protobuf::int32 VIP::maxskillpoint() const {
  return maxskillpoint_;
}
inline void VIP::set_maxskillpoint(::google::protobuf::int32 value) {
  set_has_maxskillpoint();
  maxskillpoint_ = value;
}

// required int32 expBattleNum = 9 [default = 0];
inline bool VIP::has_expbattlenum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VIP::set_has_expbattlenum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VIP::clear_has_expbattlenum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VIP::clear_expbattlenum() {
  expbattlenum_ = 0;
  clear_has_expbattlenum();
}
inline ::google::protobuf::int32 VIP::expbattlenum() const {
  return expbattlenum_;
}
inline void VIP::set_expbattlenum(::google::protobuf::int32 value) {
  set_has_expbattlenum();
  expbattlenum_ = value;
}

// required int32 goldBattleNum = 10 [default = 0];
inline bool VIP::has_goldbattlenum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VIP::set_has_goldbattlenum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VIP::clear_has_goldbattlenum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VIP::clear_goldbattlenum() {
  goldbattlenum_ = 0;
  clear_has_goldbattlenum();
}
inline ::google::protobuf::int32 VIP::goldbattlenum() const {
  return goldbattlenum_;
}
inline void VIP::set_goldbattlenum(::google::protobuf::int32 value) {
  set_has_goldbattlenum();
  goldbattlenum_ = value;
}

// required int32 towerNum = 11 [default = 0];
inline bool VIP::has_towernum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VIP::set_has_towernum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VIP::clear_has_towernum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VIP::clear_towernum() {
  towernum_ = 0;
  clear_has_towernum();
}
inline ::google::protobuf::int32 VIP::towernum() const {
  return towernum_;
}
inline void VIP::set_towernum(::google::protobuf::int32 value) {
  set_has_towernum();
  towernum_ = value;
}

// required int32 crusadeNum = 12 [default = 0];
inline bool VIP::has_crusadenum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VIP::set_has_crusadenum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VIP::clear_has_crusadenum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VIP::clear_crusadenum() {
  crusadenum_ = 0;
  clear_has_crusadenum();
}
inline ::google::protobuf::int32 VIP::crusadenum() const {
  return crusadenum_;
}
inline void VIP::set_crusadenum(::google::protobuf::int32 value) {
  set_has_crusadenum();
  crusadenum_ = value;
}

// required int32 buySkillPoint = 13 [default = 0];
inline bool VIP::has_buyskillpoint() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VIP::set_has_buyskillpoint() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VIP::clear_has_buyskillpoint() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VIP::clear_buyskillpoint() {
  buyskillpoint_ = 0;
  clear_has_buyskillpoint();
}
inline ::google::protobuf::int32 VIP::buyskillpoint() const {
  return buyskillpoint_;
}
inline void VIP::set_buyskillpoint(::google::protobuf::int32 value) {
  set_has_buyskillpoint();
  buyskillpoint_ = value;
}

// -------------------------------------------------------------------

// VIP_ARRAY

// repeated .VIP items = 1;
inline int VIP_ARRAY::items_size() const {
  return items_.size();
}
inline void VIP_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::VIP& VIP_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::VIP* VIP_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::VIP* VIP_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VIP >&
VIP_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::VIP >*
VIP_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// VIPFUNCTION

// required string id = 1 [default = ""];
inline bool VIPFUNCTION::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VIPFUNCTION::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VIPFUNCTION::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VIPFUNCTION::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& VIPFUNCTION::id() const {
  return *id_;
}
inline void VIPFUNCTION::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void VIPFUNCTION::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void VIPFUNCTION::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VIPFUNCTION::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* VIPFUNCTION::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VIPFUNCTION::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 openVip = 2 [default = 0];
inline bool VIPFUNCTION::has_openvip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VIPFUNCTION::set_has_openvip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VIPFUNCTION::clear_has_openvip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VIPFUNCTION::clear_openvip() {
  openvip_ = 0;
  clear_has_openvip();
}
inline ::google::protobuf::int32 VIPFUNCTION::openvip() const {
  return openvip_;
}
inline void VIPFUNCTION::set_openvip(::google::protobuf::int32 value) {
  set_has_openvip();
  openvip_ = value;
}

// -------------------------------------------------------------------

// VIPFUNCTION_ARRAY

// repeated .VIPFUNCTION items = 1;
inline int VIPFUNCTION_ARRAY::items_size() const {
  return items_.size();
}
inline void VIPFUNCTION_ARRAY::clear_items() {
  items_.Clear();
}
inline const ::VIPFUNCTION& VIPFUNCTION_ARRAY::items(int index) const {
  return items_.Get(index);
}
inline ::VIPFUNCTION* VIPFUNCTION_ARRAY::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::VIPFUNCTION* VIPFUNCTION_ARRAY::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VIPFUNCTION >&
VIPFUNCTION_ARRAY::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::VIPFUNCTION >*
VIPFUNCTION_ARRAY::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// c_gs_enter_gs_req

// required bytes token = 1;
inline bool c_gs_enter_gs_req::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_enter_gs_req::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_enter_gs_req::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_enter_gs_req::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& c_gs_enter_gs_req::token() const {
  return *token_;
}
inline void c_gs_enter_gs_req::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void c_gs_enter_gs_req::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void c_gs_enter_gs_req::set_token(const void* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* c_gs_enter_gs_req::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* c_gs_enter_gs_req::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void c_gs_enter_gs_req::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gs_c_enter_gs_res

// required uint32 error_code = 1;
inline bool gs_c_enter_gs_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_enter_gs_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_enter_gs_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_enter_gs_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_enter_gs_res::error_code() const {
  return error_code_;
}
inline void gs_c_enter_gs_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 proto_version = 2;
inline bool gs_c_enter_gs_res::has_proto_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_enter_gs_res::set_has_proto_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_enter_gs_res::clear_has_proto_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_enter_gs_res::clear_proto_version() {
  proto_version_ = 0u;
  clear_has_proto_version();
}
inline ::google::protobuf::uint32 gs_c_enter_gs_res::proto_version() const {
  return proto_version_;
}
inline void gs_c_enter_gs_res::set_proto_version(::google::protobuf::uint32 value) {
  set_has_proto_version();
  proto_version_ = value;
}

// optional uint32 server_timestamp = 3;
inline bool gs_c_enter_gs_res::has_server_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_enter_gs_res::set_has_server_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_enter_gs_res::clear_has_server_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_enter_gs_res::clear_server_timestamp() {
  server_timestamp_ = 0u;
  clear_has_server_timestamp();
}
inline ::google::protobuf::uint32 gs_c_enter_gs_res::server_timestamp() const {
  return server_timestamp_;
}
inline void gs_c_enter_gs_res::set_server_timestamp(::google::protobuf::uint32 value) {
  set_has_server_timestamp();
  server_timestamp_ = value;
}

// -------------------------------------------------------------------

// c_gs_leave_gs_req

// -------------------------------------------------------------------

// gs_c_leave_gs_res

// required uint32 error_code = 1;
inline bool gs_c_leave_gs_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_leave_gs_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_leave_gs_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_leave_gs_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_leave_gs_res::error_code() const {
  return error_code_;
}
inline void gs_c_leave_gs_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// c_gs_json_config_version_req

// -------------------------------------------------------------------

// gs_c_json_config_version_res_config_version

// required string name = 1;
inline bool gs_c_json_config_version_res_config_version::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_json_config_version_res_config_version::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_json_config_version_res_config_version::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_json_config_version_res_config_version::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& gs_c_json_config_version_res_config_version::name() const {
  return *name_;
}
inline void gs_c_json_config_version_res_config_version::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_json_config_version_res_config_version::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_json_config_version_res_config_version::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_json_config_version_res_config_version::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* gs_c_json_config_version_res_config_version::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_json_config_version_res_config_version::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string md5 = 2;
inline bool gs_c_json_config_version_res_config_version::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_json_config_version_res_config_version::set_has_md5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_json_config_version_res_config_version::clear_has_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_json_config_version_res_config_version::clear_md5() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& gs_c_json_config_version_res_config_version::md5() const {
  return *md5_;
}
inline void gs_c_json_config_version_res_config_version::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void gs_c_json_config_version_res_config_version::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void gs_c_json_config_version_res_config_version::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_json_config_version_res_config_version::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  return md5_;
}
inline ::std::string* gs_c_json_config_version_res_config_version::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_json_config_version_res_config_version::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gs_c_json_config_version_res

// required uint32 error_code = 1;
inline bool gs_c_json_config_version_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_json_config_version_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_json_config_version_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_json_config_version_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_json_config_version_res::error_code() const {
  return error_code_;
}
inline void gs_c_json_config_version_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .gs_c_json_config_version_res.config_version versions = 2;
inline int gs_c_json_config_version_res::versions_size() const {
  return versions_.size();
}
inline void gs_c_json_config_version_res::clear_versions() {
  versions_.Clear();
}
inline const ::gs_c_json_config_version_res_config_version& gs_c_json_config_version_res::versions(int index) const {
  return versions_.Get(index);
}
inline ::gs_c_json_config_version_res_config_version* gs_c_json_config_version_res::mutable_versions(int index) {
  return versions_.Mutable(index);
}
inline ::gs_c_json_config_version_res_config_version* gs_c_json_config_version_res::add_versions() {
  return versions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gs_c_json_config_version_res_config_version >&
gs_c_json_config_version_res::versions() const {
  return versions_;
}
inline ::google::protobuf::RepeatedPtrField< ::gs_c_json_config_version_res_config_version >*
gs_c_json_config_version_res::mutable_versions() {
  return &versions_;
}

// -------------------------------------------------------------------

// c_gs_json_config_req

// repeated string names = 1;
inline int c_gs_json_config_req::names_size() const {
  return names_.size();
}
inline void c_gs_json_config_req::clear_names() {
  names_.Clear();
}
inline const ::std::string& c_gs_json_config_req::names(int index) const {
  return names_.Get(index);
}
inline ::std::string* c_gs_json_config_req::mutable_names(int index) {
  return names_.Mutable(index);
}
inline void c_gs_json_config_req::set_names(int index, const ::std::string& value) {
  names_.Mutable(index)->assign(value);
}
inline void c_gs_json_config_req::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
}
inline void c_gs_json_config_req::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* c_gs_json_config_req::add_names() {
  return names_.Add();
}
inline void c_gs_json_config_req::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
}
inline void c_gs_json_config_req::add_names(const char* value) {
  names_.Add()->assign(value);
}
inline void c_gs_json_config_req::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
c_gs_json_config_req::names() const {
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
c_gs_json_config_req::mutable_names() {
  return &names_;
}

// -------------------------------------------------------------------

// gs_c_json_config_res_config

// required string name = 1;
inline bool gs_c_json_config_res_config::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_json_config_res_config::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_json_config_res_config::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_json_config_res_config::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& gs_c_json_config_res_config::name() const {
  return *name_;
}
inline void gs_c_json_config_res_config::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_json_config_res_config::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_json_config_res_config::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_json_config_res_config::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* gs_c_json_config_res_config::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_json_config_res_config::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string md5 = 2;
inline bool gs_c_json_config_res_config::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_json_config_res_config::set_has_md5() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_json_config_res_config::clear_has_md5() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_json_config_res_config::clear_md5() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& gs_c_json_config_res_config::md5() const {
  return *md5_;
}
inline void gs_c_json_config_res_config::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void gs_c_json_config_res_config::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void gs_c_json_config_res_config::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_json_config_res_config::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  return md5_;
}
inline ::std::string* gs_c_json_config_res_config::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_json_config_res_config::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string content = 3;
inline bool gs_c_json_config_res_config::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_json_config_res_config::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_json_config_res_config::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_json_config_res_config::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& gs_c_json_config_res_config::content() const {
  return *content_;
}
inline void gs_c_json_config_res_config::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void gs_c_json_config_res_config::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void gs_c_json_config_res_config::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_json_config_res_config::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* gs_c_json_config_res_config::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_json_config_res_config::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gs_c_json_config_res

// required uint32 error_code = 1;
inline bool gs_c_json_config_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_json_config_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_json_config_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_json_config_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_json_config_res::error_code() const {
  return error_code_;
}
inline void gs_c_json_config_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .gs_c_json_config_res.config configs = 2;
inline int gs_c_json_config_res::configs_size() const {
  return configs_.size();
}
inline void gs_c_json_config_res::clear_configs() {
  configs_.Clear();
}
inline const ::gs_c_json_config_res_config& gs_c_json_config_res::configs(int index) const {
  return configs_.Get(index);
}
inline ::gs_c_json_config_res_config* gs_c_json_config_res::mutable_configs(int index) {
  return configs_.Mutable(index);
}
inline ::gs_c_json_config_res_config* gs_c_json_config_res::add_configs() {
  return configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gs_c_json_config_res_config >&
gs_c_json_config_res::configs() const {
  return configs_;
}
inline ::google::protobuf::RepeatedPtrField< ::gs_c_json_config_res_config >*
gs_c_json_config_res::mutable_configs() {
  return &configs_;
}

// -------------------------------------------------------------------

// c_gs_config_req

// -------------------------------------------------------------------

// gs_c_config_res

// required uint32 error_code = 1;
inline bool gs_c_config_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_config_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_config_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_config_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_config_res::error_code() const {
  return error_code_;
}
inline void gs_c_config_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .CHAPTERMAP_ARRAY chapter_map = 2;
inline bool gs_c_config_res::has_chapter_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_config_res::set_has_chapter_map() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_config_res::clear_has_chapter_map() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_config_res::clear_chapter_map() {
  if (chapter_map_ != NULL) chapter_map_->::CHAPTERMAP_ARRAY::Clear();
  clear_has_chapter_map();
}
inline const ::CHAPTERMAP_ARRAY& gs_c_config_res::chapter_map() const {
  return chapter_map_ != NULL ? *chapter_map_ : *default_instance_->chapter_map_;
}
inline ::CHAPTERMAP_ARRAY* gs_c_config_res::mutable_chapter_map() {
  set_has_chapter_map();
  if (chapter_map_ == NULL) chapter_map_ = new ::CHAPTERMAP_ARRAY;
  return chapter_map_;
}
inline ::CHAPTERMAP_ARRAY* gs_c_config_res::release_chapter_map() {
  clear_has_chapter_map();
  ::CHAPTERMAP_ARRAY* temp = chapter_map_;
  chapter_map_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_chapter_map(::CHAPTERMAP_ARRAY* chapter_map) {
  delete chapter_map_;
  chapter_map_ = chapter_map;
  if (chapter_map) {
    set_has_chapter_map();
  } else {
    clear_has_chapter_map();
  }
}

// optional .TASK_ARRAY task = 3;
inline bool gs_c_config_res::has_task() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_config_res::set_has_task() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_config_res::clear_has_task() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_config_res::clear_task() {
  if (task_ != NULL) task_->::TASK_ARRAY::Clear();
  clear_has_task();
}
inline const ::TASK_ARRAY& gs_c_config_res::task() const {
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::TASK_ARRAY* gs_c_config_res::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::TASK_ARRAY;
  return task_;
}
inline ::TASK_ARRAY* gs_c_config_res::release_task() {
  clear_has_task();
  ::TASK_ARRAY* temp = task_;
  task_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_task(::TASK_ARRAY* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
}

// optional .SUBTASK_ARRAY sub_task = 4;
inline bool gs_c_config_res::has_sub_task() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_config_res::set_has_sub_task() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_config_res::clear_has_sub_task() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_config_res::clear_sub_task() {
  if (sub_task_ != NULL) sub_task_->::SUBTASK_ARRAY::Clear();
  clear_has_sub_task();
}
inline const ::SUBTASK_ARRAY& gs_c_config_res::sub_task() const {
  return sub_task_ != NULL ? *sub_task_ : *default_instance_->sub_task_;
}
inline ::SUBTASK_ARRAY* gs_c_config_res::mutable_sub_task() {
  set_has_sub_task();
  if (sub_task_ == NULL) sub_task_ = new ::SUBTASK_ARRAY;
  return sub_task_;
}
inline ::SUBTASK_ARRAY* gs_c_config_res::release_sub_task() {
  clear_has_sub_task();
  ::SUBTASK_ARRAY* temp = sub_task_;
  sub_task_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_sub_task(::SUBTASK_ARRAY* sub_task) {
  delete sub_task_;
  sub_task_ = sub_task;
  if (sub_task) {
    set_has_sub_task();
  } else {
    clear_has_sub_task();
  }
}

// optional .BATTLE_ARRAY battle = 5;
inline bool gs_c_config_res::has_battle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_c_config_res::set_has_battle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_c_config_res::clear_has_battle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_c_config_res::clear_battle() {
  if (battle_ != NULL) battle_->::BATTLE_ARRAY::Clear();
  clear_has_battle();
}
inline const ::BATTLE_ARRAY& gs_c_config_res::battle() const {
  return battle_ != NULL ? *battle_ : *default_instance_->battle_;
}
inline ::BATTLE_ARRAY* gs_c_config_res::mutable_battle() {
  set_has_battle();
  if (battle_ == NULL) battle_ = new ::BATTLE_ARRAY;
  return battle_;
}
inline ::BATTLE_ARRAY* gs_c_config_res::release_battle() {
  clear_has_battle();
  ::BATTLE_ARRAY* temp = battle_;
  battle_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_battle(::BATTLE_ARRAY* battle) {
  delete battle_;
  battle_ = battle;
  if (battle) {
    set_has_battle();
  } else {
    clear_has_battle();
  }
}

// optional .HEROPROP_ARRAY hero_prop = 6;
inline bool gs_c_config_res::has_hero_prop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gs_c_config_res::set_has_hero_prop() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gs_c_config_res::clear_has_hero_prop() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gs_c_config_res::clear_hero_prop() {
  if (hero_prop_ != NULL) hero_prop_->::HEROPROP_ARRAY::Clear();
  clear_has_hero_prop();
}
inline const ::HEROPROP_ARRAY& gs_c_config_res::hero_prop() const {
  return hero_prop_ != NULL ? *hero_prop_ : *default_instance_->hero_prop_;
}
inline ::HEROPROP_ARRAY* gs_c_config_res::mutable_hero_prop() {
  set_has_hero_prop();
  if (hero_prop_ == NULL) hero_prop_ = new ::HEROPROP_ARRAY;
  return hero_prop_;
}
inline ::HEROPROP_ARRAY* gs_c_config_res::release_hero_prop() {
  clear_has_hero_prop();
  ::HEROPROP_ARRAY* temp = hero_prop_;
  hero_prop_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_hero_prop(::HEROPROP_ARRAY* hero_prop) {
  delete hero_prop_;
  hero_prop_ = hero_prop;
  if (hero_prop) {
    set_has_hero_prop();
  } else {
    clear_has_hero_prop();
  }
}

// optional .BOSSPROP_ARRAY boss_prop = 7;
inline bool gs_c_config_res::has_boss_prop() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gs_c_config_res::set_has_boss_prop() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gs_c_config_res::clear_has_boss_prop() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gs_c_config_res::clear_boss_prop() {
  if (boss_prop_ != NULL) boss_prop_->::BOSSPROP_ARRAY::Clear();
  clear_has_boss_prop();
}
inline const ::BOSSPROP_ARRAY& gs_c_config_res::boss_prop() const {
  return boss_prop_ != NULL ? *boss_prop_ : *default_instance_->boss_prop_;
}
inline ::BOSSPROP_ARRAY* gs_c_config_res::mutable_boss_prop() {
  set_has_boss_prop();
  if (boss_prop_ == NULL) boss_prop_ = new ::BOSSPROP_ARRAY;
  return boss_prop_;
}
inline ::BOSSPROP_ARRAY* gs_c_config_res::release_boss_prop() {
  clear_has_boss_prop();
  ::BOSSPROP_ARRAY* temp = boss_prop_;
  boss_prop_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_boss_prop(::BOSSPROP_ARRAY* boss_prop) {
  delete boss_prop_;
  boss_prop_ = boss_prop;
  if (boss_prop) {
    set_has_boss_prop();
  } else {
    clear_has_boss_prop();
  }
}

// optional .MONSTERPROP_ARRAY monster_prop = 8;
inline bool gs_c_config_res::has_monster_prop() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gs_c_config_res::set_has_monster_prop() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gs_c_config_res::clear_has_monster_prop() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gs_c_config_res::clear_monster_prop() {
  if (monster_prop_ != NULL) monster_prop_->::MONSTERPROP_ARRAY::Clear();
  clear_has_monster_prop();
}
inline const ::MONSTERPROP_ARRAY& gs_c_config_res::monster_prop() const {
  return monster_prop_ != NULL ? *monster_prop_ : *default_instance_->monster_prop_;
}
inline ::MONSTERPROP_ARRAY* gs_c_config_res::mutable_monster_prop() {
  set_has_monster_prop();
  if (monster_prop_ == NULL) monster_prop_ = new ::MONSTERPROP_ARRAY;
  return monster_prop_;
}
inline ::MONSTERPROP_ARRAY* gs_c_config_res::release_monster_prop() {
  clear_has_monster_prop();
  ::MONSTERPROP_ARRAY* temp = monster_prop_;
  monster_prop_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_monster_prop(::MONSTERPROP_ARRAY* monster_prop) {
  delete monster_prop_;
  monster_prop_ = monster_prop;
  if (monster_prop) {
    set_has_monster_prop();
  } else {
    clear_has_monster_prop();
  }
}

// optional .EQUIP_ARRAY equip = 9;
inline bool gs_c_config_res::has_equip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gs_c_config_res::set_has_equip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gs_c_config_res::clear_has_equip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gs_c_config_res::clear_equip() {
  if (equip_ != NULL) equip_->::EQUIP_ARRAY::Clear();
  clear_has_equip();
}
inline const ::EQUIP_ARRAY& gs_c_config_res::equip() const {
  return equip_ != NULL ? *equip_ : *default_instance_->equip_;
}
inline ::EQUIP_ARRAY* gs_c_config_res::mutable_equip() {
  set_has_equip();
  if (equip_ == NULL) equip_ = new ::EQUIP_ARRAY;
  return equip_;
}
inline ::EQUIP_ARRAY* gs_c_config_res::release_equip() {
  clear_has_equip();
  ::EQUIP_ARRAY* temp = equip_;
  equip_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_equip(::EQUIP_ARRAY* equip) {
  delete equip_;
  equip_ = equip;
  if (equip) {
    set_has_equip();
  } else {
    clear_has_equip();
  }
}

// optional .AOYI_ARRAY aoyi = 10;
inline bool gs_c_config_res::has_aoyi() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gs_c_config_res::set_has_aoyi() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gs_c_config_res::clear_has_aoyi() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gs_c_config_res::clear_aoyi() {
  if (aoyi_ != NULL) aoyi_->::AOYI_ARRAY::Clear();
  clear_has_aoyi();
}
inline const ::AOYI_ARRAY& gs_c_config_res::aoyi() const {
  return aoyi_ != NULL ? *aoyi_ : *default_instance_->aoyi_;
}
inline ::AOYI_ARRAY* gs_c_config_res::mutable_aoyi() {
  set_has_aoyi();
  if (aoyi_ == NULL) aoyi_ = new ::AOYI_ARRAY;
  return aoyi_;
}
inline ::AOYI_ARRAY* gs_c_config_res::release_aoyi() {
  clear_has_aoyi();
  ::AOYI_ARRAY* temp = aoyi_;
  aoyi_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_aoyi(::AOYI_ARRAY* aoyi) {
  delete aoyi_;
  aoyi_ = aoyi;
  if (aoyi) {
    set_has_aoyi();
  } else {
    clear_has_aoyi();
  }
}

// optional .BAG_ARRAY bag = 11;
inline bool gs_c_config_res::has_bag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void gs_c_config_res::set_has_bag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void gs_c_config_res::clear_has_bag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void gs_c_config_res::clear_bag() {
  if (bag_ != NULL) bag_->::BAG_ARRAY::Clear();
  clear_has_bag();
}
inline const ::BAG_ARRAY& gs_c_config_res::bag() const {
  return bag_ != NULL ? *bag_ : *default_instance_->bag_;
}
inline ::BAG_ARRAY* gs_c_config_res::mutable_bag() {
  set_has_bag();
  if (bag_ == NULL) bag_ = new ::BAG_ARRAY;
  return bag_;
}
inline ::BAG_ARRAY* gs_c_config_res::release_bag() {
  clear_has_bag();
  ::BAG_ARRAY* temp = bag_;
  bag_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_bag(::BAG_ARRAY* bag) {
  delete bag_;
  bag_ = bag;
  if (bag) {
    set_has_bag();
  } else {
    clear_has_bag();
  }
}

// optional .PASSIVE_ARRAY passive = 12;
inline bool gs_c_config_res::has_passive() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void gs_c_config_res::set_has_passive() {
  _has_bits_[0] |= 0x00000800u;
}
inline void gs_c_config_res::clear_has_passive() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void gs_c_config_res::clear_passive() {
  if (passive_ != NULL) passive_->::PASSIVE_ARRAY::Clear();
  clear_has_passive();
}
inline const ::PASSIVE_ARRAY& gs_c_config_res::passive() const {
  return passive_ != NULL ? *passive_ : *default_instance_->passive_;
}
inline ::PASSIVE_ARRAY* gs_c_config_res::mutable_passive() {
  set_has_passive();
  if (passive_ == NULL) passive_ = new ::PASSIVE_ARRAY;
  return passive_;
}
inline ::PASSIVE_ARRAY* gs_c_config_res::release_passive() {
  clear_has_passive();
  ::PASSIVE_ARRAY* temp = passive_;
  passive_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_passive(::PASSIVE_ARRAY* passive) {
  delete passive_;
  passive_ = passive;
  if (passive) {
    set_has_passive();
  } else {
    clear_has_passive();
  }
}

// optional .TRIGGERSTARTCONDITION_ARRAY trigger_start_condition = 13;
inline bool gs_c_config_res::has_trigger_start_condition() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void gs_c_config_res::set_has_trigger_start_condition() {
  _has_bits_[0] |= 0x00001000u;
}
inline void gs_c_config_res::clear_has_trigger_start_condition() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void gs_c_config_res::clear_trigger_start_condition() {
  if (trigger_start_condition_ != NULL) trigger_start_condition_->::TRIGGERSTARTCONDITION_ARRAY::Clear();
  clear_has_trigger_start_condition();
}
inline const ::TRIGGERSTARTCONDITION_ARRAY& gs_c_config_res::trigger_start_condition() const {
  return trigger_start_condition_ != NULL ? *trigger_start_condition_ : *default_instance_->trigger_start_condition_;
}
inline ::TRIGGERSTARTCONDITION_ARRAY* gs_c_config_res::mutable_trigger_start_condition() {
  set_has_trigger_start_condition();
  if (trigger_start_condition_ == NULL) trigger_start_condition_ = new ::TRIGGERSTARTCONDITION_ARRAY;
  return trigger_start_condition_;
}
inline ::TRIGGERSTARTCONDITION_ARRAY* gs_c_config_res::release_trigger_start_condition() {
  clear_has_trigger_start_condition();
  ::TRIGGERSTARTCONDITION_ARRAY* temp = trigger_start_condition_;
  trigger_start_condition_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_trigger_start_condition(::TRIGGERSTARTCONDITION_ARRAY* trigger_start_condition) {
  delete trigger_start_condition_;
  trigger_start_condition_ = trigger_start_condition;
  if (trigger_start_condition) {
    set_has_trigger_start_condition();
  } else {
    clear_has_trigger_start_condition();
  }
}

// optional .REALTIMECHECK_ARRAY realtime_check = 14;
inline bool gs_c_config_res::has_realtime_check() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void gs_c_config_res::set_has_realtime_check() {
  _has_bits_[0] |= 0x00002000u;
}
inline void gs_c_config_res::clear_has_realtime_check() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void gs_c_config_res::clear_realtime_check() {
  if (realtime_check_ != NULL) realtime_check_->::REALTIMECHECK_ARRAY::Clear();
  clear_has_realtime_check();
}
inline const ::REALTIMECHECK_ARRAY& gs_c_config_res::realtime_check() const {
  return realtime_check_ != NULL ? *realtime_check_ : *default_instance_->realtime_check_;
}
inline ::REALTIMECHECK_ARRAY* gs_c_config_res::mutable_realtime_check() {
  set_has_realtime_check();
  if (realtime_check_ == NULL) realtime_check_ = new ::REALTIMECHECK_ARRAY;
  return realtime_check_;
}
inline ::REALTIMECHECK_ARRAY* gs_c_config_res::release_realtime_check() {
  clear_has_realtime_check();
  ::REALTIMECHECK_ARRAY* temp = realtime_check_;
  realtime_check_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_realtime_check(::REALTIMECHECK_ARRAY* realtime_check) {
  delete realtime_check_;
  realtime_check_ = realtime_check;
  if (realtime_check) {
    set_has_realtime_check();
  } else {
    clear_has_realtime_check();
  }
}

// optional .TRIGGERATTACK_ARRAY trigger_attack = 15;
inline bool gs_c_config_res::has_trigger_attack() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void gs_c_config_res::set_has_trigger_attack() {
  _has_bits_[0] |= 0x00004000u;
}
inline void gs_c_config_res::clear_has_trigger_attack() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void gs_c_config_res::clear_trigger_attack() {
  if (trigger_attack_ != NULL) trigger_attack_->::TRIGGERATTACK_ARRAY::Clear();
  clear_has_trigger_attack();
}
inline const ::TRIGGERATTACK_ARRAY& gs_c_config_res::trigger_attack() const {
  return trigger_attack_ != NULL ? *trigger_attack_ : *default_instance_->trigger_attack_;
}
inline ::TRIGGERATTACK_ARRAY* gs_c_config_res::mutable_trigger_attack() {
  set_has_trigger_attack();
  if (trigger_attack_ == NULL) trigger_attack_ = new ::TRIGGERATTACK_ARRAY;
  return trigger_attack_;
}
inline ::TRIGGERATTACK_ARRAY* gs_c_config_res::release_trigger_attack() {
  clear_has_trigger_attack();
  ::TRIGGERATTACK_ARRAY* temp = trigger_attack_;
  trigger_attack_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_trigger_attack(::TRIGGERATTACK_ARRAY* trigger_attack) {
  delete trigger_attack_;
  trigger_attack_ = trigger_attack;
  if (trigger_attack) {
    set_has_trigger_attack();
  } else {
    clear_has_trigger_attack();
  }
}

// optional .BUFF_ARRAY buff = 16;
inline bool gs_c_config_res::has_buff() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void gs_c_config_res::set_has_buff() {
  _has_bits_[0] |= 0x00008000u;
}
inline void gs_c_config_res::clear_has_buff() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void gs_c_config_res::clear_buff() {
  if (buff_ != NULL) buff_->::BUFF_ARRAY::Clear();
  clear_has_buff();
}
inline const ::BUFF_ARRAY& gs_c_config_res::buff() const {
  return buff_ != NULL ? *buff_ : *default_instance_->buff_;
}
inline ::BUFF_ARRAY* gs_c_config_res::mutable_buff() {
  set_has_buff();
  if (buff_ == NULL) buff_ = new ::BUFF_ARRAY;
  return buff_;
}
inline ::BUFF_ARRAY* gs_c_config_res::release_buff() {
  clear_has_buff();
  ::BUFF_ARRAY* temp = buff_;
  buff_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_buff(::BUFF_ARRAY* buff) {
  delete buff_;
  buff_ = buff;
  if (buff) {
    set_has_buff();
  } else {
    clear_has_buff();
  }
}

// optional .HEROSKILL_ARRAY hero_skill = 17;
inline bool gs_c_config_res::has_hero_skill() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void gs_c_config_res::set_has_hero_skill() {
  _has_bits_[0] |= 0x00010000u;
}
inline void gs_c_config_res::clear_has_hero_skill() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void gs_c_config_res::clear_hero_skill() {
  if (hero_skill_ != NULL) hero_skill_->::HEROSKILL_ARRAY::Clear();
  clear_has_hero_skill();
}
inline const ::HEROSKILL_ARRAY& gs_c_config_res::hero_skill() const {
  return hero_skill_ != NULL ? *hero_skill_ : *default_instance_->hero_skill_;
}
inline ::HEROSKILL_ARRAY* gs_c_config_res::mutable_hero_skill() {
  set_has_hero_skill();
  if (hero_skill_ == NULL) hero_skill_ = new ::HEROSKILL_ARRAY;
  return hero_skill_;
}
inline ::HEROSKILL_ARRAY* gs_c_config_res::release_hero_skill() {
  clear_has_hero_skill();
  ::HEROSKILL_ARRAY* temp = hero_skill_;
  hero_skill_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_hero_skill(::HEROSKILL_ARRAY* hero_skill) {
  delete hero_skill_;
  hero_skill_ = hero_skill;
  if (hero_skill) {
    set_has_hero_skill();
  } else {
    clear_has_hero_skill();
  }
}

// optional .BOSSSKILL_ARRAY boss_skill = 18;
inline bool gs_c_config_res::has_boss_skill() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void gs_c_config_res::set_has_boss_skill() {
  _has_bits_[0] |= 0x00020000u;
}
inline void gs_c_config_res::clear_has_boss_skill() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void gs_c_config_res::clear_boss_skill() {
  if (boss_skill_ != NULL) boss_skill_->::BOSSSKILL_ARRAY::Clear();
  clear_has_boss_skill();
}
inline const ::BOSSSKILL_ARRAY& gs_c_config_res::boss_skill() const {
  return boss_skill_ != NULL ? *boss_skill_ : *default_instance_->boss_skill_;
}
inline ::BOSSSKILL_ARRAY* gs_c_config_res::mutable_boss_skill() {
  set_has_boss_skill();
  if (boss_skill_ == NULL) boss_skill_ = new ::BOSSSKILL_ARRAY;
  return boss_skill_;
}
inline ::BOSSSKILL_ARRAY* gs_c_config_res::release_boss_skill() {
  clear_has_boss_skill();
  ::BOSSSKILL_ARRAY* temp = boss_skill_;
  boss_skill_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_boss_skill(::BOSSSKILL_ARRAY* boss_skill) {
  delete boss_skill_;
  boss_skill_ = boss_skill;
  if (boss_skill) {
    set_has_boss_skill();
  } else {
    clear_has_boss_skill();
  }
}

// optional .COINPRICE_ARRAY coin_price = 19;
inline bool gs_c_config_res::has_coin_price() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void gs_c_config_res::set_has_coin_price() {
  _has_bits_[0] |= 0x00040000u;
}
inline void gs_c_config_res::clear_has_coin_price() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void gs_c_config_res::clear_coin_price() {
  if (coin_price_ != NULL) coin_price_->::COINPRICE_ARRAY::Clear();
  clear_has_coin_price();
}
inline const ::COINPRICE_ARRAY& gs_c_config_res::coin_price() const {
  return coin_price_ != NULL ? *coin_price_ : *default_instance_->coin_price_;
}
inline ::COINPRICE_ARRAY* gs_c_config_res::mutable_coin_price() {
  set_has_coin_price();
  if (coin_price_ == NULL) coin_price_ = new ::COINPRICE_ARRAY;
  return coin_price_;
}
inline ::COINPRICE_ARRAY* gs_c_config_res::release_coin_price() {
  clear_has_coin_price();
  ::COINPRICE_ARRAY* temp = coin_price_;
  coin_price_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_coin_price(::COINPRICE_ARRAY* coin_price) {
  delete coin_price_;
  coin_price_ = coin_price;
  if (coin_price) {
    set_has_coin_price();
  } else {
    clear_has_coin_price();
  }
}

// optional .RESETPRICE_ARRAY reset_price = 20;
inline bool gs_c_config_res::has_reset_price() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void gs_c_config_res::set_has_reset_price() {
  _has_bits_[0] |= 0x00080000u;
}
inline void gs_c_config_res::clear_has_reset_price() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void gs_c_config_res::clear_reset_price() {
  if (reset_price_ != NULL) reset_price_->::RESETPRICE_ARRAY::Clear();
  clear_has_reset_price();
}
inline const ::RESETPRICE_ARRAY& gs_c_config_res::reset_price() const {
  return reset_price_ != NULL ? *reset_price_ : *default_instance_->reset_price_;
}
inline ::RESETPRICE_ARRAY* gs_c_config_res::mutable_reset_price() {
  set_has_reset_price();
  if (reset_price_ == NULL) reset_price_ = new ::RESETPRICE_ARRAY;
  return reset_price_;
}
inline ::RESETPRICE_ARRAY* gs_c_config_res::release_reset_price() {
  clear_has_reset_price();
  ::RESETPRICE_ARRAY* temp = reset_price_;
  reset_price_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_reset_price(::RESETPRICE_ARRAY* reset_price) {
  delete reset_price_;
  reset_price_ = reset_price;
  if (reset_price) {
    set_has_reset_price();
  } else {
    clear_has_reset_price();
  }
}

// optional .SPPRICE_ARRAY spprice = 21;
inline bool gs_c_config_res::has_spprice() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void gs_c_config_res::set_has_spprice() {
  _has_bits_[0] |= 0x00100000u;
}
inline void gs_c_config_res::clear_has_spprice() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void gs_c_config_res::clear_spprice() {
  if (spprice_ != NULL) spprice_->::SPPRICE_ARRAY::Clear();
  clear_has_spprice();
}
inline const ::SPPRICE_ARRAY& gs_c_config_res::spprice() const {
  return spprice_ != NULL ? *spprice_ : *default_instance_->spprice_;
}
inline ::SPPRICE_ARRAY* gs_c_config_res::mutable_spprice() {
  set_has_spprice();
  if (spprice_ == NULL) spprice_ = new ::SPPRICE_ARRAY;
  return spprice_;
}
inline ::SPPRICE_ARRAY* gs_c_config_res::release_spprice() {
  clear_has_spprice();
  ::SPPRICE_ARRAY* temp = spprice_;
  spprice_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_spprice(::SPPRICE_ARRAY* spprice) {
  delete spprice_;
  spprice_ = spprice;
  if (spprice) {
    set_has_spprice();
  } else {
    clear_has_spprice();
  }
}

// optional .STAPRICE_ARRAY staprice = 22;
inline bool gs_c_config_res::has_staprice() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void gs_c_config_res::set_has_staprice() {
  _has_bits_[0] |= 0x00200000u;
}
inline void gs_c_config_res::clear_has_staprice() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void gs_c_config_res::clear_staprice() {
  if (staprice_ != NULL) staprice_->::STAPRICE_ARRAY::Clear();
  clear_has_staprice();
}
inline const ::STAPRICE_ARRAY& gs_c_config_res::staprice() const {
  return staprice_ != NULL ? *staprice_ : *default_instance_->staprice_;
}
inline ::STAPRICE_ARRAY* gs_c_config_res::mutable_staprice() {
  set_has_staprice();
  if (staprice_ == NULL) staprice_ = new ::STAPRICE_ARRAY;
  return staprice_;
}
inline ::STAPRICE_ARRAY* gs_c_config_res::release_staprice() {
  clear_has_staprice();
  ::STAPRICE_ARRAY* temp = staprice_;
  staprice_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_staprice(::STAPRICE_ARRAY* staprice) {
  delete staprice_;
  staprice_ = staprice;
  if (staprice) {
    set_has_staprice();
  } else {
    clear_has_staprice();
  }
}

// optional .VIP_ARRAY vip = 23;
inline bool gs_c_config_res::has_vip() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void gs_c_config_res::set_has_vip() {
  _has_bits_[0] |= 0x00400000u;
}
inline void gs_c_config_res::clear_has_vip() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void gs_c_config_res::clear_vip() {
  if (vip_ != NULL) vip_->::VIP_ARRAY::Clear();
  clear_has_vip();
}
inline const ::VIP_ARRAY& gs_c_config_res::vip() const {
  return vip_ != NULL ? *vip_ : *default_instance_->vip_;
}
inline ::VIP_ARRAY* gs_c_config_res::mutable_vip() {
  set_has_vip();
  if (vip_ == NULL) vip_ = new ::VIP_ARRAY;
  return vip_;
}
inline ::VIP_ARRAY* gs_c_config_res::release_vip() {
  clear_has_vip();
  ::VIP_ARRAY* temp = vip_;
  vip_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_vip(::VIP_ARRAY* vip) {
  delete vip_;
  vip_ = vip;
  if (vip) {
    set_has_vip();
  } else {
    clear_has_vip();
  }
}

// optional .VIPFUNCTION_ARRAY vip_function = 24;
inline bool gs_c_config_res::has_vip_function() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void gs_c_config_res::set_has_vip_function() {
  _has_bits_[0] |= 0x00800000u;
}
inline void gs_c_config_res::clear_has_vip_function() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void gs_c_config_res::clear_vip_function() {
  if (vip_function_ != NULL) vip_function_->::VIPFUNCTION_ARRAY::Clear();
  clear_has_vip_function();
}
inline const ::VIPFUNCTION_ARRAY& gs_c_config_res::vip_function() const {
  return vip_function_ != NULL ? *vip_function_ : *default_instance_->vip_function_;
}
inline ::VIPFUNCTION_ARRAY* gs_c_config_res::mutable_vip_function() {
  set_has_vip_function();
  if (vip_function_ == NULL) vip_function_ = new ::VIPFUNCTION_ARRAY;
  return vip_function_;
}
inline ::VIPFUNCTION_ARRAY* gs_c_config_res::release_vip_function() {
  clear_has_vip_function();
  ::VIPFUNCTION_ARRAY* temp = vip_function_;
  vip_function_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_vip_function(::VIPFUNCTION_ARRAY* vip_function) {
  delete vip_function_;
  vip_function_ = vip_function;
  if (vip_function) {
    set_has_vip_function();
  } else {
    clear_has_vip_function();
  }
}

// optional .SHOPRESETPRICE_ARRAY shop_resetprice = 25;
inline bool gs_c_config_res::has_shop_resetprice() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void gs_c_config_res::set_has_shop_resetprice() {
  _has_bits_[0] |= 0x01000000u;
}
inline void gs_c_config_res::clear_has_shop_resetprice() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void gs_c_config_res::clear_shop_resetprice() {
  if (shop_resetprice_ != NULL) shop_resetprice_->::SHOPRESETPRICE_ARRAY::Clear();
  clear_has_shop_resetprice();
}
inline const ::SHOPRESETPRICE_ARRAY& gs_c_config_res::shop_resetprice() const {
  return shop_resetprice_ != NULL ? *shop_resetprice_ : *default_instance_->shop_resetprice_;
}
inline ::SHOPRESETPRICE_ARRAY* gs_c_config_res::mutable_shop_resetprice() {
  set_has_shop_resetprice();
  if (shop_resetprice_ == NULL) shop_resetprice_ = new ::SHOPRESETPRICE_ARRAY;
  return shop_resetprice_;
}
inline ::SHOPRESETPRICE_ARRAY* gs_c_config_res::release_shop_resetprice() {
  clear_has_shop_resetprice();
  ::SHOPRESETPRICE_ARRAY* temp = shop_resetprice_;
  shop_resetprice_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_shop_resetprice(::SHOPRESETPRICE_ARRAY* shop_resetprice) {
  delete shop_resetprice_;
  shop_resetprice_ = shop_resetprice;
  if (shop_resetprice) {
    set_has_shop_resetprice();
  } else {
    clear_has_shop_resetprice();
  }
}

// optional .PRIZESHOW_ARRAY prize_show = 26;
inline bool gs_c_config_res::has_prize_show() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void gs_c_config_res::set_has_prize_show() {
  _has_bits_[0] |= 0x02000000u;
}
inline void gs_c_config_res::clear_has_prize_show() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void gs_c_config_res::clear_prize_show() {
  if (prize_show_ != NULL) prize_show_->::PRIZESHOW_ARRAY::Clear();
  clear_has_prize_show();
}
inline const ::PRIZESHOW_ARRAY& gs_c_config_res::prize_show() const {
  return prize_show_ != NULL ? *prize_show_ : *default_instance_->prize_show_;
}
inline ::PRIZESHOW_ARRAY* gs_c_config_res::mutable_prize_show() {
  set_has_prize_show();
  if (prize_show_ == NULL) prize_show_ = new ::PRIZESHOW_ARRAY;
  return prize_show_;
}
inline ::PRIZESHOW_ARRAY* gs_c_config_res::release_prize_show() {
  clear_has_prize_show();
  ::PRIZESHOW_ARRAY* temp = prize_show_;
  prize_show_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_prize_show(::PRIZESHOW_ARRAY* prize_show) {
  delete prize_show_;
  prize_show_ = prize_show;
  if (prize_show) {
    set_has_prize_show();
  } else {
    clear_has_prize_show();
  }
}

// optional .HEROSTAR_ARRAY hero_star = 27;
inline bool gs_c_config_res::has_hero_star() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void gs_c_config_res::set_has_hero_star() {
  _has_bits_[0] |= 0x04000000u;
}
inline void gs_c_config_res::clear_has_hero_star() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void gs_c_config_res::clear_hero_star() {
  if (hero_star_ != NULL) hero_star_->::HEROSTAR_ARRAY::Clear();
  clear_has_hero_star();
}
inline const ::HEROSTAR_ARRAY& gs_c_config_res::hero_star() const {
  return hero_star_ != NULL ? *hero_star_ : *default_instance_->hero_star_;
}
inline ::HEROSTAR_ARRAY* gs_c_config_res::mutable_hero_star() {
  set_has_hero_star();
  if (hero_star_ == NULL) hero_star_ = new ::HEROSTAR_ARRAY;
  return hero_star_;
}
inline ::HEROSTAR_ARRAY* gs_c_config_res::release_hero_star() {
  clear_has_hero_star();
  ::HEROSTAR_ARRAY* temp = hero_star_;
  hero_star_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_hero_star(::HEROSTAR_ARRAY* hero_star) {
  delete hero_star_;
  hero_star_ = hero_star;
  if (hero_star) {
    set_has_hero_star();
  } else {
    clear_has_hero_star();
  }
}

// optional .EVOLUTIONCOIN_ARRAY evolution_coin = 28;
inline bool gs_c_config_res::has_evolution_coin() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void gs_c_config_res::set_has_evolution_coin() {
  _has_bits_[0] |= 0x08000000u;
}
inline void gs_c_config_res::clear_has_evolution_coin() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void gs_c_config_res::clear_evolution_coin() {
  if (evolution_coin_ != NULL) evolution_coin_->::EVOLUTIONCOIN_ARRAY::Clear();
  clear_has_evolution_coin();
}
inline const ::EVOLUTIONCOIN_ARRAY& gs_c_config_res::evolution_coin() const {
  return evolution_coin_ != NULL ? *evolution_coin_ : *default_instance_->evolution_coin_;
}
inline ::EVOLUTIONCOIN_ARRAY* gs_c_config_res::mutable_evolution_coin() {
  set_has_evolution_coin();
  if (evolution_coin_ == NULL) evolution_coin_ = new ::EVOLUTIONCOIN_ARRAY;
  return evolution_coin_;
}
inline ::EVOLUTIONCOIN_ARRAY* gs_c_config_res::release_evolution_coin() {
  clear_has_evolution_coin();
  ::EVOLUTIONCOIN_ARRAY* temp = evolution_coin_;
  evolution_coin_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_evolution_coin(::EVOLUTIONCOIN_ARRAY* evolution_coin) {
  delete evolution_coin_;
  evolution_coin_ = evolution_coin;
  if (evolution_coin) {
    set_has_evolution_coin();
  } else {
    clear_has_evolution_coin();
  }
}

// optional .QUALITYRULE_ARRAY quality_rule = 29;
inline bool gs_c_config_res::has_quality_rule() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void gs_c_config_res::set_has_quality_rule() {
  _has_bits_[0] |= 0x10000000u;
}
inline void gs_c_config_res::clear_has_quality_rule() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void gs_c_config_res::clear_quality_rule() {
  if (quality_rule_ != NULL) quality_rule_->::QUALITYRULE_ARRAY::Clear();
  clear_has_quality_rule();
}
inline const ::QUALITYRULE_ARRAY& gs_c_config_res::quality_rule() const {
  return quality_rule_ != NULL ? *quality_rule_ : *default_instance_->quality_rule_;
}
inline ::QUALITYRULE_ARRAY* gs_c_config_res::mutable_quality_rule() {
  set_has_quality_rule();
  if (quality_rule_ == NULL) quality_rule_ = new ::QUALITYRULE_ARRAY;
  return quality_rule_;
}
inline ::QUALITYRULE_ARRAY* gs_c_config_res::release_quality_rule() {
  clear_has_quality_rule();
  ::QUALITYRULE_ARRAY* temp = quality_rule_;
  quality_rule_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_quality_rule(::QUALITYRULE_ARRAY* quality_rule) {
  delete quality_rule_;
  quality_rule_ = quality_rule;
  if (quality_rule) {
    set_has_quality_rule();
  } else {
    clear_has_quality_rule();
  }
}

// optional .RULE_ARRAY rule = 30;
inline bool gs_c_config_res::has_rule() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void gs_c_config_res::set_has_rule() {
  _has_bits_[0] |= 0x20000000u;
}
inline void gs_c_config_res::clear_has_rule() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void gs_c_config_res::clear_rule() {
  if (rule_ != NULL) rule_->::RULE_ARRAY::Clear();
  clear_has_rule();
}
inline const ::RULE_ARRAY& gs_c_config_res::rule() const {
  return rule_ != NULL ? *rule_ : *default_instance_->rule_;
}
inline ::RULE_ARRAY* gs_c_config_res::mutable_rule() {
  set_has_rule();
  if (rule_ == NULL) rule_ = new ::RULE_ARRAY;
  return rule_;
}
inline ::RULE_ARRAY* gs_c_config_res::release_rule() {
  clear_has_rule();
  ::RULE_ARRAY* temp = rule_;
  rule_ = NULL;
  return temp;
}
inline void gs_c_config_res::set_allocated_rule(::RULE_ARRAY* rule) {
  delete rule_;
  rule_ = rule;
  if (rule) {
    set_has_rule();
  } else {
    clear_has_rule();
  }
}

// -------------------------------------------------------------------

// c_gs_user_info_req

// -------------------------------------------------------------------

// user_sub_task

// required uint32 sub_task_id = 1;
inline bool user_sub_task::has_sub_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_sub_task::set_has_sub_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_sub_task::clear_has_sub_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_sub_task::clear_sub_task_id() {
  sub_task_id_ = 0u;
  clear_has_sub_task_id();
}
inline ::google::protobuf::uint32 user_sub_task::sub_task_id() const {
  return sub_task_id_;
}
inline void user_sub_task::set_sub_task_id(::google::protobuf::uint32 value) {
  set_has_sub_task_id();
  sub_task_id_ = value;
}

// required uint32 star = 2;
inline bool user_sub_task::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_sub_task::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_sub_task::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_sub_task::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 user_sub_task::star() const {
  return star_;
}
inline void user_sub_task::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// required uint32 last_enter_time = 3;
inline bool user_sub_task::has_last_enter_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_sub_task::set_has_last_enter_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_sub_task::clear_has_last_enter_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_sub_task::clear_last_enter_time() {
  last_enter_time_ = 0u;
  clear_has_last_enter_time();
}
inline ::google::protobuf::uint32 user_sub_task::last_enter_time() const {
  return last_enter_time_;
}
inline void user_sub_task::set_last_enter_time(::google::protobuf::uint32 value) {
  set_has_last_enter_time();
  last_enter_time_ = value;
}

// required uint32 last_day_enter_num = 4;
inline bool user_sub_task::has_last_day_enter_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_sub_task::set_has_last_day_enter_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_sub_task::clear_has_last_day_enter_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_sub_task::clear_last_day_enter_num() {
  last_day_enter_num_ = 0u;
  clear_has_last_day_enter_num();
}
inline ::google::protobuf::uint32 user_sub_task::last_day_enter_num() const {
  return last_day_enter_num_;
}
inline void user_sub_task::set_last_day_enter_num(::google::protobuf::uint32 value) {
  set_has_last_day_enter_num();
  last_day_enter_num_ = value;
}

// required uint32 total_enter_num = 5;
inline bool user_sub_task::has_total_enter_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_sub_task::set_has_total_enter_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_sub_task::clear_has_total_enter_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_sub_task::clear_total_enter_num() {
  total_enter_num_ = 0u;
  clear_has_total_enter_num();
}
inline ::google::protobuf::uint32 user_sub_task::total_enter_num() const {
  return total_enter_num_;
}
inline void user_sub_task::set_total_enter_num(::google::protobuf::uint32 value) {
  set_has_total_enter_num();
  total_enter_num_ = value;
}

// required uint32 last_reset_time = 6;
inline bool user_sub_task::has_last_reset_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_sub_task::set_has_last_reset_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_sub_task::clear_has_last_reset_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_sub_task::clear_last_reset_time() {
  last_reset_time_ = 0u;
  clear_has_last_reset_time();
}
inline ::google::protobuf::uint32 user_sub_task::last_reset_time() const {
  return last_reset_time_;
}
inline void user_sub_task::set_last_reset_time(::google::protobuf::uint32 value) {
  set_has_last_reset_time();
  last_reset_time_ = value;
}

// required uint32 last_day_reset_num = 7;
inline bool user_sub_task::has_last_day_reset_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_sub_task::set_has_last_day_reset_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_sub_task::clear_has_last_day_reset_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_sub_task::clear_last_day_reset_num() {
  last_day_reset_num_ = 0u;
  clear_has_last_day_reset_num();
}
inline ::google::protobuf::uint32 user_sub_task::last_day_reset_num() const {
  return last_day_reset_num_;
}
inline void user_sub_task::set_last_day_reset_num(::google::protobuf::uint32 value) {
  set_has_last_day_reset_num();
  last_day_reset_num_ = value;
}

// -------------------------------------------------------------------

// user_sub_task_array

// repeated .user_sub_task items = 1;
inline int user_sub_task_array::items_size() const {
  return items_.size();
}
inline void user_sub_task_array::clear_items() {
  items_.Clear();
}
inline const ::user_sub_task& user_sub_task_array::items(int index) const {
  return items_.Get(index);
}
inline ::user_sub_task* user_sub_task_array::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::user_sub_task* user_sub_task_array::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_sub_task >&
user_sub_task_array::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_sub_task >*
user_sub_task_array::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// user_hero_equip

// required uint32 equip_id = 1 [default = 0];
inline bool user_hero_equip::has_equip_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_hero_equip::set_has_equip_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_hero_equip::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_hero_equip::clear_equip_id() {
  equip_id_ = 0u;
  clear_has_equip_id();
}
inline ::google::protobuf::uint32 user_hero_equip::equip_id() const {
  return equip_id_;
}
inline void user_hero_equip::set_equip_id(::google::protobuf::uint32 value) {
  set_has_equip_id();
  equip_id_ = value;
}

// required uint32 level = 2 [default = 0];
inline bool user_hero_equip::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_hero_equip::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_hero_equip::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_hero_equip::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 user_hero_equip::level() const {
  return level_;
}
inline void user_hero_equip::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// user_hero_skill

// required .user_hero_skill.e_skill_type type = 1;
inline bool user_hero_skill::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_hero_skill::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_hero_skill::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_hero_skill::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::user_hero_skill_e_skill_type user_hero_skill::type() const {
  return static_cast< ::user_hero_skill_e_skill_type >(type_);
}
inline void user_hero_skill::set_type(::user_hero_skill_e_skill_type value) {
  assert(::user_hero_skill_e_skill_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 level = 2 [default = 0];
inline bool user_hero_skill::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_hero_skill::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_hero_skill::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_hero_skill::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 user_hero_skill::level() const {
  return level_;
}
inline void user_hero_skill::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// user_hero

// required uint32 hero_id = 1 [default = 0];
inline bool user_hero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_hero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_hero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_hero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 user_hero::hero_id() const {
  return hero_id_;
}
inline void user_hero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required uint32 star = 2 [default = 0];
inline bool user_hero::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_hero::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_hero::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_hero::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 user_hero::star() const {
  return star_;
}
inline void user_hero::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// required uint32 quality = 3 [default = 0];
inline bool user_hero::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_hero::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_hero::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_hero::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 user_hero::quality() const {
  return quality_;
}
inline void user_hero::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// required uint32 level = 4 [default = 0];
inline bool user_hero::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_hero::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_hero::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_hero::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 user_hero::level() const {
  return level_;
}
inline void user_hero::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 cur_exp = 5 [default = 0];
inline bool user_hero::has_cur_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_hero::set_has_cur_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_hero::clear_has_cur_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_hero::clear_cur_exp() {
  cur_exp_ = 0u;
  clear_has_cur_exp();
}
inline ::google::protobuf::uint32 user_hero::cur_exp() const {
  return cur_exp_;
}
inline void user_hero::set_cur_exp(::google::protobuf::uint32 value) {
  set_has_cur_exp();
  cur_exp_ = value;
}

// required uint32 got_timestamp = 6 [default = 0];
inline bool user_hero::has_got_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_hero::set_has_got_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_hero::clear_has_got_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_hero::clear_got_timestamp() {
  got_timestamp_ = 0u;
  clear_has_got_timestamp();
}
inline ::google::protobuf::uint32 user_hero::got_timestamp() const {
  return got_timestamp_;
}
inline void user_hero::set_got_timestamp(::google::protobuf::uint32 value) {
  set_has_got_timestamp();
  got_timestamp_ = value;
}

// repeated .user_hero_equip equips = 7;
inline int user_hero::equips_size() const {
  return equips_.size();
}
inline void user_hero::clear_equips() {
  equips_.Clear();
}
inline const ::user_hero_equip& user_hero::equips(int index) const {
  return equips_.Get(index);
}
inline ::user_hero_equip* user_hero::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::user_hero_equip* user_hero::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_hero_equip >&
user_hero::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_hero_equip >*
user_hero::mutable_equips() {
  return &equips_;
}

// repeated .user_hero_skill skills = 8;
inline int user_hero::skills_size() const {
  return skills_.size();
}
inline void user_hero::clear_skills() {
  skills_.Clear();
}
inline const ::user_hero_skill& user_hero::skills(int index) const {
  return skills_.Get(index);
}
inline ::user_hero_skill* user_hero::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::user_hero_skill* user_hero::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_hero_skill >&
user_hero::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_hero_skill >*
user_hero::mutable_skills() {
  return &skills_;
}

// -------------------------------------------------------------------

// user_hero_array

// repeated .user_hero items = 1;
inline int user_hero_array::items_size() const {
  return items_.size();
}
inline void user_hero_array::clear_items() {
  items_.Clear();
}
inline const ::user_hero& user_hero_array::items(int index) const {
  return items_.Get(index);
}
inline ::user_hero* user_hero_array::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::user_hero* user_hero_array::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_hero >&
user_hero_array::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_hero >*
user_hero_array::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// user_base_info

// required uint32 user_id = 1;
inline bool user_base_info::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_base_info::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_base_info::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_base_info::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 user_base_info::user_id() const {
  return user_id_;
}
inline void user_base_info::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string name = 2;
inline bool user_base_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_base_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_base_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_base_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& user_base_info::name() const {
  return *name_;
}
inline void user_base_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void user_base_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void user_base_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_base_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* user_base_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void user_base_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 level = 3;
inline bool user_base_info::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_base_info::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_base_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_base_info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 user_base_info::level() const {
  return level_;
}
inline void user_base_info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 exp = 4;
inline bool user_base_info::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_base_info::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_base_info::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_base_info::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 user_base_info::exp() const {
  return exp_;
}
inline void user_base_info::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 vip = 5;
inline bool user_base_info::has_vip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_base_info::set_has_vip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_base_info::clear_has_vip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_base_info::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 user_base_info::vip() const {
  return vip_;
}
inline void user_base_info::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
}

// required uint32 diamond = 6;
inline bool user_base_info::has_diamond() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_base_info::set_has_diamond() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_base_info::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_base_info::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 user_base_info::diamond() const {
  return diamond_;
}
inline void user_base_info::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// required uint32 gold = 7;
inline bool user_base_info::has_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_base_info::set_has_gold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_base_info::clear_has_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_base_info::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 user_base_info::gold() const {
  return gold_;
}
inline void user_base_info::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// required uint32 health_cur = 8;
inline bool user_base_info::has_health_cur() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_base_info::set_has_health_cur() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_base_info::clear_has_health_cur() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_base_info::clear_health_cur() {
  health_cur_ = 0u;
  clear_has_health_cur();
}
inline ::google::protobuf::uint32 user_base_info::health_cur() const {
  return health_cur_;
}
inline void user_base_info::set_health_cur(::google::protobuf::uint32 value) {
  set_has_health_cur();
  health_cur_ = value;
}

// required uint32 health_last_update_timestamp = 9;
inline bool user_base_info::has_health_last_update_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void user_base_info::set_has_health_last_update_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void user_base_info::clear_has_health_last_update_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void user_base_info::clear_health_last_update_timestamp() {
  health_last_update_timestamp_ = 0u;
  clear_has_health_last_update_timestamp();
}
inline ::google::protobuf::uint32 user_base_info::health_last_update_timestamp() const {
  return health_last_update_timestamp_;
}
inline void user_base_info::set_health_last_update_timestamp(::google::protobuf::uint32 value) {
  set_has_health_last_update_timestamp();
  health_last_update_timestamp_ = value;
}

// required uint32 skill_point = 10;
inline bool user_base_info::has_skill_point() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void user_base_info::set_has_skill_point() {
  _has_bits_[0] |= 0x00000200u;
}
inline void user_base_info::clear_has_skill_point() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void user_base_info::clear_skill_point() {
  skill_point_ = 0u;
  clear_has_skill_point();
}
inline ::google::protobuf::uint32 user_base_info::skill_point() const {
  return skill_point_;
}
inline void user_base_info::set_skill_point(::google::protobuf::uint32 value) {
  set_has_skill_point();
  skill_point_ = value;
}

// required uint32 skill_point_last_update_timestamp = 11;
inline bool user_base_info::has_skill_point_last_update_timestamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void user_base_info::set_has_skill_point_last_update_timestamp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void user_base_info::clear_has_skill_point_last_update_timestamp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void user_base_info::clear_skill_point_last_update_timestamp() {
  skill_point_last_update_timestamp_ = 0u;
  clear_has_skill_point_last_update_timestamp();
}
inline ::google::protobuf::uint32 user_base_info::skill_point_last_update_timestamp() const {
  return skill_point_last_update_timestamp_;
}
inline void user_base_info::set_skill_point_last_update_timestamp(::google::protobuf::uint32 value) {
  set_has_skill_point_last_update_timestamp();
  skill_point_last_update_timestamp_ = value;
}

// required uint32 invoke_gold_free_left_num = 12;
inline bool user_base_info::has_invoke_gold_free_left_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void user_base_info::set_has_invoke_gold_free_left_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void user_base_info::clear_has_invoke_gold_free_left_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void user_base_info::clear_invoke_gold_free_left_num() {
  invoke_gold_free_left_num_ = 0u;
  clear_has_invoke_gold_free_left_num();
}
inline ::google::protobuf::uint32 user_base_info::invoke_gold_free_left_num() const {
  return invoke_gold_free_left_num_;
}
inline void user_base_info::set_invoke_gold_free_left_num(::google::protobuf::uint32 value) {
  set_has_invoke_gold_free_left_num();
  invoke_gold_free_left_num_ = value;
}

// required uint32 invoke_gold_free_update_timestamp = 13;
inline bool user_base_info::has_invoke_gold_free_update_timestamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void user_base_info::set_has_invoke_gold_free_update_timestamp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void user_base_info::clear_has_invoke_gold_free_update_timestamp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void user_base_info::clear_invoke_gold_free_update_timestamp() {
  invoke_gold_free_update_timestamp_ = 0u;
  clear_has_invoke_gold_free_update_timestamp();
}
inline ::google::protobuf::uint32 user_base_info::invoke_gold_free_update_timestamp() const {
  return invoke_gold_free_update_timestamp_;
}
inline void user_base_info::set_invoke_gold_free_update_timestamp(::google::protobuf::uint32 value) {
  set_has_invoke_gold_free_update_timestamp();
  invoke_gold_free_update_timestamp_ = value;
}

// required uint32 invoke_diamond_free_left_num = 14;
inline bool user_base_info::has_invoke_diamond_free_left_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void user_base_info::set_has_invoke_diamond_free_left_num() {
  _has_bits_[0] |= 0x00002000u;
}
inline void user_base_info::clear_has_invoke_diamond_free_left_num() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void user_base_info::clear_invoke_diamond_free_left_num() {
  invoke_diamond_free_left_num_ = 0u;
  clear_has_invoke_diamond_free_left_num();
}
inline ::google::protobuf::uint32 user_base_info::invoke_diamond_free_left_num() const {
  return invoke_diamond_free_left_num_;
}
inline void user_base_info::set_invoke_diamond_free_left_num(::google::protobuf::uint32 value) {
  set_has_invoke_diamond_free_left_num();
  invoke_diamond_free_left_num_ = value;
}

// required uint32 invoke_diamond_free_update_timestamp = 15;
inline bool user_base_info::has_invoke_diamond_free_update_timestamp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void user_base_info::set_has_invoke_diamond_free_update_timestamp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void user_base_info::clear_has_invoke_diamond_free_update_timestamp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void user_base_info::clear_invoke_diamond_free_update_timestamp() {
  invoke_diamond_free_update_timestamp_ = 0u;
  clear_has_invoke_diamond_free_update_timestamp();
}
inline ::google::protobuf::uint32 user_base_info::invoke_diamond_free_update_timestamp() const {
  return invoke_diamond_free_update_timestamp_;
}
inline void user_base_info::set_invoke_diamond_free_update_timestamp(::google::protobuf::uint32 value) {
  set_has_invoke_diamond_free_update_timestamp();
  invoke_diamond_free_update_timestamp_ = value;
}

// required uint32 buy_used_times_gold = 16;
inline bool user_base_info::has_buy_used_times_gold() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void user_base_info::set_has_buy_used_times_gold() {
  _has_bits_[0] |= 0x00008000u;
}
inline void user_base_info::clear_has_buy_used_times_gold() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void user_base_info::clear_buy_used_times_gold() {
  buy_used_times_gold_ = 0u;
  clear_has_buy_used_times_gold();
}
inline ::google::protobuf::uint32 user_base_info::buy_used_times_gold() const {
  return buy_used_times_gold_;
}
inline void user_base_info::set_buy_used_times_gold(::google::protobuf::uint32 value) {
  set_has_buy_used_times_gold();
  buy_used_times_gold_ = value;
}

// required uint32 buy_used_times_health = 17;
inline bool user_base_info::has_buy_used_times_health() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void user_base_info::set_has_buy_used_times_health() {
  _has_bits_[0] |= 0x00010000u;
}
inline void user_base_info::clear_has_buy_used_times_health() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void user_base_info::clear_buy_used_times_health() {
  buy_used_times_health_ = 0u;
  clear_has_buy_used_times_health();
}
inline ::google::protobuf::uint32 user_base_info::buy_used_times_health() const {
  return buy_used_times_health_;
}
inline void user_base_info::set_buy_used_times_health(::google::protobuf::uint32 value) {
  set_has_buy_used_times_health();
  buy_used_times_health_ = value;
}

// required uint32 buy_used_times_skill_point = 18;
inline bool user_base_info::has_buy_used_times_skill_point() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void user_base_info::set_has_buy_used_times_skill_point() {
  _has_bits_[0] |= 0x00020000u;
}
inline void user_base_info::clear_has_buy_used_times_skill_point() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void user_base_info::clear_buy_used_times_skill_point() {
  buy_used_times_skill_point_ = 0u;
  clear_has_buy_used_times_skill_point();
}
inline ::google::protobuf::uint32 user_base_info::buy_used_times_skill_point() const {
  return buy_used_times_skill_point_;
}
inline void user_base_info::set_buy_used_times_skill_point(::google::protobuf::uint32 value) {
  set_has_buy_used_times_skill_point();
  buy_used_times_skill_point_ = value;
}

// required uint32 head_id = 19;
inline bool user_base_info::has_head_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void user_base_info::set_has_head_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void user_base_info::clear_has_head_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void user_base_info::clear_head_id() {
  head_id_ = 0u;
  clear_has_head_id();
}
inline ::google::protobuf::uint32 user_base_info::head_id() const {
  return head_id_;
}
inline void user_base_info::set_head_id(::google::protobuf::uint32 value) {
  set_has_head_id();
  head_id_ = value;
}

// required uint32 head_frame_id = 20;
inline bool user_base_info::has_head_frame_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void user_base_info::set_has_head_frame_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void user_base_info::clear_has_head_frame_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void user_base_info::clear_head_frame_id() {
  head_frame_id_ = 0u;
  clear_has_head_frame_id();
}
inline ::google::protobuf::uint32 user_base_info::head_frame_id() const {
  return head_frame_id_;
}
inline void user_base_info::set_head_frame_id(::google::protobuf::uint32 value) {
  set_has_head_frame_id();
  head_frame_id_ = value;
}

// required uint32 friend_point = 21;
inline bool user_base_info::has_friend_point() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void user_base_info::set_has_friend_point() {
  _has_bits_[0] |= 0x00100000u;
}
inline void user_base_info::clear_has_friend_point() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void user_base_info::clear_friend_point() {
  friend_point_ = 0u;
  clear_has_friend_point();
}
inline ::google::protobuf::uint32 user_base_info::friend_point() const {
  return friend_point_;
}
inline void user_base_info::set_friend_point(::google::protobuf::uint32 value) {
  set_has_friend_point();
  friend_point_ = value;
}

// required string signature = 22;
inline bool user_base_info::has_signature() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void user_base_info::set_has_signature() {
  _has_bits_[0] |= 0x00200000u;
}
inline void user_base_info::clear_has_signature() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void user_base_info::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& user_base_info::signature() const {
  return *signature_;
}
inline void user_base_info::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void user_base_info::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void user_base_info::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_base_info::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* user_base_info::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void user_base_info::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 fight_power = 23;
inline bool user_base_info::has_fight_power() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void user_base_info::set_has_fight_power() {
  _has_bits_[0] |= 0x00400000u;
}
inline void user_base_info::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void user_base_info::clear_fight_power() {
  fight_power_ = 0u;
  clear_has_fight_power();
}
inline ::google::protobuf::uint32 user_base_info::fight_power() const {
  return fight_power_;
}
inline void user_base_info::set_fight_power(::google::protobuf::uint32 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// required uint32 crusade_point = 24;
inline bool user_base_info::has_crusade_point() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void user_base_info::set_has_crusade_point() {
  _has_bits_[0] |= 0x00800000u;
}
inline void user_base_info::clear_has_crusade_point() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void user_base_info::clear_crusade_point() {
  crusade_point_ = 0u;
  clear_has_crusade_point();
}
inline ::google::protobuf::uint32 user_base_info::crusade_point() const {
  return crusade_point_;
}
inline void user_base_info::set_crusade_point(::google::protobuf::uint32 value) {
  set_has_crusade_point();
  crusade_point_ = value;
}

// -------------------------------------------------------------------

// struct_game_element

// required .struct_game_element.EELEMENTTYPE type = 1;
inline bool struct_game_element::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void struct_game_element::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void struct_game_element::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void struct_game_element::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::struct_game_element_EELEMENTTYPE struct_game_element::type() const {
  return static_cast< ::struct_game_element_EELEMENTTYPE >(type_);
}
inline void struct_game_element::set_type(::struct_game_element_EELEMENTTYPE value) {
  assert(::struct_game_element_EELEMENTTYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 id = 2;
inline bool struct_game_element::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void struct_game_element::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void struct_game_element::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void struct_game_element::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 struct_game_element::id() const {
  return id_;
}
inline void struct_game_element::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 sub_id = 3;
inline bool struct_game_element::has_sub_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void struct_game_element::set_has_sub_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void struct_game_element::clear_has_sub_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void struct_game_element::clear_sub_id() {
  sub_id_ = 0u;
  clear_has_sub_id();
}
inline ::google::protobuf::uint32 struct_game_element::sub_id() const {
  return sub_id_;
}
inline void struct_game_element::set_sub_id(::google::protobuf::uint32 value) {
  set_has_sub_id();
  sub_id_ = value;
}

// required .struct_game_element.EELEMENT_NUM_TYPE num_type = 4;
inline bool struct_game_element::has_num_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void struct_game_element::set_has_num_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void struct_game_element::clear_has_num_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void struct_game_element::clear_num_type() {
  num_type_ = 0;
  clear_has_num_type();
}
inline ::struct_game_element_EELEMENT_NUM_TYPE struct_game_element::num_type() const {
  return static_cast< ::struct_game_element_EELEMENT_NUM_TYPE >(num_type_);
}
inline void struct_game_element::set_num_type(::struct_game_element_EELEMENT_NUM_TYPE value) {
  assert(::struct_game_element_EELEMENT_NUM_TYPE_IsValid(value));
  set_has_num_type();
  num_type_ = value;
}

// required uint32 num = 5;
inline bool struct_game_element::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void struct_game_element::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void struct_game_element::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void struct_game_element::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 struct_game_element::num() const {
  return num_;
}
inline void struct_game_element::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// user_shop_item

// required uint32 pos = 1;
inline bool user_shop_item::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_shop_item::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_shop_item::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_shop_item::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 user_shop_item::pos() const {
  return pos_;
}
inline void user_shop_item::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// required .struct_game_element.EELEMENTTYPE element_type = 2;
inline bool user_shop_item::has_element_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_shop_item::set_has_element_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_shop_item::clear_has_element_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_shop_item::clear_element_type() {
  element_type_ = 0;
  clear_has_element_type();
}
inline ::struct_game_element_EELEMENTTYPE user_shop_item::element_type() const {
  return static_cast< ::struct_game_element_EELEMENTTYPE >(element_type_);
}
inline void user_shop_item::set_element_type(::struct_game_element_EELEMENTTYPE value) {
  assert(::struct_game_element_EELEMENTTYPE_IsValid(value));
  set_has_element_type();
  element_type_ = value;
}

// required uint32 element_id = 3;
inline bool user_shop_item::has_element_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_shop_item::set_has_element_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_shop_item::clear_has_element_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_shop_item::clear_element_id() {
  element_id_ = 0u;
  clear_has_element_id();
}
inline ::google::protobuf::uint32 user_shop_item::element_id() const {
  return element_id_;
}
inline void user_shop_item::set_element_id(::google::protobuf::uint32 value) {
  set_has_element_id();
  element_id_ = value;
}

// required uint32 element_num = 4;
inline bool user_shop_item::has_element_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_shop_item::set_has_element_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_shop_item::clear_has_element_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_shop_item::clear_element_num() {
  element_num_ = 0u;
  clear_has_element_num();
}
inline ::google::protobuf::uint32 user_shop_item::element_num() const {
  return element_num_;
}
inline void user_shop_item::set_element_num(::google::protobuf::uint32 value) {
  set_has_element_num();
  element_num_ = value;
}

// required .struct_game_element.EELEMENTTYPE consume_type = 5;
inline bool user_shop_item::has_consume_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_shop_item::set_has_consume_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_shop_item::clear_has_consume_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_shop_item::clear_consume_type() {
  consume_type_ = 0;
  clear_has_consume_type();
}
inline ::struct_game_element_EELEMENTTYPE user_shop_item::consume_type() const {
  return static_cast< ::struct_game_element_EELEMENTTYPE >(consume_type_);
}
inline void user_shop_item::set_consume_type(::struct_game_element_EELEMENTTYPE value) {
  assert(::struct_game_element_EELEMENTTYPE_IsValid(value));
  set_has_consume_type();
  consume_type_ = value;
}

// required uint32 consume_id = 6;
inline bool user_shop_item::has_consume_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_shop_item::set_has_consume_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_shop_item::clear_has_consume_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_shop_item::clear_consume_id() {
  consume_id_ = 0u;
  clear_has_consume_id();
}
inline ::google::protobuf::uint32 user_shop_item::consume_id() const {
  return consume_id_;
}
inline void user_shop_item::set_consume_id(::google::protobuf::uint32 value) {
  set_has_consume_id();
  consume_id_ = value;
}

// required uint32 consume_num = 7;
inline bool user_shop_item::has_consume_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_shop_item::set_has_consume_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_shop_item::clear_has_consume_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_shop_item::clear_consume_num() {
  consume_num_ = 0u;
  clear_has_consume_num();
}
inline ::google::protobuf::uint32 user_shop_item::consume_num() const {
  return consume_num_;
}
inline void user_shop_item::set_consume_num(::google::protobuf::uint32 value) {
  set_has_consume_num();
  consume_num_ = value;
}

// required .user_shop_item.ESHOPITEMFLAG flag = 8;
inline bool user_shop_item::has_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_shop_item::set_has_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_shop_item::clear_has_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_shop_item::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::user_shop_item_ESHOPITEMFLAG user_shop_item::flag() const {
  return static_cast< ::user_shop_item_ESHOPITEMFLAG >(flag_);
}
inline void user_shop_item::set_flag(::user_shop_item_ESHOPITEMFLAG value) {
  assert(::user_shop_item_ESHOPITEMFLAG_IsValid(value));
  set_has_flag();
  flag_ = value;
}

// required bool is_sold = 9;
inline bool user_shop_item::has_is_sold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void user_shop_item::set_has_is_sold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void user_shop_item::clear_has_is_sold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void user_shop_item::clear_is_sold() {
  is_sold_ = false;
  clear_has_is_sold();
}
inline bool user_shop_item::is_sold() const {
  return is_sold_;
}
inline void user_shop_item::set_is_sold(bool value) {
  set_has_is_sold();
  is_sold_ = value;
}

// -------------------------------------------------------------------

// user_shop

// required .user_shop.ESHOPTYPE shop_type = 1;
inline bool user_shop::has_shop_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_shop::set_has_shop_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_shop::clear_has_shop_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_shop::clear_shop_type() {
  shop_type_ = 0;
  clear_has_shop_type();
}
inline ::user_shop_ESHOPTYPE user_shop::shop_type() const {
  return static_cast< ::user_shop_ESHOPTYPE >(shop_type_);
}
inline void user_shop::set_shop_type(::user_shop_ESHOPTYPE value) {
  assert(::user_shop_ESHOPTYPE_IsValid(value));
  set_has_shop_type();
  shop_type_ = value;
}

// required uint32 last_auto_refresh_time = 2;
inline bool user_shop::has_last_auto_refresh_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_shop::set_has_last_auto_refresh_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_shop::clear_has_last_auto_refresh_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_shop::clear_last_auto_refresh_time() {
  last_auto_refresh_time_ = 0u;
  clear_has_last_auto_refresh_time();
}
inline ::google::protobuf::uint32 user_shop::last_auto_refresh_time() const {
  return last_auto_refresh_time_;
}
inline void user_shop::set_last_auto_refresh_time(::google::protobuf::uint32 value) {
  set_has_last_auto_refresh_time();
  last_auto_refresh_time_ = value;
}

// required uint32 last_manual_refresh_time = 3;
inline bool user_shop::has_last_manual_refresh_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_shop::set_has_last_manual_refresh_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_shop::clear_has_last_manual_refresh_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_shop::clear_last_manual_refresh_time() {
  last_manual_refresh_time_ = 0u;
  clear_has_last_manual_refresh_time();
}
inline ::google::protobuf::uint32 user_shop::last_manual_refresh_time() const {
  return last_manual_refresh_time_;
}
inline void user_shop::set_last_manual_refresh_time(::google::protobuf::uint32 value) {
  set_has_last_manual_refresh_time();
  last_manual_refresh_time_ = value;
}

// required uint32 last_day_manual_refresh_num = 4;
inline bool user_shop::has_last_day_manual_refresh_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_shop::set_has_last_day_manual_refresh_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_shop::clear_has_last_day_manual_refresh_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_shop::clear_last_day_manual_refresh_num() {
  last_day_manual_refresh_num_ = 0u;
  clear_has_last_day_manual_refresh_num();
}
inline ::google::protobuf::uint32 user_shop::last_day_manual_refresh_num() const {
  return last_day_manual_refresh_num_;
}
inline void user_shop::set_last_day_manual_refresh_num(::google::protobuf::uint32 value) {
  set_has_last_day_manual_refresh_num();
  last_day_manual_refresh_num_ = value;
}

// required uint32 random_open_start_timestamp = 5;
inline bool user_shop::has_random_open_start_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_shop::set_has_random_open_start_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_shop::clear_has_random_open_start_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_shop::clear_random_open_start_timestamp() {
  random_open_start_timestamp_ = 0u;
  clear_has_random_open_start_timestamp();
}
inline ::google::protobuf::uint32 user_shop::random_open_start_timestamp() const {
  return random_open_start_timestamp_;
}
inline void user_shop::set_random_open_start_timestamp(::google::protobuf::uint32 value) {
  set_has_random_open_start_timestamp();
  random_open_start_timestamp_ = value;
}

// required uint32 random_open_end_timestamp = 6;
inline bool user_shop::has_random_open_end_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_shop::set_has_random_open_end_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_shop::clear_has_random_open_end_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_shop::clear_random_open_end_timestamp() {
  random_open_end_timestamp_ = 0u;
  clear_has_random_open_end_timestamp();
}
inline ::google::protobuf::uint32 user_shop::random_open_end_timestamp() const {
  return random_open_end_timestamp_;
}
inline void user_shop::set_random_open_end_timestamp(::google::protobuf::uint32 value) {
  set_has_random_open_end_timestamp();
  random_open_end_timestamp_ = value;
}

// repeated .user_shop_item items = 7;
inline int user_shop::items_size() const {
  return items_.size();
}
inline void user_shop::clear_items() {
  items_.Clear();
}
inline const ::user_shop_item& user_shop::items(int index) const {
  return items_.Get(index);
}
inline ::user_shop_item* user_shop::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::user_shop_item* user_shop::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_shop_item >&
user_shop::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_shop_item >*
user_shop::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// user_arena_log_user_arena_log_hero

// required uint32 hero_id = 1;
inline bool user_arena_log_user_arena_log_hero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_arena_log_user_arena_log_hero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_arena_log_user_arena_log_hero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_arena_log_user_arena_log_hero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 user_arena_log_user_arena_log_hero::hero_id() const {
  return hero_id_;
}
inline void user_arena_log_user_arena_log_hero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required uint32 quality = 2;
inline bool user_arena_log_user_arena_log_hero::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_arena_log_user_arena_log_hero::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_arena_log_user_arena_log_hero::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_arena_log_user_arena_log_hero::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 user_arena_log_user_arena_log_hero::quality() const {
  return quality_;
}
inline void user_arena_log_user_arena_log_hero::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// required uint32 level = 3;
inline bool user_arena_log_user_arena_log_hero::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_arena_log_user_arena_log_hero::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_arena_log_user_arena_log_hero::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_arena_log_user_arena_log_hero::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 user_arena_log_user_arena_log_hero::level() const {
  return level_;
}
inline void user_arena_log_user_arena_log_hero::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 star = 4;
inline bool user_arena_log_user_arena_log_hero::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_arena_log_user_arena_log_hero::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_arena_log_user_arena_log_hero::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_arena_log_user_arena_log_hero::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 user_arena_log_user_arena_log_hero::star() const {
  return star_;
}
inline void user_arena_log_user_arena_log_hero::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// -------------------------------------------------------------------

// user_arena_log

// required bool is_attacker_win = 1;
inline bool user_arena_log::has_is_attacker_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_arena_log::set_has_is_attacker_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_arena_log::clear_has_is_attacker_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_arena_log::clear_is_attacker_win() {
  is_attacker_win_ = false;
  clear_has_is_attacker_win();
}
inline bool user_arena_log::is_attacker_win() const {
  return is_attacker_win_;
}
inline void user_arena_log::set_is_attacker_win(bool value) {
  set_has_is_attacker_win();
  is_attacker_win_ = value;
}

// required uint32 time = 2;
inline bool user_arena_log::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_arena_log::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_arena_log::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_arena_log::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 user_arena_log::time() const {
  return time_;
}
inline void user_arena_log::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required bool is_me_attacker = 3;
inline bool user_arena_log::has_is_me_attacker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_arena_log::set_has_is_me_attacker() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_arena_log::clear_has_is_me_attacker() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_arena_log::clear_is_me_attacker() {
  is_me_attacker_ = false;
  clear_has_is_me_attacker();
}
inline bool user_arena_log::is_me_attacker() const {
  return is_me_attacker_;
}
inline void user_arena_log::set_is_me_attacker(bool value) {
  set_has_is_me_attacker();
  is_me_attacker_ = value;
}

// required uint32 me_rank = 4;
inline bool user_arena_log::has_me_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_arena_log::set_has_me_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_arena_log::clear_has_me_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_arena_log::clear_me_rank() {
  me_rank_ = 0u;
  clear_has_me_rank();
}
inline ::google::protobuf::uint32 user_arena_log::me_rank() const {
  return me_rank_;
}
inline void user_arena_log::set_me_rank(::google::protobuf::uint32 value) {
  set_has_me_rank();
  me_rank_ = value;
}

// required uint32 match_user_id = 5;
inline bool user_arena_log::has_match_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_arena_log::set_has_match_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_arena_log::clear_has_match_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_arena_log::clear_match_user_id() {
  match_user_id_ = 0u;
  clear_has_match_user_id();
}
inline ::google::protobuf::uint32 user_arena_log::match_user_id() const {
  return match_user_id_;
}
inline void user_arena_log::set_match_user_id(::google::protobuf::uint32 value) {
  set_has_match_user_id();
  match_user_id_ = value;
}

// required uint32 match_rank = 6;
inline bool user_arena_log::has_match_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_arena_log::set_has_match_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_arena_log::clear_has_match_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_arena_log::clear_match_rank() {
  match_rank_ = 0u;
  clear_has_match_rank();
}
inline ::google::protobuf::uint32 user_arena_log::match_rank() const {
  return match_rank_;
}
inline void user_arena_log::set_match_rank(::google::protobuf::uint32 value) {
  set_has_match_rank();
  match_rank_ = value;
}

// required uint32 match_power = 7;
inline bool user_arena_log::has_match_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_arena_log::set_has_match_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_arena_log::clear_has_match_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_arena_log::clear_match_power() {
  match_power_ = 0u;
  clear_has_match_power();
}
inline ::google::protobuf::uint32 user_arena_log::match_power() const {
  return match_power_;
}
inline void user_arena_log::set_match_power(::google::protobuf::uint32 value) {
  set_has_match_power();
  match_power_ = value;
}

// required string match_name = 8;
inline bool user_arena_log::has_match_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_arena_log::set_has_match_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_arena_log::clear_has_match_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_arena_log::clear_match_name() {
  if (match_name_ != &::google::protobuf::internal::kEmptyString) {
    match_name_->clear();
  }
  clear_has_match_name();
}
inline const ::std::string& user_arena_log::match_name() const {
  return *match_name_;
}
inline void user_arena_log::set_match_name(const ::std::string& value) {
  set_has_match_name();
  if (match_name_ == &::google::protobuf::internal::kEmptyString) {
    match_name_ = new ::std::string;
  }
  match_name_->assign(value);
}
inline void user_arena_log::set_match_name(const char* value) {
  set_has_match_name();
  if (match_name_ == &::google::protobuf::internal::kEmptyString) {
    match_name_ = new ::std::string;
  }
  match_name_->assign(value);
}
inline void user_arena_log::set_match_name(const char* value, size_t size) {
  set_has_match_name();
  if (match_name_ == &::google::protobuf::internal::kEmptyString) {
    match_name_ = new ::std::string;
  }
  match_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_arena_log::mutable_match_name() {
  set_has_match_name();
  if (match_name_ == &::google::protobuf::internal::kEmptyString) {
    match_name_ = new ::std::string;
  }
  return match_name_;
}
inline ::std::string* user_arena_log::release_match_name() {
  clear_has_match_name();
  if (match_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = match_name_;
    match_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void user_arena_log::set_allocated_match_name(::std::string* match_name) {
  if (match_name_ != &::google::protobuf::internal::kEmptyString) {
    delete match_name_;
  }
  if (match_name) {
    set_has_match_name();
    match_name_ = match_name;
  } else {
    clear_has_match_name();
    match_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 match_level = 9;
inline bool user_arena_log::has_match_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void user_arena_log::set_has_match_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void user_arena_log::clear_has_match_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void user_arena_log::clear_match_level() {
  match_level_ = 0u;
  clear_has_match_level();
}
inline ::google::protobuf::uint32 user_arena_log::match_level() const {
  return match_level_;
}
inline void user_arena_log::set_match_level(::google::protobuf::uint32 value) {
  set_has_match_level();
  match_level_ = value;
}

// repeated .user_arena_log.user_arena_log_hero match_heros = 10;
inline int user_arena_log::match_heros_size() const {
  return match_heros_.size();
}
inline void user_arena_log::clear_match_heros() {
  match_heros_.Clear();
}
inline const ::user_arena_log_user_arena_log_hero& user_arena_log::match_heros(int index) const {
  return match_heros_.Get(index);
}
inline ::user_arena_log_user_arena_log_hero* user_arena_log::mutable_match_heros(int index) {
  return match_heros_.Mutable(index);
}
inline ::user_arena_log_user_arena_log_hero* user_arena_log::add_match_heros() {
  return match_heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_arena_log_user_arena_log_hero >&
user_arena_log::match_heros() const {
  return match_heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_arena_log_user_arena_log_hero >*
user_arena_log::mutable_match_heros() {
  return &match_heros_;
}

// -------------------------------------------------------------------

// user_arena_contestant

// required uint32 rank = 1;
inline bool user_arena_contestant::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_arena_contestant::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_arena_contestant::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_arena_contestant::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 user_arena_contestant::rank() const {
  return rank_;
}
inline void user_arena_contestant::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// required uint32 user_id = 2;
inline bool user_arena_contestant::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_arena_contestant::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_arena_contestant::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_arena_contestant::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 user_arena_contestant::user_id() const {
  return user_id_;
}
inline void user_arena_contestant::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string name = 3;
inline bool user_arena_contestant::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_arena_contestant::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_arena_contestant::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_arena_contestant::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& user_arena_contestant::name() const {
  return *name_;
}
inline void user_arena_contestant::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void user_arena_contestant::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void user_arena_contestant::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_arena_contestant::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* user_arena_contestant::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void user_arena_contestant::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 level = 4;
inline bool user_arena_contestant::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_arena_contestant::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_arena_contestant::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_arena_contestant::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 user_arena_contestant::level() const {
  return level_;
}
inline void user_arena_contestant::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 head_id = 5;
inline bool user_arena_contestant::has_head_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_arena_contestant::set_has_head_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_arena_contestant::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_arena_contestant::clear_head_id() {
  head_id_ = 0u;
  clear_has_head_id();
}
inline ::google::protobuf::uint32 user_arena_contestant::head_id() const {
  return head_id_;
}
inline void user_arena_contestant::set_head_id(::google::protobuf::uint32 value) {
  set_has_head_id();
  head_id_ = value;
}

// required uint32 head_frame_id = 6;
inline bool user_arena_contestant::has_head_frame_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_arena_contestant::set_has_head_frame_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_arena_contestant::clear_has_head_frame_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_arena_contestant::clear_head_frame_id() {
  head_frame_id_ = 0u;
  clear_has_head_frame_id();
}
inline ::google::protobuf::uint32 user_arena_contestant::head_frame_id() const {
  return head_frame_id_;
}
inline void user_arena_contestant::set_head_frame_id(::google::protobuf::uint32 value) {
  set_has_head_frame_id();
  head_frame_id_ = value;
}

// repeated .user_hero heros = 7;
inline int user_arena_contestant::heros_size() const {
  return heros_.size();
}
inline void user_arena_contestant::clear_heros() {
  heros_.Clear();
}
inline const ::user_hero& user_arena_contestant::heros(int index) const {
  return heros_.Get(index);
}
inline ::user_hero* user_arena_contestant::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::user_hero* user_arena_contestant::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_hero >&
user_arena_contestant::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_hero >*
user_arena_contestant::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// user_arena

// required uint32 rank = 1;
inline bool user_arena::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_arena::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_arena::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_arena::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 user_arena::rank() const {
  return rank_;
}
inline void user_arena::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// required uint32 score = 2;
inline bool user_arena::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_arena::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_arena::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_arena::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 user_arena::score() const {
  return score_;
}
inline void user_arena::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// required uint32 last_challenge_time = 3;
inline bool user_arena::has_last_challenge_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_arena::set_has_last_challenge_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_arena::clear_has_last_challenge_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_arena::clear_last_challenge_time() {
  last_challenge_time_ = 0u;
  clear_has_last_challenge_time();
}
inline ::google::protobuf::uint32 user_arena::last_challenge_time() const {
  return last_challenge_time_;
}
inline void user_arena::set_last_challenge_time(::google::protobuf::uint32 value) {
  set_has_last_challenge_time();
  last_challenge_time_ = value;
}

// required uint32 last_day_challenge_num = 4;
inline bool user_arena::has_last_day_challenge_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_arena::set_has_last_day_challenge_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_arena::clear_has_last_day_challenge_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_arena::clear_last_day_challenge_num() {
  last_day_challenge_num_ = 0u;
  clear_has_last_day_challenge_num();
}
inline ::google::protobuf::uint32 user_arena::last_day_challenge_num() const {
  return last_day_challenge_num_;
}
inline void user_arena::set_last_day_challenge_num(::google::protobuf::uint32 value) {
  set_has_last_day_challenge_num();
  last_day_challenge_num_ = value;
}

// required uint32 history_highest_rank = 5;
inline bool user_arena::has_history_highest_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_arena::set_has_history_highest_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_arena::clear_has_history_highest_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_arena::clear_history_highest_rank() {
  history_highest_rank_ = 0u;
  clear_has_history_highest_rank();
}
inline ::google::protobuf::uint32 user_arena::history_highest_rank() const {
  return history_highest_rank_;
}
inline void user_arena::set_history_highest_rank(::google::protobuf::uint32 value) {
  set_has_history_highest_rank();
  history_highest_rank_ = value;
}

// repeated uint32 heros = 6;
inline int user_arena::heros_size() const {
  return heros_.size();
}
inline void user_arena::clear_heros() {
  heros_.Clear();
}
inline ::google::protobuf::uint32 user_arena::heros(int index) const {
  return heros_.Get(index);
}
inline void user_arena::set_heros(int index, ::google::protobuf::uint32 value) {
  heros_.Set(index, value);
}
inline void user_arena::add_heros(::google::protobuf::uint32 value) {
  heros_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
user_arena::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
user_arena::mutable_heros() {
  return &heros_;
}

// required uint32 last_time_buy_arena_challenge = 7;
inline bool user_arena::has_last_time_buy_arena_challenge() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void user_arena::set_has_last_time_buy_arena_challenge() {
  _has_bits_[0] |= 0x00000040u;
}
inline void user_arena::clear_has_last_time_buy_arena_challenge() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void user_arena::clear_last_time_buy_arena_challenge() {
  last_time_buy_arena_challenge_ = 0u;
  clear_has_last_time_buy_arena_challenge();
}
inline ::google::protobuf::uint32 user_arena::last_time_buy_arena_challenge() const {
  return last_time_buy_arena_challenge_;
}
inline void user_arena::set_last_time_buy_arena_challenge(::google::protobuf::uint32 value) {
  set_has_last_time_buy_arena_challenge();
  last_time_buy_arena_challenge_ = value;
}

// required uint32 last_day_buy_arena_challenge_num = 8;
inline bool user_arena::has_last_day_buy_arena_challenge_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void user_arena::set_has_last_day_buy_arena_challenge_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void user_arena::clear_has_last_day_buy_arena_challenge_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void user_arena::clear_last_day_buy_arena_challenge_num() {
  last_day_buy_arena_challenge_num_ = 0u;
  clear_has_last_day_buy_arena_challenge_num();
}
inline ::google::protobuf::uint32 user_arena::last_day_buy_arena_challenge_num() const {
  return last_day_buy_arena_challenge_num_;
}
inline void user_arena::set_last_day_buy_arena_challenge_num(::google::protobuf::uint32 value) {
  set_has_last_day_buy_arena_challenge_num();
  last_day_buy_arena_challenge_num_ = value;
}

// repeated .user_arena_log log = 9;
inline int user_arena::log_size() const {
  return log_.size();
}
inline void user_arena::clear_log() {
  log_.Clear();
}
inline const ::user_arena_log& user_arena::log(int index) const {
  return log_.Get(index);
}
inline ::user_arena_log* user_arena::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::user_arena_log* user_arena::add_log() {
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_arena_log >&
user_arena::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_arena_log >*
user_arena::mutable_log() {
  return &log_;
}

// repeated .user_arena_contestant matchs = 10;
inline int user_arena::matchs_size() const {
  return matchs_.size();
}
inline void user_arena::clear_matchs() {
  matchs_.Clear();
}
inline const ::user_arena_contestant& user_arena::matchs(int index) const {
  return matchs_.Get(index);
}
inline ::user_arena_contestant* user_arena::mutable_matchs(int index) {
  return matchs_.Mutable(index);
}
inline ::user_arena_contestant* user_arena::add_matchs() {
  return matchs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >&
user_arena::matchs() const {
  return matchs_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >*
user_arena::mutable_matchs() {
  return &matchs_;
}

// -------------------------------------------------------------------

// user_crusade_crusade_hero

// required uint32 hero_id = 1;
inline bool user_crusade_crusade_hero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_crusade_crusade_hero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_crusade_crusade_hero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_crusade_crusade_hero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 user_crusade_crusade_hero::hero_id() const {
  return hero_id_;
}
inline void user_crusade_crusade_hero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required uint32 hp = 2;
inline bool user_crusade_crusade_hero::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_crusade_crusade_hero::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_crusade_crusade_hero::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_crusade_crusade_hero::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 user_crusade_crusade_hero::hp() const {
  return hp_;
}
inline void user_crusade_crusade_hero::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// required uint32 ao_yi = 3;
inline bool user_crusade_crusade_hero::has_ao_yi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_crusade_crusade_hero::set_has_ao_yi() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_crusade_crusade_hero::clear_has_ao_yi() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_crusade_crusade_hero::clear_ao_yi() {
  ao_yi_ = 0u;
  clear_has_ao_yi();
}
inline ::google::protobuf::uint32 user_crusade_crusade_hero::ao_yi() const {
  return ao_yi_;
}
inline void user_crusade_crusade_hero::set_ao_yi(::google::protobuf::uint32 value) {
  set_has_ao_yi();
  ao_yi_ = value;
}

// required uint32 bi_sha = 4;
inline bool user_crusade_crusade_hero::has_bi_sha() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_crusade_crusade_hero::set_has_bi_sha() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_crusade_crusade_hero::clear_has_bi_sha() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_crusade_crusade_hero::clear_bi_sha() {
  bi_sha_ = 0u;
  clear_has_bi_sha();
}
inline ::google::protobuf::uint32 user_crusade_crusade_hero::bi_sha() const {
  return bi_sha_;
}
inline void user_crusade_crusade_hero::set_bi_sha(::google::protobuf::uint32 value) {
  set_has_bi_sha();
  bi_sha_ = value;
}

// -------------------------------------------------------------------

// user_crusade

// required bool is_all_through = 1;
inline bool user_crusade::has_is_all_through() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_crusade::set_has_is_all_through() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_crusade::clear_has_is_all_through() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_crusade::clear_is_all_through() {
  is_all_through_ = false;
  clear_has_is_all_through();
}
inline bool user_crusade::is_all_through() const {
  return is_all_through_;
}
inline void user_crusade::set_is_all_through(bool value) {
  set_has_is_all_through();
  is_all_through_ = value;
}

// repeated .user_crusade.crusade_hero me_heros = 2;
inline int user_crusade::me_heros_size() const {
  return me_heros_.size();
}
inline void user_crusade::clear_me_heros() {
  me_heros_.Clear();
}
inline const ::user_crusade_crusade_hero& user_crusade::me_heros(int index) const {
  return me_heros_.Get(index);
}
inline ::user_crusade_crusade_hero* user_crusade::mutable_me_heros(int index) {
  return me_heros_.Mutable(index);
}
inline ::user_crusade_crusade_hero* user_crusade::add_me_heros() {
  return me_heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >&
user_crusade::me_heros() const {
  return me_heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >*
user_crusade::mutable_me_heros() {
  return &me_heros_;
}

// repeated .user_crusade.crusade_hero enemy_heros = 3;
inline int user_crusade::enemy_heros_size() const {
  return enemy_heros_.size();
}
inline void user_crusade::clear_enemy_heros() {
  enemy_heros_.Clear();
}
inline const ::user_crusade_crusade_hero& user_crusade::enemy_heros(int index) const {
  return enemy_heros_.Get(index);
}
inline ::user_crusade_crusade_hero* user_crusade::mutable_enemy_heros(int index) {
  return enemy_heros_.Mutable(index);
}
inline ::user_crusade_crusade_hero* user_crusade::add_enemy_heros() {
  return enemy_heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >&
user_crusade::enemy_heros() const {
  return enemy_heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >*
user_crusade::mutable_enemy_heros() {
  return &enemy_heros_;
}

// optional uint32 wave = 4;
inline bool user_crusade::has_wave() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_crusade::set_has_wave() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_crusade::clear_has_wave() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_crusade::clear_wave() {
  wave_ = 0u;
  clear_has_wave();
}
inline ::google::protobuf::uint32 user_crusade::wave() const {
  return wave_;
}
inline void user_crusade::set_wave(::google::protobuf::uint32 value) {
  set_has_wave();
  wave_ = value;
}

// optional uint32 left_reset_times = 5;
inline bool user_crusade::has_left_reset_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_crusade::set_has_left_reset_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_crusade::clear_has_left_reset_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_crusade::clear_left_reset_times() {
  left_reset_times_ = 0u;
  clear_has_left_reset_times();
}
inline ::google::protobuf::uint32 user_crusade::left_reset_times() const {
  return left_reset_times_;
}
inline void user_crusade::set_left_reset_times(::google::protobuf::uint32 value) {
  set_has_left_reset_times();
  left_reset_times_ = value;
}

// optional uint32 left_promote_award_times = 6;
inline bool user_crusade::has_left_promote_award_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void user_crusade::set_has_left_promote_award_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void user_crusade::clear_has_left_promote_award_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void user_crusade::clear_left_promote_award_times() {
  left_promote_award_times_ = 0u;
  clear_has_left_promote_award_times();
}
inline ::google::protobuf::uint32 user_crusade::left_promote_award_times() const {
  return left_promote_award_times_;
}
inline void user_crusade::set_left_promote_award_times(::google::protobuf::uint32 value) {
  set_has_left_promote_award_times();
  left_promote_award_times_ = value;
}

// -------------------------------------------------------------------

// gs_c_user_info_res

// required uint32 error_code = 1;
inline bool gs_c_user_info_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_user_info_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_user_info_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_user_info_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_user_info_res::error_code() const {
  return error_code_;
}
inline void gs_c_user_info_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .user_base_info base_info = 2;
inline bool gs_c_user_info_res::has_base_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_user_info_res::set_has_base_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_user_info_res::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_user_info_res::clear_base_info() {
  if (base_info_ != NULL) base_info_->::user_base_info::Clear();
  clear_has_base_info();
}
inline const ::user_base_info& gs_c_user_info_res::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::user_base_info* gs_c_user_info_res::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::user_base_info;
  return base_info_;
}
inline ::user_base_info* gs_c_user_info_res::release_base_info() {
  clear_has_base_info();
  ::user_base_info* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void gs_c_user_info_res::set_allocated_base_info(::user_base_info* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
}

// optional .user_sub_task_array sub_tasks = 3;
inline bool gs_c_user_info_res::has_sub_tasks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_user_info_res::set_has_sub_tasks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_user_info_res::clear_has_sub_tasks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_user_info_res::clear_sub_tasks() {
  if (sub_tasks_ != NULL) sub_tasks_->::user_sub_task_array::Clear();
  clear_has_sub_tasks();
}
inline const ::user_sub_task_array& gs_c_user_info_res::sub_tasks() const {
  return sub_tasks_ != NULL ? *sub_tasks_ : *default_instance_->sub_tasks_;
}
inline ::user_sub_task_array* gs_c_user_info_res::mutable_sub_tasks() {
  set_has_sub_tasks();
  if (sub_tasks_ == NULL) sub_tasks_ = new ::user_sub_task_array;
  return sub_tasks_;
}
inline ::user_sub_task_array* gs_c_user_info_res::release_sub_tasks() {
  clear_has_sub_tasks();
  ::user_sub_task_array* temp = sub_tasks_;
  sub_tasks_ = NULL;
  return temp;
}
inline void gs_c_user_info_res::set_allocated_sub_tasks(::user_sub_task_array* sub_tasks) {
  delete sub_tasks_;
  sub_tasks_ = sub_tasks;
  if (sub_tasks) {
    set_has_sub_tasks();
  } else {
    clear_has_sub_tasks();
  }
}

// optional .user_hero_array heros = 4;
inline bool gs_c_user_info_res::has_heros() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_user_info_res::set_has_heros() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_user_info_res::clear_has_heros() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_user_info_res::clear_heros() {
  if (heros_ != NULL) heros_->::user_hero_array::Clear();
  clear_has_heros();
}
inline const ::user_hero_array& gs_c_user_info_res::heros() const {
  return heros_ != NULL ? *heros_ : *default_instance_->heros_;
}
inline ::user_hero_array* gs_c_user_info_res::mutable_heros() {
  set_has_heros();
  if (heros_ == NULL) heros_ = new ::user_hero_array;
  return heros_;
}
inline ::user_hero_array* gs_c_user_info_res::release_heros() {
  clear_has_heros();
  ::user_hero_array* temp = heros_;
  heros_ = NULL;
  return temp;
}
inline void gs_c_user_info_res::set_allocated_heros(::user_hero_array* heros) {
  delete heros_;
  heros_ = heros;
  if (heros) {
    set_has_heros();
  } else {
    clear_has_heros();
  }
}

// repeated .struct_game_element item_elements = 5;
inline int gs_c_user_info_res::item_elements_size() const {
  return item_elements_.size();
}
inline void gs_c_user_info_res::clear_item_elements() {
  item_elements_.Clear();
}
inline const ::struct_game_element& gs_c_user_info_res::item_elements(int index) const {
  return item_elements_.Get(index);
}
inline ::struct_game_element* gs_c_user_info_res::mutable_item_elements(int index) {
  return item_elements_.Mutable(index);
}
inline ::struct_game_element* gs_c_user_info_res::add_item_elements() {
  return item_elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_user_info_res::item_elements() const {
  return item_elements_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_user_info_res::mutable_item_elements() {
  return &item_elements_;
}

// repeated .user_mail mail_elements = 6;
inline int gs_c_user_info_res::mail_elements_size() const {
  return mail_elements_.size();
}
inline void gs_c_user_info_res::clear_mail_elements() {
  mail_elements_.Clear();
}
inline const ::user_mail& gs_c_user_info_res::mail_elements(int index) const {
  return mail_elements_.Get(index);
}
inline ::user_mail* gs_c_user_info_res::mutable_mail_elements(int index) {
  return mail_elements_.Mutable(index);
}
inline ::user_mail* gs_c_user_info_res::add_mail_elements() {
  return mail_elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_mail >&
gs_c_user_info_res::mail_elements() const {
  return mail_elements_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_mail >*
gs_c_user_info_res::mutable_mail_elements() {
  return &mail_elements_;
}

// repeated .user_shop shops = 7;
inline int gs_c_user_info_res::shops_size() const {
  return shops_.size();
}
inline void gs_c_user_info_res::clear_shops() {
  shops_.Clear();
}
inline const ::user_shop& gs_c_user_info_res::shops(int index) const {
  return shops_.Get(index);
}
inline ::user_shop* gs_c_user_info_res::mutable_shops(int index) {
  return shops_.Mutable(index);
}
inline ::user_shop* gs_c_user_info_res::add_shops() {
  return shops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_shop >&
gs_c_user_info_res::shops() const {
  return shops_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_shop >*
gs_c_user_info_res::mutable_shops() {
  return &shops_;
}

// repeated .user_mission missions = 8;
inline int gs_c_user_info_res::missions_size() const {
  return missions_.size();
}
inline void gs_c_user_info_res::clear_missions() {
  missions_.Clear();
}
inline const ::user_mission& gs_c_user_info_res::missions(int index) const {
  return missions_.Get(index);
}
inline ::user_mission* gs_c_user_info_res::mutable_missions(int index) {
  return missions_.Mutable(index);
}
inline ::user_mission* gs_c_user_info_res::add_missions() {
  return missions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_mission >&
gs_c_user_info_res::missions() const {
  return missions_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_mission >*
gs_c_user_info_res::mutable_missions() {
  return &missions_;
}

// optional .user_arena arena = 9;
inline bool gs_c_user_info_res::has_arena() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gs_c_user_info_res::set_has_arena() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gs_c_user_info_res::clear_has_arena() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gs_c_user_info_res::clear_arena() {
  if (arena_ != NULL) arena_->::user_arena::Clear();
  clear_has_arena();
}
inline const ::user_arena& gs_c_user_info_res::arena() const {
  return arena_ != NULL ? *arena_ : *default_instance_->arena_;
}
inline ::user_arena* gs_c_user_info_res::mutable_arena() {
  set_has_arena();
  if (arena_ == NULL) arena_ = new ::user_arena;
  return arena_;
}
inline ::user_arena* gs_c_user_info_res::release_arena() {
  clear_has_arena();
  ::user_arena* temp = arena_;
  arena_ = NULL;
  return temp;
}
inline void gs_c_user_info_res::set_allocated_arena(::user_arena* arena) {
  delete arena_;
  arena_ = arena;
  if (arena) {
    set_has_arena();
  } else {
    clear_has_arena();
  }
}

// optional .user_sign sign = 10;
inline bool gs_c_user_info_res::has_sign() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void gs_c_user_info_res::set_has_sign() {
  _has_bits_[0] |= 0x00000200u;
}
inline void gs_c_user_info_res::clear_has_sign() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void gs_c_user_info_res::clear_sign() {
  if (sign_ != NULL) sign_->::user_sign::Clear();
  clear_has_sign();
}
inline const ::user_sign& gs_c_user_info_res::sign() const {
  return sign_ != NULL ? *sign_ : *default_instance_->sign_;
}
inline ::user_sign* gs_c_user_info_res::mutable_sign() {
  set_has_sign();
  if (sign_ == NULL) sign_ = new ::user_sign;
  return sign_;
}
inline ::user_sign* gs_c_user_info_res::release_sign() {
  clear_has_sign();
  ::user_sign* temp = sign_;
  sign_ = NULL;
  return temp;
}
inline void gs_c_user_info_res::set_allocated_sign(::user_sign* sign) {
  delete sign_;
  sign_ = sign;
  if (sign) {
    set_has_sign();
  } else {
    clear_has_sign();
  }
}

// repeated uint32 guide_ids = 11;
inline int gs_c_user_info_res::guide_ids_size() const {
  return guide_ids_.size();
}
inline void gs_c_user_info_res::clear_guide_ids() {
  guide_ids_.Clear();
}
inline ::google::protobuf::uint32 gs_c_user_info_res::guide_ids(int index) const {
  return guide_ids_.Get(index);
}
inline void gs_c_user_info_res::set_guide_ids(int index, ::google::protobuf::uint32 value) {
  guide_ids_.Set(index, value);
}
inline void gs_c_user_info_res::add_guide_ids(::google::protobuf::uint32 value) {
  guide_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
gs_c_user_info_res::guide_ids() const {
  return guide_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
gs_c_user_info_res::mutable_guide_ids() {
  return &guide_ids_;
}

// optional .user_friend friend_info = 12;
inline bool gs_c_user_info_res::has_friend_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void gs_c_user_info_res::set_has_friend_info() {
  _has_bits_[0] |= 0x00000800u;
}
inline void gs_c_user_info_res::clear_has_friend_info() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void gs_c_user_info_res::clear_friend_info() {
  if (friend_info_ != NULL) friend_info_->::user_friend::Clear();
  clear_has_friend_info();
}
inline const ::user_friend& gs_c_user_info_res::friend_info() const {
  return friend_info_ != NULL ? *friend_info_ : *default_instance_->friend_info_;
}
inline ::user_friend* gs_c_user_info_res::mutable_friend_info() {
  set_has_friend_info();
  if (friend_info_ == NULL) friend_info_ = new ::user_friend;
  return friend_info_;
}
inline ::user_friend* gs_c_user_info_res::release_friend_info() {
  clear_has_friend_info();
  ::user_friend* temp = friend_info_;
  friend_info_ = NULL;
  return temp;
}
inline void gs_c_user_info_res::set_allocated_friend_info(::user_friend* friend_info) {
  delete friend_info_;
  friend_info_ = friend_info;
  if (friend_info) {
    set_has_friend_info();
  } else {
    clear_has_friend_info();
  }
}

// optional .user_crusade crusade = 13;
inline bool gs_c_user_info_res::has_crusade() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void gs_c_user_info_res::set_has_crusade() {
  _has_bits_[0] |= 0x00001000u;
}
inline void gs_c_user_info_res::clear_has_crusade() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void gs_c_user_info_res::clear_crusade() {
  if (crusade_ != NULL) crusade_->::user_crusade::Clear();
  clear_has_crusade();
}
inline const ::user_crusade& gs_c_user_info_res::crusade() const {
  return crusade_ != NULL ? *crusade_ : *default_instance_->crusade_;
}
inline ::user_crusade* gs_c_user_info_res::mutable_crusade() {
  set_has_crusade();
  if (crusade_ == NULL) crusade_ = new ::user_crusade;
  return crusade_;
}
inline ::user_crusade* gs_c_user_info_res::release_crusade() {
  clear_has_crusade();
  ::user_crusade* temp = crusade_;
  crusade_ = NULL;
  return temp;
}
inline void gs_c_user_info_res::set_allocated_crusade(::user_crusade* crusade) {
  delete crusade_;
  crusade_ = crusade;
  if (crusade) {
    set_has_crusade();
  } else {
    clear_has_crusade();
  }
}

// -------------------------------------------------------------------

// c_gs_start_sub_task_req

// required uint32 sub_task_id = 1;
inline bool c_gs_start_sub_task_req::has_sub_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_start_sub_task_req::set_has_sub_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_start_sub_task_req::clear_has_sub_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_start_sub_task_req::clear_sub_task_id() {
  sub_task_id_ = 0u;
  clear_has_sub_task_id();
}
inline ::google::protobuf::uint32 c_gs_start_sub_task_req::sub_task_id() const {
  return sub_task_id_;
}
inline void c_gs_start_sub_task_req::set_sub_task_id(::google::protobuf::uint32 value) {
  set_has_sub_task_id();
  sub_task_id_ = value;
}

// repeated uint32 heros = 2;
inline int c_gs_start_sub_task_req::heros_size() const {
  return heros_.size();
}
inline void c_gs_start_sub_task_req::clear_heros() {
  heros_.Clear();
}
inline ::google::protobuf::uint32 c_gs_start_sub_task_req::heros(int index) const {
  return heros_.Get(index);
}
inline void c_gs_start_sub_task_req::set_heros(int index, ::google::protobuf::uint32 value) {
  heros_.Set(index, value);
}
inline void c_gs_start_sub_task_req::add_heros(::google::protobuf::uint32 value) {
  heros_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
c_gs_start_sub_task_req::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
c_gs_start_sub_task_req::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// gs_c_start_sub_task_res

// required uint32 error_code = 1;
inline bool gs_c_start_sub_task_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_start_sub_task_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_start_sub_task_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_start_sub_task_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_start_sub_task_res::error_code() const {
  return error_code_;
}
inline void gs_c_start_sub_task_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 sub_task_id = 2;
inline bool gs_c_start_sub_task_res::has_sub_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_start_sub_task_res::set_has_sub_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_start_sub_task_res::clear_has_sub_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_start_sub_task_res::clear_sub_task_id() {
  sub_task_id_ = 0u;
  clear_has_sub_task_id();
}
inline ::google::protobuf::uint32 gs_c_start_sub_task_res::sub_task_id() const {
  return sub_task_id_;
}
inline void gs_c_start_sub_task_res::set_sub_task_id(::google::protobuf::uint32 value) {
  set_has_sub_task_id();
  sub_task_id_ = value;
}

// repeated .struct_game_element output = 3;
inline int gs_c_start_sub_task_res::output_size() const {
  return output_.size();
}
inline void gs_c_start_sub_task_res::clear_output() {
  output_.Clear();
}
inline const ::struct_game_element& gs_c_start_sub_task_res::output(int index) const {
  return output_.Get(index);
}
inline ::struct_game_element* gs_c_start_sub_task_res::mutable_output(int index) {
  return output_.Mutable(index);
}
inline ::struct_game_element* gs_c_start_sub_task_res::add_output() {
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_start_sub_task_res::output() const {
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_start_sub_task_res::mutable_output() {
  return &output_;
}

// repeated .struct_game_element consume = 4;
inline int gs_c_start_sub_task_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_start_sub_task_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_start_sub_task_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_start_sub_task_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_start_sub_task_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_start_sub_task_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_start_sub_task_res::mutable_consume() {
  return &consume_;
}

// optional uint32 enter_time = 5;
inline bool gs_c_start_sub_task_res::has_enter_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_c_start_sub_task_res::set_has_enter_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_c_start_sub_task_res::clear_has_enter_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_c_start_sub_task_res::clear_enter_time() {
  enter_time_ = 0u;
  clear_has_enter_time();
}
inline ::google::protobuf::uint32 gs_c_start_sub_task_res::enter_time() const {
  return enter_time_;
}
inline void gs_c_start_sub_task_res::set_enter_time(::google::protobuf::uint32 value) {
  set_has_enter_time();
  enter_time_ = value;
}

// -------------------------------------------------------------------

// c_gs_end_sub_task_req

// required bool is_win = 1;
inline bool c_gs_end_sub_task_req::has_is_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_end_sub_task_req::set_has_is_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_end_sub_task_req::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_end_sub_task_req::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool c_gs_end_sub_task_req::is_win() const {
  return is_win_;
}
inline void c_gs_end_sub_task_req::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
}

// optional uint32 star = 2;
inline bool c_gs_end_sub_task_req::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_end_sub_task_req::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_end_sub_task_req::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_end_sub_task_req::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 c_gs_end_sub_task_req::star() const {
  return star_;
}
inline void c_gs_end_sub_task_req::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// -------------------------------------------------------------------

// gs_c_end_sub_task_res

// required uint32 error_code = 1;
inline bool gs_c_end_sub_task_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_end_sub_task_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_end_sub_task_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_end_sub_task_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_end_sub_task_res::error_code() const {
  return error_code_;
}
inline void gs_c_end_sub_task_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_game_element output = 2;
inline int gs_c_end_sub_task_res::output_size() const {
  return output_.size();
}
inline void gs_c_end_sub_task_res::clear_output() {
  output_.Clear();
}
inline const ::struct_game_element& gs_c_end_sub_task_res::output(int index) const {
  return output_.Get(index);
}
inline ::struct_game_element* gs_c_end_sub_task_res::mutable_output(int index) {
  return output_.Mutable(index);
}
inline ::struct_game_element* gs_c_end_sub_task_res::add_output() {
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_end_sub_task_res::output() const {
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_end_sub_task_res::mutable_output() {
  return &output_;
}

// repeated .struct_game_element task_complete_prize = 3;
inline int gs_c_end_sub_task_res::task_complete_prize_size() const {
  return task_complete_prize_.size();
}
inline void gs_c_end_sub_task_res::clear_task_complete_prize() {
  task_complete_prize_.Clear();
}
inline const ::struct_game_element& gs_c_end_sub_task_res::task_complete_prize(int index) const {
  return task_complete_prize_.Get(index);
}
inline ::struct_game_element* gs_c_end_sub_task_res::mutable_task_complete_prize(int index) {
  return task_complete_prize_.Mutable(index);
}
inline ::struct_game_element* gs_c_end_sub_task_res::add_task_complete_prize() {
  return task_complete_prize_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_end_sub_task_res::task_complete_prize() const {
  return task_complete_prize_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_end_sub_task_res::mutable_task_complete_prize() {
  return &task_complete_prize_;
}

// repeated .user_hero heros = 4;
inline int gs_c_end_sub_task_res::heros_size() const {
  return heros_.size();
}
inline void gs_c_end_sub_task_res::clear_heros() {
  heros_.Clear();
}
inline const ::user_hero& gs_c_end_sub_task_res::heros(int index) const {
  return heros_.Get(index);
}
inline ::user_hero* gs_c_end_sub_task_res::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::user_hero* gs_c_end_sub_task_res::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_hero >&
gs_c_end_sub_task_res::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_hero >*
gs_c_end_sub_task_res::mutable_heros() {
  return &heros_;
}

// optional .user_shop shop = 5;
inline bool gs_c_end_sub_task_res::has_shop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_c_end_sub_task_res::set_has_shop() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_c_end_sub_task_res::clear_has_shop() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_c_end_sub_task_res::clear_shop() {
  if (shop_ != NULL) shop_->::user_shop::Clear();
  clear_has_shop();
}
inline const ::user_shop& gs_c_end_sub_task_res::shop() const {
  return shop_ != NULL ? *shop_ : *default_instance_->shop_;
}
inline ::user_shop* gs_c_end_sub_task_res::mutable_shop() {
  set_has_shop();
  if (shop_ == NULL) shop_ = new ::user_shop;
  return shop_;
}
inline ::user_shop* gs_c_end_sub_task_res::release_shop() {
  clear_has_shop();
  ::user_shop* temp = shop_;
  shop_ = NULL;
  return temp;
}
inline void gs_c_end_sub_task_res::set_allocated_shop(::user_shop* shop) {
  delete shop_;
  shop_ = shop;
  if (shop) {
    set_has_shop();
  } else {
    clear_has_shop();
  }
}

// -------------------------------------------------------------------

// c_gs_invoke_hero_req

// required .c_gs_invoke_hero_req.EINVOKE_TYPE invoke_type = 1;
inline bool c_gs_invoke_hero_req::has_invoke_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_invoke_hero_req::set_has_invoke_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_invoke_hero_req::clear_has_invoke_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_invoke_hero_req::clear_invoke_type() {
  invoke_type_ = 1;
  clear_has_invoke_type();
}
inline ::c_gs_invoke_hero_req_EINVOKE_TYPE c_gs_invoke_hero_req::invoke_type() const {
  return static_cast< ::c_gs_invoke_hero_req_EINVOKE_TYPE >(invoke_type_);
}
inline void c_gs_invoke_hero_req::set_invoke_type(::c_gs_invoke_hero_req_EINVOKE_TYPE value) {
  assert(::c_gs_invoke_hero_req_EINVOKE_TYPE_IsValid(value));
  set_has_invoke_type();
  invoke_type_ = value;
}

// optional uint32 hero_num = 2;
inline bool c_gs_invoke_hero_req::has_hero_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_invoke_hero_req::set_has_hero_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_invoke_hero_req::clear_has_hero_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_invoke_hero_req::clear_hero_num() {
  hero_num_ = 0u;
  clear_has_hero_num();
}
inline ::google::protobuf::uint32 c_gs_invoke_hero_req::hero_num() const {
  return hero_num_;
}
inline void c_gs_invoke_hero_req::set_hero_num(::google::protobuf::uint32 value) {
  set_has_hero_num();
  hero_num_ = value;
}

// optional uint32 item_id = 3;
inline bool c_gs_invoke_hero_req::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void c_gs_invoke_hero_req::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void c_gs_invoke_hero_req::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void c_gs_invoke_hero_req::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 c_gs_invoke_hero_req::item_id() const {
  return item_id_;
}
inline void c_gs_invoke_hero_req::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 hero_id = 4;
inline bool c_gs_invoke_hero_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void c_gs_invoke_hero_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void c_gs_invoke_hero_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void c_gs_invoke_hero_req::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 c_gs_invoke_hero_req::hero_id() const {
  return hero_id_;
}
inline void c_gs_invoke_hero_req::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_invoke_hero_res

// required uint32 error_code = 1;
inline bool gs_c_invoke_hero_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_invoke_hero_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_invoke_hero_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_invoke_hero_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_invoke_hero_res::error_code() const {
  return error_code_;
}
inline void gs_c_invoke_hero_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .user_hero heros = 2;
inline int gs_c_invoke_hero_res::heros_size() const {
  return heros_.size();
}
inline void gs_c_invoke_hero_res::clear_heros() {
  heros_.Clear();
}
inline const ::user_hero& gs_c_invoke_hero_res::heros(int index) const {
  return heros_.Get(index);
}
inline ::user_hero* gs_c_invoke_hero_res::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::user_hero* gs_c_invoke_hero_res::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_hero >&
gs_c_invoke_hero_res::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_hero >*
gs_c_invoke_hero_res::mutable_heros() {
  return &heros_;
}

// repeated .struct_game_element consume = 3;
inline int gs_c_invoke_hero_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_invoke_hero_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_invoke_hero_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_invoke_hero_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_invoke_hero_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_invoke_hero_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_invoke_hero_res::mutable_consume() {
  return &consume_;
}

// repeated .struct_game_element output = 4;
inline int gs_c_invoke_hero_res::output_size() const {
  return output_.size();
}
inline void gs_c_invoke_hero_res::clear_output() {
  output_.Clear();
}
inline const ::struct_game_element& gs_c_invoke_hero_res::output(int index) const {
  return output_.Get(index);
}
inline ::struct_game_element* gs_c_invoke_hero_res::mutable_output(int index) {
  return output_.Mutable(index);
}
inline ::struct_game_element* gs_c_invoke_hero_res::add_output() {
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_invoke_hero_res::output() const {
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_invoke_hero_res::mutable_output() {
  return &output_;
}

// -------------------------------------------------------------------

// c_gs_equip_level_up_req

// required .c_gs_equip_level_up_req.OP_TYPE op_type = 1;
inline bool c_gs_equip_level_up_req::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_equip_level_up_req::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_equip_level_up_req::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_equip_level_up_req::clear_op_type() {
  op_type_ = 1;
  clear_has_op_type();
}
inline ::c_gs_equip_level_up_req_OP_TYPE c_gs_equip_level_up_req::op_type() const {
  return static_cast< ::c_gs_equip_level_up_req_OP_TYPE >(op_type_);
}
inline void c_gs_equip_level_up_req::set_op_type(::c_gs_equip_level_up_req_OP_TYPE value) {
  assert(::c_gs_equip_level_up_req_OP_TYPE_IsValid(value));
  set_has_op_type();
  op_type_ = value;
}

// required uint32 hero_id = 2;
inline bool c_gs_equip_level_up_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_equip_level_up_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_equip_level_up_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_equip_level_up_req::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 c_gs_equip_level_up_req::hero_id() const {
  return hero_id_;
}
inline void c_gs_equip_level_up_req::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional uint32 equip_id = 3;
inline bool c_gs_equip_level_up_req::has_equip_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void c_gs_equip_level_up_req::set_has_equip_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void c_gs_equip_level_up_req::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void c_gs_equip_level_up_req::clear_equip_id() {
  equip_id_ = 0u;
  clear_has_equip_id();
}
inline ::google::protobuf::uint32 c_gs_equip_level_up_req::equip_id() const {
  return equip_id_;
}
inline void c_gs_equip_level_up_req::set_equip_id(::google::protobuf::uint32 value) {
  set_has_equip_id();
  equip_id_ = value;
}

// optional uint32 level_up_num = 4;
inline bool c_gs_equip_level_up_req::has_level_up_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void c_gs_equip_level_up_req::set_has_level_up_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void c_gs_equip_level_up_req::clear_has_level_up_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void c_gs_equip_level_up_req::clear_level_up_num() {
  level_up_num_ = 0u;
  clear_has_level_up_num();
}
inline ::google::protobuf::uint32 c_gs_equip_level_up_req::level_up_num() const {
  return level_up_num_;
}
inline void c_gs_equip_level_up_req::set_level_up_num(::google::protobuf::uint32 value) {
  set_has_level_up_num();
  level_up_num_ = value;
}

// -------------------------------------------------------------------

// gs_c_equip_level_up_res

// required uint32 error_code = 1;
inline bool gs_c_equip_level_up_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_equip_level_up_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_equip_level_up_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_equip_level_up_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_equip_level_up_res::error_code() const {
  return error_code_;
}
inline void gs_c_equip_level_up_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 hero_id = 2;
inline bool gs_c_equip_level_up_res::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_equip_level_up_res::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_equip_level_up_res::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_equip_level_up_res::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 gs_c_equip_level_up_res::hero_id() const {
  return hero_id_;
}
inline void gs_c_equip_level_up_res::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated .user_hero_equip equips = 3;
inline int gs_c_equip_level_up_res::equips_size() const {
  return equips_.size();
}
inline void gs_c_equip_level_up_res::clear_equips() {
  equips_.Clear();
}
inline const ::user_hero_equip& gs_c_equip_level_up_res::equips(int index) const {
  return equips_.Get(index);
}
inline ::user_hero_equip* gs_c_equip_level_up_res::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::user_hero_equip* gs_c_equip_level_up_res::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_hero_equip >&
gs_c_equip_level_up_res::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_hero_equip >*
gs_c_equip_level_up_res::mutable_equips() {
  return &equips_;
}

// repeated .struct_game_element consume = 4;
inline int gs_c_equip_level_up_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_equip_level_up_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_equip_level_up_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_equip_level_up_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_equip_level_up_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_equip_level_up_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_equip_level_up_res::mutable_consume() {
  return &consume_;
}

// -------------------------------------------------------------------

// c_gs_equip_evolution_req

// required uint32 hero_id = 1;
inline bool c_gs_equip_evolution_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_equip_evolution_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_equip_evolution_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_equip_evolution_req::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 c_gs_equip_evolution_req::hero_id() const {
  return hero_id_;
}
inline void c_gs_equip_evolution_req::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required uint32 equip_id = 2;
inline bool c_gs_equip_evolution_req::has_equip_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_equip_evolution_req::set_has_equip_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_equip_evolution_req::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_equip_evolution_req::clear_equip_id() {
  equip_id_ = 0u;
  clear_has_equip_id();
}
inline ::google::protobuf::uint32 c_gs_equip_evolution_req::equip_id() const {
  return equip_id_;
}
inline void c_gs_equip_evolution_req::set_equip_id(::google::protobuf::uint32 value) {
  set_has_equip_id();
  equip_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_equip_evolution_res

// required uint32 error_code = 1;
inline bool gs_c_equip_evolution_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_equip_evolution_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_equip_evolution_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_equip_evolution_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_equip_evolution_res::error_code() const {
  return error_code_;
}
inline void gs_c_equip_evolution_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 hero_id = 2;
inline bool gs_c_equip_evolution_res::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_equip_evolution_res::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_equip_evolution_res::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_equip_evolution_res::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 gs_c_equip_evolution_res::hero_id() const {
  return hero_id_;
}
inline void gs_c_equip_evolution_res::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional uint32 equip_id = 3;
inline bool gs_c_equip_evolution_res::has_equip_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_equip_evolution_res::set_has_equip_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_equip_evolution_res::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_equip_evolution_res::clear_equip_id() {
  equip_id_ = 0u;
  clear_has_equip_id();
}
inline ::google::protobuf::uint32 gs_c_equip_evolution_res::equip_id() const {
  return equip_id_;
}
inline void gs_c_equip_evolution_res::set_equip_id(::google::protobuf::uint32 value) {
  set_has_equip_id();
  equip_id_ = value;
}

// optional uint32 evolution_equip_id = 4;
inline bool gs_c_equip_evolution_res::has_evolution_equip_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_equip_evolution_res::set_has_evolution_equip_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_equip_evolution_res::clear_has_evolution_equip_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_equip_evolution_res::clear_evolution_equip_id() {
  evolution_equip_id_ = 0u;
  clear_has_evolution_equip_id();
}
inline ::google::protobuf::uint32 gs_c_equip_evolution_res::evolution_equip_id() const {
  return evolution_equip_id_;
}
inline void gs_c_equip_evolution_res::set_evolution_equip_id(::google::protobuf::uint32 value) {
  set_has_evolution_equip_id();
  evolution_equip_id_ = value;
}

// repeated .struct_game_element consume = 5;
inline int gs_c_equip_evolution_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_equip_evolution_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_equip_evolution_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_equip_evolution_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_equip_evolution_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_equip_evolution_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_equip_evolution_res::mutable_consume() {
  return &consume_;
}

// -------------------------------------------------------------------

// c_gs_hero_evolution_req

// required uint32 hero_id = 1;
inline bool c_gs_hero_evolution_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_hero_evolution_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_hero_evolution_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_hero_evolution_req::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 c_gs_hero_evolution_req::hero_id() const {
  return hero_id_;
}
inline void c_gs_hero_evolution_req::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_hero_evolution_res

// required uint32 error_code = 1;
inline bool gs_c_hero_evolution_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_hero_evolution_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_hero_evolution_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_hero_evolution_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_hero_evolution_res::error_code() const {
  return error_code_;
}
inline void gs_c_hero_evolution_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 hero_id = 2;
inline bool gs_c_hero_evolution_res::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_hero_evolution_res::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_hero_evolution_res::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_hero_evolution_res::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 gs_c_hero_evolution_res::hero_id() const {
  return hero_id_;
}
inline void gs_c_hero_evolution_res::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated .struct_game_element consume = 3;
inline int gs_c_hero_evolution_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_hero_evolution_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_hero_evolution_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_hero_evolution_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_hero_evolution_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_hero_evolution_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_hero_evolution_res::mutable_consume() {
  return &consume_;
}

// repeated .user_hero_skill new_skills = 4;
inline int gs_c_hero_evolution_res::new_skills_size() const {
  return new_skills_.size();
}
inline void gs_c_hero_evolution_res::clear_new_skills() {
  new_skills_.Clear();
}
inline const ::user_hero_skill& gs_c_hero_evolution_res::new_skills(int index) const {
  return new_skills_.Get(index);
}
inline ::user_hero_skill* gs_c_hero_evolution_res::mutable_new_skills(int index) {
  return new_skills_.Mutable(index);
}
inline ::user_hero_skill* gs_c_hero_evolution_res::add_new_skills() {
  return new_skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_hero_skill >&
gs_c_hero_evolution_res::new_skills() const {
  return new_skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_hero_skill >*
gs_c_hero_evolution_res::mutable_new_skills() {
  return &new_skills_;
}

// -------------------------------------------------------------------

// c_gs_hero_star_up_req

// required uint32 hero_id = 1;
inline bool c_gs_hero_star_up_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_hero_star_up_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_hero_star_up_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_hero_star_up_req::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 c_gs_hero_star_up_req::hero_id() const {
  return hero_id_;
}
inline void c_gs_hero_star_up_req::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_hero_star_up_res

// required uint32 error_code = 1;
inline bool gs_c_hero_star_up_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_hero_star_up_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_hero_star_up_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_hero_star_up_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_hero_star_up_res::error_code() const {
  return error_code_;
}
inline void gs_c_hero_star_up_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 hero_id = 2;
inline bool gs_c_hero_star_up_res::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_hero_star_up_res::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_hero_star_up_res::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_hero_star_up_res::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 gs_c_hero_star_up_res::hero_id() const {
  return hero_id_;
}
inline void gs_c_hero_star_up_res::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated .struct_game_element consume = 3;
inline int gs_c_hero_star_up_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_hero_star_up_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_hero_star_up_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_hero_star_up_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_hero_star_up_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_hero_star_up_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_hero_star_up_res::mutable_consume() {
  return &consume_;
}

// -------------------------------------------------------------------

// c_gs_skill_level_up_req

// required uint32 hero_id = 1;
inline bool c_gs_skill_level_up_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_skill_level_up_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_skill_level_up_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_skill_level_up_req::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 c_gs_skill_level_up_req::hero_id() const {
  return hero_id_;
}
inline void c_gs_skill_level_up_req::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required .user_hero_skill.e_skill_type skill_type = 2;
inline bool c_gs_skill_level_up_req::has_skill_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_skill_level_up_req::set_has_skill_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_skill_level_up_req::clear_has_skill_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_skill_level_up_req::clear_skill_type() {
  skill_type_ = 1;
  clear_has_skill_type();
}
inline ::user_hero_skill_e_skill_type c_gs_skill_level_up_req::skill_type() const {
  return static_cast< ::user_hero_skill_e_skill_type >(skill_type_);
}
inline void c_gs_skill_level_up_req::set_skill_type(::user_hero_skill_e_skill_type value) {
  assert(::user_hero_skill_e_skill_type_IsValid(value));
  set_has_skill_type();
  skill_type_ = value;
}

// required uint32 level = 3;
inline bool c_gs_skill_level_up_req::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void c_gs_skill_level_up_req::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void c_gs_skill_level_up_req::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void c_gs_skill_level_up_req::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 c_gs_skill_level_up_req::level() const {
  return level_;
}
inline void c_gs_skill_level_up_req::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// gs_c_skill_level_up_res

// required uint32 error_code = 1;
inline bool gs_c_skill_level_up_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_skill_level_up_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_skill_level_up_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_skill_level_up_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_skill_level_up_res::error_code() const {
  return error_code_;
}
inline void gs_c_skill_level_up_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 hero_id = 2;
inline bool gs_c_skill_level_up_res::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_skill_level_up_res::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_skill_level_up_res::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_skill_level_up_res::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 gs_c_skill_level_up_res::hero_id() const {
  return hero_id_;
}
inline void gs_c_skill_level_up_res::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional .user_hero_skill.e_skill_type skill_type = 3;
inline bool gs_c_skill_level_up_res::has_skill_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_skill_level_up_res::set_has_skill_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_skill_level_up_res::clear_has_skill_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_skill_level_up_res::clear_skill_type() {
  skill_type_ = 1;
  clear_has_skill_type();
}
inline ::user_hero_skill_e_skill_type gs_c_skill_level_up_res::skill_type() const {
  return static_cast< ::user_hero_skill_e_skill_type >(skill_type_);
}
inline void gs_c_skill_level_up_res::set_skill_type(::user_hero_skill_e_skill_type value) {
  assert(::user_hero_skill_e_skill_type_IsValid(value));
  set_has_skill_type();
  skill_type_ = value;
}

// optional uint32 level = 4;
inline bool gs_c_skill_level_up_res::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_skill_level_up_res::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_skill_level_up_res::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_skill_level_up_res::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 gs_c_skill_level_up_res::level() const {
  return level_;
}
inline void gs_c_skill_level_up_res::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// repeated .struct_game_element consume = 5;
inline int gs_c_skill_level_up_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_skill_level_up_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_skill_level_up_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_skill_level_up_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_skill_level_up_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_skill_level_up_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_skill_level_up_res::mutable_consume() {
  return &consume_;
}

// -------------------------------------------------------------------

// c_gs_invoke_req

// required .c_gs_invoke_req.EINVOKE_TYPE invoke_type = 1;
inline bool c_gs_invoke_req::has_invoke_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_invoke_req::set_has_invoke_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_invoke_req::clear_has_invoke_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_invoke_req::clear_invoke_type() {
  invoke_type_ = 1;
  clear_has_invoke_type();
}
inline ::c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req::invoke_type() const {
  return static_cast< ::c_gs_invoke_req_EINVOKE_TYPE >(invoke_type_);
}
inline void c_gs_invoke_req::set_invoke_type(::c_gs_invoke_req_EINVOKE_TYPE value) {
  assert(::c_gs_invoke_req_EINVOKE_TYPE_IsValid(value));
  set_has_invoke_type();
  invoke_type_ = value;
}

// optional uint32 invoke_num = 2;
inline bool c_gs_invoke_req::has_invoke_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_invoke_req::set_has_invoke_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_invoke_req::clear_has_invoke_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_invoke_req::clear_invoke_num() {
  invoke_num_ = 0u;
  clear_has_invoke_num();
}
inline ::google::protobuf::uint32 c_gs_invoke_req::invoke_num() const {
  return invoke_num_;
}
inline void c_gs_invoke_req::set_invoke_num(::google::protobuf::uint32 value) {
  set_has_invoke_num();
  invoke_num_ = value;
}

// -------------------------------------------------------------------

// gs_c_invoke_res

// required uint32 error_code = 1;
inline bool gs_c_invoke_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_invoke_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_invoke_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_invoke_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_invoke_res::error_code() const {
  return error_code_;
}
inline void gs_c_invoke_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_game_element consume = 2;
inline int gs_c_invoke_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_invoke_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_invoke_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_invoke_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_invoke_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_invoke_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_invoke_res::mutable_consume() {
  return &consume_;
}

// repeated .struct_game_element ouput = 3;
inline int gs_c_invoke_res::ouput_size() const {
  return ouput_.size();
}
inline void gs_c_invoke_res::clear_ouput() {
  ouput_.Clear();
}
inline const ::struct_game_element& gs_c_invoke_res::ouput(int index) const {
  return ouput_.Get(index);
}
inline ::struct_game_element* gs_c_invoke_res::mutable_ouput(int index) {
  return ouput_.Mutable(index);
}
inline ::struct_game_element* gs_c_invoke_res::add_ouput() {
  return ouput_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_invoke_res::ouput() const {
  return ouput_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_invoke_res::mutable_ouput() {
  return &ouput_;
}

// repeated .user_hero heros = 4;
inline int gs_c_invoke_res::heros_size() const {
  return heros_.size();
}
inline void gs_c_invoke_res::clear_heros() {
  heros_.Clear();
}
inline const ::user_hero& gs_c_invoke_res::heros(int index) const {
  return heros_.Get(index);
}
inline ::user_hero* gs_c_invoke_res::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::user_hero* gs_c_invoke_res::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_hero >&
gs_c_invoke_res::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_hero >*
gs_c_invoke_res::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// struct_game_element_array

// repeated .struct_game_element items = 1;
inline int struct_game_element_array::items_size() const {
  return items_.size();
}
inline void struct_game_element_array::clear_items() {
  items_.Clear();
}
inline const ::struct_game_element& struct_game_element_array::items(int index) const {
  return items_.Get(index);
}
inline ::struct_game_element* struct_game_element_array::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::struct_game_element* struct_game_element_array::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
struct_game_element_array::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
struct_game_element_array::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// c_gs_diamond_speed_kill_req

// required uint32 num = 1;
inline bool c_gs_diamond_speed_kill_req::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_diamond_speed_kill_req::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_diamond_speed_kill_req::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_diamond_speed_kill_req::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 c_gs_diamond_speed_kill_req::num() const {
  return num_;
}
inline void c_gs_diamond_speed_kill_req::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// required uint32 sub_task_id = 2;
inline bool c_gs_diamond_speed_kill_req::has_sub_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_diamond_speed_kill_req::set_has_sub_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_diamond_speed_kill_req::clear_has_sub_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_diamond_speed_kill_req::clear_sub_task_id() {
  sub_task_id_ = 0u;
  clear_has_sub_task_id();
}
inline ::google::protobuf::uint32 c_gs_diamond_speed_kill_req::sub_task_id() const {
  return sub_task_id_;
}
inline void c_gs_diamond_speed_kill_req::set_sub_task_id(::google::protobuf::uint32 value) {
  set_has_sub_task_id();
  sub_task_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_diamond_speed_kill_res

// required uint32 error_code = 1;
inline bool gs_c_diamond_speed_kill_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_diamond_speed_kill_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_diamond_speed_kill_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_diamond_speed_kill_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_diamond_speed_kill_res::error_code() const {
  return error_code_;
}
inline void gs_c_diamond_speed_kill_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_game_element consume = 2;
inline int gs_c_diamond_speed_kill_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_diamond_speed_kill_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_diamond_speed_kill_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_diamond_speed_kill_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_diamond_speed_kill_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_diamond_speed_kill_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_diamond_speed_kill_res::mutable_consume() {
  return &consume_;
}

// repeated .struct_game_element_array items_arr = 3;
inline int gs_c_diamond_speed_kill_res::items_arr_size() const {
  return items_arr_.size();
}
inline void gs_c_diamond_speed_kill_res::clear_items_arr() {
  items_arr_.Clear();
}
inline const ::struct_game_element_array& gs_c_diamond_speed_kill_res::items_arr(int index) const {
  return items_arr_.Get(index);
}
inline ::struct_game_element_array* gs_c_diamond_speed_kill_res::mutable_items_arr(int index) {
  return items_arr_.Mutable(index);
}
inline ::struct_game_element_array* gs_c_diamond_speed_kill_res::add_items_arr() {
  return items_arr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element_array >&
gs_c_diamond_speed_kill_res::items_arr() const {
  return items_arr_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element_array >*
gs_c_diamond_speed_kill_res::mutable_items_arr() {
  return &items_arr_;
}

// optional .user_shop shop = 5;
inline bool gs_c_diamond_speed_kill_res::has_shop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_diamond_speed_kill_res::set_has_shop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_diamond_speed_kill_res::clear_has_shop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_diamond_speed_kill_res::clear_shop() {
  if (shop_ != NULL) shop_->::user_shop::Clear();
  clear_has_shop();
}
inline const ::user_shop& gs_c_diamond_speed_kill_res::shop() const {
  return shop_ != NULL ? *shop_ : *default_instance_->shop_;
}
inline ::user_shop* gs_c_diamond_speed_kill_res::mutable_shop() {
  set_has_shop();
  if (shop_ == NULL) shop_ = new ::user_shop;
  return shop_;
}
inline ::user_shop* gs_c_diamond_speed_kill_res::release_shop() {
  clear_has_shop();
  ::user_shop* temp = shop_;
  shop_ = NULL;
  return temp;
}
inline void gs_c_diamond_speed_kill_res::set_allocated_shop(::user_shop* shop) {
  delete shop_;
  shop_ = shop;
  if (shop) {
    set_has_shop();
  } else {
    clear_has_shop();
  }
}

// -------------------------------------------------------------------

// c_gs_use_item_req

// required uint32 item_id = 1;
inline bool c_gs_use_item_req::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_use_item_req::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_use_item_req::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_use_item_req::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 c_gs_use_item_req::item_id() const {
  return item_id_;
}
inline void c_gs_use_item_req::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required uint32 num = 2;
inline bool c_gs_use_item_req::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_use_item_req::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_use_item_req::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_use_item_req::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 c_gs_use_item_req::num() const {
  return num_;
}
inline void c_gs_use_item_req::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 target_id = 3;
inline bool c_gs_use_item_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void c_gs_use_item_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void c_gs_use_item_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void c_gs_use_item_req::clear_target_id() {
  target_id_ = 0u;
  clear_has_target_id();
}
inline ::google::protobuf::uint32 c_gs_use_item_req::target_id() const {
  return target_id_;
}
inline void c_gs_use_item_req::set_target_id(::google::protobuf::uint32 value) {
  set_has_target_id();
  target_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_use_item_res

// required uint32 error_code = 1;
inline bool gs_c_use_item_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_use_item_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_use_item_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_use_item_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_use_item_res::error_code() const {
  return error_code_;
}
inline void gs_c_use_item_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_game_element consume = 2;
inline int gs_c_use_item_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_use_item_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_use_item_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_use_item_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_use_item_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_use_item_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_use_item_res::mutable_consume() {
  return &consume_;
}

// repeated .struct_game_element_array items_arr = 3;
inline int gs_c_use_item_res::items_arr_size() const {
  return items_arr_.size();
}
inline void gs_c_use_item_res::clear_items_arr() {
  items_arr_.Clear();
}
inline const ::struct_game_element_array& gs_c_use_item_res::items_arr(int index) const {
  return items_arr_.Get(index);
}
inline ::struct_game_element_array* gs_c_use_item_res::mutable_items_arr(int index) {
  return items_arr_.Mutable(index);
}
inline ::struct_game_element_array* gs_c_use_item_res::add_items_arr() {
  return items_arr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element_array >&
gs_c_use_item_res::items_arr() const {
  return items_arr_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element_array >*
gs_c_use_item_res::mutable_items_arr() {
  return &items_arr_;
}

// optional .user_shop shop = 5;
inline bool gs_c_use_item_res::has_shop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_use_item_res::set_has_shop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_use_item_res::clear_has_shop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_use_item_res::clear_shop() {
  if (shop_ != NULL) shop_->::user_shop::Clear();
  clear_has_shop();
}
inline const ::user_shop& gs_c_use_item_res::shop() const {
  return shop_ != NULL ? *shop_ : *default_instance_->shop_;
}
inline ::user_shop* gs_c_use_item_res::mutable_shop() {
  set_has_shop();
  if (shop_ == NULL) shop_ = new ::user_shop;
  return shop_;
}
inline ::user_shop* gs_c_use_item_res::release_shop() {
  clear_has_shop();
  ::user_shop* temp = shop_;
  shop_ = NULL;
  return temp;
}
inline void gs_c_use_item_res::set_allocated_shop(::user_shop* shop) {
  delete shop_;
  shop_ = shop;
  if (shop) {
    set_has_shop();
  } else {
    clear_has_shop();
  }
}

// -------------------------------------------------------------------

// c_gs_shop_info_req

// required .c_gs_shop_info_req.PULLTYPE pull_type = 1;
inline bool c_gs_shop_info_req::has_pull_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_shop_info_req::set_has_pull_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_shop_info_req::clear_has_pull_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_shop_info_req::clear_pull_type() {
  pull_type_ = 1;
  clear_has_pull_type();
}
inline ::c_gs_shop_info_req_PULLTYPE c_gs_shop_info_req::pull_type() const {
  return static_cast< ::c_gs_shop_info_req_PULLTYPE >(pull_type_);
}
inline void c_gs_shop_info_req::set_pull_type(::c_gs_shop_info_req_PULLTYPE value) {
  assert(::c_gs_shop_info_req_PULLTYPE_IsValid(value));
  set_has_pull_type();
  pull_type_ = value;
}

// optional .user_shop.ESHOPTYPE shop_type = 2;
inline bool c_gs_shop_info_req::has_shop_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_shop_info_req::set_has_shop_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_shop_info_req::clear_has_shop_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_shop_info_req::clear_shop_type() {
  shop_type_ = 0;
  clear_has_shop_type();
}
inline ::user_shop_ESHOPTYPE c_gs_shop_info_req::shop_type() const {
  return static_cast< ::user_shop_ESHOPTYPE >(shop_type_);
}
inline void c_gs_shop_info_req::set_shop_type(::user_shop_ESHOPTYPE value) {
  assert(::user_shop_ESHOPTYPE_IsValid(value));
  set_has_shop_type();
  shop_type_ = value;
}

// -------------------------------------------------------------------

// gs_c_shop_info_res

// required uint32 error_code = 1;
inline bool gs_c_shop_info_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_shop_info_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_shop_info_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_shop_info_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_shop_info_res::error_code() const {
  return error_code_;
}
inline void gs_c_shop_info_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .user_shop shops = 2;
inline int gs_c_shop_info_res::shops_size() const {
  return shops_.size();
}
inline void gs_c_shop_info_res::clear_shops() {
  shops_.Clear();
}
inline const ::user_shop& gs_c_shop_info_res::shops(int index) const {
  return shops_.Get(index);
}
inline ::user_shop* gs_c_shop_info_res::mutable_shops(int index) {
  return shops_.Mutable(index);
}
inline ::user_shop* gs_c_shop_info_res::add_shops() {
  return shops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_shop >&
gs_c_shop_info_res::shops() const {
  return shops_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_shop >*
gs_c_shop_info_res::mutable_shops() {
  return &shops_;
}

// -------------------------------------------------------------------

// c_gs_shop_buy_item_req

// required .user_shop.ESHOPTYPE shop_type = 1;
inline bool c_gs_shop_buy_item_req::has_shop_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_shop_buy_item_req::set_has_shop_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_shop_buy_item_req::clear_has_shop_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_shop_buy_item_req::clear_shop_type() {
  shop_type_ = 0;
  clear_has_shop_type();
}
inline ::user_shop_ESHOPTYPE c_gs_shop_buy_item_req::shop_type() const {
  return static_cast< ::user_shop_ESHOPTYPE >(shop_type_);
}
inline void c_gs_shop_buy_item_req::set_shop_type(::user_shop_ESHOPTYPE value) {
  assert(::user_shop_ESHOPTYPE_IsValid(value));
  set_has_shop_type();
  shop_type_ = value;
}

// required uint32 pos = 2;
inline bool c_gs_shop_buy_item_req::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_shop_buy_item_req::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_shop_buy_item_req::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_shop_buy_item_req::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 c_gs_shop_buy_item_req::pos() const {
  return pos_;
}
inline void c_gs_shop_buy_item_req::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// gs_c_shop_buy_item_res

// required uint32 error_code = 1;
inline bool gs_c_shop_buy_item_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_shop_buy_item_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_shop_buy_item_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_shop_buy_item_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_shop_buy_item_res::error_code() const {
  return error_code_;
}
inline void gs_c_shop_buy_item_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .user_shop refreshed_shop = 2;
inline bool gs_c_shop_buy_item_res::has_refreshed_shop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_shop_buy_item_res::set_has_refreshed_shop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_shop_buy_item_res::clear_has_refreshed_shop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_shop_buy_item_res::clear_refreshed_shop() {
  if (refreshed_shop_ != NULL) refreshed_shop_->::user_shop::Clear();
  clear_has_refreshed_shop();
}
inline const ::user_shop& gs_c_shop_buy_item_res::refreshed_shop() const {
  return refreshed_shop_ != NULL ? *refreshed_shop_ : *default_instance_->refreshed_shop_;
}
inline ::user_shop* gs_c_shop_buy_item_res::mutable_refreshed_shop() {
  set_has_refreshed_shop();
  if (refreshed_shop_ == NULL) refreshed_shop_ = new ::user_shop;
  return refreshed_shop_;
}
inline ::user_shop* gs_c_shop_buy_item_res::release_refreshed_shop() {
  clear_has_refreshed_shop();
  ::user_shop* temp = refreshed_shop_;
  refreshed_shop_ = NULL;
  return temp;
}
inline void gs_c_shop_buy_item_res::set_allocated_refreshed_shop(::user_shop* refreshed_shop) {
  delete refreshed_shop_;
  refreshed_shop_ = refreshed_shop;
  if (refreshed_shop) {
    set_has_refreshed_shop();
  } else {
    clear_has_refreshed_shop();
  }
}

// optional .user_shop.ESHOPTYPE shop_type = 3;
inline bool gs_c_shop_buy_item_res::has_shop_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_shop_buy_item_res::set_has_shop_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_shop_buy_item_res::clear_has_shop_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_shop_buy_item_res::clear_shop_type() {
  shop_type_ = 0;
  clear_has_shop_type();
}
inline ::user_shop_ESHOPTYPE gs_c_shop_buy_item_res::shop_type() const {
  return static_cast< ::user_shop_ESHOPTYPE >(shop_type_);
}
inline void gs_c_shop_buy_item_res::set_shop_type(::user_shop_ESHOPTYPE value) {
  assert(::user_shop_ESHOPTYPE_IsValid(value));
  set_has_shop_type();
  shop_type_ = value;
}

// optional uint32 pos = 4;
inline bool gs_c_shop_buy_item_res::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_shop_buy_item_res::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_shop_buy_item_res::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_shop_buy_item_res::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 gs_c_shop_buy_item_res::pos() const {
  return pos_;
}
inline void gs_c_shop_buy_item_res::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// repeated .struct_game_element output = 5;
inline int gs_c_shop_buy_item_res::output_size() const {
  return output_.size();
}
inline void gs_c_shop_buy_item_res::clear_output() {
  output_.Clear();
}
inline const ::struct_game_element& gs_c_shop_buy_item_res::output(int index) const {
  return output_.Get(index);
}
inline ::struct_game_element* gs_c_shop_buy_item_res::mutable_output(int index) {
  return output_.Mutable(index);
}
inline ::struct_game_element* gs_c_shop_buy_item_res::add_output() {
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_shop_buy_item_res::output() const {
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_shop_buy_item_res::mutable_output() {
  return &output_;
}

// repeated .struct_game_element consume = 6;
inline int gs_c_shop_buy_item_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_shop_buy_item_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_shop_buy_item_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_shop_buy_item_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_shop_buy_item_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_shop_buy_item_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_shop_buy_item_res::mutable_consume() {
  return &consume_;
}

// -------------------------------------------------------------------

// c_gs_shop_refresh_req

// required .user_shop.ESHOPTYPE shop_type = 1;
inline bool c_gs_shop_refresh_req::has_shop_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_shop_refresh_req::set_has_shop_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_shop_refresh_req::clear_has_shop_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_shop_refresh_req::clear_shop_type() {
  shop_type_ = 0;
  clear_has_shop_type();
}
inline ::user_shop_ESHOPTYPE c_gs_shop_refresh_req::shop_type() const {
  return static_cast< ::user_shop_ESHOPTYPE >(shop_type_);
}
inline void c_gs_shop_refresh_req::set_shop_type(::user_shop_ESHOPTYPE value) {
  assert(::user_shop_ESHOPTYPE_IsValid(value));
  set_has_shop_type();
  shop_type_ = value;
}

// -------------------------------------------------------------------

// gs_c_shop_refresh_res

// required uint32 error_code = 1;
inline bool gs_c_shop_refresh_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_shop_refresh_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_shop_refresh_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_shop_refresh_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_shop_refresh_res::error_code() const {
  return error_code_;
}
inline void gs_c_shop_refresh_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .user_shop shop = 2;
inline bool gs_c_shop_refresh_res::has_shop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_shop_refresh_res::set_has_shop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_shop_refresh_res::clear_has_shop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_shop_refresh_res::clear_shop() {
  if (shop_ != NULL) shop_->::user_shop::Clear();
  clear_has_shop();
}
inline const ::user_shop& gs_c_shop_refresh_res::shop() const {
  return shop_ != NULL ? *shop_ : *default_instance_->shop_;
}
inline ::user_shop* gs_c_shop_refresh_res::mutable_shop() {
  set_has_shop();
  if (shop_ == NULL) shop_ = new ::user_shop;
  return shop_;
}
inline ::user_shop* gs_c_shop_refresh_res::release_shop() {
  clear_has_shop();
  ::user_shop* temp = shop_;
  shop_ = NULL;
  return temp;
}
inline void gs_c_shop_refresh_res::set_allocated_shop(::user_shop* shop) {
  delete shop_;
  shop_ = shop;
  if (shop) {
    set_has_shop();
  } else {
    clear_has_shop();
  }
}

// repeated .struct_game_element consume = 3;
inline int gs_c_shop_refresh_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_shop_refresh_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_shop_refresh_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_shop_refresh_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_shop_refresh_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_shop_refresh_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_shop_refresh_res::mutable_consume() {
  return &consume_;
}

// -------------------------------------------------------------------

// c_gs_sell_req

// repeated .struct_game_element items = 1;
inline int c_gs_sell_req::items_size() const {
  return items_.size();
}
inline void c_gs_sell_req::clear_items() {
  items_.Clear();
}
inline const ::struct_game_element& c_gs_sell_req::items(int index) const {
  return items_.Get(index);
}
inline ::struct_game_element* c_gs_sell_req::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::struct_game_element* c_gs_sell_req::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
c_gs_sell_req::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
c_gs_sell_req::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// gs_c_sell_res

// required uint32 error_code = 1;
inline bool gs_c_sell_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_sell_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_sell_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_sell_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_sell_res::error_code() const {
  return error_code_;
}
inline void gs_c_sell_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_game_element eles = 2;
inline int gs_c_sell_res::eles_size() const {
  return eles_.size();
}
inline void gs_c_sell_res::clear_eles() {
  eles_.Clear();
}
inline const ::struct_game_element& gs_c_sell_res::eles(int index) const {
  return eles_.Get(index);
}
inline ::struct_game_element* gs_c_sell_res::mutable_eles(int index) {
  return eles_.Mutable(index);
}
inline ::struct_game_element* gs_c_sell_res::add_eles() {
  return eles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_sell_res::eles() const {
  return eles_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_sell_res::mutable_eles() {
  return &eles_;
}

// -------------------------------------------------------------------

// c_gs_arena_refresh_match_req

// -------------------------------------------------------------------

// gs_c_arena_refresh_match_res

// required uint32 error_code = 1;
inline bool gs_c_arena_refresh_match_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_arena_refresh_match_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_arena_refresh_match_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_arena_refresh_match_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_arena_refresh_match_res::error_code() const {
  return error_code_;
}
inline void gs_c_arena_refresh_match_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .user_arena_contestant matchs = 2;
inline int gs_c_arena_refresh_match_res::matchs_size() const {
  return matchs_.size();
}
inline void gs_c_arena_refresh_match_res::clear_matchs() {
  matchs_.Clear();
}
inline const ::user_arena_contestant& gs_c_arena_refresh_match_res::matchs(int index) const {
  return matchs_.Get(index);
}
inline ::user_arena_contestant* gs_c_arena_refresh_match_res::mutable_matchs(int index) {
  return matchs_.Mutable(index);
}
inline ::user_arena_contestant* gs_c_arena_refresh_match_res::add_matchs() {
  return matchs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >&
gs_c_arena_refresh_match_res::matchs() const {
  return matchs_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >*
gs_c_arena_refresh_match_res::mutable_matchs() {
  return &matchs_;
}

// -------------------------------------------------------------------

// c_gs_arena_update_team_req

// repeated uint32 heros = 1;
inline int c_gs_arena_update_team_req::heros_size() const {
  return heros_.size();
}
inline void c_gs_arena_update_team_req::clear_heros() {
  heros_.Clear();
}
inline ::google::protobuf::uint32 c_gs_arena_update_team_req::heros(int index) const {
  return heros_.Get(index);
}
inline void c_gs_arena_update_team_req::set_heros(int index, ::google::protobuf::uint32 value) {
  heros_.Set(index, value);
}
inline void c_gs_arena_update_team_req::add_heros(::google::protobuf::uint32 value) {
  heros_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
c_gs_arena_update_team_req::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
c_gs_arena_update_team_req::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// gs_c_arena_update_team_res

// required uint32 error_code = 1;
inline bool gs_c_arena_update_team_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_arena_update_team_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_arena_update_team_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_arena_update_team_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_arena_update_team_res::error_code() const {
  return error_code_;
}
inline void gs_c_arena_update_team_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// c_gs_arena_start_challenge_req

// repeated uint32 heros = 1;
inline int c_gs_arena_start_challenge_req::heros_size() const {
  return heros_.size();
}
inline void c_gs_arena_start_challenge_req::clear_heros() {
  heros_.Clear();
}
inline ::google::protobuf::uint32 c_gs_arena_start_challenge_req::heros(int index) const {
  return heros_.Get(index);
}
inline void c_gs_arena_start_challenge_req::set_heros(int index, ::google::protobuf::uint32 value) {
  heros_.Set(index, value);
}
inline void c_gs_arena_start_challenge_req::add_heros(::google::protobuf::uint32 value) {
  heros_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
c_gs_arena_start_challenge_req::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
c_gs_arena_start_challenge_req::mutable_heros() {
  return &heros_;
}

// required uint32 defender_user_id = 2;
inline bool c_gs_arena_start_challenge_req::has_defender_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_arena_start_challenge_req::set_has_defender_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_arena_start_challenge_req::clear_has_defender_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_arena_start_challenge_req::clear_defender_user_id() {
  defender_user_id_ = 0u;
  clear_has_defender_user_id();
}
inline ::google::protobuf::uint32 c_gs_arena_start_challenge_req::defender_user_id() const {
  return defender_user_id_;
}
inline void c_gs_arena_start_challenge_req::set_defender_user_id(::google::protobuf::uint32 value) {
  set_has_defender_user_id();
  defender_user_id_ = value;
}

// required uint32 power = 3;
inline bool c_gs_arena_start_challenge_req::has_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void c_gs_arena_start_challenge_req::set_has_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void c_gs_arena_start_challenge_req::clear_has_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void c_gs_arena_start_challenge_req::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 c_gs_arena_start_challenge_req::power() const {
  return power_;
}
inline void c_gs_arena_start_challenge_req::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
}

// required uint32 defender_power = 4;
inline bool c_gs_arena_start_challenge_req::has_defender_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void c_gs_arena_start_challenge_req::set_has_defender_power() {
  _has_bits_[0] |= 0x00000008u;
}
inline void c_gs_arena_start_challenge_req::clear_has_defender_power() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void c_gs_arena_start_challenge_req::clear_defender_power() {
  defender_power_ = 0u;
  clear_has_defender_power();
}
inline ::google::protobuf::uint32 c_gs_arena_start_challenge_req::defender_power() const {
  return defender_power_;
}
inline void c_gs_arena_start_challenge_req::set_defender_power(::google::protobuf::uint32 value) {
  set_has_defender_power();
  defender_power_ = value;
}

// -------------------------------------------------------------------

// gs_c_arena_start_challenge_res

// required uint32 error_code = 1;
inline bool gs_c_arena_start_challenge_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_arena_start_challenge_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_arena_start_challenge_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_arena_start_challenge_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_arena_start_challenge_res::error_code() const {
  return error_code_;
}
inline void gs_c_arena_start_challenge_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 last_challenge_time = 2;
inline bool gs_c_arena_start_challenge_res::has_last_challenge_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_arena_start_challenge_res::set_has_last_challenge_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_arena_start_challenge_res::clear_has_last_challenge_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_arena_start_challenge_res::clear_last_challenge_time() {
  last_challenge_time_ = 0u;
  clear_has_last_challenge_time();
}
inline ::google::protobuf::uint32 gs_c_arena_start_challenge_res::last_challenge_time() const {
  return last_challenge_time_;
}
inline void gs_c_arena_start_challenge_res::set_last_challenge_time(::google::protobuf::uint32 value) {
  set_has_last_challenge_time();
  last_challenge_time_ = value;
}

// optional uint32 last_day_challenge_num = 3;
inline bool gs_c_arena_start_challenge_res::has_last_day_challenge_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_arena_start_challenge_res::set_has_last_day_challenge_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_arena_start_challenge_res::clear_has_last_day_challenge_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_arena_start_challenge_res::clear_last_day_challenge_num() {
  last_day_challenge_num_ = 0u;
  clear_has_last_day_challenge_num();
}
inline ::google::protobuf::uint32 gs_c_arena_start_challenge_res::last_day_challenge_num() const {
  return last_day_challenge_num_;
}
inline void gs_c_arena_start_challenge_res::set_last_day_challenge_num(::google::protobuf::uint32 value) {
  set_has_last_day_challenge_num();
  last_day_challenge_num_ = value;
}

// repeated .user_arena_contestant matchs = 4;
inline int gs_c_arena_start_challenge_res::matchs_size() const {
  return matchs_.size();
}
inline void gs_c_arena_start_challenge_res::clear_matchs() {
  matchs_.Clear();
}
inline const ::user_arena_contestant& gs_c_arena_start_challenge_res::matchs(int index) const {
  return matchs_.Get(index);
}
inline ::user_arena_contestant* gs_c_arena_start_challenge_res::mutable_matchs(int index) {
  return matchs_.Mutable(index);
}
inline ::user_arena_contestant* gs_c_arena_start_challenge_res::add_matchs() {
  return matchs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >&
gs_c_arena_start_challenge_res::matchs() const {
  return matchs_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >*
gs_c_arena_start_challenge_res::mutable_matchs() {
  return &matchs_;
}

// -------------------------------------------------------------------

// c_gs_arena_end_challenge_req

// required bool is_win = 1;
inline bool c_gs_arena_end_challenge_req::has_is_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_arena_end_challenge_req::set_has_is_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_arena_end_challenge_req::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_arena_end_challenge_req::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool c_gs_arena_end_challenge_req::is_win() const {
  return is_win_;
}
inline void c_gs_arena_end_challenge_req::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
}

// -------------------------------------------------------------------

// gs_c_arena_end_challenge_res

// required uint32 error_code = 1;
inline bool gs_c_arena_end_challenge_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_arena_end_challenge_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_arena_end_challenge_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_arena_end_challenge_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_arena_end_challenge_res::error_code() const {
  return error_code_;
}
inline void gs_c_arena_end_challenge_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 rank = 2;
inline bool gs_c_arena_end_challenge_res::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_arena_end_challenge_res::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_arena_end_challenge_res::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_arena_end_challenge_res::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 gs_c_arena_end_challenge_res::rank() const {
  return rank_;
}
inline void gs_c_arena_end_challenge_res::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// repeated .struct_game_element output = 3;
inline int gs_c_arena_end_challenge_res::output_size() const {
  return output_.size();
}
inline void gs_c_arena_end_challenge_res::clear_output() {
  output_.Clear();
}
inline const ::struct_game_element& gs_c_arena_end_challenge_res::output(int index) const {
  return output_.Get(index);
}
inline ::struct_game_element* gs_c_arena_end_challenge_res::mutable_output(int index) {
  return output_.Mutable(index);
}
inline ::struct_game_element* gs_c_arena_end_challenge_res::add_output() {
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_arena_end_challenge_res::output() const {
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_arena_end_challenge_res::mutable_output() {
  return &output_;
}

// -------------------------------------------------------------------

// gs_c_arena_challenge_ntf

// required .user_arena_log ele = 1;
inline bool gs_c_arena_challenge_ntf::has_ele() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_arena_challenge_ntf::set_has_ele() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_arena_challenge_ntf::clear_has_ele() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_arena_challenge_ntf::clear_ele() {
  if (ele_ != NULL) ele_->::user_arena_log::Clear();
  clear_has_ele();
}
inline const ::user_arena_log& gs_c_arena_challenge_ntf::ele() const {
  return ele_ != NULL ? *ele_ : *default_instance_->ele_;
}
inline ::user_arena_log* gs_c_arena_challenge_ntf::mutable_ele() {
  set_has_ele();
  if (ele_ == NULL) ele_ = new ::user_arena_log;
  return ele_;
}
inline ::user_arena_log* gs_c_arena_challenge_ntf::release_ele() {
  clear_has_ele();
  ::user_arena_log* temp = ele_;
  ele_ = NULL;
  return temp;
}
inline void gs_c_arena_challenge_ntf::set_allocated_ele(::user_arena_log* ele) {
  delete ele_;
  ele_ = ele;
  if (ele) {
    set_has_ele();
  } else {
    clear_has_ele();
  }
}

// -------------------------------------------------------------------

// c_gs_arena_challenge_reset_cd_req

// -------------------------------------------------------------------

// gs_c_arena_challenge_reset_cd_res

// required uint32 error_code = 1;
inline bool gs_c_arena_challenge_reset_cd_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_arena_challenge_reset_cd_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_arena_challenge_reset_cd_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_arena_challenge_reset_cd_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_arena_challenge_reset_cd_res::error_code() const {
  return error_code_;
}
inline void gs_c_arena_challenge_reset_cd_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 last_challenge_time = 2;
inline bool gs_c_arena_challenge_reset_cd_res::has_last_challenge_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_arena_challenge_reset_cd_res::set_has_last_challenge_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_arena_challenge_reset_cd_res::clear_has_last_challenge_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_arena_challenge_reset_cd_res::clear_last_challenge_time() {
  last_challenge_time_ = 0u;
  clear_has_last_challenge_time();
}
inline ::google::protobuf::uint32 gs_c_arena_challenge_reset_cd_res::last_challenge_time() const {
  return last_challenge_time_;
}
inline void gs_c_arena_challenge_reset_cd_res::set_last_challenge_time(::google::protobuf::uint32 value) {
  set_has_last_challenge_time();
  last_challenge_time_ = value;
}

// repeated .struct_game_element consume = 3;
inline int gs_c_arena_challenge_reset_cd_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_arena_challenge_reset_cd_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_arena_challenge_reset_cd_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_arena_challenge_reset_cd_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_arena_challenge_reset_cd_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_arena_challenge_reset_cd_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_arena_challenge_reset_cd_res::mutable_consume() {
  return &consume_;
}

// -------------------------------------------------------------------

// c_gs_arena_challenge_reset_num_req

// -------------------------------------------------------------------

// gs_c_arena_challenge_reset_num_res

// required uint32 error_code = 1;
inline bool gs_c_arena_challenge_reset_num_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_arena_challenge_reset_num_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_arena_challenge_reset_num_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_arena_challenge_reset_num_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_arena_challenge_reset_num_res::error_code() const {
  return error_code_;
}
inline void gs_c_arena_challenge_reset_num_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 last_challenge_time = 2;
inline bool gs_c_arena_challenge_reset_num_res::has_last_challenge_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_arena_challenge_reset_num_res::set_has_last_challenge_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_arena_challenge_reset_num_res::clear_has_last_challenge_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_arena_challenge_reset_num_res::clear_last_challenge_time() {
  last_challenge_time_ = 0u;
  clear_has_last_challenge_time();
}
inline ::google::protobuf::uint32 gs_c_arena_challenge_reset_num_res::last_challenge_time() const {
  return last_challenge_time_;
}
inline void gs_c_arena_challenge_reset_num_res::set_last_challenge_time(::google::protobuf::uint32 value) {
  set_has_last_challenge_time();
  last_challenge_time_ = value;
}

// optional uint32 last_day_challenge_num = 3;
inline bool gs_c_arena_challenge_reset_num_res::has_last_day_challenge_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_arena_challenge_reset_num_res::set_has_last_day_challenge_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_arena_challenge_reset_num_res::clear_has_last_day_challenge_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_arena_challenge_reset_num_res::clear_last_day_challenge_num() {
  last_day_challenge_num_ = 0u;
  clear_has_last_day_challenge_num();
}
inline ::google::protobuf::uint32 gs_c_arena_challenge_reset_num_res::last_day_challenge_num() const {
  return last_day_challenge_num_;
}
inline void gs_c_arena_challenge_reset_num_res::set_last_day_challenge_num(::google::protobuf::uint32 value) {
  set_has_last_day_challenge_num();
  last_day_challenge_num_ = value;
}

// optional uint32 last_time_buy_arena_challenge = 4;
inline bool gs_c_arena_challenge_reset_num_res::has_last_time_buy_arena_challenge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_arena_challenge_reset_num_res::set_has_last_time_buy_arena_challenge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_arena_challenge_reset_num_res::clear_has_last_time_buy_arena_challenge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_arena_challenge_reset_num_res::clear_last_time_buy_arena_challenge() {
  last_time_buy_arena_challenge_ = 0u;
  clear_has_last_time_buy_arena_challenge();
}
inline ::google::protobuf::uint32 gs_c_arena_challenge_reset_num_res::last_time_buy_arena_challenge() const {
  return last_time_buy_arena_challenge_;
}
inline void gs_c_arena_challenge_reset_num_res::set_last_time_buy_arena_challenge(::google::protobuf::uint32 value) {
  set_has_last_time_buy_arena_challenge();
  last_time_buy_arena_challenge_ = value;
}

// optional uint32 last_day_buy_arena_challenge_num = 5;
inline bool gs_c_arena_challenge_reset_num_res::has_last_day_buy_arena_challenge_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_c_arena_challenge_reset_num_res::set_has_last_day_buy_arena_challenge_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_c_arena_challenge_reset_num_res::clear_has_last_day_buy_arena_challenge_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_c_arena_challenge_reset_num_res::clear_last_day_buy_arena_challenge_num() {
  last_day_buy_arena_challenge_num_ = 0u;
  clear_has_last_day_buy_arena_challenge_num();
}
inline ::google::protobuf::uint32 gs_c_arena_challenge_reset_num_res::last_day_buy_arena_challenge_num() const {
  return last_day_buy_arena_challenge_num_;
}
inline void gs_c_arena_challenge_reset_num_res::set_last_day_buy_arena_challenge_num(::google::protobuf::uint32 value) {
  set_has_last_day_buy_arena_challenge_num();
  last_day_buy_arena_challenge_num_ = value;
}

// repeated .struct_game_element consume = 6;
inline int gs_c_arena_challenge_reset_num_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_arena_challenge_reset_num_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_arena_challenge_reset_num_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_arena_challenge_reset_num_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_arena_challenge_reset_num_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_arena_challenge_reset_num_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_arena_challenge_reset_num_res::mutable_consume() {
  return &consume_;
}

// -------------------------------------------------------------------

// c_gs_arena_ranks_req

// required uint32 page_num = 1;
inline bool c_gs_arena_ranks_req::has_page_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_arena_ranks_req::set_has_page_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_arena_ranks_req::clear_has_page_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_arena_ranks_req::clear_page_num() {
  page_num_ = 0u;
  clear_has_page_num();
}
inline ::google::protobuf::uint32 c_gs_arena_ranks_req::page_num() const {
  return page_num_;
}
inline void c_gs_arena_ranks_req::set_page_num(::google::protobuf::uint32 value) {
  set_has_page_num();
  page_num_ = value;
}

// -------------------------------------------------------------------

// gs_c_arena_ranks_res

// required uint32 error_code = 1;
inline bool gs_c_arena_ranks_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_arena_ranks_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_arena_ranks_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_arena_ranks_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_arena_ranks_res::error_code() const {
  return error_code_;
}
inline void gs_c_arena_ranks_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .user_arena_contestant ranks = 2;
inline int gs_c_arena_ranks_res::ranks_size() const {
  return ranks_.size();
}
inline void gs_c_arena_ranks_res::clear_ranks() {
  ranks_.Clear();
}
inline const ::user_arena_contestant& gs_c_arena_ranks_res::ranks(int index) const {
  return ranks_.Get(index);
}
inline ::user_arena_contestant* gs_c_arena_ranks_res::mutable_ranks(int index) {
  return ranks_.Mutable(index);
}
inline ::user_arena_contestant* gs_c_arena_ranks_res::add_ranks() {
  return ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >&
gs_c_arena_ranks_res::ranks() const {
  return ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_arena_contestant >*
gs_c_arena_ranks_res::mutable_ranks() {
  return &ranks_;
}

// -------------------------------------------------------------------

// c_gs_arena_log_req

// -------------------------------------------------------------------

// gs_c_arena_log_res

// repeated .user_arena_log log = 1;
inline int gs_c_arena_log_res::log_size() const {
  return log_.size();
}
inline void gs_c_arena_log_res::clear_log() {
  log_.Clear();
}
inline const ::user_arena_log& gs_c_arena_log_res::log(int index) const {
  return log_.Get(index);
}
inline ::user_arena_log* gs_c_arena_log_res::mutable_log(int index) {
  return log_.Mutable(index);
}
inline ::user_arena_log* gs_c_arena_log_res::add_log() {
  return log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_arena_log >&
gs_c_arena_log_res::log() const {
  return log_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_arena_log >*
gs_c_arena_log_res::mutable_log() {
  return &log_;
}

// -------------------------------------------------------------------

// c_gs_arena_search_req

// optional uint32 user_id = 1;
inline bool c_gs_arena_search_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_arena_search_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_arena_search_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_arena_search_req::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 c_gs_arena_search_req::user_id() const {
  return user_id_;
}
inline void c_gs_arena_search_req::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 2;
inline bool c_gs_arena_search_req::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_arena_search_req::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_arena_search_req::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_arena_search_req::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& c_gs_arena_search_req::user_name() const {
  return *user_name_;
}
inline void c_gs_arena_search_req::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void c_gs_arena_search_req::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void c_gs_arena_search_req::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* c_gs_arena_search_req::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* c_gs_arena_search_req::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void c_gs_arena_search_req::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gs_c_arena_search_res

// required uint32 error_code = 1;
inline bool gs_c_arena_search_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_arena_search_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_arena_search_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_arena_search_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_arena_search_res::error_code() const {
  return error_code_;
}
inline void gs_c_arena_search_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .user_arena_contestant contestant = 2;
inline bool gs_c_arena_search_res::has_contestant() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_arena_search_res::set_has_contestant() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_arena_search_res::clear_has_contestant() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_arena_search_res::clear_contestant() {
  if (contestant_ != NULL) contestant_->::user_arena_contestant::Clear();
  clear_has_contestant();
}
inline const ::user_arena_contestant& gs_c_arena_search_res::contestant() const {
  return contestant_ != NULL ? *contestant_ : *default_instance_->contestant_;
}
inline ::user_arena_contestant* gs_c_arena_search_res::mutable_contestant() {
  set_has_contestant();
  if (contestant_ == NULL) contestant_ = new ::user_arena_contestant;
  return contestant_;
}
inline ::user_arena_contestant* gs_c_arena_search_res::release_contestant() {
  clear_has_contestant();
  ::user_arena_contestant* temp = contestant_;
  contestant_ = NULL;
  return temp;
}
inline void gs_c_arena_search_res::set_allocated_contestant(::user_arena_contestant* contestant) {
  delete contestant_;
  contestant_ = contestant;
  if (contestant) {
    set_has_contestant();
  } else {
    clear_has_contestant();
  }
}

// -------------------------------------------------------------------

// c_gs_fragment_compound_req

// required uint32 compound_id = 1;
inline bool c_gs_fragment_compound_req::has_compound_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_fragment_compound_req::set_has_compound_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_fragment_compound_req::clear_has_compound_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_fragment_compound_req::clear_compound_id() {
  compound_id_ = 0u;
  clear_has_compound_id();
}
inline ::google::protobuf::uint32 c_gs_fragment_compound_req::compound_id() const {
  return compound_id_;
}
inline void c_gs_fragment_compound_req::set_compound_id(::google::protobuf::uint32 value) {
  set_has_compound_id();
  compound_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_fragment_compound_res

// required uint32 error_code = 1;
inline bool gs_c_fragment_compound_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_fragment_compound_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_fragment_compound_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_fragment_compound_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_fragment_compound_res::error_code() const {
  return error_code_;
}
inline void gs_c_fragment_compound_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_game_element eles = 2;
inline int gs_c_fragment_compound_res::eles_size() const {
  return eles_.size();
}
inline void gs_c_fragment_compound_res::clear_eles() {
  eles_.Clear();
}
inline const ::struct_game_element& gs_c_fragment_compound_res::eles(int index) const {
  return eles_.Get(index);
}
inline ::struct_game_element* gs_c_fragment_compound_res::mutable_eles(int index) {
  return eles_.Mutable(index);
}
inline ::struct_game_element* gs_c_fragment_compound_res::add_eles() {
  return eles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_fragment_compound_res::eles() const {
  return eles_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_fragment_compound_res::mutable_eles() {
  return &eles_;
}

// -------------------------------------------------------------------

// user_mail

// required uint32 mail_id = 1;
inline bool user_mail::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_mail::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_mail::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_mail::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 user_mail::mail_id() const {
  return mail_id_;
}
inline void user_mail::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// required uint32 send_time = 2;
inline bool user_mail::has_send_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_mail::set_has_send_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_mail::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_mail::clear_send_time() {
  send_time_ = 0u;
  clear_has_send_time();
}
inline ::google::protobuf::uint32 user_mail::send_time() const {
  return send_time_;
}
inline void user_mail::set_send_time(::google::protobuf::uint32 value) {
  set_has_send_time();
  send_time_ = value;
}

// required .MAIL_TYPE type = 4;
inline bool user_mail::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_mail::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_mail::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_mail::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::MAIL_TYPE user_mail::type() const {
  return static_cast< ::MAIL_TYPE >(type_);
}
inline void user_mail::set_type(::MAIL_TYPE value) {
  assert(::MAIL_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string content = 6;
inline bool user_mail::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_mail::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_mail::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_mail::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& user_mail::content() const {
  return *content_;
}
inline void user_mail::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void user_mail::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void user_mail::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_mail::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* user_mail::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void user_mail::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .MAIL_STATUS status = 7;
inline bool user_mail::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void user_mail::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void user_mail::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void user_mail::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::MAIL_STATUS user_mail::status() const {
  return static_cast< ::MAIL_STATUS >(status_);
}
inline void user_mail::set_status(::MAIL_STATUS value) {
  assert(::MAIL_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
}

// repeated .struct_game_element elements = 8;
inline int user_mail::elements_size() const {
  return elements_.size();
}
inline void user_mail::clear_elements() {
  elements_.Clear();
}
inline const ::struct_game_element& user_mail::elements(int index) const {
  return elements_.Get(index);
}
inline ::struct_game_element* user_mail::mutable_elements(int index) {
  return elements_.Mutable(index);
}
inline ::struct_game_element* user_mail::add_elements() {
  return elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
user_mail::elements() const {
  return elements_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
user_mail::mutable_elements() {
  return &elements_;
}

// -------------------------------------------------------------------

// c_gs_mail_opt_req

// required .c_gs_mail_opt_req.OPT mail_opt = 1;
inline bool c_gs_mail_opt_req::has_mail_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_mail_opt_req::set_has_mail_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_mail_opt_req::clear_has_mail_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_mail_opt_req::clear_mail_opt() {
  mail_opt_ = 1;
  clear_has_mail_opt();
}
inline ::c_gs_mail_opt_req_OPT c_gs_mail_opt_req::mail_opt() const {
  return static_cast< ::c_gs_mail_opt_req_OPT >(mail_opt_);
}
inline void c_gs_mail_opt_req::set_mail_opt(::c_gs_mail_opt_req_OPT value) {
  assert(::c_gs_mail_opt_req_OPT_IsValid(value));
  set_has_mail_opt();
  mail_opt_ = value;
}

// repeated uint32 mail_id_arr = 2;
inline int c_gs_mail_opt_req::mail_id_arr_size() const {
  return mail_id_arr_.size();
}
inline void c_gs_mail_opt_req::clear_mail_id_arr() {
  mail_id_arr_.Clear();
}
inline ::google::protobuf::uint32 c_gs_mail_opt_req::mail_id_arr(int index) const {
  return mail_id_arr_.Get(index);
}
inline void c_gs_mail_opt_req::set_mail_id_arr(int index, ::google::protobuf::uint32 value) {
  mail_id_arr_.Set(index, value);
}
inline void c_gs_mail_opt_req::add_mail_id_arr(::google::protobuf::uint32 value) {
  mail_id_arr_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
c_gs_mail_opt_req::mail_id_arr() const {
  return mail_id_arr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
c_gs_mail_opt_req::mutable_mail_id_arr() {
  return &mail_id_arr_;
}

// -------------------------------------------------------------------

// gs_c_mail_opt_res_mail_update

// required uint32 mail_id = 1;
inline bool gs_c_mail_opt_res_mail_update::has_mail_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_mail_opt_res_mail_update::set_has_mail_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_mail_opt_res_mail_update::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_mail_opt_res_mail_update::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 gs_c_mail_opt_res_mail_update::mail_id() const {
  return mail_id_;
}
inline void gs_c_mail_opt_res_mail_update::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// required .MAIL_STATUS mail_status = 2;
inline bool gs_c_mail_opt_res_mail_update::has_mail_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_mail_opt_res_mail_update::set_has_mail_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_mail_opt_res_mail_update::clear_has_mail_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_mail_opt_res_mail_update::clear_mail_status() {
  mail_status_ = 1;
  clear_has_mail_status();
}
inline ::MAIL_STATUS gs_c_mail_opt_res_mail_update::mail_status() const {
  return static_cast< ::MAIL_STATUS >(mail_status_);
}
inline void gs_c_mail_opt_res_mail_update::set_mail_status(::MAIL_STATUS value) {
  assert(::MAIL_STATUS_IsValid(value));
  set_has_mail_status();
  mail_status_ = value;
}

// -------------------------------------------------------------------

// gs_c_mail_opt_res

// required uint32 error_code = 1;
inline bool gs_c_mail_opt_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_mail_opt_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_mail_opt_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_mail_opt_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_mail_opt_res::error_code() const {
  return error_code_;
}
inline void gs_c_mail_opt_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .gs_c_mail_opt_res.mail_update mail_update_arr = 2;
inline int gs_c_mail_opt_res::mail_update_arr_size() const {
  return mail_update_arr_.size();
}
inline void gs_c_mail_opt_res::clear_mail_update_arr() {
  mail_update_arr_.Clear();
}
inline const ::gs_c_mail_opt_res_mail_update& gs_c_mail_opt_res::mail_update_arr(int index) const {
  return mail_update_arr_.Get(index);
}
inline ::gs_c_mail_opt_res_mail_update* gs_c_mail_opt_res::mutable_mail_update_arr(int index) {
  return mail_update_arr_.Mutable(index);
}
inline ::gs_c_mail_opt_res_mail_update* gs_c_mail_opt_res::add_mail_update_arr() {
  return mail_update_arr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gs_c_mail_opt_res_mail_update >&
gs_c_mail_opt_res::mail_update_arr() const {
  return mail_update_arr_;
}
inline ::google::protobuf::RepeatedPtrField< ::gs_c_mail_opt_res_mail_update >*
gs_c_mail_opt_res::mutable_mail_update_arr() {
  return &mail_update_arr_;
}

// repeated .struct_game_element output_arr = 3;
inline int gs_c_mail_opt_res::output_arr_size() const {
  return output_arr_.size();
}
inline void gs_c_mail_opt_res::clear_output_arr() {
  output_arr_.Clear();
}
inline const ::struct_game_element& gs_c_mail_opt_res::output_arr(int index) const {
  return output_arr_.Get(index);
}
inline ::struct_game_element* gs_c_mail_opt_res::mutable_output_arr(int index) {
  return output_arr_.Mutable(index);
}
inline ::struct_game_element* gs_c_mail_opt_res::add_output_arr() {
  return output_arr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_mail_opt_res::output_arr() const {
  return output_arr_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_mail_opt_res::mutable_output_arr() {
  return &output_arr_;
}

// -------------------------------------------------------------------

// gs_c_mail_ntf

// required .gs_c_mail_ntf.OP_TYPE type = 1;
inline bool gs_c_mail_ntf::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_mail_ntf::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_mail_ntf::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_mail_ntf::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::gs_c_mail_ntf_OP_TYPE gs_c_mail_ntf::type() const {
  return static_cast< ::gs_c_mail_ntf_OP_TYPE >(type_);
}
inline void gs_c_mail_ntf::set_type(::gs_c_mail_ntf_OP_TYPE value) {
  assert(::gs_c_mail_ntf_OP_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .user_mail ele = 2;
inline bool gs_c_mail_ntf::has_ele() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_mail_ntf::set_has_ele() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_mail_ntf::clear_has_ele() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_mail_ntf::clear_ele() {
  if (ele_ != NULL) ele_->::user_mail::Clear();
  clear_has_ele();
}
inline const ::user_mail& gs_c_mail_ntf::ele() const {
  return ele_ != NULL ? *ele_ : *default_instance_->ele_;
}
inline ::user_mail* gs_c_mail_ntf::mutable_ele() {
  set_has_ele();
  if (ele_ == NULL) ele_ = new ::user_mail;
  return ele_;
}
inline ::user_mail* gs_c_mail_ntf::release_ele() {
  clear_has_ele();
  ::user_mail* temp = ele_;
  ele_ = NULL;
  return temp;
}
inline void gs_c_mail_ntf::set_allocated_ele(::user_mail* ele) {
  delete ele_;
  ele_ = ele;
  if (ele) {
    set_has_ele();
  } else {
    clear_has_ele();
  }
}

// optional uint32 mail_id = 3;
inline bool gs_c_mail_ntf::has_mail_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_mail_ntf::set_has_mail_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_mail_ntf::clear_has_mail_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_mail_ntf::clear_mail_id() {
  mail_id_ = 0u;
  clear_has_mail_id();
}
inline ::google::protobuf::uint32 gs_c_mail_ntf::mail_id() const {
  return mail_id_;
}
inline void gs_c_mail_ntf::set_mail_id(::google::protobuf::uint32 value) {
  set_has_mail_id();
  mail_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_mail_ntf_array

// repeated .gs_c_mail_ntf mails = 1;
inline int gs_c_mail_ntf_array::mails_size() const {
  return mails_.size();
}
inline void gs_c_mail_ntf_array::clear_mails() {
  mails_.Clear();
}
inline const ::gs_c_mail_ntf& gs_c_mail_ntf_array::mails(int index) const {
  return mails_.Get(index);
}
inline ::gs_c_mail_ntf* gs_c_mail_ntf_array::mutable_mails(int index) {
  return mails_.Mutable(index);
}
inline ::gs_c_mail_ntf* gs_c_mail_ntf_array::add_mails() {
  return mails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gs_c_mail_ntf >&
gs_c_mail_ntf_array::mails() const {
  return mails_;
}
inline ::google::protobuf::RepeatedPtrField< ::gs_c_mail_ntf >*
gs_c_mail_ntf_array::mutable_mails() {
  return &mails_;
}

// repeated .struct_game_element eles = 2;
inline int gs_c_mail_ntf_array::eles_size() const {
  return eles_.size();
}
inline void gs_c_mail_ntf_array::clear_eles() {
  eles_.Clear();
}
inline const ::struct_game_element& gs_c_mail_ntf_array::eles(int index) const {
  return eles_.Get(index);
}
inline ::struct_game_element* gs_c_mail_ntf_array::mutable_eles(int index) {
  return eles_.Mutable(index);
}
inline ::struct_game_element* gs_c_mail_ntf_array::add_eles() {
  return eles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_mail_ntf_array::eles() const {
  return eles_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_mail_ntf_array::mutable_eles() {
  return &eles_;
}

// -------------------------------------------------------------------

// c_gs_buy_req

// required .struct_game_element.EELEMENTTYPE buy_type = 1;
inline bool c_gs_buy_req::has_buy_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_buy_req::set_has_buy_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_buy_req::clear_has_buy_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_buy_req::clear_buy_type() {
  buy_type_ = 0;
  clear_has_buy_type();
}
inline ::struct_game_element_EELEMENTTYPE c_gs_buy_req::buy_type() const {
  return static_cast< ::struct_game_element_EELEMENTTYPE >(buy_type_);
}
inline void c_gs_buy_req::set_buy_type(::struct_game_element_EELEMENTTYPE value) {
  assert(::struct_game_element_EELEMENTTYPE_IsValid(value));
  set_has_buy_type();
  buy_type_ = value;
}

// optional uint32 element_id = 2;
inline bool c_gs_buy_req::has_element_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_buy_req::set_has_element_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_buy_req::clear_has_element_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_buy_req::clear_element_id() {
  element_id_ = 0u;
  clear_has_element_id();
}
inline ::google::protobuf::uint32 c_gs_buy_req::element_id() const {
  return element_id_;
}
inline void c_gs_buy_req::set_element_id(::google::protobuf::uint32 value) {
  set_has_element_id();
  element_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_buy_res

// required uint32 error_code = 1;
inline bool gs_c_buy_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_buy_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_buy_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_buy_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_buy_res::error_code() const {
  return error_code_;
}
inline void gs_c_buy_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .struct_game_element.EELEMENTTYPE buy_type = 2;
inline bool gs_c_buy_res::has_buy_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_buy_res::set_has_buy_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_buy_res::clear_has_buy_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_buy_res::clear_buy_type() {
  buy_type_ = 0;
  clear_has_buy_type();
}
inline ::struct_game_element_EELEMENTTYPE gs_c_buy_res::buy_type() const {
  return static_cast< ::struct_game_element_EELEMENTTYPE >(buy_type_);
}
inline void gs_c_buy_res::set_buy_type(::struct_game_element_EELEMENTTYPE value) {
  assert(::struct_game_element_EELEMENTTYPE_IsValid(value));
  set_has_buy_type();
  buy_type_ = value;
}

// repeated .struct_game_element consume = 3;
inline int gs_c_buy_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_buy_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_buy_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_buy_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_buy_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_buy_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_buy_res::mutable_consume() {
  return &consume_;
}

// optional .struct_game_element output = 4;
inline bool gs_c_buy_res::has_output() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_buy_res::set_has_output() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_buy_res::clear_has_output() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_buy_res::clear_output() {
  if (output_ != NULL) output_->::struct_game_element::Clear();
  clear_has_output();
}
inline const ::struct_game_element& gs_c_buy_res::output() const {
  return output_ != NULL ? *output_ : *default_instance_->output_;
}
inline ::struct_game_element* gs_c_buy_res::mutable_output() {
  set_has_output();
  if (output_ == NULL) output_ = new ::struct_game_element;
  return output_;
}
inline ::struct_game_element* gs_c_buy_res::release_output() {
  clear_has_output();
  ::struct_game_element* temp = output_;
  output_ = NULL;
  return temp;
}
inline void gs_c_buy_res::set_allocated_output(::struct_game_element* output) {
  delete output_;
  output_ = output;
  if (output) {
    set_has_output();
  } else {
    clear_has_output();
  }
}

// optional uint32 buy_used_times = 5;
inline bool gs_c_buy_res::has_buy_used_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_c_buy_res::set_has_buy_used_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_c_buy_res::clear_has_buy_used_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_c_buy_res::clear_buy_used_times() {
  buy_used_times_ = 0u;
  clear_has_buy_used_times();
}
inline ::google::protobuf::uint32 gs_c_buy_res::buy_used_times() const {
  return buy_used_times_;
}
inline void gs_c_buy_res::set_buy_used_times(::google::protobuf::uint32 value) {
  set_has_buy_used_times();
  buy_used_times_ = value;
}

// -------------------------------------------------------------------

// user_mission_mission_event_need

// optional .user_mission.MISSION_EVENT_TYPE event_type = 1;
inline bool user_mission_mission_event_need::has_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_mission_mission_event_need::set_has_event_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_mission_mission_event_need::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_mission_mission_event_need::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::user_mission_MISSION_EVENT_TYPE user_mission_mission_event_need::event_type() const {
  return static_cast< ::user_mission_MISSION_EVENT_TYPE >(event_type_);
}
inline void user_mission_mission_event_need::set_event_type(::user_mission_MISSION_EVENT_TYPE value) {
  assert(::user_mission_MISSION_EVENT_TYPE_IsValid(value));
  set_has_event_type();
  event_type_ = value;
}

// optional uint32 event_sub_type = 2;
inline bool user_mission_mission_event_need::has_event_sub_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_mission_mission_event_need::set_has_event_sub_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_mission_mission_event_need::clear_has_event_sub_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_mission_mission_event_need::clear_event_sub_type() {
  event_sub_type_ = 0u;
  clear_has_event_sub_type();
}
inline ::google::protobuf::uint32 user_mission_mission_event_need::event_sub_type() const {
  return event_sub_type_;
}
inline void user_mission_mission_event_need::set_event_sub_type(::google::protobuf::uint32 value) {
  set_has_event_sub_type();
  event_sub_type_ = value;
}

// optional uint32 cur_val = 3;
inline bool user_mission_mission_event_need::has_cur_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_mission_mission_event_need::set_has_cur_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_mission_mission_event_need::clear_has_cur_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_mission_mission_event_need::clear_cur_val() {
  cur_val_ = 0u;
  clear_has_cur_val();
}
inline ::google::protobuf::uint32 user_mission_mission_event_need::cur_val() const {
  return cur_val_;
}
inline void user_mission_mission_event_need::set_cur_val(::google::protobuf::uint32 value) {
  set_has_cur_val();
  cur_val_ = value;
}

// optional uint32 need_val = 4;
inline bool user_mission_mission_event_need::has_need_val() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_mission_mission_event_need::set_has_need_val() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_mission_mission_event_need::clear_has_need_val() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_mission_mission_event_need::clear_need_val() {
  need_val_ = 0u;
  clear_has_need_val();
}
inline ::google::protobuf::uint32 user_mission_mission_event_need::need_val() const {
  return need_val_;
}
inline void user_mission_mission_event_need::set_need_val(::google::protobuf::uint32 value) {
  set_has_need_val();
  need_val_ = value;
}

// -------------------------------------------------------------------

// user_mission

// required uint32 mission_id = 1;
inline bool user_mission::has_mission_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_mission::set_has_mission_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_mission::clear_has_mission_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_mission::clear_mission_id() {
  mission_id_ = 0u;
  clear_has_mission_id();
}
inline ::google::protobuf::uint32 user_mission::mission_id() const {
  return mission_id_;
}
inline void user_mission::set_mission_id(::google::protobuf::uint32 value) {
  set_has_mission_id();
  mission_id_ = value;
}

// required .user_mission.MISSION_STATUS mission_status = 2;
inline bool user_mission::has_mission_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_mission::set_has_mission_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_mission::clear_has_mission_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_mission::clear_mission_status() {
  mission_status_ = 1;
  clear_has_mission_status();
}
inline ::user_mission_MISSION_STATUS user_mission::mission_status() const {
  return static_cast< ::user_mission_MISSION_STATUS >(mission_status_);
}
inline void user_mission::set_mission_status(::user_mission_MISSION_STATUS value) {
  assert(::user_mission_MISSION_STATUS_IsValid(value));
  set_has_mission_status();
  mission_status_ = value;
}

// repeated .user_mission.mission_event_need event_needs = 3;
inline int user_mission::event_needs_size() const {
  return event_needs_.size();
}
inline void user_mission::clear_event_needs() {
  event_needs_.Clear();
}
inline const ::user_mission_mission_event_need& user_mission::event_needs(int index) const {
  return event_needs_.Get(index);
}
inline ::user_mission_mission_event_need* user_mission::mutable_event_needs(int index) {
  return event_needs_.Mutable(index);
}
inline ::user_mission_mission_event_need* user_mission::add_event_needs() {
  return event_needs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_mission_mission_event_need >&
user_mission::event_needs() const {
  return event_needs_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_mission_mission_event_need >*
user_mission::mutable_event_needs() {
  return &event_needs_;
}

// -------------------------------------------------------------------

// gs_c_mission_ntf_array_mission_opt

// required .gs_c_mission_ntf_array.mission_opt.OPT opt = 1;
inline bool gs_c_mission_ntf_array_mission_opt::has_opt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_mission_ntf_array_mission_opt::set_has_opt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_mission_ntf_array_mission_opt::clear_has_opt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_mission_ntf_array_mission_opt::clear_opt() {
  opt_ = 1;
  clear_has_opt();
}
inline ::gs_c_mission_ntf_array_mission_opt_OPT gs_c_mission_ntf_array_mission_opt::opt() const {
  return static_cast< ::gs_c_mission_ntf_array_mission_opt_OPT >(opt_);
}
inline void gs_c_mission_ntf_array_mission_opt::set_opt(::gs_c_mission_ntf_array_mission_opt_OPT value) {
  assert(::gs_c_mission_ntf_array_mission_opt_OPT_IsValid(value));
  set_has_opt();
  opt_ = value;
}

// required .user_mission mis = 2;
inline bool gs_c_mission_ntf_array_mission_opt::has_mis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_mission_ntf_array_mission_opt::set_has_mis() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_mission_ntf_array_mission_opt::clear_has_mis() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_mission_ntf_array_mission_opt::clear_mis() {
  if (mis_ != NULL) mis_->::user_mission::Clear();
  clear_has_mis();
}
inline const ::user_mission& gs_c_mission_ntf_array_mission_opt::mis() const {
  return mis_ != NULL ? *mis_ : *default_instance_->mis_;
}
inline ::user_mission* gs_c_mission_ntf_array_mission_opt::mutable_mis() {
  set_has_mis();
  if (mis_ == NULL) mis_ = new ::user_mission;
  return mis_;
}
inline ::user_mission* gs_c_mission_ntf_array_mission_opt::release_mis() {
  clear_has_mis();
  ::user_mission* temp = mis_;
  mis_ = NULL;
  return temp;
}
inline void gs_c_mission_ntf_array_mission_opt::set_allocated_mis(::user_mission* mis) {
  delete mis_;
  mis_ = mis;
  if (mis) {
    set_has_mis();
  } else {
    clear_has_mis();
  }
}

// -------------------------------------------------------------------

// gs_c_mission_ntf_array

// repeated .gs_c_mission_ntf_array.mission_opt mis_opts = 1;
inline int gs_c_mission_ntf_array::mis_opts_size() const {
  return mis_opts_.size();
}
inline void gs_c_mission_ntf_array::clear_mis_opts() {
  mis_opts_.Clear();
}
inline const ::gs_c_mission_ntf_array_mission_opt& gs_c_mission_ntf_array::mis_opts(int index) const {
  return mis_opts_.Get(index);
}
inline ::gs_c_mission_ntf_array_mission_opt* gs_c_mission_ntf_array::mutable_mis_opts(int index) {
  return mis_opts_.Mutable(index);
}
inline ::gs_c_mission_ntf_array_mission_opt* gs_c_mission_ntf_array::add_mis_opts() {
  return mis_opts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gs_c_mission_ntf_array_mission_opt >&
gs_c_mission_ntf_array::mis_opts() const {
  return mis_opts_;
}
inline ::google::protobuf::RepeatedPtrField< ::gs_c_mission_ntf_array_mission_opt >*
gs_c_mission_ntf_array::mutable_mis_opts() {
  return &mis_opts_;
}

// -------------------------------------------------------------------

// c_gs_get_mission_reward_req

// required uint32 mission_id = 1;
inline bool c_gs_get_mission_reward_req::has_mission_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_get_mission_reward_req::set_has_mission_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_get_mission_reward_req::clear_has_mission_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_get_mission_reward_req::clear_mission_id() {
  mission_id_ = 0u;
  clear_has_mission_id();
}
inline ::google::protobuf::uint32 c_gs_get_mission_reward_req::mission_id() const {
  return mission_id_;
}
inline void c_gs_get_mission_reward_req::set_mission_id(::google::protobuf::uint32 value) {
  set_has_mission_id();
  mission_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_get_mission_reward_res

// required uint32 error_code = 1;
inline bool gs_c_get_mission_reward_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_get_mission_reward_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_get_mission_reward_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_get_mission_reward_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_get_mission_reward_res::error_code() const {
  return error_code_;
}
inline void gs_c_get_mission_reward_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 mission_id = 2;
inline bool gs_c_get_mission_reward_res::has_mission_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_get_mission_reward_res::set_has_mission_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_get_mission_reward_res::clear_has_mission_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_get_mission_reward_res::clear_mission_id() {
  mission_id_ = 0u;
  clear_has_mission_id();
}
inline ::google::protobuf::uint32 gs_c_get_mission_reward_res::mission_id() const {
  return mission_id_;
}
inline void gs_c_get_mission_reward_res::set_mission_id(::google::protobuf::uint32 value) {
  set_has_mission_id();
  mission_id_ = value;
}

// optional .user_mission.MISSION_STATUS status = 3;
inline bool gs_c_get_mission_reward_res::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_get_mission_reward_res::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_get_mission_reward_res::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_get_mission_reward_res::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::user_mission_MISSION_STATUS gs_c_get_mission_reward_res::status() const {
  return static_cast< ::user_mission_MISSION_STATUS >(status_);
}
inline void gs_c_get_mission_reward_res::set_status(::user_mission_MISSION_STATUS value) {
  assert(::user_mission_MISSION_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
}

// repeated .struct_game_element eles = 4;
inline int gs_c_get_mission_reward_res::eles_size() const {
  return eles_.size();
}
inline void gs_c_get_mission_reward_res::clear_eles() {
  eles_.Clear();
}
inline const ::struct_game_element& gs_c_get_mission_reward_res::eles(int index) const {
  return eles_.Get(index);
}
inline ::struct_game_element* gs_c_get_mission_reward_res::mutable_eles(int index) {
  return eles_.Mutable(index);
}
inline ::struct_game_element* gs_c_get_mission_reward_res::add_eles() {
  return eles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_get_mission_reward_res::eles() const {
  return eles_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_get_mission_reward_res::mutable_eles() {
  return &eles_;
}

// -------------------------------------------------------------------

// sign_n_reward

// required .sign_n_reward.SIGN_N_REWARD_TYPE reward_type = 1;
inline bool sign_n_reward::has_reward_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sign_n_reward::set_has_reward_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sign_n_reward::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sign_n_reward::clear_reward_type() {
  reward_type_ = 1;
  clear_has_reward_type();
}
inline ::sign_n_reward_SIGN_N_REWARD_TYPE sign_n_reward::reward_type() const {
  return static_cast< ::sign_n_reward_SIGN_N_REWARD_TYPE >(reward_type_);
}
inline void sign_n_reward::set_reward_type(::sign_n_reward_SIGN_N_REWARD_TYPE value) {
  assert(::sign_n_reward_SIGN_N_REWARD_TYPE_IsValid(value));
  set_has_reward_type();
  reward_type_ = value;
}

// required .sign_n_reward.SIGN_N_REWARD_STATUS status = 2;
inline bool sign_n_reward::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sign_n_reward::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sign_n_reward::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sign_n_reward::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::sign_n_reward_SIGN_N_REWARD_STATUS sign_n_reward::status() const {
  return static_cast< ::sign_n_reward_SIGN_N_REWARD_STATUS >(status_);
}
inline void sign_n_reward::set_status(::sign_n_reward_SIGN_N_REWARD_STATUS value) {
  assert(::sign_n_reward_SIGN_N_REWARD_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// user_sign

// required uint32 signed_1_times = 1;
inline bool user_sign::has_signed_1_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_sign::set_has_signed_1_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_sign::clear_has_signed_1_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_sign::clear_signed_1_times() {
  signed_1_times_ = 0u;
  clear_has_signed_1_times();
}
inline ::google::protobuf::uint32 user_sign::signed_1_times() const {
  return signed_1_times_;
}
inline void user_sign::set_signed_1_times(::google::protobuf::uint32 value) {
  set_has_signed_1_times();
  signed_1_times_ = value;
}

// repeated .sign_n_reward signed_n_reward = 2;
inline int user_sign::signed_n_reward_size() const {
  return signed_n_reward_.size();
}
inline void user_sign::clear_signed_n_reward() {
  signed_n_reward_.Clear();
}
inline const ::sign_n_reward& user_sign::signed_n_reward(int index) const {
  return signed_n_reward_.Get(index);
}
inline ::sign_n_reward* user_sign::mutable_signed_n_reward(int index) {
  return signed_n_reward_.Mutable(index);
}
inline ::sign_n_reward* user_sign::add_signed_n_reward() {
  return signed_n_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sign_n_reward >&
user_sign::signed_n_reward() const {
  return signed_n_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::sign_n_reward >*
user_sign::mutable_signed_n_reward() {
  return &signed_n_reward_;
}

// required uint32 left_add_sign_times = 3;
inline bool user_sign::has_left_add_sign_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_sign::set_has_left_add_sign_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_sign::clear_has_left_add_sign_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_sign::clear_left_add_sign_times() {
  left_add_sign_times_ = 0u;
  clear_has_left_add_sign_times();
}
inline ::google::protobuf::uint32 user_sign::left_add_sign_times() const {
  return left_add_sign_times_;
}
inline void user_sign::set_left_add_sign_times(::google::protobuf::uint32 value) {
  set_has_left_add_sign_times();
  left_add_sign_times_ = value;
}

// required bool is_already_sign = 4;
inline bool user_sign::has_is_already_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void user_sign::set_has_is_already_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void user_sign::clear_has_is_already_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void user_sign::clear_is_already_sign() {
  is_already_sign_ = false;
  clear_has_is_already_sign();
}
inline bool user_sign::is_already_sign() const {
  return is_already_sign_;
}
inline void user_sign::set_is_already_sign(bool value) {
  set_has_is_already_sign();
  is_already_sign_ = value;
}

// -------------------------------------------------------------------

// c_gs_sign_req

// required .c_gs_sign_req.SIGN_TYPE sign_type = 1;
inline bool c_gs_sign_req::has_sign_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_sign_req::set_has_sign_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_sign_req::clear_has_sign_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_sign_req::clear_sign_type() {
  sign_type_ = 1;
  clear_has_sign_type();
}
inline ::c_gs_sign_req_SIGN_TYPE c_gs_sign_req::sign_type() const {
  return static_cast< ::c_gs_sign_req_SIGN_TYPE >(sign_type_);
}
inline void c_gs_sign_req::set_sign_type(::c_gs_sign_req_SIGN_TYPE value) {
  assert(::c_gs_sign_req_SIGN_TYPE_IsValid(value));
  set_has_sign_type();
  sign_type_ = value;
}

// optional .sign_n_reward.SIGN_N_REWARD_TYPE reward_type = 2;
inline bool c_gs_sign_req::has_reward_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_sign_req::set_has_reward_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_sign_req::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_sign_req::clear_reward_type() {
  reward_type_ = 1;
  clear_has_reward_type();
}
inline ::sign_n_reward_SIGN_N_REWARD_TYPE c_gs_sign_req::reward_type() const {
  return static_cast< ::sign_n_reward_SIGN_N_REWARD_TYPE >(reward_type_);
}
inline void c_gs_sign_req::set_reward_type(::sign_n_reward_SIGN_N_REWARD_TYPE value) {
  assert(::sign_n_reward_SIGN_N_REWARD_TYPE_IsValid(value));
  set_has_reward_type();
  reward_type_ = value;
}

// -------------------------------------------------------------------

// gs_c_sign_res

// required .e_gsc_errorcode error_code = 1;
inline bool gs_c_sign_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_sign_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_sign_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_sign_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::e_gsc_errorcode gs_c_sign_res::error_code() const {
  return static_cast< ::e_gsc_errorcode >(error_code_);
}
inline void gs_c_sign_res::set_error_code(::e_gsc_errorcode value) {
  assert(::e_gsc_errorcode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_game_element eles = 2;
inline int gs_c_sign_res::eles_size() const {
  return eles_.size();
}
inline void gs_c_sign_res::clear_eles() {
  eles_.Clear();
}
inline const ::struct_game_element& gs_c_sign_res::eles(int index) const {
  return eles_.Get(index);
}
inline ::struct_game_element* gs_c_sign_res::mutable_eles(int index) {
  return eles_.Mutable(index);
}
inline ::struct_game_element* gs_c_sign_res::add_eles() {
  return eles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_sign_res::eles() const {
  return eles_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_sign_res::mutable_eles() {
  return &eles_;
}

// -------------------------------------------------------------------

// c_gs_sign_add_req

// -------------------------------------------------------------------

// gs_c_sign_add_res

// required .e_gsc_errorcode error_code = 1;
inline bool gs_c_sign_add_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_sign_add_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_sign_add_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_sign_add_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::e_gsc_errorcode gs_c_sign_add_res::error_code() const {
  return static_cast< ::e_gsc_errorcode >(error_code_);
}
inline void gs_c_sign_add_res::set_error_code(::e_gsc_errorcode value) {
  assert(::e_gsc_errorcode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 left_add_sign_times = 2;
inline bool gs_c_sign_add_res::has_left_add_sign_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_sign_add_res::set_has_left_add_sign_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_sign_add_res::clear_has_left_add_sign_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_sign_add_res::clear_left_add_sign_times() {
  left_add_sign_times_ = 0u;
  clear_has_left_add_sign_times();
}
inline ::google::protobuf::uint32 gs_c_sign_add_res::left_add_sign_times() const {
  return left_add_sign_times_;
}
inline void gs_c_sign_add_res::set_left_add_sign_times(::google::protobuf::uint32 value) {
  set_has_left_add_sign_times();
  left_add_sign_times_ = value;
}

// repeated .struct_game_element eles = 3;
inline int gs_c_sign_add_res::eles_size() const {
  return eles_.size();
}
inline void gs_c_sign_add_res::clear_eles() {
  eles_.Clear();
}
inline const ::struct_game_element& gs_c_sign_add_res::eles(int index) const {
  return eles_.Get(index);
}
inline ::struct_game_element* gs_c_sign_add_res::mutable_eles(int index) {
  return eles_.Mutable(index);
}
inline ::struct_game_element* gs_c_sign_add_res::add_eles() {
  return eles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_sign_add_res::eles() const {
  return eles_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_sign_add_res::mutable_eles() {
  return &eles_;
}

// -------------------------------------------------------------------

// c_gs_head_or_frame_change_req

// required .HEAD_CHANGE_TYPE change_type = 1;
inline bool c_gs_head_or_frame_change_req::has_change_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_head_or_frame_change_req::set_has_change_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_head_or_frame_change_req::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_head_or_frame_change_req::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ::HEAD_CHANGE_TYPE c_gs_head_or_frame_change_req::change_type() const {
  return static_cast< ::HEAD_CHANGE_TYPE >(change_type_);
}
inline void c_gs_head_or_frame_change_req::set_change_type(::HEAD_CHANGE_TYPE value) {
  assert(::HEAD_CHANGE_TYPE_IsValid(value));
  set_has_change_type();
  change_type_ = value;
}

// required uint32 target_id = 2;
inline bool c_gs_head_or_frame_change_req::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_head_or_frame_change_req::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_head_or_frame_change_req::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_head_or_frame_change_req::clear_target_id() {
  target_id_ = 0u;
  clear_has_target_id();
}
inline ::google::protobuf::uint32 c_gs_head_or_frame_change_req::target_id() const {
  return target_id_;
}
inline void c_gs_head_or_frame_change_req::set_target_id(::google::protobuf::uint32 value) {
  set_has_target_id();
  target_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_head_or_frame_change_res

// required .e_gsc_errorcode error_code = 1;
inline bool gs_c_head_or_frame_change_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_head_or_frame_change_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_head_or_frame_change_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_head_or_frame_change_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::e_gsc_errorcode gs_c_head_or_frame_change_res::error_code() const {
  return static_cast< ::e_gsc_errorcode >(error_code_);
}
inline void gs_c_head_or_frame_change_res::set_error_code(::e_gsc_errorcode value) {
  assert(::e_gsc_errorcode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// optional .HEAD_CHANGE_TYPE change_type = 2;
inline bool gs_c_head_or_frame_change_res::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_head_or_frame_change_res::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_head_or_frame_change_res::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_head_or_frame_change_res::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ::HEAD_CHANGE_TYPE gs_c_head_or_frame_change_res::change_type() const {
  return static_cast< ::HEAD_CHANGE_TYPE >(change_type_);
}
inline void gs_c_head_or_frame_change_res::set_change_type(::HEAD_CHANGE_TYPE value) {
  assert(::HEAD_CHANGE_TYPE_IsValid(value));
  set_has_change_type();
  change_type_ = value;
}

// optional uint32 target_id = 3;
inline bool gs_c_head_or_frame_change_res::has_target_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_head_or_frame_change_res::set_has_target_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_head_or_frame_change_res::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_head_or_frame_change_res::clear_target_id() {
  target_id_ = 0u;
  clear_has_target_id();
}
inline ::google::protobuf::uint32 gs_c_head_or_frame_change_res::target_id() const {
  return target_id_;
}
inline void gs_c_head_or_frame_change_res::set_target_id(::google::protobuf::uint32 value) {
  set_has_target_id();
  target_id_ = value;
}

// -------------------------------------------------------------------

// c_gs_edit_player_info_req

// optional string name = 1;
inline bool c_gs_edit_player_info_req::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_edit_player_info_req::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_edit_player_info_req::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_edit_player_info_req::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& c_gs_edit_player_info_req::name() const {
  return *name_;
}
inline void c_gs_edit_player_info_req::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void c_gs_edit_player_info_req::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void c_gs_edit_player_info_req::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* c_gs_edit_player_info_req::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* c_gs_edit_player_info_req::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void c_gs_edit_player_info_req::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 head_id = 2;
inline bool c_gs_edit_player_info_req::has_head_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_edit_player_info_req::set_has_head_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_edit_player_info_req::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_edit_player_info_req::clear_head_id() {
  head_id_ = 0u;
  clear_has_head_id();
}
inline ::google::protobuf::uint32 c_gs_edit_player_info_req::head_id() const {
  return head_id_;
}
inline void c_gs_edit_player_info_req::set_head_id(::google::protobuf::uint32 value) {
  set_has_head_id();
  head_id_ = value;
}

// optional uint32 head_frame_id = 3;
inline bool c_gs_edit_player_info_req::has_head_frame_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void c_gs_edit_player_info_req::set_has_head_frame_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void c_gs_edit_player_info_req::clear_has_head_frame_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void c_gs_edit_player_info_req::clear_head_frame_id() {
  head_frame_id_ = 0u;
  clear_has_head_frame_id();
}
inline ::google::protobuf::uint32 c_gs_edit_player_info_req::head_frame_id() const {
  return head_frame_id_;
}
inline void c_gs_edit_player_info_req::set_head_frame_id(::google::protobuf::uint32 value) {
  set_has_head_frame_id();
  head_frame_id_ = value;
}

// optional string signature = 4;
inline bool c_gs_edit_player_info_req::has_signature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void c_gs_edit_player_info_req::set_has_signature() {
  _has_bits_[0] |= 0x00000008u;
}
inline void c_gs_edit_player_info_req::clear_has_signature() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void c_gs_edit_player_info_req::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& c_gs_edit_player_info_req::signature() const {
  return *signature_;
}
inline void c_gs_edit_player_info_req::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void c_gs_edit_player_info_req::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void c_gs_edit_player_info_req::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* c_gs_edit_player_info_req::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* c_gs_edit_player_info_req::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void c_gs_edit_player_info_req::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gs_c_edit_player_info_res

// required .e_gsc_errorcode error_code = 1;
inline bool gs_c_edit_player_info_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_edit_player_info_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_edit_player_info_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_edit_player_info_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::e_gsc_errorcode gs_c_edit_player_info_res::error_code() const {
  return static_cast< ::e_gsc_errorcode >(error_code_);
}
inline void gs_c_edit_player_info_res::set_error_code(::e_gsc_errorcode value) {
  assert(::e_gsc_errorcode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// optional string name = 2;
inline bool gs_c_edit_player_info_res::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_edit_player_info_res::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_edit_player_info_res::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_edit_player_info_res::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& gs_c_edit_player_info_res::name() const {
  return *name_;
}
inline void gs_c_edit_player_info_res::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_edit_player_info_res::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_edit_player_info_res::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_edit_player_info_res::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* gs_c_edit_player_info_res::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_edit_player_info_res::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 head_id = 3;
inline bool gs_c_edit_player_info_res::has_head_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_edit_player_info_res::set_has_head_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_edit_player_info_res::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_edit_player_info_res::clear_head_id() {
  head_id_ = 0u;
  clear_has_head_id();
}
inline ::google::protobuf::uint32 gs_c_edit_player_info_res::head_id() const {
  return head_id_;
}
inline void gs_c_edit_player_info_res::set_head_id(::google::protobuf::uint32 value) {
  set_has_head_id();
  head_id_ = value;
}

// optional uint32 head_frame_id = 4;
inline bool gs_c_edit_player_info_res::has_head_frame_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_edit_player_info_res::set_has_head_frame_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_edit_player_info_res::clear_has_head_frame_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_edit_player_info_res::clear_head_frame_id() {
  head_frame_id_ = 0u;
  clear_has_head_frame_id();
}
inline ::google::protobuf::uint32 gs_c_edit_player_info_res::head_frame_id() const {
  return head_frame_id_;
}
inline void gs_c_edit_player_info_res::set_head_frame_id(::google::protobuf::uint32 value) {
  set_has_head_frame_id();
  head_frame_id_ = value;
}

// optional string signature = 5;
inline bool gs_c_edit_player_info_res::has_signature() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_c_edit_player_info_res::set_has_signature() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_c_edit_player_info_res::clear_has_signature() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_c_edit_player_info_res::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& gs_c_edit_player_info_res::signature() const {
  return *signature_;
}
inline void gs_c_edit_player_info_res::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void gs_c_edit_player_info_res::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void gs_c_edit_player_info_res::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_edit_player_info_res::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* gs_c_edit_player_info_res::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_edit_player_info_res::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// c_gs_finish_novice_guide_req

// required uint32 guide_id = 1;
inline bool c_gs_finish_novice_guide_req::has_guide_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_finish_novice_guide_req::set_has_guide_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_finish_novice_guide_req::clear_has_guide_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_finish_novice_guide_req::clear_guide_id() {
  guide_id_ = 0u;
  clear_has_guide_id();
}
inline ::google::protobuf::uint32 c_gs_finish_novice_guide_req::guide_id() const {
  return guide_id_;
}
inline void c_gs_finish_novice_guide_req::set_guide_id(::google::protobuf::uint32 value) {
  set_has_guide_id();
  guide_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_finish_novice_guide_res

// required .e_gsc_errorcode error_code = 1;
inline bool gs_c_finish_novice_guide_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_finish_novice_guide_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_finish_novice_guide_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_finish_novice_guide_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::e_gsc_errorcode gs_c_finish_novice_guide_res::error_code() const {
  return static_cast< ::e_gsc_errorcode >(error_code_);
}
inline void gs_c_finish_novice_guide_res::set_error_code(::e_gsc_errorcode value) {
  assert(::e_gsc_errorcode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 guide_id = 2;
inline bool gs_c_finish_novice_guide_res::has_guide_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_finish_novice_guide_res::set_has_guide_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_finish_novice_guide_res::clear_has_guide_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_finish_novice_guide_res::clear_guide_id() {
  guide_id_ = 0u;
  clear_has_guide_id();
}
inline ::google::protobuf::uint32 gs_c_finish_novice_guide_res::guide_id() const {
  return guide_id_;
}
inline void gs_c_finish_novice_guide_res::set_guide_id(::google::protobuf::uint32 value) {
  set_has_guide_id();
  guide_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_marquee_ntf

// required .gs_c_marquee_ntf.MARQUEE_TYPE marquee_type = 1;
inline bool gs_c_marquee_ntf::has_marquee_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_marquee_ntf::set_has_marquee_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_marquee_ntf::clear_has_marquee_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_marquee_ntf::clear_marquee_type() {
  marquee_type_ = 0;
  clear_has_marquee_type();
}
inline ::gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf::marquee_type() const {
  return static_cast< ::gs_c_marquee_ntf_MARQUEE_TYPE >(marquee_type_);
}
inline void gs_c_marquee_ntf::set_marquee_type(::gs_c_marquee_ntf_MARQUEE_TYPE value) {
  assert(::gs_c_marquee_ntf_MARQUEE_TYPE_IsValid(value));
  set_has_marquee_type();
  marquee_type_ = value;
}

// required uint32 marquee_times = 2;
inline bool gs_c_marquee_ntf::has_marquee_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_marquee_ntf::set_has_marquee_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_marquee_ntf::clear_has_marquee_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_marquee_ntf::clear_marquee_times() {
  marquee_times_ = 0u;
  clear_has_marquee_times();
}
inline ::google::protobuf::uint32 gs_c_marquee_ntf::marquee_times() const {
  return marquee_times_;
}
inline void gs_c_marquee_ntf::set_marquee_times(::google::protobuf::uint32 value) {
  set_has_marquee_times();
  marquee_times_ = value;
}

// required string content = 3;
inline bool gs_c_marquee_ntf::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_marquee_ntf::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_marquee_ntf::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_marquee_ntf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& gs_c_marquee_ntf::content() const {
  return *content_;
}
inline void gs_c_marquee_ntf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void gs_c_marquee_ntf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void gs_c_marquee_ntf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_marquee_ntf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* gs_c_marquee_ntf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_marquee_ntf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gs_c_element_ntf

// repeated .struct_game_element eles = 1;
inline int gs_c_element_ntf::eles_size() const {
  return eles_.size();
}
inline void gs_c_element_ntf::clear_eles() {
  eles_.Clear();
}
inline const ::struct_game_element& gs_c_element_ntf::eles(int index) const {
  return eles_.Get(index);
}
inline ::struct_game_element* gs_c_element_ntf::mutable_eles(int index) {
  return eles_.Mutable(index);
}
inline ::struct_game_element* gs_c_element_ntf::add_eles() {
  return eles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_element_ntf::eles() const {
  return eles_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_element_ntf::mutable_eles() {
  return &eles_;
}

// -------------------------------------------------------------------

// friend_base_info

// required uint32 user_id = 1;
inline bool friend_base_info::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void friend_base_info::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void friend_base_info::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void friend_base_info::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 friend_base_info::user_id() const {
  return user_id_;
}
inline void friend_base_info::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 head_id = 2;
inline bool friend_base_info::has_head_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void friend_base_info::set_has_head_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void friend_base_info::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void friend_base_info::clear_head_id() {
  head_id_ = 0u;
  clear_has_head_id();
}
inline ::google::protobuf::uint32 friend_base_info::head_id() const {
  return head_id_;
}
inline void friend_base_info::set_head_id(::google::protobuf::uint32 value) {
  set_has_head_id();
  head_id_ = value;
}

// required uint32 head_frame_id = 3;
inline bool friend_base_info::has_head_frame_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void friend_base_info::set_has_head_frame_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void friend_base_info::clear_has_head_frame_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void friend_base_info::clear_head_frame_id() {
  head_frame_id_ = 0u;
  clear_has_head_frame_id();
}
inline ::google::protobuf::uint32 friend_base_info::head_frame_id() const {
  return head_frame_id_;
}
inline void friend_base_info::set_head_frame_id(::google::protobuf::uint32 value) {
  set_has_head_frame_id();
  head_frame_id_ = value;
}

// required string name = 4;
inline bool friend_base_info::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void friend_base_info::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void friend_base_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void friend_base_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& friend_base_info::name() const {
  return *name_;
}
inline void friend_base_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void friend_base_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void friend_base_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* friend_base_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* friend_base_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void friend_base_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 level = 5;
inline bool friend_base_info::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void friend_base_info::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void friend_base_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void friend_base_info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 friend_base_info::level() const {
  return level_;
}
inline void friend_base_info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 vip = 6;
inline bool friend_base_info::has_vip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void friend_base_info::set_has_vip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void friend_base_info::clear_has_vip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void friend_base_info::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 friend_base_info::vip() const {
  return vip_;
}
inline void friend_base_info::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
}

// required uint32 arena_rank = 7;
inline bool friend_base_info::has_arena_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void friend_base_info::set_has_arena_rank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void friend_base_info::clear_has_arena_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void friend_base_info::clear_arena_rank() {
  arena_rank_ = 0u;
  clear_has_arena_rank();
}
inline ::google::protobuf::uint32 friend_base_info::arena_rank() const {
  return arena_rank_;
}
inline void friend_base_info::set_arena_rank(::google::protobuf::uint32 value) {
  set_has_arena_rank();
  arena_rank_ = value;
}

// required uint32 last_login_time = 8;
inline bool friend_base_info::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void friend_base_info::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void friend_base_info::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void friend_base_info::clear_last_login_time() {
  last_login_time_ = 0u;
  clear_has_last_login_time();
}
inline ::google::protobuf::uint32 friend_base_info::last_login_time() const {
  return last_login_time_;
}
inline void friend_base_info::set_last_login_time(::google::protobuf::uint32 value) {
  set_has_last_login_time();
  last_login_time_ = value;
}

// optional string signature = 9;
inline bool friend_base_info::has_signature() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void friend_base_info::set_has_signature() {
  _has_bits_[0] |= 0x00000100u;
}
inline void friend_base_info::clear_has_signature() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void friend_base_info::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& friend_base_info::signature() const {
  return *signature_;
}
inline void friend_base_info::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void friend_base_info::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void friend_base_info::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* friend_base_info::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* friend_base_info::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void friend_base_info::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// user_friend_friend_info

// required .friend_base_info base_info = 1;
inline bool user_friend_friend_info::has_base_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_friend_friend_info::set_has_base_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_friend_friend_info::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_friend_friend_info::clear_base_info() {
  if (base_info_ != NULL) base_info_->::friend_base_info::Clear();
  clear_has_base_info();
}
inline const ::friend_base_info& user_friend_friend_info::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::friend_base_info* user_friend_friend_info::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::friend_base_info;
  return base_info_;
}
inline ::friend_base_info* user_friend_friend_info::release_base_info() {
  clear_has_base_info();
  ::friend_base_info* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void user_friend_friend_info::set_allocated_base_info(::friend_base_info* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
}

// required bool is_friend_give = 2;
inline bool user_friend_friend_info::has_is_friend_give() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_friend_friend_info::set_has_is_friend_give() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_friend_friend_info::clear_has_is_friend_give() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_friend_friend_info::clear_is_friend_give() {
  is_friend_give_ = false;
  clear_has_is_friend_give();
}
inline bool user_friend_friend_info::is_friend_give() const {
  return is_friend_give_;
}
inline void user_friend_friend_info::set_is_friend_give(bool value) {
  set_has_is_friend_give();
  is_friend_give_ = value;
}

// required bool is_me_give = 3;
inline bool user_friend_friend_info::has_is_me_give() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void user_friend_friend_info::set_has_is_me_give() {
  _has_bits_[0] |= 0x00000004u;
}
inline void user_friend_friend_info::clear_has_is_me_give() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void user_friend_friend_info::clear_is_me_give() {
  is_me_give_ = false;
  clear_has_is_me_give();
}
inline bool user_friend_friend_info::is_me_give() const {
  return is_me_give_;
}
inline void user_friend_friend_info::set_is_me_give(bool value) {
  set_has_is_me_give();
  is_me_give_ = value;
}

// -------------------------------------------------------------------

// user_friend

// repeated .user_friend.friend_info friends = 1;
inline int user_friend::friends_size() const {
  return friends_.size();
}
inline void user_friend::clear_friends() {
  friends_.Clear();
}
inline const ::user_friend_friend_info& user_friend::friends(int index) const {
  return friends_.Get(index);
}
inline ::user_friend_friend_info* user_friend::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::user_friend_friend_info* user_friend::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_friend_friend_info >&
user_friend::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_friend_friend_info >*
user_friend::mutable_friends() {
  return &friends_;
}

// repeated .friend_base_info applies = 2;
inline int user_friend::applies_size() const {
  return applies_.size();
}
inline void user_friend::clear_applies() {
  applies_.Clear();
}
inline const ::friend_base_info& user_friend::applies(int index) const {
  return applies_.Get(index);
}
inline ::friend_base_info* user_friend::mutable_applies(int index) {
  return applies_.Mutable(index);
}
inline ::friend_base_info* user_friend::add_applies() {
  return applies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::friend_base_info >&
user_friend::applies() const {
  return applies_;
}
inline ::google::protobuf::RepeatedPtrField< ::friend_base_info >*
user_friend::mutable_applies() {
  return &applies_;
}

// repeated .friend_base_info confirms = 3;
inline int user_friend::confirms_size() const {
  return confirms_.size();
}
inline void user_friend::clear_confirms() {
  confirms_.Clear();
}
inline const ::friend_base_info& user_friend::confirms(int index) const {
  return confirms_.Get(index);
}
inline ::friend_base_info* user_friend::mutable_confirms(int index) {
  return confirms_.Mutable(index);
}
inline ::friend_base_info* user_friend::add_confirms() {
  return confirms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::friend_base_info >&
user_friend::confirms() const {
  return confirms_;
}
inline ::google::protobuf::RepeatedPtrField< ::friend_base_info >*
user_friend::mutable_confirms() {
  return &confirms_;
}

// repeated .friend_base_info recommends = 4;
inline int user_friend::recommends_size() const {
  return recommends_.size();
}
inline void user_friend::clear_recommends() {
  recommends_.Clear();
}
inline const ::friend_base_info& user_friend::recommends(int index) const {
  return recommends_.Get(index);
}
inline ::friend_base_info* user_friend::mutable_recommends(int index) {
  return recommends_.Mutable(index);
}
inline ::friend_base_info* user_friend::add_recommends() {
  return recommends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::friend_base_info >&
user_friend::recommends() const {
  return recommends_;
}
inline ::google::protobuf::RepeatedPtrField< ::friend_base_info >*
user_friend::mutable_recommends() {
  return &recommends_;
}

// -------------------------------------------------------------------

// c_gs_user_friend_op_req

// required .c_gs_user_friend_op_req.OP_TYPE op_type = 1;
inline bool c_gs_user_friend_op_req::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_user_friend_op_req::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_user_friend_op_req::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_user_friend_op_req::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::op_type() const {
  return static_cast< ::c_gs_user_friend_op_req_OP_TYPE >(op_type_);
}
inline void c_gs_user_friend_op_req::set_op_type(::c_gs_user_friend_op_req_OP_TYPE value) {
  assert(::c_gs_user_friend_op_req_OP_TYPE_IsValid(value));
  set_has_op_type();
  op_type_ = value;
}

// optional uint32 user_id = 2;
inline bool c_gs_user_friend_op_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_user_friend_op_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_user_friend_op_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_user_friend_op_req::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 c_gs_user_friend_op_req::user_id() const {
  return user_id_;
}
inline void c_gs_user_friend_op_req::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_user_friend_op_res

// required int32 error_code = 1;
inline bool gs_c_user_friend_op_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_user_friend_op_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_user_friend_op_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_user_friend_op_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_user_friend_op_res::error_code() const {
  return error_code_;
}
inline void gs_c_user_friend_op_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// required .c_gs_user_friend_op_req.OP_TYPE op_type = 2;
inline bool gs_c_user_friend_op_res::has_op_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_user_friend_op_res::set_has_op_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_user_friend_op_res::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_user_friend_op_res::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::c_gs_user_friend_op_req_OP_TYPE gs_c_user_friend_op_res::op_type() const {
  return static_cast< ::c_gs_user_friend_op_req_OP_TYPE >(op_type_);
}
inline void gs_c_user_friend_op_res::set_op_type(::c_gs_user_friend_op_req_OP_TYPE value) {
  assert(::c_gs_user_friend_op_req_OP_TYPE_IsValid(value));
  set_has_op_type();
  op_type_ = value;
}

// optional uint32 user_id = 3;
inline bool gs_c_user_friend_op_res::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_user_friend_op_res::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_user_friend_op_res::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_user_friend_op_res::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 gs_c_user_friend_op_res::user_id() const {
  return user_id_;
}
inline void gs_c_user_friend_op_res::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// repeated .struct_game_element eles = 4;
inline int gs_c_user_friend_op_res::eles_size() const {
  return eles_.size();
}
inline void gs_c_user_friend_op_res::clear_eles() {
  eles_.Clear();
}
inline const ::struct_game_element& gs_c_user_friend_op_res::eles(int index) const {
  return eles_.Get(index);
}
inline ::struct_game_element* gs_c_user_friend_op_res::mutable_eles(int index) {
  return eles_.Mutable(index);
}
inline ::struct_game_element* gs_c_user_friend_op_res::add_eles() {
  return eles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_user_friend_op_res::eles() const {
  return eles_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_user_friend_op_res::mutable_eles() {
  return &eles_;
}

// optional .friend_base_info base_info = 5;
inline bool gs_c_user_friend_op_res::has_base_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_c_user_friend_op_res::set_has_base_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_c_user_friend_op_res::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_c_user_friend_op_res::clear_base_info() {
  if (base_info_ != NULL) base_info_->::friend_base_info::Clear();
  clear_has_base_info();
}
inline const ::friend_base_info& gs_c_user_friend_op_res::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::friend_base_info* gs_c_user_friend_op_res::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::friend_base_info;
  return base_info_;
}
inline ::friend_base_info* gs_c_user_friend_op_res::release_base_info() {
  clear_has_base_info();
  ::friend_base_info* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void gs_c_user_friend_op_res::set_allocated_base_info(::friend_base_info* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
}

// -------------------------------------------------------------------

// c_gs_search_user_req

// optional string name = 1;
inline bool c_gs_search_user_req::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_search_user_req::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_search_user_req::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_search_user_req::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& c_gs_search_user_req::name() const {
  return *name_;
}
inline void c_gs_search_user_req::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void c_gs_search_user_req::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void c_gs_search_user_req::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* c_gs_search_user_req::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* c_gs_search_user_req::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void c_gs_search_user_req::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 user_id = 2;
inline bool c_gs_search_user_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_search_user_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_search_user_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_search_user_req::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 c_gs_search_user_req::user_id() const {
  return user_id_;
}
inline void c_gs_search_user_req::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_search_user_res

// required int32 error_code = 1;
inline bool gs_c_search_user_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_search_user_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_search_user_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_search_user_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_search_user_res::error_code() const {
  return error_code_;
}
inline void gs_c_search_user_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .friend_base_info base_info = 2;
inline bool gs_c_search_user_res::has_base_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_search_user_res::set_has_base_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_search_user_res::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_search_user_res::clear_base_info() {
  if (base_info_ != NULL) base_info_->::friend_base_info::Clear();
  clear_has_base_info();
}
inline const ::friend_base_info& gs_c_search_user_res::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::friend_base_info* gs_c_search_user_res::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::friend_base_info;
  return base_info_;
}
inline ::friend_base_info* gs_c_search_user_res::release_base_info() {
  clear_has_base_info();
  ::friend_base_info* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void gs_c_search_user_res::set_allocated_base_info(::friend_base_info* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
}

// -------------------------------------------------------------------

// gs_c_friend_ntf

// required .gs_c_friend_ntf.OP_TYPE op_type = 1;
inline bool gs_c_friend_ntf::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_friend_ntf::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_friend_ntf::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_friend_ntf::clear_op_type() {
  op_type_ = 1;
  clear_has_op_type();
}
inline ::gs_c_friend_ntf_OP_TYPE gs_c_friend_ntf::op_type() const {
  return static_cast< ::gs_c_friend_ntf_OP_TYPE >(op_type_);
}
inline void gs_c_friend_ntf::set_op_type(::gs_c_friend_ntf_OP_TYPE value) {
  assert(::gs_c_friend_ntf_OP_TYPE_IsValid(value));
  set_has_op_type();
  op_type_ = value;
}

// optional uint32 friend_id = 2;
inline bool gs_c_friend_ntf::has_friend_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_friend_ntf::set_has_friend_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_friend_ntf::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_friend_ntf::clear_friend_id() {
  friend_id_ = 0u;
  clear_has_friend_id();
}
inline ::google::protobuf::uint32 gs_c_friend_ntf::friend_id() const {
  return friend_id_;
}
inline void gs_c_friend_ntf::set_friend_id(::google::protobuf::uint32 value) {
  set_has_friend_id();
  friend_id_ = value;
}

// optional .friend_base_info base_info = 3;
inline bool gs_c_friend_ntf::has_base_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_friend_ntf::set_has_base_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_friend_ntf::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_friend_ntf::clear_base_info() {
  if (base_info_ != NULL) base_info_->::friend_base_info::Clear();
  clear_has_base_info();
}
inline const ::friend_base_info& gs_c_friend_ntf::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::friend_base_info* gs_c_friend_ntf::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::friend_base_info;
  return base_info_;
}
inline ::friend_base_info* gs_c_friend_ntf::release_base_info() {
  clear_has_base_info();
  ::friend_base_info* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline void gs_c_friend_ntf::set_allocated_base_info(::friend_base_info* base_info) {
  delete base_info_;
  base_info_ = base_info;
  if (base_info) {
    set_has_base_info();
  } else {
    clear_has_base_info();
  }
}

// -------------------------------------------------------------------

// c_gs_chat_req

// required .c_gs_chat_req.CHAT_TYPE chat_type = 1;
inline bool c_gs_chat_req::has_chat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_chat_req::set_has_chat_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_chat_req::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_chat_req::clear_chat_type() {
  chat_type_ = 1;
  clear_has_chat_type();
}
inline ::c_gs_chat_req_CHAT_TYPE c_gs_chat_req::chat_type() const {
  return static_cast< ::c_gs_chat_req_CHAT_TYPE >(chat_type_);
}
inline void c_gs_chat_req::set_chat_type(::c_gs_chat_req_CHAT_TYPE value) {
  assert(::c_gs_chat_req_CHAT_TYPE_IsValid(value));
  set_has_chat_type();
  chat_type_ = value;
}

// optional uint32 to_id = 2;
inline bool c_gs_chat_req::has_to_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_chat_req::set_has_to_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_chat_req::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_chat_req::clear_to_id() {
  to_id_ = 0u;
  clear_has_to_id();
}
inline ::google::protobuf::uint32 c_gs_chat_req::to_id() const {
  return to_id_;
}
inline void c_gs_chat_req::set_to_id(::google::protobuf::uint32 value) {
  set_has_to_id();
  to_id_ = value;
}

// optional string to_name = 3;
inline bool c_gs_chat_req::has_to_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void c_gs_chat_req::set_has_to_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void c_gs_chat_req::clear_has_to_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void c_gs_chat_req::clear_to_name() {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    to_name_->clear();
  }
  clear_has_to_name();
}
inline const ::std::string& c_gs_chat_req::to_name() const {
  return *to_name_;
}
inline void c_gs_chat_req::set_to_name(const ::std::string& value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void c_gs_chat_req::set_to_name(const char* value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void c_gs_chat_req::set_to_name(const char* value, size_t size) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* c_gs_chat_req::mutable_to_name() {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  return to_name_;
}
inline ::std::string* c_gs_chat_req::release_to_name() {
  clear_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_name_;
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void c_gs_chat_req::set_allocated_to_name(::std::string* to_name) {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (to_name) {
    set_has_to_name();
    to_name_ = to_name;
  } else {
    clear_has_to_name();
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string word = 4;
inline bool c_gs_chat_req::has_word() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void c_gs_chat_req::set_has_word() {
  _has_bits_[0] |= 0x00000008u;
}
inline void c_gs_chat_req::clear_has_word() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void c_gs_chat_req::clear_word() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    word_->clear();
  }
  clear_has_word();
}
inline const ::std::string& c_gs_chat_req::word() const {
  return *word_;
}
inline void c_gs_chat_req::set_word(const ::std::string& value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void c_gs_chat_req::set_word(const char* value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void c_gs_chat_req::set_word(const char* value, size_t size) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* c_gs_chat_req::mutable_word() {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  return word_;
}
inline ::std::string* c_gs_chat_req::release_word() {
  clear_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = word_;
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void c_gs_chat_req::set_allocated_word(::std::string* word) {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (word) {
    set_has_word();
    word_ = word;
  } else {
    clear_has_word();
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gs_c_chat_res

// required uint32 error_code = 1;
inline bool gs_c_chat_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_chat_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_chat_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_chat_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_chat_res::error_code() const {
  return error_code_;
}
inline void gs_c_chat_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// gs_c_chat_ntf

// required .c_gs_chat_req.CHAT_TYPE chat_type = 1;
inline bool gs_c_chat_ntf::has_chat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_chat_ntf::set_has_chat_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_chat_ntf::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_chat_ntf::clear_chat_type() {
  chat_type_ = 1;
  clear_has_chat_type();
}
inline ::c_gs_chat_req_CHAT_TYPE gs_c_chat_ntf::chat_type() const {
  return static_cast< ::c_gs_chat_req_CHAT_TYPE >(chat_type_);
}
inline void gs_c_chat_ntf::set_chat_type(::c_gs_chat_req_CHAT_TYPE value) {
  assert(::c_gs_chat_req_CHAT_TYPE_IsValid(value));
  set_has_chat_type();
  chat_type_ = value;
}

// required uint32 user_id = 2;
inline bool gs_c_chat_ntf::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_chat_ntf::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_chat_ntf::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_chat_ntf::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 gs_c_chat_ntf::user_id() const {
  return user_id_;
}
inline void gs_c_chat_ntf::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 vip = 3;
inline bool gs_c_chat_ntf::has_vip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_chat_ntf::set_has_vip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_chat_ntf::clear_has_vip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_chat_ntf::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 gs_c_chat_ntf::vip() const {
  return vip_;
}
inline void gs_c_chat_ntf::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
}

// required string name = 4;
inline bool gs_c_chat_ntf::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_chat_ntf::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_chat_ntf::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_chat_ntf::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& gs_c_chat_ntf::name() const {
  return *name_;
}
inline void gs_c_chat_ntf::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_chat_ntf::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_chat_ntf::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_chat_ntf::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* gs_c_chat_ntf::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_chat_ntf::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 head_id = 5;
inline bool gs_c_chat_ntf::has_head_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_c_chat_ntf::set_has_head_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_c_chat_ntf::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_c_chat_ntf::clear_head_id() {
  head_id_ = 0u;
  clear_has_head_id();
}
inline ::google::protobuf::uint32 gs_c_chat_ntf::head_id() const {
  return head_id_;
}
inline void gs_c_chat_ntf::set_head_id(::google::protobuf::uint32 value) {
  set_has_head_id();
  head_id_ = value;
}

// required uint32 head_frame_id = 6;
inline bool gs_c_chat_ntf::has_head_frame_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gs_c_chat_ntf::set_has_head_frame_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gs_c_chat_ntf::clear_has_head_frame_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gs_c_chat_ntf::clear_head_frame_id() {
  head_frame_id_ = 0u;
  clear_has_head_frame_id();
}
inline ::google::protobuf::uint32 gs_c_chat_ntf::head_frame_id() const {
  return head_frame_id_;
}
inline void gs_c_chat_ntf::set_head_frame_id(::google::protobuf::uint32 value) {
  set_has_head_frame_id();
  head_frame_id_ = value;
}

// required string word = 7;
inline bool gs_c_chat_ntf::has_word() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gs_c_chat_ntf::set_has_word() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gs_c_chat_ntf::clear_has_word() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gs_c_chat_ntf::clear_word() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    word_->clear();
  }
  clear_has_word();
}
inline const ::std::string& gs_c_chat_ntf::word() const {
  return *word_;
}
inline void gs_c_chat_ntf::set_word(const ::std::string& value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void gs_c_chat_ntf::set_word(const char* value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void gs_c_chat_ntf::set_word(const char* value, size_t size) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_chat_ntf::mutable_word() {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  return word_;
}
inline ::std::string* gs_c_chat_ntf::release_word() {
  clear_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = word_;
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_chat_ntf::set_allocated_word(::std::string* word) {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (word) {
    set_has_word();
    word_ = word;
  } else {
    clear_has_word();
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// c_gs_fight_power_req

// required uint32 fight_power = 1;
inline bool c_gs_fight_power_req::has_fight_power() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_fight_power_req::set_has_fight_power() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_fight_power_req::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_fight_power_req::clear_fight_power() {
  fight_power_ = 0u;
  clear_has_fight_power();
}
inline ::google::protobuf::uint32 c_gs_fight_power_req::fight_power() const {
  return fight_power_;
}
inline void c_gs_fight_power_req::set_fight_power(::google::protobuf::uint32 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// -------------------------------------------------------------------

// gs_c_fight_power_res

// required uint32 error_code = 1;
inline bool gs_c_fight_power_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_fight_power_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_fight_power_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_fight_power_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_fight_power_res::error_code() const {
  return error_code_;
}
inline void gs_c_fight_power_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// c_gs_rank_req

// required .c_gs_rank_req.RANK_TYPE rank_type = 1;
inline bool c_gs_rank_req::has_rank_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_rank_req::set_has_rank_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_rank_req::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_rank_req::clear_rank_type() {
  rank_type_ = 1;
  clear_has_rank_type();
}
inline ::c_gs_rank_req_RANK_TYPE c_gs_rank_req::rank_type() const {
  return static_cast< ::c_gs_rank_req_RANK_TYPE >(rank_type_);
}
inline void c_gs_rank_req::set_rank_type(::c_gs_rank_req_RANK_TYPE value) {
  assert(::c_gs_rank_req_RANK_TYPE_IsValid(value));
  set_has_rank_type();
  rank_type_ = value;
}

// -------------------------------------------------------------------

// gs_c_rank_res_user_hero_brief_info

// required uint32 hero_id = 1;
inline bool gs_c_rank_res_user_hero_brief_info::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_rank_res_user_hero_brief_info::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_rank_res_user_hero_brief_info::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_rank_res_user_hero_brief_info::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 gs_c_rank_res_user_hero_brief_info::hero_id() const {
  return hero_id_;
}
inline void gs_c_rank_res_user_hero_brief_info::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required uint32 level = 2;
inline bool gs_c_rank_res_user_hero_brief_info::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_rank_res_user_hero_brief_info::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_rank_res_user_hero_brief_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_rank_res_user_hero_brief_info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 gs_c_rank_res_user_hero_brief_info::level() const {
  return level_;
}
inline void gs_c_rank_res_user_hero_brief_info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 quality = 3;
inline bool gs_c_rank_res_user_hero_brief_info::has_quality() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_rank_res_user_hero_brief_info::set_has_quality() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_rank_res_user_hero_brief_info::clear_has_quality() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_rank_res_user_hero_brief_info::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 gs_c_rank_res_user_hero_brief_info::quality() const {
  return quality_;
}
inline void gs_c_rank_res_user_hero_brief_info::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// required uint32 star = 4;
inline bool gs_c_rank_res_user_hero_brief_info::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_rank_res_user_hero_brief_info::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_rank_res_user_hero_brief_info::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_rank_res_user_hero_brief_info::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 gs_c_rank_res_user_hero_brief_info::star() const {
  return star_;
}
inline void gs_c_rank_res_user_hero_brief_info::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// -------------------------------------------------------------------

// gs_c_rank_res_rank_info

// required uint32 head_id = 1;
inline bool gs_c_rank_res_rank_info::has_head_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_rank_res_rank_info::set_has_head_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_rank_res_rank_info::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_rank_res_rank_info::clear_head_id() {
  head_id_ = 0u;
  clear_has_head_id();
}
inline ::google::protobuf::uint32 gs_c_rank_res_rank_info::head_id() const {
  return head_id_;
}
inline void gs_c_rank_res_rank_info::set_head_id(::google::protobuf::uint32 value) {
  set_has_head_id();
  head_id_ = value;
}

// required uint32 head_frame_id = 2;
inline bool gs_c_rank_res_rank_info::has_head_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_rank_res_rank_info::set_has_head_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_rank_res_rank_info::clear_has_head_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_rank_res_rank_info::clear_head_frame_id() {
  head_frame_id_ = 0u;
  clear_has_head_frame_id();
}
inline ::google::protobuf::uint32 gs_c_rank_res_rank_info::head_frame_id() const {
  return head_frame_id_;
}
inline void gs_c_rank_res_rank_info::set_head_frame_id(::google::protobuf::uint32 value) {
  set_has_head_frame_id();
  head_frame_id_ = value;
}

// required uint32 level = 3;
inline bool gs_c_rank_res_rank_info::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_rank_res_rank_info::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_rank_res_rank_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_rank_res_rank_info::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 gs_c_rank_res_rank_info::level() const {
  return level_;
}
inline void gs_c_rank_res_rank_info::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required string name = 4;
inline bool gs_c_rank_res_rank_info::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_rank_res_rank_info::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_rank_res_rank_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_rank_res_rank_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& gs_c_rank_res_rank_info::name() const {
  return *name_;
}
inline void gs_c_rank_res_rank_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_rank_res_rank_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_rank_res_rank_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_rank_res_rank_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* gs_c_rank_res_rank_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_rank_res_rank_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 arena_rank = 5;
inline bool gs_c_rank_res_rank_info::has_arena_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_c_rank_res_rank_info::set_has_arena_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_c_rank_res_rank_info::clear_has_arena_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_c_rank_res_rank_info::clear_arena_rank() {
  arena_rank_ = 0u;
  clear_has_arena_rank();
}
inline ::google::protobuf::uint32 gs_c_rank_res_rank_info::arena_rank() const {
  return arena_rank_;
}
inline void gs_c_rank_res_rank_info::set_arena_rank(::google::protobuf::uint32 value) {
  set_has_arena_rank();
  arena_rank_ = value;
}

// required uint32 fight_rank = 6;
inline bool gs_c_rank_res_rank_info::has_fight_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void gs_c_rank_res_rank_info::set_has_fight_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void gs_c_rank_res_rank_info::clear_has_fight_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void gs_c_rank_res_rank_info::clear_fight_rank() {
  fight_rank_ = 0u;
  clear_has_fight_rank();
}
inline ::google::protobuf::uint32 gs_c_rank_res_rank_info::fight_rank() const {
  return fight_rank_;
}
inline void gs_c_rank_res_rank_info::set_fight_rank(::google::protobuf::uint32 value) {
  set_has_fight_rank();
  fight_rank_ = value;
}

// required uint32 fight_power = 7;
inline bool gs_c_rank_res_rank_info::has_fight_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void gs_c_rank_res_rank_info::set_has_fight_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void gs_c_rank_res_rank_info::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void gs_c_rank_res_rank_info::clear_fight_power() {
  fight_power_ = 0u;
  clear_has_fight_power();
}
inline ::google::protobuf::uint32 gs_c_rank_res_rank_info::fight_power() const {
  return fight_power_;
}
inline void gs_c_rank_res_rank_info::set_fight_power(::google::protobuf::uint32 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// required uint32 level_rank = 8;
inline bool gs_c_rank_res_rank_info::has_level_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void gs_c_rank_res_rank_info::set_has_level_rank() {
  _has_bits_[0] |= 0x00000080u;
}
inline void gs_c_rank_res_rank_info::clear_has_level_rank() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void gs_c_rank_res_rank_info::clear_level_rank() {
  level_rank_ = 0u;
  clear_has_level_rank();
}
inline ::google::protobuf::uint32 gs_c_rank_res_rank_info::level_rank() const {
  return level_rank_;
}
inline void gs_c_rank_res_rank_info::set_level_rank(::google::protobuf::uint32 value) {
  set_has_level_rank();
  level_rank_ = value;
}

// required uint32 vip = 9;
inline bool gs_c_rank_res_rank_info::has_vip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void gs_c_rank_res_rank_info::set_has_vip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void gs_c_rank_res_rank_info::clear_has_vip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void gs_c_rank_res_rank_info::clear_vip() {
  vip_ = 0u;
  clear_has_vip();
}
inline ::google::protobuf::uint32 gs_c_rank_res_rank_info::vip() const {
  return vip_;
}
inline void gs_c_rank_res_rank_info::set_vip(::google::protobuf::uint32 value) {
  set_has_vip();
  vip_ = value;
}

// repeated .gs_c_rank_res.user_hero_brief_info heros = 10;
inline int gs_c_rank_res_rank_info::heros_size() const {
  return heros_.size();
}
inline void gs_c_rank_res_rank_info::clear_heros() {
  heros_.Clear();
}
inline const ::gs_c_rank_res_user_hero_brief_info& gs_c_rank_res_rank_info::heros(int index) const {
  return heros_.Get(index);
}
inline ::gs_c_rank_res_user_hero_brief_info* gs_c_rank_res_rank_info::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::gs_c_rank_res_user_hero_brief_info* gs_c_rank_res_rank_info::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gs_c_rank_res_user_hero_brief_info >&
gs_c_rank_res_rank_info::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::gs_c_rank_res_user_hero_brief_info >*
gs_c_rank_res_rank_info::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// gs_c_rank_res

// required uint32 error_code = 1;
inline bool gs_c_rank_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_rank_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_rank_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_rank_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_rank_res::error_code() const {
  return error_code_;
}
inline void gs_c_rank_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .c_gs_rank_req.RANK_TYPE rank_type = 2;
inline bool gs_c_rank_res::has_rank_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_rank_res::set_has_rank_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_rank_res::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_rank_res::clear_rank_type() {
  rank_type_ = 1;
  clear_has_rank_type();
}
inline ::c_gs_rank_req_RANK_TYPE gs_c_rank_res::rank_type() const {
  return static_cast< ::c_gs_rank_req_RANK_TYPE >(rank_type_);
}
inline void gs_c_rank_res::set_rank_type(::c_gs_rank_req_RANK_TYPE value) {
  assert(::c_gs_rank_req_RANK_TYPE_IsValid(value));
  set_has_rank_type();
  rank_type_ = value;
}

// repeated .gs_c_rank_res.rank_info ranks = 3;
inline int gs_c_rank_res::ranks_size() const {
  return ranks_.size();
}
inline void gs_c_rank_res::clear_ranks() {
  ranks_.Clear();
}
inline const ::gs_c_rank_res_rank_info& gs_c_rank_res::ranks(int index) const {
  return ranks_.Get(index);
}
inline ::gs_c_rank_res_rank_info* gs_c_rank_res::mutable_ranks(int index) {
  return ranks_.Mutable(index);
}
inline ::gs_c_rank_res_rank_info* gs_c_rank_res::add_ranks() {
  return ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gs_c_rank_res_rank_info >&
gs_c_rank_res::ranks() const {
  return ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::gs_c_rank_res_rank_info >*
gs_c_rank_res::mutable_ranks() {
  return &ranks_;
}

// optional uint32 me_cur_rank = 4;
inline bool gs_c_rank_res::has_me_cur_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_rank_res::set_has_me_cur_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_rank_res::clear_has_me_cur_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_rank_res::clear_me_cur_rank() {
  me_cur_rank_ = 0u;
  clear_has_me_cur_rank();
}
inline ::google::protobuf::uint32 gs_c_rank_res::me_cur_rank() const {
  return me_cur_rank_;
}
inline void gs_c_rank_res::set_me_cur_rank(::google::protobuf::uint32 value) {
  set_has_me_cur_rank();
  me_cur_rank_ = value;
}

// optional uint32 me_cur_value = 5;
inline bool gs_c_rank_res::has_me_cur_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_c_rank_res::set_has_me_cur_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_c_rank_res::clear_has_me_cur_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_c_rank_res::clear_me_cur_value() {
  me_cur_value_ = 0u;
  clear_has_me_cur_value();
}
inline ::google::protobuf::uint32 gs_c_rank_res::me_cur_value() const {
  return me_cur_value_;
}
inline void gs_c_rank_res::set_me_cur_value(::google::protobuf::uint32 value) {
  set_has_me_cur_value();
  me_cur_value_ = value;
}

// -------------------------------------------------------------------

// c_gs_crusade_start_req

// required uint32 wave = 1;
inline bool c_gs_crusade_start_req::has_wave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_crusade_start_req::set_has_wave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_crusade_start_req::clear_has_wave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_crusade_start_req::clear_wave() {
  wave_ = 0u;
  clear_has_wave();
}
inline ::google::protobuf::uint32 c_gs_crusade_start_req::wave() const {
  return wave_;
}
inline void c_gs_crusade_start_req::set_wave(::google::protobuf::uint32 value) {
  set_has_wave();
  wave_ = value;
}

// repeated uint32 enemy_heros = 2;
inline int c_gs_crusade_start_req::enemy_heros_size() const {
  return enemy_heros_.size();
}
inline void c_gs_crusade_start_req::clear_enemy_heros() {
  enemy_heros_.Clear();
}
inline ::google::protobuf::uint32 c_gs_crusade_start_req::enemy_heros(int index) const {
  return enemy_heros_.Get(index);
}
inline void c_gs_crusade_start_req::set_enemy_heros(int index, ::google::protobuf::uint32 value) {
  enemy_heros_.Set(index, value);
}
inline void c_gs_crusade_start_req::add_enemy_heros(::google::protobuf::uint32 value) {
  enemy_heros_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
c_gs_crusade_start_req::enemy_heros() const {
  return enemy_heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
c_gs_crusade_start_req::mutable_enemy_heros() {
  return &enemy_heros_;
}

// repeated uint32 me_heros = 3;
inline int c_gs_crusade_start_req::me_heros_size() const {
  return me_heros_.size();
}
inline void c_gs_crusade_start_req::clear_me_heros() {
  me_heros_.Clear();
}
inline ::google::protobuf::uint32 c_gs_crusade_start_req::me_heros(int index) const {
  return me_heros_.Get(index);
}
inline void c_gs_crusade_start_req::set_me_heros(int index, ::google::protobuf::uint32 value) {
  me_heros_.Set(index, value);
}
inline void c_gs_crusade_start_req::add_me_heros(::google::protobuf::uint32 value) {
  me_heros_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
c_gs_crusade_start_req::me_heros() const {
  return me_heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
c_gs_crusade_start_req::mutable_me_heros() {
  return &me_heros_;
}

// -------------------------------------------------------------------

// gs_c_crusade_start_res

// required uint32 error_code = 1;
inline bool gs_c_crusade_start_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_crusade_start_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_crusade_start_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_crusade_start_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_crusade_start_res::error_code() const {
  return error_code_;
}
inline void gs_c_crusade_start_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 wave = 2;
inline bool gs_c_crusade_start_res::has_wave() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_crusade_start_res::set_has_wave() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_crusade_start_res::clear_has_wave() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_crusade_start_res::clear_wave() {
  wave_ = 0u;
  clear_has_wave();
}
inline ::google::protobuf::uint32 gs_c_crusade_start_res::wave() const {
  return wave_;
}
inline void gs_c_crusade_start_res::set_wave(::google::protobuf::uint32 value) {
  set_has_wave();
  wave_ = value;
}

// -------------------------------------------------------------------

// c_gs_crusade_end_req

// required bool is_win = 1;
inline bool c_gs_crusade_end_req::has_is_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_crusade_end_req::set_has_is_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_crusade_end_req::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_crusade_end_req::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool c_gs_crusade_end_req::is_win() const {
  return is_win_;
}
inline void c_gs_crusade_end_req::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
}

// repeated .user_crusade.crusade_hero enemy_heros = 2;
inline int c_gs_crusade_end_req::enemy_heros_size() const {
  return enemy_heros_.size();
}
inline void c_gs_crusade_end_req::clear_enemy_heros() {
  enemy_heros_.Clear();
}
inline const ::user_crusade_crusade_hero& c_gs_crusade_end_req::enemy_heros(int index) const {
  return enemy_heros_.Get(index);
}
inline ::user_crusade_crusade_hero* c_gs_crusade_end_req::mutable_enemy_heros(int index) {
  return enemy_heros_.Mutable(index);
}
inline ::user_crusade_crusade_hero* c_gs_crusade_end_req::add_enemy_heros() {
  return enemy_heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >&
c_gs_crusade_end_req::enemy_heros() const {
  return enemy_heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >*
c_gs_crusade_end_req::mutable_enemy_heros() {
  return &enemy_heros_;
}

// repeated .user_crusade.crusade_hero me_heros = 3;
inline int c_gs_crusade_end_req::me_heros_size() const {
  return me_heros_.size();
}
inline void c_gs_crusade_end_req::clear_me_heros() {
  me_heros_.Clear();
}
inline const ::user_crusade_crusade_hero& c_gs_crusade_end_req::me_heros(int index) const {
  return me_heros_.Get(index);
}
inline ::user_crusade_crusade_hero* c_gs_crusade_end_req::mutable_me_heros(int index) {
  return me_heros_.Mutable(index);
}
inline ::user_crusade_crusade_hero* c_gs_crusade_end_req::add_me_heros() {
  return me_heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >&
c_gs_crusade_end_req::me_heros() const {
  return me_heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_crusade_crusade_hero >*
c_gs_crusade_end_req::mutable_me_heros() {
  return &me_heros_;
}

// -------------------------------------------------------------------

// gs_c_crusade_end_res

// required uint32 error_code = 1;
inline bool gs_c_crusade_end_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_crusade_end_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_crusade_end_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_crusade_end_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_crusade_end_res::error_code() const {
  return error_code_;
}
inline void gs_c_crusade_end_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_game_element outputs = 2;
inline int gs_c_crusade_end_res::outputs_size() const {
  return outputs_.size();
}
inline void gs_c_crusade_end_res::clear_outputs() {
  outputs_.Clear();
}
inline const ::struct_game_element& gs_c_crusade_end_res::outputs(int index) const {
  return outputs_.Get(index);
}
inline ::struct_game_element* gs_c_crusade_end_res::mutable_outputs(int index) {
  return outputs_.Mutable(index);
}
inline ::struct_game_element* gs_c_crusade_end_res::add_outputs() {
  return outputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_crusade_end_res::outputs() const {
  return outputs_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_crusade_end_res::mutable_outputs() {
  return &outputs_;
}

// -------------------------------------------------------------------

// c_gs_crusade_hero_life_req

// required uint32 hero_id = 1;
inline bool c_gs_crusade_hero_life_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_crusade_hero_life_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_crusade_hero_life_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_crusade_hero_life_req::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 c_gs_crusade_hero_life_req::hero_id() const {
  return hero_id_;
}
inline void c_gs_crusade_hero_life_req::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_crusade_hero_life_res

// required uint32 error_code = 1;
inline bool gs_c_crusade_hero_life_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_crusade_hero_life_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_crusade_hero_life_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_crusade_hero_life_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_crusade_hero_life_res::error_code() const {
  return error_code_;
}
inline void gs_c_crusade_hero_life_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 hero_id = 2;
inline bool gs_c_crusade_hero_life_res::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_crusade_hero_life_res::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_crusade_hero_life_res::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_crusade_hero_life_res::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 gs_c_crusade_hero_life_res::hero_id() const {
  return hero_id_;
}
inline void gs_c_crusade_hero_life_res::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated .struct_game_element consumes = 3;
inline int gs_c_crusade_hero_life_res::consumes_size() const {
  return consumes_.size();
}
inline void gs_c_crusade_hero_life_res::clear_consumes() {
  consumes_.Clear();
}
inline const ::struct_game_element& gs_c_crusade_hero_life_res::consumes(int index) const {
  return consumes_.Get(index);
}
inline ::struct_game_element* gs_c_crusade_hero_life_res::mutable_consumes(int index) {
  return consumes_.Mutable(index);
}
inline ::struct_game_element* gs_c_crusade_hero_life_res::add_consumes() {
  return consumes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_crusade_hero_life_res::consumes() const {
  return consumes_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_crusade_hero_life_res::mutable_consumes() {
  return &consumes_;
}

// -------------------------------------------------------------------

// c_gs_crusade_reset_req

// -------------------------------------------------------------------

// gs_c_crusade_reset_res

// required uint32 error_code = 1;
inline bool gs_c_crusade_reset_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_crusade_reset_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_crusade_reset_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_crusade_reset_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_crusade_reset_res::error_code() const {
  return error_code_;
}
inline void gs_c_crusade_reset_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// c_gs_crusade_promote_award_req

// -------------------------------------------------------------------

// gs_c_crusade_promote_award_res

// required uint32 error_code = 1;
inline bool gs_c_crusade_promote_award_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_crusade_promote_award_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_crusade_promote_award_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_crusade_promote_award_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_crusade_promote_award_res::error_code() const {
  return error_code_;
}
inline void gs_c_crusade_promote_award_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_game_element consumes = 2;
inline int gs_c_crusade_promote_award_res::consumes_size() const {
  return consumes_.size();
}
inline void gs_c_crusade_promote_award_res::clear_consumes() {
  consumes_.Clear();
}
inline const ::struct_game_element& gs_c_crusade_promote_award_res::consumes(int index) const {
  return consumes_.Get(index);
}
inline ::struct_game_element* gs_c_crusade_promote_award_res::mutable_consumes(int index) {
  return consumes_.Mutable(index);
}
inline ::struct_game_element* gs_c_crusade_promote_award_res::add_consumes() {
  return consumes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_crusade_promote_award_res::consumes() const {
  return consumes_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_crusade_promote_award_res::mutable_consumes() {
  return &consumes_;
}

// -------------------------------------------------------------------

// c_gs_crusade_buff_refresh_req

// -------------------------------------------------------------------

// gs_c_crusade_buff_refresh_res

// required uint32 error_code = 1;
inline bool gs_c_crusade_buff_refresh_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_crusade_buff_refresh_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_crusade_buff_refresh_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_crusade_buff_refresh_res::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 gs_c_crusade_buff_refresh_res::error_code() const {
  return error_code_;
}
inline void gs_c_crusade_buff_refresh_res::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_game_element consumes = 2;
inline int gs_c_crusade_buff_refresh_res::consumes_size() const {
  return consumes_.size();
}
inline void gs_c_crusade_buff_refresh_res::clear_consumes() {
  consumes_.Clear();
}
inline const ::struct_game_element& gs_c_crusade_buff_refresh_res::consumes(int index) const {
  return consumes_.Get(index);
}
inline ::struct_game_element* gs_c_crusade_buff_refresh_res::mutable_consumes(int index) {
  return consumes_.Mutable(index);
}
inline ::struct_game_element* gs_c_crusade_buff_refresh_res::add_consumes() {
  return consumes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_crusade_buff_refresh_res::consumes() const {
  return consumes_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_crusade_buff_refresh_res::mutable_consumes() {
  return &consumes_;
}

// -------------------------------------------------------------------

// struct_guild_list_item

// required string name = 1;
inline bool struct_guild_list_item::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void struct_guild_list_item::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void struct_guild_list_item::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void struct_guild_list_item::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& struct_guild_list_item::name() const {
  return *name_;
}
inline void struct_guild_list_item::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void struct_guild_list_item::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void struct_guild_list_item::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* struct_guild_list_item::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* struct_guild_list_item::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void struct_guild_list_item::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 president_user_id = 2;
inline bool struct_guild_list_item::has_president_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void struct_guild_list_item::set_has_president_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void struct_guild_list_item::clear_has_president_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void struct_guild_list_item::clear_president_user_id() {
  president_user_id_ = 0u;
  clear_has_president_user_id();
}
inline ::google::protobuf::uint32 struct_guild_list_item::president_user_id() const {
  return president_user_id_;
}
inline void struct_guild_list_item::set_president_user_id(::google::protobuf::uint32 value) {
  set_has_president_user_id();
  president_user_id_ = value;
}

// required .e_apply_switch_status status = 3;
inline bool struct_guild_list_item::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void struct_guild_list_item::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void struct_guild_list_item::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void struct_guild_list_item::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::e_apply_switch_status struct_guild_list_item::status() const {
  return static_cast< ::e_apply_switch_status >(status_);
}
inline void struct_guild_list_item::set_status(::e_apply_switch_status value) {
  assert(::e_apply_switch_status_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint32 flag = 4;
inline bool struct_guild_list_item::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void struct_guild_list_item::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void struct_guild_list_item::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void struct_guild_list_item::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 struct_guild_list_item::flag() const {
  return flag_;
}
inline void struct_guild_list_item::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// required uint32 guild_id = 5;
inline bool struct_guild_list_item::has_guild_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void struct_guild_list_item::set_has_guild_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void struct_guild_list_item::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void struct_guild_list_item::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 struct_guild_list_item::guild_id() const {
  return guild_id_;
}
inline void struct_guild_list_item::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// required string president_name = 6;
inline bool struct_guild_list_item::has_president_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void struct_guild_list_item::set_has_president_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void struct_guild_list_item::clear_has_president_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void struct_guild_list_item::clear_president_name() {
  if (president_name_ != &::google::protobuf::internal::kEmptyString) {
    president_name_->clear();
  }
  clear_has_president_name();
}
inline const ::std::string& struct_guild_list_item::president_name() const {
  return *president_name_;
}
inline void struct_guild_list_item::set_president_name(const ::std::string& value) {
  set_has_president_name();
  if (president_name_ == &::google::protobuf::internal::kEmptyString) {
    president_name_ = new ::std::string;
  }
  president_name_->assign(value);
}
inline void struct_guild_list_item::set_president_name(const char* value) {
  set_has_president_name();
  if (president_name_ == &::google::protobuf::internal::kEmptyString) {
    president_name_ = new ::std::string;
  }
  president_name_->assign(value);
}
inline void struct_guild_list_item::set_president_name(const char* value, size_t size) {
  set_has_president_name();
  if (president_name_ == &::google::protobuf::internal::kEmptyString) {
    president_name_ = new ::std::string;
  }
  president_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* struct_guild_list_item::mutable_president_name() {
  set_has_president_name();
  if (president_name_ == &::google::protobuf::internal::kEmptyString) {
    president_name_ = new ::std::string;
  }
  return president_name_;
}
inline ::std::string* struct_guild_list_item::release_president_name() {
  clear_has_president_name();
  if (president_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = president_name_;
    president_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void struct_guild_list_item::set_allocated_president_name(::std::string* president_name) {
  if (president_name_ != &::google::protobuf::internal::kEmptyString) {
    delete president_name_;
  }
  if (president_name) {
    set_has_president_name();
    president_name_ = president_name;
  } else {
    clear_has_president_name();
    president_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 member_num = 7;
inline bool struct_guild_list_item::has_member_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void struct_guild_list_item::set_has_member_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void struct_guild_list_item::clear_has_member_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void struct_guild_list_item::clear_member_num() {
  member_num_ = 0u;
  clear_has_member_num();
}
inline ::google::protobuf::uint32 struct_guild_list_item::member_num() const {
  return member_num_;
}
inline void struct_guild_list_item::set_member_num(::google::protobuf::uint32 value) {
  set_has_member_num();
  member_num_ = value;
}

// -------------------------------------------------------------------

// struct_user_guild_info_struct_guild_member

// required uint32 user_id = 1;
inline bool struct_user_guild_info_struct_guild_member::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void struct_user_guild_info_struct_guild_member::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void struct_user_guild_info_struct_guild_member::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void struct_user_guild_info_struct_guild_member::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 struct_user_guild_info_struct_guild_member::user_id() const {
  return user_id_;
}
inline void struct_user_guild_info_struct_guild_member::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 position = 2;
inline bool struct_user_guild_info_struct_guild_member::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void struct_user_guild_info_struct_guild_member::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void struct_user_guild_info_struct_guild_member::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void struct_user_guild_info_struct_guild_member::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 struct_user_guild_info_struct_guild_member::position() const {
  return position_;
}
inline void struct_user_guild_info_struct_guild_member::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
}

// required uint32 contribution_point = 3;
inline bool struct_user_guild_info_struct_guild_member::has_contribution_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void struct_user_guild_info_struct_guild_member::set_has_contribution_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void struct_user_guild_info_struct_guild_member::clear_has_contribution_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void struct_user_guild_info_struct_guild_member::clear_contribution_point() {
  contribution_point_ = 0u;
  clear_has_contribution_point();
}
inline ::google::protobuf::uint32 struct_user_guild_info_struct_guild_member::contribution_point() const {
  return contribution_point_;
}
inline void struct_user_guild_info_struct_guild_member::set_contribution_point(::google::protobuf::uint32 value) {
  set_has_contribution_point();
  contribution_point_ = value;
}

// required string name = 4;
inline bool struct_user_guild_info_struct_guild_member::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void struct_user_guild_info_struct_guild_member::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void struct_user_guild_info_struct_guild_member::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void struct_user_guild_info_struct_guild_member::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& struct_user_guild_info_struct_guild_member::name() const {
  return *name_;
}
inline void struct_user_guild_info_struct_guild_member::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void struct_user_guild_info_struct_guild_member::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void struct_user_guild_info_struct_guild_member::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* struct_user_guild_info_struct_guild_member::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* struct_user_guild_info_struct_guild_member::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void struct_user_guild_info_struct_guild_member::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 head_id = 5;
inline bool struct_user_guild_info_struct_guild_member::has_head_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void struct_user_guild_info_struct_guild_member::set_has_head_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void struct_user_guild_info_struct_guild_member::clear_has_head_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void struct_user_guild_info_struct_guild_member::clear_head_id() {
  head_id_ = 0u;
  clear_has_head_id();
}
inline ::google::protobuf::uint32 struct_user_guild_info_struct_guild_member::head_id() const {
  return head_id_;
}
inline void struct_user_guild_info_struct_guild_member::set_head_id(::google::protobuf::uint32 value) {
  set_has_head_id();
  head_id_ = value;
}

// required uint32 head_frame_id = 6;
inline bool struct_user_guild_info_struct_guild_member::has_head_frame_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void struct_user_guild_info_struct_guild_member::set_has_head_frame_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void struct_user_guild_info_struct_guild_member::clear_has_head_frame_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void struct_user_guild_info_struct_guild_member::clear_head_frame_id() {
  head_frame_id_ = 0u;
  clear_has_head_frame_id();
}
inline ::google::protobuf::uint32 struct_user_guild_info_struct_guild_member::head_frame_id() const {
  return head_frame_id_;
}
inline void struct_user_guild_info_struct_guild_member::set_head_frame_id(::google::protobuf::uint32 value) {
  set_has_head_frame_id();
  head_frame_id_ = value;
}

// required uint32 last_online_time = 7;
inline bool struct_user_guild_info_struct_guild_member::has_last_online_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void struct_user_guild_info_struct_guild_member::set_has_last_online_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void struct_user_guild_info_struct_guild_member::clear_has_last_online_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void struct_user_guild_info_struct_guild_member::clear_last_online_time() {
  last_online_time_ = 0u;
  clear_has_last_online_time();
}
inline ::google::protobuf::uint32 struct_user_guild_info_struct_guild_member::last_online_time() const {
  return last_online_time_;
}
inline void struct_user_guild_info_struct_guild_member::set_last_online_time(::google::protobuf::uint32 value) {
  set_has_last_online_time();
  last_online_time_ = value;
}

// -------------------------------------------------------------------

// struct_user_guild_info

// required .e_guild_position position = 1;
inline bool struct_user_guild_info::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void struct_user_guild_info::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void struct_user_guild_info::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void struct_user_guild_info::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::e_guild_position struct_user_guild_info::position() const {
  return static_cast< ::e_guild_position >(position_);
}
inline void struct_user_guild_info::set_position(::e_guild_position value) {
  assert(::e_guild_position_IsValid(value));
  set_has_position();
  position_ = value;
}

// required uint32 leave_time = 2;
inline bool struct_user_guild_info::has_leave_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void struct_user_guild_info::set_has_leave_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void struct_user_guild_info::clear_has_leave_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void struct_user_guild_info::clear_leave_time() {
  leave_time_ = 0u;
  clear_has_leave_time();
}
inline ::google::protobuf::uint32 struct_user_guild_info::leave_time() const {
  return leave_time_;
}
inline void struct_user_guild_info::set_leave_time(::google::protobuf::uint32 value) {
  set_has_leave_time();
  leave_time_ = value;
}

// required uint32 my_coin = 3;
inline bool struct_user_guild_info::has_my_coin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void struct_user_guild_info::set_has_my_coin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void struct_user_guild_info::clear_has_my_coin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void struct_user_guild_info::clear_my_coin() {
  my_coin_ = 0u;
  clear_has_my_coin();
}
inline ::google::protobuf::uint32 struct_user_guild_info::my_coin() const {
  return my_coin_;
}
inline void struct_user_guild_info::set_my_coin(::google::protobuf::uint32 value) {
  set_has_my_coin();
  my_coin_ = value;
}

// optional uint32 my_contribution_point = 4;
inline bool struct_user_guild_info::has_my_contribution_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void struct_user_guild_info::set_has_my_contribution_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void struct_user_guild_info::clear_has_my_contribution_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void struct_user_guild_info::clear_my_contribution_point() {
  my_contribution_point_ = 0u;
  clear_has_my_contribution_point();
}
inline ::google::protobuf::uint32 struct_user_guild_info::my_contribution_point() const {
  return my_contribution_point_;
}
inline void struct_user_guild_info::set_my_contribution_point(::google::protobuf::uint32 value) {
  set_has_my_contribution_point();
  my_contribution_point_ = value;
}

// optional uint32 guild_id = 5;
inline bool struct_user_guild_info::has_guild_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void struct_user_guild_info::set_has_guild_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void struct_user_guild_info::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void struct_user_guild_info::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 struct_user_guild_info::guild_id() const {
  return guild_id_;
}
inline void struct_user_guild_info::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional string name = 6;
inline bool struct_user_guild_info::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void struct_user_guild_info::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void struct_user_guild_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void struct_user_guild_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& struct_user_guild_info::name() const {
  return *name_;
}
inline void struct_user_guild_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void struct_user_guild_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void struct_user_guild_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* struct_user_guild_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* struct_user_guild_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void struct_user_guild_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 president_user_id = 7;
inline bool struct_user_guild_info::has_president_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void struct_user_guild_info::set_has_president_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void struct_user_guild_info::clear_has_president_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void struct_user_guild_info::clear_president_user_id() {
  president_user_id_ = 0u;
  clear_has_president_user_id();
}
inline ::google::protobuf::uint32 struct_user_guild_info::president_user_id() const {
  return president_user_id_;
}
inline void struct_user_guild_info::set_president_user_id(::google::protobuf::uint32 value) {
  set_has_president_user_id();
  president_user_id_ = value;
}

// optional .e_apply_switch_status status = 8;
inline bool struct_user_guild_info::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void struct_user_guild_info::set_has_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void struct_user_guild_info::clear_has_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void struct_user_guild_info::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::e_apply_switch_status struct_user_guild_info::status() const {
  return static_cast< ::e_apply_switch_status >(status_);
}
inline void struct_user_guild_info::set_status(::e_apply_switch_status value) {
  assert(::e_apply_switch_status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint32 flag = 9;
inline bool struct_user_guild_info::has_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void struct_user_guild_info::set_has_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void struct_user_guild_info::clear_has_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void struct_user_guild_info::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 struct_user_guild_info::flag() const {
  return flag_;
}
inline void struct_user_guild_info::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// optional uint32 contribution_point = 11;
inline bool struct_user_guild_info::has_contribution_point() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void struct_user_guild_info::set_has_contribution_point() {
  _has_bits_[0] |= 0x00000200u;
}
inline void struct_user_guild_info::clear_has_contribution_point() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void struct_user_guild_info::clear_contribution_point() {
  contribution_point_ = 0u;
  clear_has_contribution_point();
}
inline ::google::protobuf::uint32 struct_user_guild_info::contribution_point() const {
  return contribution_point_;
}
inline void struct_user_guild_info::set_contribution_point(::google::protobuf::uint32 value) {
  set_has_contribution_point();
  contribution_point_ = value;
}

// optional uint32 coin = 12;
inline bool struct_user_guild_info::has_coin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void struct_user_guild_info::set_has_coin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void struct_user_guild_info::clear_has_coin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void struct_user_guild_info::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 struct_user_guild_info::coin() const {
  return coin_;
}
inline void struct_user_guild_info::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// optional string announcement = 13;
inline bool struct_user_guild_info::has_announcement() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void struct_user_guild_info::set_has_announcement() {
  _has_bits_[0] |= 0x00000800u;
}
inline void struct_user_guild_info::clear_has_announcement() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void struct_user_guild_info::clear_announcement() {
  if (announcement_ != &::google::protobuf::internal::kEmptyString) {
    announcement_->clear();
  }
  clear_has_announcement();
}
inline const ::std::string& struct_user_guild_info::announcement() const {
  return *announcement_;
}
inline void struct_user_guild_info::set_announcement(const ::std::string& value) {
  set_has_announcement();
  if (announcement_ == &::google::protobuf::internal::kEmptyString) {
    announcement_ = new ::std::string;
  }
  announcement_->assign(value);
}
inline void struct_user_guild_info::set_announcement(const char* value) {
  set_has_announcement();
  if (announcement_ == &::google::protobuf::internal::kEmptyString) {
    announcement_ = new ::std::string;
  }
  announcement_->assign(value);
}
inline void struct_user_guild_info::set_announcement(const char* value, size_t size) {
  set_has_announcement();
  if (announcement_ == &::google::protobuf::internal::kEmptyString) {
    announcement_ = new ::std::string;
  }
  announcement_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* struct_user_guild_info::mutable_announcement() {
  set_has_announcement();
  if (announcement_ == &::google::protobuf::internal::kEmptyString) {
    announcement_ = new ::std::string;
  }
  return announcement_;
}
inline ::std::string* struct_user_guild_info::release_announcement() {
  clear_has_announcement();
  if (announcement_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = announcement_;
    announcement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void struct_user_guild_info::set_allocated_announcement(::std::string* announcement) {
  if (announcement_ != &::google::protobuf::internal::kEmptyString) {
    delete announcement_;
  }
  if (announcement) {
    set_has_announcement();
    announcement_ = announcement;
  } else {
    clear_has_announcement();
    announcement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .struct_user_guild_info.struct_guild_member members = 14;
inline int struct_user_guild_info::members_size() const {
  return members_.size();
}
inline void struct_user_guild_info::clear_members() {
  members_.Clear();
}
inline const ::struct_user_guild_info_struct_guild_member& struct_user_guild_info::members(int index) const {
  return members_.Get(index);
}
inline ::struct_user_guild_info_struct_guild_member* struct_user_guild_info::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::struct_user_guild_info_struct_guild_member* struct_user_guild_info::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_user_guild_info_struct_guild_member >&
struct_user_guild_info::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_user_guild_info_struct_guild_member >*
struct_user_guild_info::mutable_members() {
  return &members_;
}

// optional uint32 max_boss_position = 15;
inline bool struct_user_guild_info::has_max_boss_position() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void struct_user_guild_info::set_has_max_boss_position() {
  _has_bits_[0] |= 0x00002000u;
}
inline void struct_user_guild_info::clear_has_max_boss_position() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void struct_user_guild_info::clear_max_boss_position() {
  max_boss_position_ = 0u;
  clear_has_max_boss_position();
}
inline ::google::protobuf::uint32 struct_user_guild_info::max_boss_position() const {
  return max_boss_position_;
}
inline void struct_user_guild_info::set_max_boss_position(::google::protobuf::uint32 value) {
  set_has_max_boss_position();
  max_boss_position_ = value;
}

// -------------------------------------------------------------------

// struct_guild_boss

// required uint32 position = 1;
inline bool struct_guild_boss::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void struct_guild_boss::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void struct_guild_boss::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void struct_guild_boss::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 struct_guild_boss::position() const {
  return position_;
}
inline void struct_guild_boss::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
}

// required uint32 lose_hp = 3;
inline bool struct_guild_boss::has_lose_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void struct_guild_boss::set_has_lose_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void struct_guild_boss::clear_has_lose_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void struct_guild_boss::clear_lose_hp() {
  lose_hp_ = 0u;
  clear_has_lose_hp();
}
inline ::google::protobuf::uint32 struct_guild_boss::lose_hp() const {
  return lose_hp_;
}
inline void struct_guild_boss::set_lose_hp(::google::protobuf::uint32 value) {
  set_has_lose_hp();
  lose_hp_ = value;
}

// required uint32 killed_num = 4;
inline bool struct_guild_boss::has_killed_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void struct_guild_boss::set_has_killed_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void struct_guild_boss::clear_has_killed_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void struct_guild_boss::clear_killed_num() {
  killed_num_ = 0u;
  clear_has_killed_num();
}
inline ::google::protobuf::uint32 struct_guild_boss::killed_num() const {
  return killed_num_;
}
inline void struct_guild_boss::set_killed_num(::google::protobuf::uint32 value) {
  set_has_killed_num();
  killed_num_ = value;
}

// optional uint32 killer_user_id = 5;
inline bool struct_guild_boss::has_killer_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void struct_guild_boss::set_has_killer_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void struct_guild_boss::clear_has_killer_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void struct_guild_boss::clear_killer_user_id() {
  killer_user_id_ = 0u;
  clear_has_killer_user_id();
}
inline ::google::protobuf::uint32 struct_guild_boss::killer_user_id() const {
  return killer_user_id_;
}
inline void struct_guild_boss::set_killer_user_id(::google::protobuf::uint32 value) {
  set_has_killer_user_id();
  killer_user_id_ = value;
}

// optional string killer_name = 6;
inline bool struct_guild_boss::has_killer_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void struct_guild_boss::set_has_killer_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void struct_guild_boss::clear_has_killer_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void struct_guild_boss::clear_killer_name() {
  if (killer_name_ != &::google::protobuf::internal::kEmptyString) {
    killer_name_->clear();
  }
  clear_has_killer_name();
}
inline const ::std::string& struct_guild_boss::killer_name() const {
  return *killer_name_;
}
inline void struct_guild_boss::set_killer_name(const ::std::string& value) {
  set_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    killer_name_ = new ::std::string;
  }
  killer_name_->assign(value);
}
inline void struct_guild_boss::set_killer_name(const char* value) {
  set_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    killer_name_ = new ::std::string;
  }
  killer_name_->assign(value);
}
inline void struct_guild_boss::set_killer_name(const char* value, size_t size) {
  set_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    killer_name_ = new ::std::string;
  }
  killer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* struct_guild_boss::mutable_killer_name() {
  set_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    killer_name_ = new ::std::string;
  }
  return killer_name_;
}
inline ::std::string* struct_guild_boss::release_killer_name() {
  clear_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = killer_name_;
    killer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void struct_guild_boss::set_allocated_killer_name(::std::string* killer_name) {
  if (killer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete killer_name_;
  }
  if (killer_name) {
    set_has_killer_name();
    killer_name_ = killer_name;
  } else {
    clear_has_killer_name();
    killer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 killer_head_id = 7;
inline bool struct_guild_boss::has_killer_head_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void struct_guild_boss::set_has_killer_head_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void struct_guild_boss::clear_has_killer_head_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void struct_guild_boss::clear_killer_head_id() {
  killer_head_id_ = 0u;
  clear_has_killer_head_id();
}
inline ::google::protobuf::uint32 struct_guild_boss::killer_head_id() const {
  return killer_head_id_;
}
inline void struct_guild_boss::set_killer_head_id(::google::protobuf::uint32 value) {
  set_has_killer_head_id();
  killer_head_id_ = value;
}

// optional uint32 killer_head_frame_id = 8;
inline bool struct_guild_boss::has_killer_head_frame_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void struct_guild_boss::set_has_killer_head_frame_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void struct_guild_boss::clear_has_killer_head_frame_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void struct_guild_boss::clear_killer_head_frame_id() {
  killer_head_frame_id_ = 0u;
  clear_has_killer_head_frame_id();
}
inline ::google::protobuf::uint32 struct_guild_boss::killer_head_frame_id() const {
  return killer_head_frame_id_;
}
inline void struct_guild_boss::set_killer_head_frame_id(::google::protobuf::uint32 value) {
  set_has_killer_head_frame_id();
  killer_head_frame_id_ = value;
}

// -------------------------------------------------------------------

// struct_guild_boss_attacker_dead_hero

// required uint32 hero_id = 3;
inline bool struct_guild_boss_attacker_dead_hero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void struct_guild_boss_attacker_dead_hero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void struct_guild_boss_attacker_dead_hero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void struct_guild_boss_attacker_dead_hero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 struct_guild_boss_attacker_dead_hero::hero_id() const {
  return hero_id_;
}
inline void struct_guild_boss_attacker_dead_hero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required uint32 dead_time = 4;
inline bool struct_guild_boss_attacker_dead_hero::has_dead_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void struct_guild_boss_attacker_dead_hero::set_has_dead_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void struct_guild_boss_attacker_dead_hero::clear_has_dead_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void struct_guild_boss_attacker_dead_hero::clear_dead_time() {
  dead_time_ = 0u;
  clear_has_dead_time();
}
inline ::google::protobuf::uint32 struct_guild_boss_attacker_dead_hero::dead_time() const {
  return dead_time_;
}
inline void struct_guild_boss_attacker_dead_hero::set_dead_time(::google::protobuf::uint32 value) {
  set_has_dead_time();
  dead_time_ = value;
}

// -------------------------------------------------------------------

// c_gs_guild_new_req

// required string name = 1;
inline bool c_gs_guild_new_req::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_guild_new_req::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_guild_new_req::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_guild_new_req::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& c_gs_guild_new_req::name() const {
  return *name_;
}
inline void c_gs_guild_new_req::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void c_gs_guild_new_req::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void c_gs_guild_new_req::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* c_gs_guild_new_req::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* c_gs_guild_new_req::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void c_gs_guild_new_req::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 flag = 2;
inline bool c_gs_guild_new_req::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_guild_new_req::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_guild_new_req::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_guild_new_req::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 c_gs_guild_new_req::flag() const {
  return flag_;
}
inline void c_gs_guild_new_req::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_new_res

// required int32 error_code = 1;
inline bool gs_c_guild_new_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_new_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_new_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_new_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_new_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_new_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_game_element consume = 2;
inline int gs_c_guild_new_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_guild_new_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_guild_new_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_guild_new_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_guild_new_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_guild_new_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_guild_new_res::mutable_consume() {
  return &consume_;
}

// -------------------------------------------------------------------

// c_gs_guild_edit_req

// required string name = 1;
inline bool c_gs_guild_edit_req::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_guild_edit_req::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_guild_edit_req::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_guild_edit_req::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& c_gs_guild_edit_req::name() const {
  return *name_;
}
inline void c_gs_guild_edit_req::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void c_gs_guild_edit_req::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void c_gs_guild_edit_req::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* c_gs_guild_edit_req::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* c_gs_guild_edit_req::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void c_gs_guild_edit_req::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 president_user_id = 4;
inline bool c_gs_guild_edit_req::has_president_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_guild_edit_req::set_has_president_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_guild_edit_req::clear_has_president_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_guild_edit_req::clear_president_user_id() {
  president_user_id_ = 0u;
  clear_has_president_user_id();
}
inline ::google::protobuf::uint32 c_gs_guild_edit_req::president_user_id() const {
  return president_user_id_;
}
inline void c_gs_guild_edit_req::set_president_user_id(::google::protobuf::uint32 value) {
  set_has_president_user_id();
  president_user_id_ = value;
}

// required .e_apply_switch_status status = 5;
inline bool c_gs_guild_edit_req::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void c_gs_guild_edit_req::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void c_gs_guild_edit_req::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void c_gs_guild_edit_req::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::e_apply_switch_status c_gs_guild_edit_req::status() const {
  return static_cast< ::e_apply_switch_status >(status_);
}
inline void c_gs_guild_edit_req::set_status(::e_apply_switch_status value) {
  assert(::e_apply_switch_status_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint32 flag = 6;
inline bool c_gs_guild_edit_req::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void c_gs_guild_edit_req::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void c_gs_guild_edit_req::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void c_gs_guild_edit_req::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 c_gs_guild_edit_req::flag() const {
  return flag_;
}
inline void c_gs_guild_edit_req::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// required string announcement = 10;
inline bool c_gs_guild_edit_req::has_announcement() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void c_gs_guild_edit_req::set_has_announcement() {
  _has_bits_[0] |= 0x00000010u;
}
inline void c_gs_guild_edit_req::clear_has_announcement() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void c_gs_guild_edit_req::clear_announcement() {
  if (announcement_ != &::google::protobuf::internal::kEmptyString) {
    announcement_->clear();
  }
  clear_has_announcement();
}
inline const ::std::string& c_gs_guild_edit_req::announcement() const {
  return *announcement_;
}
inline void c_gs_guild_edit_req::set_announcement(const ::std::string& value) {
  set_has_announcement();
  if (announcement_ == &::google::protobuf::internal::kEmptyString) {
    announcement_ = new ::std::string;
  }
  announcement_->assign(value);
}
inline void c_gs_guild_edit_req::set_announcement(const char* value) {
  set_has_announcement();
  if (announcement_ == &::google::protobuf::internal::kEmptyString) {
    announcement_ = new ::std::string;
  }
  announcement_->assign(value);
}
inline void c_gs_guild_edit_req::set_announcement(const char* value, size_t size) {
  set_has_announcement();
  if (announcement_ == &::google::protobuf::internal::kEmptyString) {
    announcement_ = new ::std::string;
  }
  announcement_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* c_gs_guild_edit_req::mutable_announcement() {
  set_has_announcement();
  if (announcement_ == &::google::protobuf::internal::kEmptyString) {
    announcement_ = new ::std::string;
  }
  return announcement_;
}
inline ::std::string* c_gs_guild_edit_req::release_announcement() {
  clear_has_announcement();
  if (announcement_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = announcement_;
    announcement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void c_gs_guild_edit_req::set_allocated_announcement(::std::string* announcement) {
  if (announcement_ != &::google::protobuf::internal::kEmptyString) {
    delete announcement_;
  }
  if (announcement) {
    set_has_announcement();
    announcement_ = announcement;
  } else {
    clear_has_announcement();
    announcement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gs_c_guild_edit_res

// required int32 error_code = 1;
inline bool gs_c_guild_edit_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_edit_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_edit_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_edit_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_edit_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_edit_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// c_gs_guild_delete_req

// -------------------------------------------------------------------

// gs_c_guild_delete_res

// required int32 error_code = 1;
inline bool gs_c_guild_delete_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_delete_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_delete_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_delete_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_delete_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_delete_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_quit_ntf

// -------------------------------------------------------------------

// gs_c_guild_join_ntf

// -------------------------------------------------------------------

// c_gs_guild_apply_list_req

// required .c_gs_guild_apply_list_req.e_show_for who = 1;
inline bool c_gs_guild_apply_list_req::has_who() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_guild_apply_list_req::set_has_who() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_guild_apply_list_req::clear_has_who() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_guild_apply_list_req::clear_who() {
  who_ = 1;
  clear_has_who();
}
inline ::c_gs_guild_apply_list_req_e_show_for c_gs_guild_apply_list_req::who() const {
  return static_cast< ::c_gs_guild_apply_list_req_e_show_for >(who_);
}
inline void c_gs_guild_apply_list_req::set_who(::c_gs_guild_apply_list_req_e_show_for value) {
  assert(::c_gs_guild_apply_list_req_e_show_for_IsValid(value));
  set_has_who();
  who_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_apply_list_res_struct_apply_for_outsider

// required uint32 user_id = 2;
inline bool gs_c_guild_apply_list_res_struct_apply_for_outsider::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 gs_c_guild_apply_list_res_struct_apply_for_outsider::user_id() const {
  return user_id_;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required uint32 time = 3;
inline bool gs_c_guild_apply_list_res_struct_apply_for_outsider::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 gs_c_guild_apply_list_res_struct_apply_for_outsider::time() const {
  return time_;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required string name = 5;
inline bool gs_c_guild_apply_list_res_struct_apply_for_outsider::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& gs_c_guild_apply_list_res_struct_apply_for_outsider::name() const {
  return *name_;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_guild_apply_list_res_struct_apply_for_outsider::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* gs_c_guild_apply_list_res_struct_apply_for_outsider::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 level = 6;
inline bool gs_c_guild_apply_list_res_struct_apply_for_outsider::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 gs_c_guild_apply_list_res_struct_apply_for_outsider::level() const {
  return level_;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 fight_power = 7;
inline bool gs_c_guild_apply_list_res_struct_apply_for_outsider::has_fight_power() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_has_fight_power() {
  _has_bits_[0] |= 0x00000010u;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::clear_fight_power() {
  fight_power_ = 0u;
  clear_has_fight_power();
}
inline ::google::protobuf::uint32 gs_c_guild_apply_list_res_struct_apply_for_outsider::fight_power() const {
  return fight_power_;
}
inline void gs_c_guild_apply_list_res_struct_apply_for_outsider::set_fight_power(::google::protobuf::uint32 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_apply_list_res

// required int32 error_code = 1;
inline bool gs_c_guild_apply_list_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_apply_list_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_apply_list_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_apply_list_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_apply_list_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_apply_list_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .gs_c_guild_apply_list_res.struct_apply_for_outsider applys_for_manager = 2;
inline int gs_c_guild_apply_list_res::applys_for_manager_size() const {
  return applys_for_manager_.size();
}
inline void gs_c_guild_apply_list_res::clear_applys_for_manager() {
  applys_for_manager_.Clear();
}
inline const ::gs_c_guild_apply_list_res_struct_apply_for_outsider& gs_c_guild_apply_list_res::applys_for_manager(int index) const {
  return applys_for_manager_.Get(index);
}
inline ::gs_c_guild_apply_list_res_struct_apply_for_outsider* gs_c_guild_apply_list_res::mutable_applys_for_manager(int index) {
  return applys_for_manager_.Mutable(index);
}
inline ::gs_c_guild_apply_list_res_struct_apply_for_outsider* gs_c_guild_apply_list_res::add_applys_for_manager() {
  return applys_for_manager_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gs_c_guild_apply_list_res_struct_apply_for_outsider >&
gs_c_guild_apply_list_res::applys_for_manager() const {
  return applys_for_manager_;
}
inline ::google::protobuf::RepeatedPtrField< ::gs_c_guild_apply_list_res_struct_apply_for_outsider >*
gs_c_guild_apply_list_res::mutable_applys_for_manager() {
  return &applys_for_manager_;
}

// repeated .struct_guild_list_item applys_for_outsider = 3;
inline int gs_c_guild_apply_list_res::applys_for_outsider_size() const {
  return applys_for_outsider_.size();
}
inline void gs_c_guild_apply_list_res::clear_applys_for_outsider() {
  applys_for_outsider_.Clear();
}
inline const ::struct_guild_list_item& gs_c_guild_apply_list_res::applys_for_outsider(int index) const {
  return applys_for_outsider_.Get(index);
}
inline ::struct_guild_list_item* gs_c_guild_apply_list_res::mutable_applys_for_outsider(int index) {
  return applys_for_outsider_.Mutable(index);
}
inline ::struct_guild_list_item* gs_c_guild_apply_list_res::add_applys_for_outsider() {
  return applys_for_outsider_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item >&
gs_c_guild_apply_list_res::applys_for_outsider() const {
  return applys_for_outsider_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item >*
gs_c_guild_apply_list_res::mutable_applys_for_outsider() {
  return &applys_for_outsider_;
}

// -------------------------------------------------------------------

// c_gs_guild_apply_op_req

// required .c_gs_guild_apply_op_req.e_op_type op_type = 1;
inline bool c_gs_guild_apply_op_req::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_guild_apply_op_req::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_guild_apply_op_req::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_guild_apply_op_req::clear_op_type() {
  op_type_ = 1;
  clear_has_op_type();
}
inline ::c_gs_guild_apply_op_req_e_op_type c_gs_guild_apply_op_req::op_type() const {
  return static_cast< ::c_gs_guild_apply_op_req_e_op_type >(op_type_);
}
inline void c_gs_guild_apply_op_req::set_op_type(::c_gs_guild_apply_op_req_e_op_type value) {
  assert(::c_gs_guild_apply_op_req_e_op_type_IsValid(value));
  set_has_op_type();
  op_type_ = value;
}

// optional uint32 guild_id = 2;
inline bool c_gs_guild_apply_op_req::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_guild_apply_op_req::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_guild_apply_op_req::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_guild_apply_op_req::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 c_gs_guild_apply_op_req::guild_id() const {
  return guild_id_;
}
inline void c_gs_guild_apply_op_req::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional uint32 user_id = 3;
inline bool c_gs_guild_apply_op_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void c_gs_guild_apply_op_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void c_gs_guild_apply_op_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void c_gs_guild_apply_op_req::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 c_gs_guild_apply_op_req::user_id() const {
  return user_id_;
}
inline void c_gs_guild_apply_op_req::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_apply_op_res

// required int32 error_code = 1;
inline bool gs_c_guild_apply_op_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_apply_op_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_apply_op_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_apply_op_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_apply_op_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_apply_op_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// c_gs_guild_member_op_req

// optional uint32 user_id = 1;
inline bool c_gs_guild_member_op_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_guild_member_op_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_guild_member_op_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_guild_member_op_req::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 c_gs_guild_member_op_req::user_id() const {
  return user_id_;
}
inline void c_gs_guild_member_op_req::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .e_guild_position new_position = 2;
inline bool c_gs_guild_member_op_req::has_new_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_guild_member_op_req::set_has_new_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_guild_member_op_req::clear_has_new_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_guild_member_op_req::clear_new_position() {
  new_position_ = 0;
  clear_has_new_position();
}
inline ::e_guild_position c_gs_guild_member_op_req::new_position() const {
  return static_cast< ::e_guild_position >(new_position_);
}
inline void c_gs_guild_member_op_req::set_new_position(::e_guild_position value) {
  assert(::e_guild_position_IsValid(value));
  set_has_new_position();
  new_position_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_member_op_res

// required int32 error_code = 1;
inline bool gs_c_guild_member_op_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_member_op_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_member_op_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_member_op_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_member_op_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_member_op_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// c_gs_guild_boss_refresh_req

// required uint32 position = 1;
inline bool c_gs_guild_boss_refresh_req::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_guild_boss_refresh_req::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_guild_boss_refresh_req::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_guild_boss_refresh_req::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 c_gs_guild_boss_refresh_req::position() const {
  return position_;
}
inline void c_gs_guild_boss_refresh_req::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_boss_refresh_res

// required int32 error_code = 1;
inline bool gs_c_guild_boss_refresh_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_boss_refresh_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_boss_refresh_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_boss_refresh_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_boss_refresh_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_boss_refresh_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_game_element consume = 2;
inline int gs_c_guild_boss_refresh_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_guild_boss_refresh_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_guild_boss_refresh_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_guild_boss_refresh_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_guild_boss_refresh_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_guild_boss_refresh_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_guild_boss_refresh_res::mutable_consume() {
  return &consume_;
}

// optional .struct_guild_boss boss = 3;
inline bool gs_c_guild_boss_refresh_res::has_boss() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_guild_boss_refresh_res::set_has_boss() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_guild_boss_refresh_res::clear_has_boss() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_guild_boss_refresh_res::clear_boss() {
  if (boss_ != NULL) boss_->::struct_guild_boss::Clear();
  clear_has_boss();
}
inline const ::struct_guild_boss& gs_c_guild_boss_refresh_res::boss() const {
  return boss_ != NULL ? *boss_ : *default_instance_->boss_;
}
inline ::struct_guild_boss* gs_c_guild_boss_refresh_res::mutable_boss() {
  set_has_boss();
  if (boss_ == NULL) boss_ = new ::struct_guild_boss;
  return boss_;
}
inline ::struct_guild_boss* gs_c_guild_boss_refresh_res::release_boss() {
  clear_has_boss();
  ::struct_guild_boss* temp = boss_;
  boss_ = NULL;
  return temp;
}
inline void gs_c_guild_boss_refresh_res::set_allocated_boss(::struct_guild_boss* boss) {
  delete boss_;
  boss_ = boss;
  if (boss) {
    set_has_boss();
  } else {
    clear_has_boss();
  }
}

// -------------------------------------------------------------------

// c_gs_guild_search_req

// optional string name = 1;
inline bool c_gs_guild_search_req::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_guild_search_req::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_guild_search_req::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_guild_search_req::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& c_gs_guild_search_req::name() const {
  return *name_;
}
inline void c_gs_guild_search_req::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void c_gs_guild_search_req::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void c_gs_guild_search_req::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* c_gs_guild_search_req::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* c_gs_guild_search_req::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void c_gs_guild_search_req::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 guild_id = 2;
inline bool c_gs_guild_search_req::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_guild_search_req::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_guild_search_req::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_guild_search_req::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 c_gs_guild_search_req::guild_id() const {
  return guild_id_;
}
inline void c_gs_guild_search_req::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_search_res

// required int32 error_code = 1;
inline bool gs_c_guild_search_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_search_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_search_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_search_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_search_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_search_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_guild_list_item guilds = 2;
inline int gs_c_guild_search_res::guilds_size() const {
  return guilds_.size();
}
inline void gs_c_guild_search_res::clear_guilds() {
  guilds_.Clear();
}
inline const ::struct_guild_list_item& gs_c_guild_search_res::guilds(int index) const {
  return guilds_.Get(index);
}
inline ::struct_guild_list_item* gs_c_guild_search_res::mutable_guilds(int index) {
  return guilds_.Mutable(index);
}
inline ::struct_guild_list_item* gs_c_guild_search_res::add_guilds() {
  return guilds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item >&
gs_c_guild_search_res::guilds() const {
  return guilds_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item >*
gs_c_guild_search_res::mutable_guilds() {
  return &guilds_;
}

// -------------------------------------------------------------------

// c_gs_guild_list_req

// required .c_gs_guild_list_req.e_list_type type = 1;
inline bool c_gs_guild_list_req::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_guild_list_req::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_guild_list_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_guild_list_req::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::c_gs_guild_list_req_e_list_type c_gs_guild_list_req::type() const {
  return static_cast< ::c_gs_guild_list_req_e_list_type >(type_);
}
inline void c_gs_guild_list_req::set_type(::c_gs_guild_list_req_e_list_type value) {
  assert(::c_gs_guild_list_req_e_list_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_list_res

// required int32 error_code = 1;
inline bool gs_c_guild_list_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_list_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_list_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_list_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_list_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_list_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_guild_list_item guilds = 2;
inline int gs_c_guild_list_res::guilds_size() const {
  return guilds_.size();
}
inline void gs_c_guild_list_res::clear_guilds() {
  guilds_.Clear();
}
inline const ::struct_guild_list_item& gs_c_guild_list_res::guilds(int index) const {
  return guilds_.Get(index);
}
inline ::struct_guild_list_item* gs_c_guild_list_res::mutable_guilds(int index) {
  return guilds_.Mutable(index);
}
inline ::struct_guild_list_item* gs_c_guild_list_res::add_guilds() {
  return guilds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item >&
gs_c_guild_list_res::guilds() const {
  return guilds_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_guild_list_item >*
gs_c_guild_list_res::mutable_guilds() {
  return &guilds_;
}

// -------------------------------------------------------------------

// c_gs_guild_info_req

// -------------------------------------------------------------------

// gs_c_guild_info_res

// required int32 error_code = 1;
inline bool gs_c_guild_info_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_info_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_info_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_info_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_info_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_info_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .struct_user_guild_info my_guild = 2;
inline bool gs_c_guild_info_res::has_my_guild() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_guild_info_res::set_has_my_guild() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_guild_info_res::clear_has_my_guild() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_guild_info_res::clear_my_guild() {
  if (my_guild_ != NULL) my_guild_->::struct_user_guild_info::Clear();
  clear_has_my_guild();
}
inline const ::struct_user_guild_info& gs_c_guild_info_res::my_guild() const {
  return my_guild_ != NULL ? *my_guild_ : *default_instance_->my_guild_;
}
inline ::struct_user_guild_info* gs_c_guild_info_res::mutable_my_guild() {
  set_has_my_guild();
  if (my_guild_ == NULL) my_guild_ = new ::struct_user_guild_info;
  return my_guild_;
}
inline ::struct_user_guild_info* gs_c_guild_info_res::release_my_guild() {
  clear_has_my_guild();
  ::struct_user_guild_info* temp = my_guild_;
  my_guild_ = NULL;
  return temp;
}
inline void gs_c_guild_info_res::set_allocated_my_guild(::struct_user_guild_info* my_guild) {
  delete my_guild_;
  my_guild_ = my_guild;
  if (my_guild) {
    set_has_my_guild();
  } else {
    clear_has_my_guild();
  }
}

// -------------------------------------------------------------------

// c_gs_guild_boss_list_req

// -------------------------------------------------------------------

// gs_c_guild_boss_list_res

// required int32 error_code = 1;
inline bool gs_c_guild_boss_list_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_boss_list_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_boss_list_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_boss_list_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_boss_list_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_boss_list_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .struct_guild_boss bosses = 2;
inline int gs_c_guild_boss_list_res::bosses_size() const {
  return bosses_.size();
}
inline void gs_c_guild_boss_list_res::clear_bosses() {
  bosses_.Clear();
}
inline const ::struct_guild_boss& gs_c_guild_boss_list_res::bosses(int index) const {
  return bosses_.Get(index);
}
inline ::struct_guild_boss* gs_c_guild_boss_list_res::mutable_bosses(int index) {
  return bosses_.Mutable(index);
}
inline ::struct_guild_boss* gs_c_guild_boss_list_res::add_bosses() {
  return bosses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_guild_boss >&
gs_c_guild_boss_list_res::bosses() const {
  return bosses_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_guild_boss >*
gs_c_guild_boss_list_res::mutable_bosses() {
  return &bosses_;
}

// -------------------------------------------------------------------

// c_gs_guild_boss_info_req

// required uint32 position = 1;
inline bool c_gs_guild_boss_info_req::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_guild_boss_info_req::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_guild_boss_info_req::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_guild_boss_info_req::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 c_gs_guild_boss_info_req::position() const {
  return position_;
}
inline void c_gs_guild_boss_info_req::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_boss_info_res

// required int32 error_code = 1;
inline bool gs_c_guild_boss_info_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_boss_info_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_boss_info_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_boss_info_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_boss_info_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_boss_info_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional .struct_guild_boss boss = 2;
inline bool gs_c_guild_boss_info_res::has_boss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_guild_boss_info_res::set_has_boss() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_guild_boss_info_res::clear_has_boss() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_guild_boss_info_res::clear_boss() {
  if (boss_ != NULL) boss_->::struct_guild_boss::Clear();
  clear_has_boss();
}
inline const ::struct_guild_boss& gs_c_guild_boss_info_res::boss() const {
  return boss_ != NULL ? *boss_ : *default_instance_->boss_;
}
inline ::struct_guild_boss* gs_c_guild_boss_info_res::mutable_boss() {
  set_has_boss();
  if (boss_ == NULL) boss_ = new ::struct_guild_boss;
  return boss_;
}
inline ::struct_guild_boss* gs_c_guild_boss_info_res::release_boss() {
  clear_has_boss();
  ::struct_guild_boss* temp = boss_;
  boss_ = NULL;
  return temp;
}
inline void gs_c_guild_boss_info_res::set_allocated_boss(::struct_guild_boss* boss) {
  delete boss_;
  boss_ = boss;
  if (boss) {
    set_has_boss();
  } else {
    clear_has_boss();
  }
}

// optional uint32 last_reset_time = 3;
inline bool gs_c_guild_boss_info_res::has_last_reset_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_guild_boss_info_res::set_has_last_reset_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_guild_boss_info_res::clear_has_last_reset_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_guild_boss_info_res::clear_last_reset_time() {
  last_reset_time_ = 0u;
  clear_has_last_reset_time();
}
inline ::google::protobuf::uint32 gs_c_guild_boss_info_res::last_reset_time() const {
  return last_reset_time_;
}
inline void gs_c_guild_boss_info_res::set_last_reset_time(::google::protobuf::uint32 value) {
  set_has_last_reset_time();
  last_reset_time_ = value;
}

// optional uint32 last_day_reset_num = 4;
inline bool gs_c_guild_boss_info_res::has_last_day_reset_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_guild_boss_info_res::set_has_last_day_reset_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_guild_boss_info_res::clear_has_last_day_reset_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_guild_boss_info_res::clear_last_day_reset_num() {
  last_day_reset_num_ = 0u;
  clear_has_last_day_reset_num();
}
inline ::google::protobuf::uint32 gs_c_guild_boss_info_res::last_day_reset_num() const {
  return last_day_reset_num_;
}
inline void gs_c_guild_boss_info_res::set_last_day_reset_num(::google::protobuf::uint32 value) {
  set_has_last_day_reset_num();
  last_day_reset_num_ = value;
}

// repeated .struct_guild_boss_attacker_dead_hero dead_heros = 5;
inline int gs_c_guild_boss_info_res::dead_heros_size() const {
  return dead_heros_.size();
}
inline void gs_c_guild_boss_info_res::clear_dead_heros() {
  dead_heros_.Clear();
}
inline const ::struct_guild_boss_attacker_dead_hero& gs_c_guild_boss_info_res::dead_heros(int index) const {
  return dead_heros_.Get(index);
}
inline ::struct_guild_boss_attacker_dead_hero* gs_c_guild_boss_info_res::mutable_dead_heros(int index) {
  return dead_heros_.Mutable(index);
}
inline ::struct_guild_boss_attacker_dead_hero* gs_c_guild_boss_info_res::add_dead_heros() {
  return dead_heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_guild_boss_attacker_dead_hero >&
gs_c_guild_boss_info_res::dead_heros() const {
  return dead_heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_guild_boss_attacker_dead_hero >*
gs_c_guild_boss_info_res::mutable_dead_heros() {
  return &dead_heros_;
}

// -------------------------------------------------------------------

// c_gs_guild_boss_attack_req

// required uint32 boss_position = 1;
inline bool c_gs_guild_boss_attack_req::has_boss_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_guild_boss_attack_req::set_has_boss_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_guild_boss_attack_req::clear_has_boss_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_guild_boss_attack_req::clear_boss_position() {
  boss_position_ = 0u;
  clear_has_boss_position();
}
inline ::google::protobuf::uint32 c_gs_guild_boss_attack_req::boss_position() const {
  return boss_position_;
}
inline void c_gs_guild_boss_attack_req::set_boss_position(::google::protobuf::uint32 value) {
  set_has_boss_position();
  boss_position_ = value;
}

// required uint32 lose_hp = 2;
inline bool c_gs_guild_boss_attack_req::has_lose_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void c_gs_guild_boss_attack_req::set_has_lose_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void c_gs_guild_boss_attack_req::clear_has_lose_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void c_gs_guild_boss_attack_req::clear_lose_hp() {
  lose_hp_ = 0u;
  clear_has_lose_hp();
}
inline ::google::protobuf::uint32 c_gs_guild_boss_attack_req::lose_hp() const {
  return lose_hp_;
}
inline void c_gs_guild_boss_attack_req::set_lose_hp(::google::protobuf::uint32 value) {
  set_has_lose_hp();
  lose_hp_ = value;
}

// repeated uint32 dead_heros = 3;
inline int c_gs_guild_boss_attack_req::dead_heros_size() const {
  return dead_heros_.size();
}
inline void c_gs_guild_boss_attack_req::clear_dead_heros() {
  dead_heros_.Clear();
}
inline ::google::protobuf::uint32 c_gs_guild_boss_attack_req::dead_heros(int index) const {
  return dead_heros_.Get(index);
}
inline void c_gs_guild_boss_attack_req::set_dead_heros(int index, ::google::protobuf::uint32 value) {
  dead_heros_.Set(index, value);
}
inline void c_gs_guild_boss_attack_req::add_dead_heros(::google::protobuf::uint32 value) {
  dead_heros_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
c_gs_guild_boss_attack_req::dead_heros() const {
  return dead_heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
c_gs_guild_boss_attack_req::mutable_dead_heros() {
  return &dead_heros_;
}

// -------------------------------------------------------------------

// gs_c_guild_boss_attack_res

// required int32 error_code = 1;
inline bool gs_c_guild_boss_attack_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_boss_attack_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_boss_attack_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_boss_attack_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_boss_attack_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_boss_attack_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 is_killer = 2;
inline bool gs_c_guild_boss_attack_res::has_is_killer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_guild_boss_attack_res::set_has_is_killer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_guild_boss_attack_res::clear_has_is_killer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_guild_boss_attack_res::clear_is_killer() {
  is_killer_ = 0u;
  clear_has_is_killer();
}
inline ::google::protobuf::uint32 gs_c_guild_boss_attack_res::is_killer() const {
  return is_killer_;
}
inline void gs_c_guild_boss_attack_res::set_is_killer(::google::protobuf::uint32 value) {
  set_has_is_killer();
  is_killer_ = value;
}

// repeated .struct_game_element consume = 4;
inline int gs_c_guild_boss_attack_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_guild_boss_attack_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_guild_boss_attack_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_guild_boss_attack_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_guild_boss_attack_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_guild_boss_attack_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_guild_boss_attack_res::mutable_consume() {
  return &consume_;
}

// repeated .struct_game_element output = 5;
inline int gs_c_guild_boss_attack_res::output_size() const {
  return output_.size();
}
inline void gs_c_guild_boss_attack_res::clear_output() {
  output_.Clear();
}
inline const ::struct_game_element& gs_c_guild_boss_attack_res::output(int index) const {
  return output_.Get(index);
}
inline ::struct_game_element* gs_c_guild_boss_attack_res::mutable_output(int index) {
  return output_.Mutable(index);
}
inline ::struct_game_element* gs_c_guild_boss_attack_res::add_output() {
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_guild_boss_attack_res::output() const {
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_guild_boss_attack_res::mutable_output() {
  return &output_;
}

// -------------------------------------------------------------------

// c_gs_guild_boss_dead_hero_reset_req

// required uint32 boss_position = 1;
inline bool c_gs_guild_boss_dead_hero_reset_req::has_boss_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_guild_boss_dead_hero_reset_req::set_has_boss_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_guild_boss_dead_hero_reset_req::clear_has_boss_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_guild_boss_dead_hero_reset_req::clear_boss_position() {
  boss_position_ = 0u;
  clear_has_boss_position();
}
inline ::google::protobuf::uint32 c_gs_guild_boss_dead_hero_reset_req::boss_position() const {
  return boss_position_;
}
inline void c_gs_guild_boss_dead_hero_reset_req::set_boss_position(::google::protobuf::uint32 value) {
  set_has_boss_position();
  boss_position_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_boss_dead_hero_reset_res

// required int32 error_code = 1;
inline bool gs_c_guild_boss_dead_hero_reset_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_boss_dead_hero_reset_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_boss_dead_hero_reset_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_boss_dead_hero_reset_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_boss_dead_hero_reset_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_boss_dead_hero_reset_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 boss_position = 2;
inline bool gs_c_guild_boss_dead_hero_reset_res::has_boss_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_guild_boss_dead_hero_reset_res::set_has_boss_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_guild_boss_dead_hero_reset_res::clear_has_boss_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_guild_boss_dead_hero_reset_res::clear_boss_position() {
  boss_position_ = 0u;
  clear_has_boss_position();
}
inline ::google::protobuf::uint32 gs_c_guild_boss_dead_hero_reset_res::boss_position() const {
  return boss_position_;
}
inline void gs_c_guild_boss_dead_hero_reset_res::set_boss_position(::google::protobuf::uint32 value) {
  set_has_boss_position();
  boss_position_ = value;
}

// optional uint32 reset_num = 3;
inline bool gs_c_guild_boss_dead_hero_reset_res::has_reset_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_guild_boss_dead_hero_reset_res::set_has_reset_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_guild_boss_dead_hero_reset_res::clear_has_reset_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_guild_boss_dead_hero_reset_res::clear_reset_num() {
  reset_num_ = 0u;
  clear_has_reset_num();
}
inline ::google::protobuf::uint32 gs_c_guild_boss_dead_hero_reset_res::reset_num() const {
  return reset_num_;
}
inline void gs_c_guild_boss_dead_hero_reset_res::set_reset_num(::google::protobuf::uint32 value) {
  set_has_reset_num();
  reset_num_ = value;
}

// optional uint32 last_reset_time = 4;
inline bool gs_c_guild_boss_dead_hero_reset_res::has_last_reset_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gs_c_guild_boss_dead_hero_reset_res::set_has_last_reset_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gs_c_guild_boss_dead_hero_reset_res::clear_has_last_reset_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gs_c_guild_boss_dead_hero_reset_res::clear_last_reset_time() {
  last_reset_time_ = 0u;
  clear_has_last_reset_time();
}
inline ::google::protobuf::uint32 gs_c_guild_boss_dead_hero_reset_res::last_reset_time() const {
  return last_reset_time_;
}
inline void gs_c_guild_boss_dead_hero_reset_res::set_last_reset_time(::google::protobuf::uint32 value) {
  set_has_last_reset_time();
  last_reset_time_ = value;
}

// repeated .struct_game_element consume = 5;
inline int gs_c_guild_boss_dead_hero_reset_res::consume_size() const {
  return consume_.size();
}
inline void gs_c_guild_boss_dead_hero_reset_res::clear_consume() {
  consume_.Clear();
}
inline const ::struct_game_element& gs_c_guild_boss_dead_hero_reset_res::consume(int index) const {
  return consume_.Get(index);
}
inline ::struct_game_element* gs_c_guild_boss_dead_hero_reset_res::mutable_consume(int index) {
  return consume_.Mutable(index);
}
inline ::struct_game_element* gs_c_guild_boss_dead_hero_reset_res::add_consume() {
  return consume_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_game_element >&
gs_c_guild_boss_dead_hero_reset_res::consume() const {
  return consume_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_game_element >*
gs_c_guild_boss_dead_hero_reset_res::mutable_consume() {
  return &consume_;
}

// -------------------------------------------------------------------

// c_gs_guild_boss_attacker_rank_req

// required uint32 boss_position = 1;
inline bool c_gs_guild_boss_attacker_rank_req::has_boss_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void c_gs_guild_boss_attacker_rank_req::set_has_boss_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void c_gs_guild_boss_attacker_rank_req::clear_has_boss_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void c_gs_guild_boss_attacker_rank_req::clear_boss_position() {
  boss_position_ = 0u;
  clear_has_boss_position();
}
inline ::google::protobuf::uint32 c_gs_guild_boss_attacker_rank_req::boss_position() const {
  return boss_position_;
}
inline void c_gs_guild_boss_attacker_rank_req::set_boss_position(::google::protobuf::uint32 value) {
  set_has_boss_position();
  boss_position_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_boss_attacker_rank_res_struct_boss_attacker

// required uint32 user_id = 1;
inline bool gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::user_id() const {
  return user_id_;
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string name = 2;
inline bool gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::name() const {
  return *name_;
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 lose_hp = 3;
inline bool gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::has_lose_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::set_has_lose_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::clear_has_lose_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::clear_lose_hp() {
  lose_hp_ = 0u;
  clear_has_lose_hp();
}
inline ::google::protobuf::uint32 gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::lose_hp() const {
  return lose_hp_;
}
inline void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::set_lose_hp(::google::protobuf::uint32 value) {
  set_has_lose_hp();
  lose_hp_ = value;
}

// -------------------------------------------------------------------

// gs_c_guild_boss_attacker_rank_res

// required int32 error_code = 1;
inline bool gs_c_guild_boss_attacker_rank_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_guild_boss_attacker_rank_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_guild_boss_attacker_rank_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_guild_boss_attacker_rank_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_guild_boss_attacker_rank_res::error_code() const {
  return error_code_;
}
inline void gs_c_guild_boss_attacker_rank_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// repeated .gs_c_guild_boss_attacker_rank_res.struct_boss_attacker attckers = 2;
inline int gs_c_guild_boss_attacker_rank_res::attckers_size() const {
  return attckers_.size();
}
inline void gs_c_guild_boss_attacker_rank_res::clear_attckers() {
  attckers_.Clear();
}
inline const ::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker& gs_c_guild_boss_attacker_rank_res::attckers(int index) const {
  return attckers_.Get(index);
}
inline ::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker* gs_c_guild_boss_attacker_rank_res::mutable_attckers(int index) {
  return attckers_.Mutable(index);
}
inline ::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker* gs_c_guild_boss_attacker_rank_res::add_attckers() {
  return attckers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker >&
gs_c_guild_boss_attacker_rank_res::attckers() const {
  return attckers_;
}
inline ::google::protobuf::RepeatedPtrField< ::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker >*
gs_c_guild_boss_attacker_rank_res::mutable_attckers() {
  return &attckers_;
}

// -------------------------------------------------------------------

// c_gs_server_time_req

// -------------------------------------------------------------------

// gs_c_server_time_res

// required int32 error_code = 1;
inline bool gs_c_server_time_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_c_server_time_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_c_server_time_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_c_server_time_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_c_server_time_res::error_code() const {
  return error_code_;
}
inline void gs_c_server_time_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 server_time = 2;
inline bool gs_c_server_time_res::has_server_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_c_server_time_res::set_has_server_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_c_server_time_res::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_c_server_time_res::clear_server_time() {
  server_time_ = 0u;
  clear_has_server_time();
}
inline ::google::protobuf::uint32 gs_c_server_time_res::server_time() const {
  return server_time_;
}
inline void gs_c_server_time_res::set_server_time(::google::protobuf::uint32 value) {
  set_has_server_time();
  server_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user_hero_skill_e_skill_type>() {
  return ::user_hero_skill_e_skill_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::struct_game_element_EELEMENTTYPE>() {
  return ::struct_game_element_EELEMENTTYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::struct_game_element_EELEMENT_NUM_TYPE>() {
  return ::struct_game_element_EELEMENT_NUM_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user_shop_item_ESHOPITEMFLAG>() {
  return ::user_shop_item_ESHOPITEMFLAG_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user_shop_ESHOPTYPE>() {
  return ::user_shop_ESHOPTYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_gs_invoke_hero_req_EINVOKE_TYPE>() {
  return ::c_gs_invoke_hero_req_EINVOKE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_gs_equip_level_up_req_OP_TYPE>() {
  return ::c_gs_equip_level_up_req_OP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_gs_invoke_req_EINVOKE_TYPE>() {
  return ::c_gs_invoke_req_EINVOKE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_gs_shop_info_req_PULLTYPE>() {
  return ::c_gs_shop_info_req_PULLTYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_gs_mail_opt_req_OPT>() {
  return ::c_gs_mail_opt_req_OPT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gs_c_mail_ntf_OP_TYPE>() {
  return ::gs_c_mail_ntf_OP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user_mission_MISSION_EVENT_TYPE>() {
  return ::user_mission_MISSION_EVENT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user_mission_MISSION_EVENT_SUB_TYPE>() {
  return ::user_mission_MISSION_EVENT_SUB_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user_mission_MISSION_STATUS>() {
  return ::user_mission_MISSION_STATUS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gs_c_mission_ntf_array_mission_opt_OPT>() {
  return ::gs_c_mission_ntf_array_mission_opt_OPT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sign_n_reward_SIGN_N_REWARD_TYPE>() {
  return ::sign_n_reward_SIGN_N_REWARD_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sign_n_reward_SIGN_N_REWARD_STATUS>() {
  return ::sign_n_reward_SIGN_N_REWARD_STATUS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_gs_sign_req_SIGN_TYPE>() {
  return ::c_gs_sign_req_SIGN_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gs_c_marquee_ntf_MARQUEE_TYPE>() {
  return ::gs_c_marquee_ntf_MARQUEE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_gs_user_friend_op_req_OP_TYPE>() {
  return ::c_gs_user_friend_op_req_OP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gs_c_friend_ntf_OP_TYPE>() {
  return ::gs_c_friend_ntf_OP_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_gs_chat_req_CHAT_TYPE>() {
  return ::c_gs_chat_req_CHAT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_gs_rank_req_RANK_TYPE>() {
  return ::c_gs_rank_req_RANK_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_gs_guild_apply_list_req_e_show_for>() {
  return ::c_gs_guild_apply_list_req_e_show_for_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_gs_guild_apply_op_req_e_op_type>() {
  return ::c_gs_guild_apply_op_req_e_op_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::c_gs_guild_list_req_e_list_type>() {
  return ::c_gs_guild_list_req_e_list_type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_msg_c_gs>() {
  return ::e_msg_c_gs_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_msg_gs_c>() {
  return ::e_msg_gs_c_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_gsc_errorcode>() {
  return ::e_gsc_errorcode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MAIL_STATUS>() {
  return ::MAIL_STATUS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MAIL_TYPE>() {
  return ::MAIL_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HEAD_CHANGE_TYPE>() {
  return ::HEAD_CHANGE_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_guild_position>() {
  return ::e_guild_position_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_apply_switch_status>() {
  return ::e_apply_switch_status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gs_5fc_5fproto_2eproto__INCLUDED
