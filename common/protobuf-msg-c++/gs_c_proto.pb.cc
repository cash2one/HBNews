// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gs_c_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gs_c_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AOYI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AOYI_reflection_ = NULL;
const ::google::protobuf::Descriptor* AOYI_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AOYI_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* ARENAPRICE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ARENAPRICE_reflection_ = NULL;
const ::google::protobuf::Descriptor* ARENAPRICE_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ARENAPRICE_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* BAG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BAG_reflection_ = NULL;
const ::google::protobuf::Descriptor* BAG_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BAG_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* BATTLE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BATTLE_reflection_ = NULL;
const ::google::protobuf::Descriptor* BATTLE_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BATTLE_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* BOSSPROP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BOSSPROP_reflection_ = NULL;
const ::google::protobuf::Descriptor* BOSSPROP_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BOSSPROP_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* BOSSSKILL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BOSSSKILL_reflection_ = NULL;
const ::google::protobuf::Descriptor* BOSSSKILL_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BOSSSKILL_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* BUFF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BUFF_reflection_ = NULL;
const ::google::protobuf::Descriptor* BUFF_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BUFF_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* CHAPTERMAP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHAPTERMAP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CHAPTERMAP_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CHAPTERMAP_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* COINPRICE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  COINPRICE_reflection_ = NULL;
const ::google::protobuf::Descriptor* COINPRICE_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  COINPRICE_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* EQUIP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EQUIP_reflection_ = NULL;
const ::google::protobuf::Descriptor* EQUIP_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EQUIP_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* EVOLUTIONCOIN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EVOLUTIONCOIN_reflection_ = NULL;
const ::google::protobuf::Descriptor* EVOLUTIONCOIN_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EVOLUTIONCOIN_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* HEROPROP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HEROPROP_reflection_ = NULL;
const ::google::protobuf::Descriptor* HEROPROP_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HEROPROP_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* HEROSKILL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HEROSKILL_reflection_ = NULL;
const ::google::protobuf::Descriptor* HEROSKILL_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HEROSKILL_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* HEROSTAR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HEROSTAR_reflection_ = NULL;
const ::google::protobuf::Descriptor* HEROSTAR_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HEROSTAR_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* MONSTERPROP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MONSTERPROP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MONSTERPROP_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MONSTERPROP_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* PASSIVE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PASSIVE_reflection_ = NULL;
const ::google::protobuf::Descriptor* PASSIVE_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PASSIVE_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* PRIZESHOW_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PRIZESHOW_reflection_ = NULL;
const ::google::protobuf::Descriptor* PRIZESHOW_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PRIZESHOW_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* QUALITYRULE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QUALITYRULE_reflection_ = NULL;
const ::google::protobuf::Descriptor* QUALITYRULE_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QUALITYRULE_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* REALTIMECHECK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REALTIMECHECK_reflection_ = NULL;
const ::google::protobuf::Descriptor* REALTIMECHECK_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REALTIMECHECK_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* RESETPRICE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RESETPRICE_reflection_ = NULL;
const ::google::protobuf::Descriptor* RESETPRICE_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RESETPRICE_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* RULE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RULE_reflection_ = NULL;
const ::google::protobuf::Descriptor* RULE_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RULE_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* SHOPRESETPRICE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SHOPRESETPRICE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SHOPRESETPRICE_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SHOPRESETPRICE_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPPRICE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPPRICE_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPPRICE_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPPRICE_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* STAPRICE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STAPRICE_reflection_ = NULL;
const ::google::protobuf::Descriptor* STAPRICE_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STAPRICE_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* SUBTASK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SUBTASK_reflection_ = NULL;
const ::google::protobuf::Descriptor* SUBTASK_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SUBTASK_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* TASK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TASK_reflection_ = NULL;
const ::google::protobuf::Descriptor* TASK_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TASK_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRIGGERATTACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRIGGERATTACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRIGGERATTACK_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRIGGERATTACK_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRIGGERSTARTCONDITION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRIGGERSTARTCONDITION_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRIGGERSTARTCONDITION_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRIGGERSTARTCONDITION_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIP_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIP_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIP_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPFUNCTION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPFUNCTION_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPFUNCTION_ARRAY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPFUNCTION_ARRAY_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_enter_gs_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_enter_gs_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_enter_gs_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_enter_gs_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_leave_gs_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_leave_gs_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_leave_gs_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_leave_gs_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_json_config_version_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_json_config_version_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_json_config_version_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_json_config_version_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_json_config_version_res_config_version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_json_config_version_res_config_version_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_json_config_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_json_config_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_json_config_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_json_config_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_json_config_res_config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_json_config_res_config_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_config_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_config_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_config_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_config_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_user_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_user_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_sub_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_sub_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_sub_task_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_sub_task_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_hero_equip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_hero_equip_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_hero_skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_hero_skill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* user_hero_skill_e_skill_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* user_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_hero_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_hero_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_game_element_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_game_element_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* struct_game_element_EELEMENTTYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* struct_game_element_EELEMENT_NUM_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* user_shop_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_shop_item_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* user_shop_item_ESHOPITEMFLAG_descriptor_ = NULL;
const ::google::protobuf::Descriptor* user_shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_shop_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* user_shop_ESHOPTYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* user_arena_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_arena_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_arena_log_user_arena_log_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_arena_log_user_arena_log_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_arena_contestant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_arena_contestant_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_arena_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_arena_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_crusade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_crusade_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_crusade_crusade_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_crusade_crusade_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_user_info_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_user_info_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_start_sub_task_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_start_sub_task_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_start_sub_task_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_start_sub_task_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_end_sub_task_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_end_sub_task_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_end_sub_task_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_end_sub_task_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_invoke_hero_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_invoke_hero_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_gs_invoke_hero_req_EINVOKE_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_invoke_hero_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_invoke_hero_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_equip_level_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_equip_level_up_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_gs_equip_level_up_req_OP_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_equip_level_up_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_equip_level_up_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_equip_evolution_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_equip_evolution_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_equip_evolution_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_equip_evolution_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_hero_evolution_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_hero_evolution_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_hero_evolution_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_hero_evolution_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_hero_star_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_hero_star_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_hero_star_up_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_hero_star_up_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_skill_level_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_skill_level_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_skill_level_up_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_skill_level_up_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_invoke_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_invoke_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_gs_invoke_req_EINVOKE_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_invoke_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_invoke_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_game_element_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_game_element_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_diamond_speed_kill_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_diamond_speed_kill_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_diamond_speed_kill_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_diamond_speed_kill_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_use_item_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_use_item_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_use_item_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_use_item_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_shop_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_shop_info_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_gs_shop_info_req_PULLTYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_shop_info_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_shop_info_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_shop_buy_item_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_shop_buy_item_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_shop_buy_item_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_shop_buy_item_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_shop_refresh_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_shop_refresh_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_shop_refresh_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_shop_refresh_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_sell_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_sell_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_sell_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_sell_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_arena_refresh_match_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_arena_refresh_match_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_arena_refresh_match_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_arena_refresh_match_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_arena_update_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_arena_update_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_arena_update_team_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_arena_update_team_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_arena_start_challenge_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_arena_start_challenge_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_arena_start_challenge_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_arena_start_challenge_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_arena_end_challenge_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_arena_end_challenge_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_arena_end_challenge_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_arena_end_challenge_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_arena_challenge_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_arena_challenge_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_arena_challenge_reset_cd_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_arena_challenge_reset_cd_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_arena_challenge_reset_cd_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_arena_challenge_reset_cd_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_arena_challenge_reset_num_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_arena_challenge_reset_num_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_arena_challenge_reset_num_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_arena_challenge_reset_num_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_arena_ranks_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_arena_ranks_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_arena_ranks_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_arena_ranks_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_arena_log_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_arena_log_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_arena_log_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_arena_log_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_arena_search_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_arena_search_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_arena_search_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_arena_search_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_fragment_compound_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_fragment_compound_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_fragment_compound_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_fragment_compound_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_mail_opt_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_mail_opt_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_gs_mail_opt_req_OPT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_mail_opt_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_mail_opt_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_mail_opt_res_mail_update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_mail_opt_res_mail_update_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_mail_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_mail_ntf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_c_mail_ntf_OP_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_mail_ntf_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_mail_ntf_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_buy_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_buy_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_buy_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_buy_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_mission_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_mission_mission_event_need_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_mission_mission_event_need_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* user_mission_MISSION_EVENT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* user_mission_MISSION_EVENT_SUB_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* user_mission_MISSION_STATUS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_mission_ntf_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_mission_ntf_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_mission_ntf_array_mission_opt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_mission_ntf_array_mission_opt_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_c_mission_ntf_array_mission_opt_OPT_descriptor_ = NULL;
const ::google::protobuf::Descriptor* c_gs_get_mission_reward_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_get_mission_reward_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_get_mission_reward_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_get_mission_reward_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* sign_n_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sign_n_reward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* sign_n_reward_SIGN_N_REWARD_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* sign_n_reward_SIGN_N_REWARD_STATUS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* user_sign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_sign_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_sign_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_sign_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_gs_sign_req_SIGN_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_sign_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_sign_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_sign_add_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_sign_add_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_sign_add_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_sign_add_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_head_or_frame_change_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_head_or_frame_change_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_head_or_frame_change_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_head_or_frame_change_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_edit_player_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_edit_player_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_edit_player_info_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_edit_player_info_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_finish_novice_guide_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_finish_novice_guide_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_finish_novice_guide_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_finish_novice_guide_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_marquee_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_marquee_ntf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_c_marquee_ntf_MARQUEE_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_element_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_element_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* friend_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  friend_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_friend_friend_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_friend_friend_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_user_friend_op_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_user_friend_op_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_gs_user_friend_op_req_OP_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_user_friend_op_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_user_friend_op_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_search_user_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_search_user_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_search_user_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_search_user_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_friend_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_friend_ntf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_c_friend_ntf_OP_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* c_gs_chat_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_chat_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_gs_chat_req_CHAT_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_chat_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_chat_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_chat_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_chat_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_fight_power_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_fight_power_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_fight_power_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_fight_power_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_rank_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_rank_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_gs_rank_req_RANK_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_rank_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_rank_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_rank_res_user_hero_brief_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_rank_res_user_hero_brief_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_rank_res_rank_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_rank_res_rank_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_crusade_start_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_crusade_start_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_crusade_start_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_crusade_start_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_crusade_end_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_crusade_end_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_crusade_end_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_crusade_end_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_crusade_hero_life_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_crusade_hero_life_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_crusade_hero_life_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_crusade_hero_life_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_crusade_reset_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_crusade_reset_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_crusade_reset_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_crusade_reset_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_crusade_promote_award_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_crusade_promote_award_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_crusade_promote_award_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_crusade_promote_award_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_crusade_buff_refresh_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_crusade_buff_refresh_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_crusade_buff_refresh_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_crusade_buff_refresh_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_guild_list_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_guild_list_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_user_guild_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_user_guild_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_user_guild_info_struct_guild_member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_user_guild_info_struct_guild_member_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_guild_boss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_guild_boss_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_guild_boss_attacker_dead_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_guild_boss_attacker_dead_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_new_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_new_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_new_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_new_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_edit_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_edit_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_edit_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_edit_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_delete_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_delete_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_delete_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_delete_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_quit_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_quit_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_join_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_join_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_apply_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_apply_list_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_gs_guild_apply_list_req_e_show_for_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_apply_list_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_apply_list_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_apply_list_res_struct_apply_for_outsider_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_apply_list_res_struct_apply_for_outsider_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_apply_op_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_apply_op_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_gs_guild_apply_op_req_e_op_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_apply_op_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_apply_op_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_member_op_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_member_op_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_member_op_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_member_op_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_boss_refresh_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_boss_refresh_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_boss_refresh_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_boss_refresh_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_search_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_search_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_search_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_search_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_list_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* c_gs_guild_list_req_e_list_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_list_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_list_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_info_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_info_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_boss_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_boss_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_boss_list_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_boss_list_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_boss_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_boss_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_boss_info_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_boss_info_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_boss_attack_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_boss_attack_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_boss_attack_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_boss_attack_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_boss_dead_hero_reset_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_boss_dead_hero_reset_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_boss_dead_hero_reset_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_boss_dead_hero_reset_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_guild_boss_attacker_rank_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_guild_boss_attacker_rank_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_boss_attacker_rank_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_boss_attacker_rank_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_guild_boss_attacker_rank_res_struct_boss_attacker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_guild_boss_attacker_rank_res_struct_boss_attacker_reflection_ = NULL;
const ::google::protobuf::Descriptor* c_gs_server_time_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c_gs_server_time_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_c_server_time_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_c_server_time_res_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* e_msg_c_gs_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_msg_gs_c_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_gsc_errorcode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MAIL_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MAIL_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HEAD_CHANGE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_guild_position_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_apply_switch_status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gs_5fc_5fproto_2eproto() {
  protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gs_c_proto.proto");
  GOOGLE_CHECK(file != NULL);
  AOYI_descriptor_ = file->message_type(0);
  static const int AOYI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AOYI, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AOYI, factor_),
  };
  AOYI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AOYI_descriptor_,
      AOYI::default_instance_,
      AOYI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AOYI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AOYI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AOYI));
  AOYI_ARRAY_descriptor_ = file->message_type(1);
  static const int AOYI_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AOYI_ARRAY, items_),
  };
  AOYI_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AOYI_ARRAY_descriptor_,
      AOYI_ARRAY::default_instance_,
      AOYI_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AOYI_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AOYI_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AOYI_ARRAY));
  ARENAPRICE_descriptor_ = file->message_type(2);
  static const int ARENAPRICE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARENAPRICE, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARENAPRICE, price_),
  };
  ARENAPRICE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ARENAPRICE_descriptor_,
      ARENAPRICE::default_instance_,
      ARENAPRICE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARENAPRICE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARENAPRICE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ARENAPRICE));
  ARENAPRICE_ARRAY_descriptor_ = file->message_type(3);
  static const int ARENAPRICE_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARENAPRICE_ARRAY, items_),
  };
  ARENAPRICE_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ARENAPRICE_ARRAY_descriptor_,
      ARENAPRICE_ARRAY::default_instance_,
      ARENAPRICE_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARENAPRICE_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ARENAPRICE_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ARENAPRICE_ARRAY));
  BAG_descriptor_ = file->message_type(4);
  static const int BAG_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG, usetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG, sellprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG, needs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG, needcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG, needgolds_),
  };
  BAG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BAG_descriptor_,
      BAG::default_instance_,
      BAG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BAG));
  BAG_ARRAY_descriptor_ = file->message_type(5);
  static const int BAG_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG_ARRAY, items_),
  };
  BAG_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BAG_ARRAY_descriptor_,
      BAG_ARRAY::default_instance_,
      BAG_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BAG_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BAG_ARRAY));
  BATTLE_descriptor_ = file->message_type(6);
  static const int BATTLE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BATTLE, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BATTLE, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BATTLE, positions_),
  };
  BATTLE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BATTLE_descriptor_,
      BATTLE::default_instance_,
      BATTLE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BATTLE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BATTLE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BATTLE));
  BATTLE_ARRAY_descriptor_ = file->message_type(7);
  static const int BATTLE_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BATTLE_ARRAY, items_),
  };
  BATTLE_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BATTLE_ARRAY_descriptor_,
      BATTLE_ARRAY::default_instance_,
      BATTLE_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BATTLE_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BATTLE_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BATTLE_ARRAY));
  BOSSPROP_descriptor_ = file->message_type(8);
  static const int BOSSPROP_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, pointid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, pdd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, mdd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, hitlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, dodgelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, crilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, tenacitylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, pddpierce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, passiveskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, passiveskilllevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, range_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, range_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, range_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, attackspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, h_dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, v_dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, stage_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, hitnum_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, skilltimelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, warningtimelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, maxintensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, recoverintensityrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, minintensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, type_normal_),
  };
  BOSSPROP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BOSSPROP_descriptor_,
      BOSSPROP::default_instance_,
      BOSSPROP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BOSSPROP));
  BOSSPROP_ARRAY_descriptor_ = file->message_type(9);
  static const int BOSSPROP_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP_ARRAY, items_),
  };
  BOSSPROP_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BOSSPROP_ARRAY_descriptor_,
      BOSSPROP_ARRAY::default_instance_,
      BOSSPROP_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSPROP_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BOSSPROP_ARRAY));
  BOSSSKILL_descriptor_ = file->message_type(10);
  static const int BOSSSKILL_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL, factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL, range_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL, range_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL, range_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL, waittime_),
  };
  BOSSSKILL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BOSSSKILL_descriptor_,
      BOSSSKILL::default_instance_,
      BOSSSKILL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BOSSSKILL));
  BOSSSKILL_ARRAY_descriptor_ = file->message_type(11);
  static const int BOSSSKILL_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL_ARRAY, items_),
  };
  BOSSSKILL_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BOSSSKILL_ARRAY_descriptor_,
      BOSSSKILL_ARRAY::default_instance_,
      BOSSSKILL_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BOSSSKILL_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BOSSSKILL_ARRAY));
  BUFF_descriptor_ = file->message_type(12);
  static const int BUFF_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, durationgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, valuegrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, usetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, lifeline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, bufftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, maxlimitcount_),
  };
  BUFF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BUFF_descriptor_,
      BUFF::default_instance_,
      BUFF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BUFF));
  BUFF_ARRAY_descriptor_ = file->message_type(13);
  static const int BUFF_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF_ARRAY, items_),
  };
  BUFF_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BUFF_ARRAY_descriptor_,
      BUFF_ARRAY::default_instance_,
      BUFF_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BUFF_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BUFF_ARRAY));
  CHAPTERMAP_descriptor_ = file->message_type(14);
  static const int CHAPTERMAP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHAPTERMAP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHAPTERMAP, captertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHAPTERMAP, pointtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHAPTERMAP, openlevel_),
  };
  CHAPTERMAP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHAPTERMAP_descriptor_,
      CHAPTERMAP::default_instance_,
      CHAPTERMAP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHAPTERMAP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHAPTERMAP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHAPTERMAP));
  CHAPTERMAP_ARRAY_descriptor_ = file->message_type(15);
  static const int CHAPTERMAP_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHAPTERMAP_ARRAY, items_),
  };
  CHAPTERMAP_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CHAPTERMAP_ARRAY_descriptor_,
      CHAPTERMAP_ARRAY::default_instance_,
      CHAPTERMAP_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHAPTERMAP_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHAPTERMAP_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CHAPTERMAP_ARRAY));
  COINPRICE_descriptor_ = file->message_type(16);
  static const int COINPRICE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COINPRICE, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COINPRICE, needgems_),
  };
  COINPRICE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      COINPRICE_descriptor_,
      COINPRICE::default_instance_,
      COINPRICE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COINPRICE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COINPRICE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(COINPRICE));
  COINPRICE_ARRAY_descriptor_ = file->message_type(17);
  static const int COINPRICE_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COINPRICE_ARRAY, items_),
  };
  COINPRICE_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      COINPRICE_ARRAY_descriptor_,
      COINPRICE_ARRAY::default_instance_,
      COINPRICE_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COINPRICE_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COINPRICE_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(COINPRICE_ARRAY));
  EQUIP_descriptor_ = file->message_type(18);
  static const int EQUIP_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, name_ch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, name_en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, healthgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, damagegrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, pdd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, pddgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, mdd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, mddgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, hitlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, hitgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, dodgelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, dodgegrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, crilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, crigrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, tenacitylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, tenacitygrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, pddpierce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, pddpiercegrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, needs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, needcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, nextid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, icon_),
  };
  EQUIP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EQUIP_descriptor_,
      EQUIP::default_instance_,
      EQUIP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EQUIP));
  EQUIP_ARRAY_descriptor_ = file->message_type(19);
  static const int EQUIP_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP_ARRAY, items_),
  };
  EQUIP_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EQUIP_ARRAY_descriptor_,
      EQUIP_ARRAY::default_instance_,
      EQUIP_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EQUIP_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EQUIP_ARRAY));
  EVOLUTIONCOIN_descriptor_ = file->message_type(20);
  static const int EVOLUTIONCOIN_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EVOLUTIONCOIN, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EVOLUTIONCOIN, equip_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EVOLUTIONCOIN, equip_necklace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EVOLUTIONCOIN, equip_clothes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EVOLUTIONCOIN, equip_belt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EVOLUTIONCOIN, equip_ring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EVOLUTIONCOIN, equip_boot_),
  };
  EVOLUTIONCOIN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EVOLUTIONCOIN_descriptor_,
      EVOLUTIONCOIN::default_instance_,
      EVOLUTIONCOIN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EVOLUTIONCOIN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EVOLUTIONCOIN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EVOLUTIONCOIN));
  EVOLUTIONCOIN_ARRAY_descriptor_ = file->message_type(21);
  static const int EVOLUTIONCOIN_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EVOLUTIONCOIN_ARRAY, items_),
  };
  EVOLUTIONCOIN_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EVOLUTIONCOIN_ARRAY_descriptor_,
      EVOLUTIONCOIN_ARRAY::default_instance_,
      EVOLUTIONCOIN_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EVOLUTIONCOIN_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EVOLUTIONCOIN_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EVOLUTIONCOIN_ARRAY));
  HEROPROP_descriptor_ = file->message_type(22);
  static const int HEROPROP_offsets_[57] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, healthgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, damagegrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, pdd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, pddgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, mdd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, mddgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, hitlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, hitgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, dodgelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, dodgegrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, crilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, crigrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, tenacitylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, tenacitygrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, pddpierce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, pddpiercegrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, type_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, type_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, percent_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, addnum_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, addnumgrow_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, type_aoyi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, percent_aoyi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, addnum_aoyi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, addnumgrow_aoyi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, passiveskill_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, passiveskill_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, passiveskill_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, range_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, range_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, range_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, attackspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, h_dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, v_dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, stage_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, hitnum_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, hitnum_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, posnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, recovertime_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, aoyinum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, equip_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, equip_necklace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, equip_clothes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, equip_belt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, equip_ring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, equip_boot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, needid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, skilltriggerprobability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, skilltriggerduration_),
  };
  HEROPROP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HEROPROP_descriptor_,
      HEROPROP::default_instance_,
      HEROPROP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HEROPROP));
  HEROPROP_ARRAY_descriptor_ = file->message_type(23);
  static const int HEROPROP_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP_ARRAY, items_),
  };
  HEROPROP_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HEROPROP_ARRAY_descriptor_,
      HEROPROP_ARRAY::default_instance_,
      HEROPROP_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROPROP_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HEROPROP_ARRAY));
  HEROSKILL_descriptor_ = file->message_type(24);
  static const int HEROSKILL_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL, factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL, range_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL, range_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL, range_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL, waittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL, intensity_),
  };
  HEROSKILL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HEROSKILL_descriptor_,
      HEROSKILL::default_instance_,
      HEROSKILL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HEROSKILL));
  HEROSKILL_ARRAY_descriptor_ = file->message_type(25);
  static const int HEROSKILL_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL_ARRAY, items_),
  };
  HEROSKILL_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HEROSKILL_ARRAY_descriptor_,
      HEROSKILL_ARRAY::default_instance_,
      HEROSKILL_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSKILL_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HEROSKILL_ARRAY));
  HEROSTAR_descriptor_ = file->message_type(26);
  static const int HEROSTAR_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSTAR, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSTAR, neednum_),
  };
  HEROSTAR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HEROSTAR_descriptor_,
      HEROSTAR::default_instance_,
      HEROSTAR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSTAR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSTAR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HEROSTAR));
  HEROSTAR_ARRAY_descriptor_ = file->message_type(27);
  static const int HEROSTAR_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSTAR_ARRAY, items_),
  };
  HEROSTAR_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HEROSTAR_ARRAY_descriptor_,
      HEROSTAR_ARRAY::default_instance_,
      HEROSTAR_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSTAR_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HEROSTAR_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HEROSTAR_ARRAY));
  MONSTERPROP_descriptor_ = file->message_type(28);
  static const int MONSTERPROP_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, pdd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, mdd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, hitlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, dodgelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, crilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, tenacitylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, pddpierce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, range_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, range_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, range_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, attackspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, h_dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, v_dis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, maxintensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, recoverintensityrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, minintensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, type_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, passiveskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, passiveskilllevel_),
  };
  MONSTERPROP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MONSTERPROP_descriptor_,
      MONSTERPROP::default_instance_,
      MONSTERPROP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MONSTERPROP));
  MONSTERPROP_ARRAY_descriptor_ = file->message_type(29);
  static const int MONSTERPROP_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP_ARRAY, items_),
  };
  MONSTERPROP_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MONSTERPROP_ARRAY_descriptor_,
      MONSTERPROP_ARRAY::default_instance_,
      MONSTERPROP_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MONSTERPROP_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MONSTERPROP_ARRAY));
  PASSIVE_descriptor_ = file->message_type(30);
  static const int PASSIVE_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PASSIVE, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PASSIVE, triggerenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PASSIVE, triggerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PASSIVE, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PASSIVE, target_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PASSIVE, target_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PASSIVE, target_occupation_),
  };
  PASSIVE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PASSIVE_descriptor_,
      PASSIVE::default_instance_,
      PASSIVE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PASSIVE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PASSIVE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PASSIVE));
  PASSIVE_ARRAY_descriptor_ = file->message_type(31);
  static const int PASSIVE_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PASSIVE_ARRAY, items_),
  };
  PASSIVE_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PASSIVE_ARRAY_descriptor_,
      PASSIVE_ARRAY::default_instance_,
      PASSIVE_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PASSIVE_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PASSIVE_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PASSIVE_ARRAY));
  PRIZESHOW_descriptor_ = file->message_type(32);
  static const int PRIZESHOW_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIZESHOW, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIZESHOW, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIZESHOW, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIZESHOW, awards_),
  };
  PRIZESHOW_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PRIZESHOW_descriptor_,
      PRIZESHOW::default_instance_,
      PRIZESHOW_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIZESHOW, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIZESHOW, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PRIZESHOW));
  PRIZESHOW_ARRAY_descriptor_ = file->message_type(33);
  static const int PRIZESHOW_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIZESHOW_ARRAY, items_),
  };
  PRIZESHOW_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PRIZESHOW_ARRAY_descriptor_,
      PRIZESHOW_ARRAY::default_instance_,
      PRIZESHOW_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIZESHOW_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRIZESHOW_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PRIZESHOW_ARRAY));
  QUALITYRULE_descriptor_ = file->message_type(34);
  static const int QUALITYRULE_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, needlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, needgolds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, pdd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, mdd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, hitlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, dodgelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, crilevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, tenacitylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, pddpierce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, open_),
  };
  QUALITYRULE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QUALITYRULE_descriptor_,
      QUALITYRULE::default_instance_,
      QUALITYRULE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QUALITYRULE));
  QUALITYRULE_ARRAY_descriptor_ = file->message_type(35);
  static const int QUALITYRULE_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE_ARRAY, items_),
  };
  QUALITYRULE_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QUALITYRULE_ARRAY_descriptor_,
      QUALITYRULE_ARRAY::default_instance_,
      QUALITYRULE_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUALITYRULE_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QUALITYRULE_ARRAY));
  REALTIMECHECK_descriptor_ = file->message_type(36);
  static const int REALTIMECHECK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REALTIMECHECK, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REALTIMECHECK, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REALTIMECHECK, num_),
  };
  REALTIMECHECK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REALTIMECHECK_descriptor_,
      REALTIMECHECK::default_instance_,
      REALTIMECHECK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REALTIMECHECK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REALTIMECHECK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REALTIMECHECK));
  REALTIMECHECK_ARRAY_descriptor_ = file->message_type(37);
  static const int REALTIMECHECK_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REALTIMECHECK_ARRAY, items_),
  };
  REALTIMECHECK_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REALTIMECHECK_ARRAY_descriptor_,
      REALTIMECHECK_ARRAY::default_instance_,
      REALTIMECHECK_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REALTIMECHECK_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REALTIMECHECK_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REALTIMECHECK_ARRAY));
  RESETPRICE_descriptor_ = file->message_type(38);
  static const int RESETPRICE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESETPRICE, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESETPRICE, needgems_),
  };
  RESETPRICE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RESETPRICE_descriptor_,
      RESETPRICE::default_instance_,
      RESETPRICE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESETPRICE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESETPRICE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RESETPRICE));
  RESETPRICE_ARRAY_descriptor_ = file->message_type(39);
  static const int RESETPRICE_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESETPRICE_ARRAY, items_),
  };
  RESETPRICE_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RESETPRICE_ARRAY_descriptor_,
      RESETPRICE_ARRAY::default_instance_,
      RESETPRICE_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESETPRICE_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESETPRICE_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RESETPRICE_ARRAY));
  RULE_descriptor_ = file->message_type(40);
  static const int RULE_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_exp_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_exp_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, factor_hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, factor_dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, factor_cri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, factor_tenacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_gold_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_gold_aoyi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_gold_passive_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_gold_passive_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_gold_passive_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_gold_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_gold_necklace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_gold_clothes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_gold_belt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_gold_ring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, upgrade_gold_boot_),
  };
  RULE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RULE_descriptor_,
      RULE::default_instance_,
      RULE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RULE));
  RULE_ARRAY_descriptor_ = file->message_type(41);
  static const int RULE_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE_ARRAY, items_),
  };
  RULE_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RULE_ARRAY_descriptor_,
      RULE_ARRAY::default_instance_,
      RULE_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RULE_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RULE_ARRAY));
  SHOPRESETPRICE_descriptor_ = file->message_type(42);
  static const int SHOPRESETPRICE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHOPRESETPRICE, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHOPRESETPRICE, needgems_),
  };
  SHOPRESETPRICE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SHOPRESETPRICE_descriptor_,
      SHOPRESETPRICE::default_instance_,
      SHOPRESETPRICE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHOPRESETPRICE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHOPRESETPRICE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SHOPRESETPRICE));
  SHOPRESETPRICE_ARRAY_descriptor_ = file->message_type(43);
  static const int SHOPRESETPRICE_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHOPRESETPRICE_ARRAY, items_),
  };
  SHOPRESETPRICE_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SHOPRESETPRICE_ARRAY_descriptor_,
      SHOPRESETPRICE_ARRAY::default_instance_,
      SHOPRESETPRICE_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHOPRESETPRICE_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SHOPRESETPRICE_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SHOPRESETPRICE_ARRAY));
  SPPRICE_descriptor_ = file->message_type(44);
  static const int SPPRICE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPRICE, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPRICE, needgems_),
  };
  SPPRICE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPPRICE_descriptor_,
      SPPRICE::default_instance_,
      SPPRICE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPRICE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPRICE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPPRICE));
  SPPRICE_ARRAY_descriptor_ = file->message_type(45);
  static const int SPPRICE_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPRICE_ARRAY, items_),
  };
  SPPRICE_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPPRICE_ARRAY_descriptor_,
      SPPRICE_ARRAY::default_instance_,
      SPPRICE_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPRICE_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPPRICE_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPPRICE_ARRAY));
  STAPRICE_descriptor_ = file->message_type(46);
  static const int STAPRICE_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STAPRICE, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STAPRICE, needgems_),
  };
  STAPRICE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STAPRICE_descriptor_,
      STAPRICE::default_instance_,
      STAPRICE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STAPRICE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STAPRICE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STAPRICE));
  STAPRICE_ARRAY_descriptor_ = file->message_type(47);
  static const int STAPRICE_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STAPRICE_ARRAY, items_),
  };
  STAPRICE_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STAPRICE_ARRAY_descriptor_,
      STAPRICE_ARRAY::default_instance_,
      STAPRICE_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STAPRICE_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STAPRICE_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STAPRICE_ARRAY));
  SUBTASK_descriptor_ = file->message_type(48);
  static const int SUBTASK_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, battledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, diffs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, totaltimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, name_ch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, expendst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, fightcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, idexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, heroexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, dropgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, pointparentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, fightpower_),
  };
  SUBTASK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SUBTASK_descriptor_,
      SUBTASK::default_instance_,
      SUBTASK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SUBTASK));
  SUBTASK_ARRAY_descriptor_ = file->message_type(49);
  static const int SUBTASK_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK_ARRAY, items_),
  };
  SUBTASK_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SUBTASK_ARRAY_descriptor_,
      SUBTASK_ARRAY::default_instance_,
      SUBTASK_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SUBTASK_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SUBTASK_ARRAY));
  TASK_descriptor_ = file->message_type(50);
  static const int TASK_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, seriestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, seriesname_ch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, opentimetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, totalenternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, enterlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, pointparentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, nextpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, priority_),
  };
  TASK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TASK_descriptor_,
      TASK::default_instance_,
      TASK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TASK));
  TASK_ARRAY_descriptor_ = file->message_type(51);
  static const int TASK_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK_ARRAY, items_),
  };
  TASK_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TASK_ARRAY_descriptor_,
      TASK_ARRAY::default_instance_,
      TASK_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TASK_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TASK_ARRAY));
  TRIGGERATTACK_descriptor_ = file->message_type(52);
  static const int TRIGGERATTACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERATTACK, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERATTACK, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERATTACK, cd_),
  };
  TRIGGERATTACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRIGGERATTACK_descriptor_,
      TRIGGERATTACK::default_instance_,
      TRIGGERATTACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERATTACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERATTACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRIGGERATTACK));
  TRIGGERATTACK_ARRAY_descriptor_ = file->message_type(53);
  static const int TRIGGERATTACK_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERATTACK_ARRAY, items_),
  };
  TRIGGERATTACK_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRIGGERATTACK_ARRAY_descriptor_,
      TRIGGERATTACK_ARRAY::default_instance_,
      TRIGGERATTACK_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERATTACK_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERATTACK_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRIGGERATTACK_ARRAY));
  TRIGGERSTARTCONDITION_descriptor_ = file->message_type(54);
  static const int TRIGGERSTARTCONDITION_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERSTARTCONDITION, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERSTARTCONDITION, trigger_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERSTARTCONDITION, trigger_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERSTARTCONDITION, trigger_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERSTARTCONDITION, trigger_occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERSTARTCONDITION, trigger_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERSTARTCONDITION, trigger_count_),
  };
  TRIGGERSTARTCONDITION_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRIGGERSTARTCONDITION_descriptor_,
      TRIGGERSTARTCONDITION::default_instance_,
      TRIGGERSTARTCONDITION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERSTARTCONDITION, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERSTARTCONDITION, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRIGGERSTARTCONDITION));
  TRIGGERSTARTCONDITION_ARRAY_descriptor_ = file->message_type(55);
  static const int TRIGGERSTARTCONDITION_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERSTARTCONDITION_ARRAY, items_),
  };
  TRIGGERSTARTCONDITION_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRIGGERSTARTCONDITION_ARRAY_descriptor_,
      TRIGGERSTARTCONDITION_ARRAY::default_instance_,
      TRIGGERSTARTCONDITION_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERSTARTCONDITION_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRIGGERSTARTCONDITION_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRIGGERSTARTCONDITION_ARRAY));
  VIP_descriptor_ = file->message_type(56);
  static const int VIP_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, needrmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, freeitemcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, buypowercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, buyfbcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, buyarenacount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, buygoldscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, maxskillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, expbattlenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, goldbattlenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, towernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, crusadenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, buyskillpoint_),
  };
  VIP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIP_descriptor_,
      VIP::default_instance_,
      VIP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIP));
  VIP_ARRAY_descriptor_ = file->message_type(57);
  static const int VIP_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP_ARRAY, items_),
  };
  VIP_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIP_ARRAY_descriptor_,
      VIP_ARRAY::default_instance_,
      VIP_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIP_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIP_ARRAY));
  VIPFUNCTION_descriptor_ = file->message_type(58);
  static const int VIPFUNCTION_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPFUNCTION, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPFUNCTION, openvip_),
  };
  VIPFUNCTION_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPFUNCTION_descriptor_,
      VIPFUNCTION::default_instance_,
      VIPFUNCTION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPFUNCTION, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPFUNCTION, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPFUNCTION));
  VIPFUNCTION_ARRAY_descriptor_ = file->message_type(59);
  static const int VIPFUNCTION_ARRAY_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPFUNCTION_ARRAY, items_),
  };
  VIPFUNCTION_ARRAY_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPFUNCTION_ARRAY_descriptor_,
      VIPFUNCTION_ARRAY::default_instance_,
      VIPFUNCTION_ARRAY_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPFUNCTION_ARRAY, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPFUNCTION_ARRAY, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPFUNCTION_ARRAY));
  c_gs_enter_gs_req_descriptor_ = file->message_type(60);
  static const int c_gs_enter_gs_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_enter_gs_req, token_),
  };
  c_gs_enter_gs_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_enter_gs_req_descriptor_,
      c_gs_enter_gs_req::default_instance_,
      c_gs_enter_gs_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_enter_gs_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_enter_gs_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_enter_gs_req));
  gs_c_enter_gs_res_descriptor_ = file->message_type(61);
  static const int gs_c_enter_gs_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_enter_gs_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_enter_gs_res, proto_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_enter_gs_res, server_timestamp_),
  };
  gs_c_enter_gs_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_enter_gs_res_descriptor_,
      gs_c_enter_gs_res::default_instance_,
      gs_c_enter_gs_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_enter_gs_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_enter_gs_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_enter_gs_res));
  c_gs_leave_gs_req_descriptor_ = file->message_type(62);
  static const int c_gs_leave_gs_req_offsets_[1] = {
  };
  c_gs_leave_gs_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_leave_gs_req_descriptor_,
      c_gs_leave_gs_req::default_instance_,
      c_gs_leave_gs_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_leave_gs_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_leave_gs_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_leave_gs_req));
  gs_c_leave_gs_res_descriptor_ = file->message_type(63);
  static const int gs_c_leave_gs_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_leave_gs_res, error_code_),
  };
  gs_c_leave_gs_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_leave_gs_res_descriptor_,
      gs_c_leave_gs_res::default_instance_,
      gs_c_leave_gs_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_leave_gs_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_leave_gs_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_leave_gs_res));
  c_gs_json_config_version_req_descriptor_ = file->message_type(64);
  static const int c_gs_json_config_version_req_offsets_[1] = {
  };
  c_gs_json_config_version_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_json_config_version_req_descriptor_,
      c_gs_json_config_version_req::default_instance_,
      c_gs_json_config_version_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_json_config_version_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_json_config_version_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_json_config_version_req));
  gs_c_json_config_version_res_descriptor_ = file->message_type(65);
  static const int gs_c_json_config_version_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_version_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_version_res, versions_),
  };
  gs_c_json_config_version_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_json_config_version_res_descriptor_,
      gs_c_json_config_version_res::default_instance_,
      gs_c_json_config_version_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_version_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_version_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_json_config_version_res));
  gs_c_json_config_version_res_config_version_descriptor_ = gs_c_json_config_version_res_descriptor_->nested_type(0);
  static const int gs_c_json_config_version_res_config_version_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_version_res_config_version, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_version_res_config_version, md5_),
  };
  gs_c_json_config_version_res_config_version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_json_config_version_res_config_version_descriptor_,
      gs_c_json_config_version_res_config_version::default_instance_,
      gs_c_json_config_version_res_config_version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_version_res_config_version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_version_res_config_version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_json_config_version_res_config_version));
  c_gs_json_config_req_descriptor_ = file->message_type(66);
  static const int c_gs_json_config_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_json_config_req, names_),
  };
  c_gs_json_config_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_json_config_req_descriptor_,
      c_gs_json_config_req::default_instance_,
      c_gs_json_config_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_json_config_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_json_config_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_json_config_req));
  gs_c_json_config_res_descriptor_ = file->message_type(67);
  static const int gs_c_json_config_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_res, configs_),
  };
  gs_c_json_config_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_json_config_res_descriptor_,
      gs_c_json_config_res::default_instance_,
      gs_c_json_config_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_json_config_res));
  gs_c_json_config_res_config_descriptor_ = gs_c_json_config_res_descriptor_->nested_type(0);
  static const int gs_c_json_config_res_config_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_res_config, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_res_config, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_res_config, content_),
  };
  gs_c_json_config_res_config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_json_config_res_config_descriptor_,
      gs_c_json_config_res_config::default_instance_,
      gs_c_json_config_res_config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_res_config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_json_config_res_config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_json_config_res_config));
  c_gs_config_req_descriptor_ = file->message_type(68);
  static const int c_gs_config_req_offsets_[1] = {
  };
  c_gs_config_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_config_req_descriptor_,
      c_gs_config_req::default_instance_,
      c_gs_config_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_config_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_config_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_config_req));
  gs_c_config_res_descriptor_ = file->message_type(69);
  static const int gs_c_config_res_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, chapter_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, sub_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, hero_prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, boss_prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, monster_prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, aoyi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, passive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, trigger_start_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, realtime_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, trigger_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, hero_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, boss_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, coin_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, reset_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, spprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, staprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, vip_function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, shop_resetprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, prize_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, hero_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, evolution_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, quality_rule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, rule_),
  };
  gs_c_config_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_config_res_descriptor_,
      gs_c_config_res::default_instance_,
      gs_c_config_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_config_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_config_res));
  c_gs_user_info_req_descriptor_ = file->message_type(70);
  static const int c_gs_user_info_req_offsets_[1] = {
  };
  c_gs_user_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_user_info_req_descriptor_,
      c_gs_user_info_req::default_instance_,
      c_gs_user_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_user_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_user_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_user_info_req));
  user_sub_task_descriptor_ = file->message_type(71);
  static const int user_sub_task_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sub_task, sub_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sub_task, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sub_task, last_enter_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sub_task, last_day_enter_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sub_task, total_enter_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sub_task, last_reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sub_task, last_day_reset_num_),
  };
  user_sub_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_sub_task_descriptor_,
      user_sub_task::default_instance_,
      user_sub_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sub_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sub_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_sub_task));
  user_sub_task_array_descriptor_ = file->message_type(72);
  static const int user_sub_task_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sub_task_array, items_),
  };
  user_sub_task_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_sub_task_array_descriptor_,
      user_sub_task_array::default_instance_,
      user_sub_task_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sub_task_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sub_task_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_sub_task_array));
  user_hero_equip_descriptor_ = file->message_type(73);
  static const int user_hero_equip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero_equip, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero_equip, level_),
  };
  user_hero_equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_hero_equip_descriptor_,
      user_hero_equip::default_instance_,
      user_hero_equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero_equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero_equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_hero_equip));
  user_hero_skill_descriptor_ = file->message_type(74);
  static const int user_hero_skill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero_skill, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero_skill, level_),
  };
  user_hero_skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_hero_skill_descriptor_,
      user_hero_skill::default_instance_,
      user_hero_skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero_skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero_skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_hero_skill));
  user_hero_skill_e_skill_type_descriptor_ = user_hero_skill_descriptor_->enum_type(0);
  user_hero_descriptor_ = file->message_type(75);
  static const int user_hero_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero, cur_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero, got_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero, skills_),
  };
  user_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_hero_descriptor_,
      user_hero::default_instance_,
      user_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_hero));
  user_hero_array_descriptor_ = file->message_type(76);
  static const int user_hero_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero_array, items_),
  };
  user_hero_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_hero_array_descriptor_,
      user_hero_array::default_instance_,
      user_hero_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_hero_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_hero_array));
  user_base_info_descriptor_ = file->message_type(77);
  static const int user_base_info_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, health_cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, health_last_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, skill_point_last_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, invoke_gold_free_left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, invoke_gold_free_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, invoke_diamond_free_left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, invoke_diamond_free_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, buy_used_times_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, buy_used_times_health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, buy_used_times_skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, head_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, friend_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, crusade_point_),
  };
  user_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_base_info_descriptor_,
      user_base_info::default_instance_,
      user_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_base_info));
  struct_game_element_descriptor_ = file->message_type(78);
  static const int struct_game_element_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_game_element, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_game_element, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_game_element, sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_game_element, num_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_game_element, num_),
  };
  struct_game_element_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      struct_game_element_descriptor_,
      struct_game_element::default_instance_,
      struct_game_element_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_game_element, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_game_element, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(struct_game_element));
  struct_game_element_EELEMENTTYPE_descriptor_ = struct_game_element_descriptor_->enum_type(0);
  struct_game_element_EELEMENT_NUM_TYPE_descriptor_ = struct_game_element_descriptor_->enum_type(1);
  user_shop_item_descriptor_ = file->message_type(79);
  static const int user_shop_item_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop_item, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop_item, element_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop_item, element_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop_item, element_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop_item, consume_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop_item, consume_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop_item, consume_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop_item, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop_item, is_sold_),
  };
  user_shop_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_shop_item_descriptor_,
      user_shop_item::default_instance_,
      user_shop_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_shop_item));
  user_shop_item_ESHOPITEMFLAG_descriptor_ = user_shop_item_descriptor_->enum_type(0);
  user_shop_descriptor_ = file->message_type(80);
  static const int user_shop_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, shop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, last_auto_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, last_manual_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, last_day_manual_refresh_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, random_open_start_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, random_open_end_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, items_),
  };
  user_shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_shop_descriptor_,
      user_shop::default_instance_,
      user_shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_shop));
  user_shop_ESHOPTYPE_descriptor_ = user_shop_descriptor_->enum_type(0);
  user_arena_log_descriptor_ = file->message_type(81);
  static const int user_arena_log_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log, is_attacker_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log, is_me_attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log, me_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log, match_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log, match_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log, match_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log, match_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log, match_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log, match_heros_),
  };
  user_arena_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_arena_log_descriptor_,
      user_arena_log::default_instance_,
      user_arena_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_arena_log));
  user_arena_log_user_arena_log_hero_descriptor_ = user_arena_log_descriptor_->nested_type(0);
  static const int user_arena_log_user_arena_log_hero_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log_user_arena_log_hero, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log_user_arena_log_hero, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log_user_arena_log_hero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log_user_arena_log_hero, star_),
  };
  user_arena_log_user_arena_log_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_arena_log_user_arena_log_hero_descriptor_,
      user_arena_log_user_arena_log_hero::default_instance_,
      user_arena_log_user_arena_log_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log_user_arena_log_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_log_user_arena_log_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_arena_log_user_arena_log_hero));
  user_arena_contestant_descriptor_ = file->message_type(82);
  static const int user_arena_contestant_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_contestant, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_contestant, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_contestant, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_contestant, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_contestant, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_contestant, head_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_contestant, heros_),
  };
  user_arena_contestant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_arena_contestant_descriptor_,
      user_arena_contestant::default_instance_,
      user_arena_contestant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_contestant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena_contestant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_arena_contestant));
  user_arena_descriptor_ = file->message_type(83);
  static const int user_arena_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena, last_challenge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena, last_day_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena, history_highest_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena, last_time_buy_arena_challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena, last_day_buy_arena_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena, matchs_),
  };
  user_arena_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_arena_descriptor_,
      user_arena::default_instance_,
      user_arena_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_arena, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_arena));
  user_crusade_descriptor_ = file->message_type(84);
  static const int user_crusade_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade, is_all_through_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade, me_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade, enemy_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade, left_reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade, left_promote_award_times_),
  };
  user_crusade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_crusade_descriptor_,
      user_crusade::default_instance_,
      user_crusade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_crusade));
  user_crusade_crusade_hero_descriptor_ = user_crusade_descriptor_->nested_type(0);
  static const int user_crusade_crusade_hero_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade_crusade_hero, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade_crusade_hero, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade_crusade_hero, ao_yi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade_crusade_hero, bi_sha_),
  };
  user_crusade_crusade_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_crusade_crusade_hero_descriptor_,
      user_crusade_crusade_hero::default_instance_,
      user_crusade_crusade_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade_crusade_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_crusade_crusade_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_crusade_crusade_hero));
  gs_c_user_info_res_descriptor_ = file->message_type(85);
  static const int gs_c_user_info_res_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, sub_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, item_elements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, mail_elements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, shops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, arena_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, guide_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, friend_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, crusade_),
  };
  gs_c_user_info_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_user_info_res_descriptor_,
      gs_c_user_info_res::default_instance_,
      gs_c_user_info_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_info_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_user_info_res));
  c_gs_start_sub_task_req_descriptor_ = file->message_type(86);
  static const int c_gs_start_sub_task_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_start_sub_task_req, sub_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_start_sub_task_req, heros_),
  };
  c_gs_start_sub_task_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_start_sub_task_req_descriptor_,
      c_gs_start_sub_task_req::default_instance_,
      c_gs_start_sub_task_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_start_sub_task_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_start_sub_task_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_start_sub_task_req));
  gs_c_start_sub_task_res_descriptor_ = file->message_type(87);
  static const int gs_c_start_sub_task_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_start_sub_task_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_start_sub_task_res, sub_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_start_sub_task_res, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_start_sub_task_res, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_start_sub_task_res, enter_time_),
  };
  gs_c_start_sub_task_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_start_sub_task_res_descriptor_,
      gs_c_start_sub_task_res::default_instance_,
      gs_c_start_sub_task_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_start_sub_task_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_start_sub_task_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_start_sub_task_res));
  c_gs_end_sub_task_req_descriptor_ = file->message_type(88);
  static const int c_gs_end_sub_task_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_end_sub_task_req, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_end_sub_task_req, star_),
  };
  c_gs_end_sub_task_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_end_sub_task_req_descriptor_,
      c_gs_end_sub_task_req::default_instance_,
      c_gs_end_sub_task_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_end_sub_task_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_end_sub_task_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_end_sub_task_req));
  gs_c_end_sub_task_res_descriptor_ = file->message_type(89);
  static const int gs_c_end_sub_task_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_end_sub_task_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_end_sub_task_res, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_end_sub_task_res, task_complete_prize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_end_sub_task_res, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_end_sub_task_res, shop_),
  };
  gs_c_end_sub_task_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_end_sub_task_res_descriptor_,
      gs_c_end_sub_task_res::default_instance_,
      gs_c_end_sub_task_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_end_sub_task_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_end_sub_task_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_end_sub_task_res));
  c_gs_invoke_hero_req_descriptor_ = file->message_type(90);
  static const int c_gs_invoke_hero_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_invoke_hero_req, invoke_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_invoke_hero_req, hero_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_invoke_hero_req, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_invoke_hero_req, hero_id_),
  };
  c_gs_invoke_hero_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_invoke_hero_req_descriptor_,
      c_gs_invoke_hero_req::default_instance_,
      c_gs_invoke_hero_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_invoke_hero_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_invoke_hero_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_invoke_hero_req));
  c_gs_invoke_hero_req_EINVOKE_TYPE_descriptor_ = c_gs_invoke_hero_req_descriptor_->enum_type(0);
  gs_c_invoke_hero_res_descriptor_ = file->message_type(91);
  static const int gs_c_invoke_hero_res_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_invoke_hero_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_invoke_hero_res, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_invoke_hero_res, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_invoke_hero_res, output_),
  };
  gs_c_invoke_hero_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_invoke_hero_res_descriptor_,
      gs_c_invoke_hero_res::default_instance_,
      gs_c_invoke_hero_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_invoke_hero_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_invoke_hero_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_invoke_hero_res));
  c_gs_equip_level_up_req_descriptor_ = file->message_type(92);
  static const int c_gs_equip_level_up_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_equip_level_up_req, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_equip_level_up_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_equip_level_up_req, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_equip_level_up_req, level_up_num_),
  };
  c_gs_equip_level_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_equip_level_up_req_descriptor_,
      c_gs_equip_level_up_req::default_instance_,
      c_gs_equip_level_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_equip_level_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_equip_level_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_equip_level_up_req));
  c_gs_equip_level_up_req_OP_TYPE_descriptor_ = c_gs_equip_level_up_req_descriptor_->enum_type(0);
  gs_c_equip_level_up_res_descriptor_ = file->message_type(93);
  static const int gs_c_equip_level_up_res_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_level_up_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_level_up_res, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_level_up_res, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_level_up_res, consume_),
  };
  gs_c_equip_level_up_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_equip_level_up_res_descriptor_,
      gs_c_equip_level_up_res::default_instance_,
      gs_c_equip_level_up_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_level_up_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_level_up_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_equip_level_up_res));
  c_gs_equip_evolution_req_descriptor_ = file->message_type(94);
  static const int c_gs_equip_evolution_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_equip_evolution_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_equip_evolution_req, equip_id_),
  };
  c_gs_equip_evolution_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_equip_evolution_req_descriptor_,
      c_gs_equip_evolution_req::default_instance_,
      c_gs_equip_evolution_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_equip_evolution_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_equip_evolution_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_equip_evolution_req));
  gs_c_equip_evolution_res_descriptor_ = file->message_type(95);
  static const int gs_c_equip_evolution_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_evolution_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_evolution_res, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_evolution_res, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_evolution_res, evolution_equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_evolution_res, consume_),
  };
  gs_c_equip_evolution_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_equip_evolution_res_descriptor_,
      gs_c_equip_evolution_res::default_instance_,
      gs_c_equip_evolution_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_evolution_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_equip_evolution_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_equip_evolution_res));
  c_gs_hero_evolution_req_descriptor_ = file->message_type(96);
  static const int c_gs_hero_evolution_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_hero_evolution_req, hero_id_),
  };
  c_gs_hero_evolution_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_hero_evolution_req_descriptor_,
      c_gs_hero_evolution_req::default_instance_,
      c_gs_hero_evolution_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_hero_evolution_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_hero_evolution_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_hero_evolution_req));
  gs_c_hero_evolution_res_descriptor_ = file->message_type(97);
  static const int gs_c_hero_evolution_res_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_hero_evolution_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_hero_evolution_res, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_hero_evolution_res, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_hero_evolution_res, new_skills_),
  };
  gs_c_hero_evolution_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_hero_evolution_res_descriptor_,
      gs_c_hero_evolution_res::default_instance_,
      gs_c_hero_evolution_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_hero_evolution_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_hero_evolution_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_hero_evolution_res));
  c_gs_hero_star_up_req_descriptor_ = file->message_type(98);
  static const int c_gs_hero_star_up_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_hero_star_up_req, hero_id_),
  };
  c_gs_hero_star_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_hero_star_up_req_descriptor_,
      c_gs_hero_star_up_req::default_instance_,
      c_gs_hero_star_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_hero_star_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_hero_star_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_hero_star_up_req));
  gs_c_hero_star_up_res_descriptor_ = file->message_type(99);
  static const int gs_c_hero_star_up_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_hero_star_up_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_hero_star_up_res, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_hero_star_up_res, consume_),
  };
  gs_c_hero_star_up_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_hero_star_up_res_descriptor_,
      gs_c_hero_star_up_res::default_instance_,
      gs_c_hero_star_up_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_hero_star_up_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_hero_star_up_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_hero_star_up_res));
  c_gs_skill_level_up_req_descriptor_ = file->message_type(100);
  static const int c_gs_skill_level_up_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_skill_level_up_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_skill_level_up_req, skill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_skill_level_up_req, level_),
  };
  c_gs_skill_level_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_skill_level_up_req_descriptor_,
      c_gs_skill_level_up_req::default_instance_,
      c_gs_skill_level_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_skill_level_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_skill_level_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_skill_level_up_req));
  gs_c_skill_level_up_res_descriptor_ = file->message_type(101);
  static const int gs_c_skill_level_up_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_skill_level_up_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_skill_level_up_res, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_skill_level_up_res, skill_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_skill_level_up_res, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_skill_level_up_res, consume_),
  };
  gs_c_skill_level_up_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_skill_level_up_res_descriptor_,
      gs_c_skill_level_up_res::default_instance_,
      gs_c_skill_level_up_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_skill_level_up_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_skill_level_up_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_skill_level_up_res));
  c_gs_invoke_req_descriptor_ = file->message_type(102);
  static const int c_gs_invoke_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_invoke_req, invoke_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_invoke_req, invoke_num_),
  };
  c_gs_invoke_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_invoke_req_descriptor_,
      c_gs_invoke_req::default_instance_,
      c_gs_invoke_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_invoke_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_invoke_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_invoke_req));
  c_gs_invoke_req_EINVOKE_TYPE_descriptor_ = c_gs_invoke_req_descriptor_->enum_type(0);
  gs_c_invoke_res_descriptor_ = file->message_type(103);
  static const int gs_c_invoke_res_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_invoke_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_invoke_res, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_invoke_res, ouput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_invoke_res, heros_),
  };
  gs_c_invoke_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_invoke_res_descriptor_,
      gs_c_invoke_res::default_instance_,
      gs_c_invoke_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_invoke_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_invoke_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_invoke_res));
  struct_game_element_array_descriptor_ = file->message_type(104);
  static const int struct_game_element_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_game_element_array, items_),
  };
  struct_game_element_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      struct_game_element_array_descriptor_,
      struct_game_element_array::default_instance_,
      struct_game_element_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_game_element_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_game_element_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(struct_game_element_array));
  c_gs_diamond_speed_kill_req_descriptor_ = file->message_type(105);
  static const int c_gs_diamond_speed_kill_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_diamond_speed_kill_req, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_diamond_speed_kill_req, sub_task_id_),
  };
  c_gs_diamond_speed_kill_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_diamond_speed_kill_req_descriptor_,
      c_gs_diamond_speed_kill_req::default_instance_,
      c_gs_diamond_speed_kill_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_diamond_speed_kill_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_diamond_speed_kill_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_diamond_speed_kill_req));
  gs_c_diamond_speed_kill_res_descriptor_ = file->message_type(106);
  static const int gs_c_diamond_speed_kill_res_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_diamond_speed_kill_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_diamond_speed_kill_res, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_diamond_speed_kill_res, items_arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_diamond_speed_kill_res, shop_),
  };
  gs_c_diamond_speed_kill_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_diamond_speed_kill_res_descriptor_,
      gs_c_diamond_speed_kill_res::default_instance_,
      gs_c_diamond_speed_kill_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_diamond_speed_kill_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_diamond_speed_kill_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_diamond_speed_kill_res));
  c_gs_use_item_req_descriptor_ = file->message_type(107);
  static const int c_gs_use_item_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_use_item_req, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_use_item_req, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_use_item_req, target_id_),
  };
  c_gs_use_item_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_use_item_req_descriptor_,
      c_gs_use_item_req::default_instance_,
      c_gs_use_item_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_use_item_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_use_item_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_use_item_req));
  gs_c_use_item_res_descriptor_ = file->message_type(108);
  static const int gs_c_use_item_res_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_use_item_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_use_item_res, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_use_item_res, items_arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_use_item_res, shop_),
  };
  gs_c_use_item_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_use_item_res_descriptor_,
      gs_c_use_item_res::default_instance_,
      gs_c_use_item_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_use_item_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_use_item_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_use_item_res));
  c_gs_shop_info_req_descriptor_ = file->message_type(109);
  static const int c_gs_shop_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_shop_info_req, pull_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_shop_info_req, shop_type_),
  };
  c_gs_shop_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_shop_info_req_descriptor_,
      c_gs_shop_info_req::default_instance_,
      c_gs_shop_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_shop_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_shop_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_shop_info_req));
  c_gs_shop_info_req_PULLTYPE_descriptor_ = c_gs_shop_info_req_descriptor_->enum_type(0);
  gs_c_shop_info_res_descriptor_ = file->message_type(110);
  static const int gs_c_shop_info_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_info_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_info_res, shops_),
  };
  gs_c_shop_info_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_shop_info_res_descriptor_,
      gs_c_shop_info_res::default_instance_,
      gs_c_shop_info_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_info_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_info_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_shop_info_res));
  c_gs_shop_buy_item_req_descriptor_ = file->message_type(111);
  static const int c_gs_shop_buy_item_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_shop_buy_item_req, shop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_shop_buy_item_req, pos_),
  };
  c_gs_shop_buy_item_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_shop_buy_item_req_descriptor_,
      c_gs_shop_buy_item_req::default_instance_,
      c_gs_shop_buy_item_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_shop_buy_item_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_shop_buy_item_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_shop_buy_item_req));
  gs_c_shop_buy_item_res_descriptor_ = file->message_type(112);
  static const int gs_c_shop_buy_item_res_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_buy_item_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_buy_item_res, refreshed_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_buy_item_res, shop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_buy_item_res, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_buy_item_res, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_buy_item_res, consume_),
  };
  gs_c_shop_buy_item_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_shop_buy_item_res_descriptor_,
      gs_c_shop_buy_item_res::default_instance_,
      gs_c_shop_buy_item_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_buy_item_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_buy_item_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_shop_buy_item_res));
  c_gs_shop_refresh_req_descriptor_ = file->message_type(113);
  static const int c_gs_shop_refresh_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_shop_refresh_req, shop_type_),
  };
  c_gs_shop_refresh_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_shop_refresh_req_descriptor_,
      c_gs_shop_refresh_req::default_instance_,
      c_gs_shop_refresh_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_shop_refresh_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_shop_refresh_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_shop_refresh_req));
  gs_c_shop_refresh_res_descriptor_ = file->message_type(114);
  static const int gs_c_shop_refresh_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_refresh_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_refresh_res, shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_refresh_res, consume_),
  };
  gs_c_shop_refresh_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_shop_refresh_res_descriptor_,
      gs_c_shop_refresh_res::default_instance_,
      gs_c_shop_refresh_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_refresh_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_shop_refresh_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_shop_refresh_res));
  c_gs_sell_req_descriptor_ = file->message_type(115);
  static const int c_gs_sell_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_sell_req, items_),
  };
  c_gs_sell_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_sell_req_descriptor_,
      c_gs_sell_req::default_instance_,
      c_gs_sell_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_sell_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_sell_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_sell_req));
  gs_c_sell_res_descriptor_ = file->message_type(116);
  static const int gs_c_sell_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sell_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sell_res, eles_),
  };
  gs_c_sell_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_sell_res_descriptor_,
      gs_c_sell_res::default_instance_,
      gs_c_sell_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sell_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sell_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_sell_res));
  c_gs_arena_refresh_match_req_descriptor_ = file->message_type(117);
  static const int c_gs_arena_refresh_match_req_offsets_[1] = {
  };
  c_gs_arena_refresh_match_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_arena_refresh_match_req_descriptor_,
      c_gs_arena_refresh_match_req::default_instance_,
      c_gs_arena_refresh_match_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_refresh_match_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_refresh_match_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_arena_refresh_match_req));
  gs_c_arena_refresh_match_res_descriptor_ = file->message_type(118);
  static const int gs_c_arena_refresh_match_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_refresh_match_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_refresh_match_res, matchs_),
  };
  gs_c_arena_refresh_match_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_arena_refresh_match_res_descriptor_,
      gs_c_arena_refresh_match_res::default_instance_,
      gs_c_arena_refresh_match_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_refresh_match_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_refresh_match_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_arena_refresh_match_res));
  c_gs_arena_update_team_req_descriptor_ = file->message_type(119);
  static const int c_gs_arena_update_team_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_update_team_req, heros_),
  };
  c_gs_arena_update_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_arena_update_team_req_descriptor_,
      c_gs_arena_update_team_req::default_instance_,
      c_gs_arena_update_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_update_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_update_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_arena_update_team_req));
  gs_c_arena_update_team_res_descriptor_ = file->message_type(120);
  static const int gs_c_arena_update_team_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_update_team_res, error_code_),
  };
  gs_c_arena_update_team_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_arena_update_team_res_descriptor_,
      gs_c_arena_update_team_res::default_instance_,
      gs_c_arena_update_team_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_update_team_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_update_team_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_arena_update_team_res));
  c_gs_arena_start_challenge_req_descriptor_ = file->message_type(121);
  static const int c_gs_arena_start_challenge_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_start_challenge_req, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_start_challenge_req, defender_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_start_challenge_req, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_start_challenge_req, defender_power_),
  };
  c_gs_arena_start_challenge_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_arena_start_challenge_req_descriptor_,
      c_gs_arena_start_challenge_req::default_instance_,
      c_gs_arena_start_challenge_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_start_challenge_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_start_challenge_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_arena_start_challenge_req));
  gs_c_arena_start_challenge_res_descriptor_ = file->message_type(122);
  static const int gs_c_arena_start_challenge_res_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_start_challenge_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_start_challenge_res, last_challenge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_start_challenge_res, last_day_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_start_challenge_res, matchs_),
  };
  gs_c_arena_start_challenge_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_arena_start_challenge_res_descriptor_,
      gs_c_arena_start_challenge_res::default_instance_,
      gs_c_arena_start_challenge_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_start_challenge_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_start_challenge_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_arena_start_challenge_res));
  c_gs_arena_end_challenge_req_descriptor_ = file->message_type(123);
  static const int c_gs_arena_end_challenge_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_end_challenge_req, is_win_),
  };
  c_gs_arena_end_challenge_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_arena_end_challenge_req_descriptor_,
      c_gs_arena_end_challenge_req::default_instance_,
      c_gs_arena_end_challenge_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_end_challenge_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_end_challenge_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_arena_end_challenge_req));
  gs_c_arena_end_challenge_res_descriptor_ = file->message_type(124);
  static const int gs_c_arena_end_challenge_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_end_challenge_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_end_challenge_res, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_end_challenge_res, output_),
  };
  gs_c_arena_end_challenge_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_arena_end_challenge_res_descriptor_,
      gs_c_arena_end_challenge_res::default_instance_,
      gs_c_arena_end_challenge_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_end_challenge_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_end_challenge_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_arena_end_challenge_res));
  gs_c_arena_challenge_ntf_descriptor_ = file->message_type(125);
  static const int gs_c_arena_challenge_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_ntf, ele_),
  };
  gs_c_arena_challenge_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_arena_challenge_ntf_descriptor_,
      gs_c_arena_challenge_ntf::default_instance_,
      gs_c_arena_challenge_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_arena_challenge_ntf));
  c_gs_arena_challenge_reset_cd_req_descriptor_ = file->message_type(126);
  static const int c_gs_arena_challenge_reset_cd_req_offsets_[1] = {
  };
  c_gs_arena_challenge_reset_cd_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_arena_challenge_reset_cd_req_descriptor_,
      c_gs_arena_challenge_reset_cd_req::default_instance_,
      c_gs_arena_challenge_reset_cd_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_challenge_reset_cd_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_challenge_reset_cd_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_arena_challenge_reset_cd_req));
  gs_c_arena_challenge_reset_cd_res_descriptor_ = file->message_type(127);
  static const int gs_c_arena_challenge_reset_cd_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_cd_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_cd_res, last_challenge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_cd_res, consume_),
  };
  gs_c_arena_challenge_reset_cd_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_arena_challenge_reset_cd_res_descriptor_,
      gs_c_arena_challenge_reset_cd_res::default_instance_,
      gs_c_arena_challenge_reset_cd_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_cd_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_cd_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_arena_challenge_reset_cd_res));
  c_gs_arena_challenge_reset_num_req_descriptor_ = file->message_type(128);
  static const int c_gs_arena_challenge_reset_num_req_offsets_[1] = {
  };
  c_gs_arena_challenge_reset_num_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_arena_challenge_reset_num_req_descriptor_,
      c_gs_arena_challenge_reset_num_req::default_instance_,
      c_gs_arena_challenge_reset_num_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_challenge_reset_num_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_challenge_reset_num_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_arena_challenge_reset_num_req));
  gs_c_arena_challenge_reset_num_res_descriptor_ = file->message_type(129);
  static const int gs_c_arena_challenge_reset_num_res_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_num_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_num_res, last_challenge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_num_res, last_day_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_num_res, last_time_buy_arena_challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_num_res, last_day_buy_arena_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_num_res, consume_),
  };
  gs_c_arena_challenge_reset_num_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_arena_challenge_reset_num_res_descriptor_,
      gs_c_arena_challenge_reset_num_res::default_instance_,
      gs_c_arena_challenge_reset_num_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_num_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_challenge_reset_num_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_arena_challenge_reset_num_res));
  c_gs_arena_ranks_req_descriptor_ = file->message_type(130);
  static const int c_gs_arena_ranks_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_ranks_req, page_num_),
  };
  c_gs_arena_ranks_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_arena_ranks_req_descriptor_,
      c_gs_arena_ranks_req::default_instance_,
      c_gs_arena_ranks_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_ranks_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_ranks_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_arena_ranks_req));
  gs_c_arena_ranks_res_descriptor_ = file->message_type(131);
  static const int gs_c_arena_ranks_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_ranks_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_ranks_res, ranks_),
  };
  gs_c_arena_ranks_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_arena_ranks_res_descriptor_,
      gs_c_arena_ranks_res::default_instance_,
      gs_c_arena_ranks_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_ranks_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_ranks_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_arena_ranks_res));
  c_gs_arena_log_req_descriptor_ = file->message_type(132);
  static const int c_gs_arena_log_req_offsets_[1] = {
  };
  c_gs_arena_log_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_arena_log_req_descriptor_,
      c_gs_arena_log_req::default_instance_,
      c_gs_arena_log_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_log_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_log_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_arena_log_req));
  gs_c_arena_log_res_descriptor_ = file->message_type(133);
  static const int gs_c_arena_log_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_log_res, log_),
  };
  gs_c_arena_log_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_arena_log_res_descriptor_,
      gs_c_arena_log_res::default_instance_,
      gs_c_arena_log_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_log_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_log_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_arena_log_res));
  c_gs_arena_search_req_descriptor_ = file->message_type(134);
  static const int c_gs_arena_search_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_search_req, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_search_req, user_name_),
  };
  c_gs_arena_search_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_arena_search_req_descriptor_,
      c_gs_arena_search_req::default_instance_,
      c_gs_arena_search_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_search_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_arena_search_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_arena_search_req));
  gs_c_arena_search_res_descriptor_ = file->message_type(135);
  static const int gs_c_arena_search_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_search_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_search_res, contestant_),
  };
  gs_c_arena_search_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_arena_search_res_descriptor_,
      gs_c_arena_search_res::default_instance_,
      gs_c_arena_search_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_search_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_arena_search_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_arena_search_res));
  c_gs_fragment_compound_req_descriptor_ = file->message_type(136);
  static const int c_gs_fragment_compound_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_fragment_compound_req, compound_id_),
  };
  c_gs_fragment_compound_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_fragment_compound_req_descriptor_,
      c_gs_fragment_compound_req::default_instance_,
      c_gs_fragment_compound_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_fragment_compound_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_fragment_compound_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_fragment_compound_req));
  gs_c_fragment_compound_res_descriptor_ = file->message_type(137);
  static const int gs_c_fragment_compound_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_fragment_compound_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_fragment_compound_res, eles_),
  };
  gs_c_fragment_compound_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_fragment_compound_res_descriptor_,
      gs_c_fragment_compound_res::default_instance_,
      gs_c_fragment_compound_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_fragment_compound_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_fragment_compound_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_fragment_compound_res));
  user_mail_descriptor_ = file->message_type(138);
  static const int user_mail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mail, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mail, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mail, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mail, elements_),
  };
  user_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_mail_descriptor_,
      user_mail::default_instance_,
      user_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_mail));
  c_gs_mail_opt_req_descriptor_ = file->message_type(139);
  static const int c_gs_mail_opt_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_mail_opt_req, mail_opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_mail_opt_req, mail_id_arr_),
  };
  c_gs_mail_opt_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_mail_opt_req_descriptor_,
      c_gs_mail_opt_req::default_instance_,
      c_gs_mail_opt_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_mail_opt_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_mail_opt_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_mail_opt_req));
  c_gs_mail_opt_req_OPT_descriptor_ = c_gs_mail_opt_req_descriptor_->enum_type(0);
  gs_c_mail_opt_res_descriptor_ = file->message_type(140);
  static const int gs_c_mail_opt_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_opt_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_opt_res, mail_update_arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_opt_res, output_arr_),
  };
  gs_c_mail_opt_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_mail_opt_res_descriptor_,
      gs_c_mail_opt_res::default_instance_,
      gs_c_mail_opt_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_opt_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_opt_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_mail_opt_res));
  gs_c_mail_opt_res_mail_update_descriptor_ = gs_c_mail_opt_res_descriptor_->nested_type(0);
  static const int gs_c_mail_opt_res_mail_update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_opt_res_mail_update, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_opt_res_mail_update, mail_status_),
  };
  gs_c_mail_opt_res_mail_update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_mail_opt_res_mail_update_descriptor_,
      gs_c_mail_opt_res_mail_update::default_instance_,
      gs_c_mail_opt_res_mail_update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_opt_res_mail_update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_opt_res_mail_update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_mail_opt_res_mail_update));
  gs_c_mail_ntf_descriptor_ = file->message_type(141);
  static const int gs_c_mail_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_ntf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_ntf, ele_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_ntf, mail_id_),
  };
  gs_c_mail_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_mail_ntf_descriptor_,
      gs_c_mail_ntf::default_instance_,
      gs_c_mail_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_mail_ntf));
  gs_c_mail_ntf_OP_TYPE_descriptor_ = gs_c_mail_ntf_descriptor_->enum_type(0);
  gs_c_mail_ntf_array_descriptor_ = file->message_type(142);
  static const int gs_c_mail_ntf_array_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_ntf_array, mails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_ntf_array, eles_),
  };
  gs_c_mail_ntf_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_mail_ntf_array_descriptor_,
      gs_c_mail_ntf_array::default_instance_,
      gs_c_mail_ntf_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_ntf_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mail_ntf_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_mail_ntf_array));
  c_gs_buy_req_descriptor_ = file->message_type(143);
  static const int c_gs_buy_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_buy_req, buy_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_buy_req, element_id_),
  };
  c_gs_buy_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_buy_req_descriptor_,
      c_gs_buy_req::default_instance_,
      c_gs_buy_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_buy_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_buy_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_buy_req));
  gs_c_buy_res_descriptor_ = file->message_type(144);
  static const int gs_c_buy_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_buy_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_buy_res, buy_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_buy_res, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_buy_res, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_buy_res, buy_used_times_),
  };
  gs_c_buy_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_buy_res_descriptor_,
      gs_c_buy_res::default_instance_,
      gs_c_buy_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_buy_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_buy_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_buy_res));
  user_mission_descriptor_ = file->message_type(145);
  static const int user_mission_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mission, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mission, mission_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mission, event_needs_),
  };
  user_mission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_mission_descriptor_,
      user_mission::default_instance_,
      user_mission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_mission));
  user_mission_mission_event_need_descriptor_ = user_mission_descriptor_->nested_type(0);
  static const int user_mission_mission_event_need_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mission_mission_event_need, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mission_mission_event_need, event_sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mission_mission_event_need, cur_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mission_mission_event_need, need_val_),
  };
  user_mission_mission_event_need_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_mission_mission_event_need_descriptor_,
      user_mission_mission_event_need::default_instance_,
      user_mission_mission_event_need_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mission_mission_event_need, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_mission_mission_event_need, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_mission_mission_event_need));
  user_mission_MISSION_EVENT_TYPE_descriptor_ = user_mission_descriptor_->enum_type(0);
  user_mission_MISSION_EVENT_SUB_TYPE_descriptor_ = user_mission_descriptor_->enum_type(1);
  user_mission_MISSION_STATUS_descriptor_ = user_mission_descriptor_->enum_type(2);
  gs_c_mission_ntf_array_descriptor_ = file->message_type(146);
  static const int gs_c_mission_ntf_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mission_ntf_array, mis_opts_),
  };
  gs_c_mission_ntf_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_mission_ntf_array_descriptor_,
      gs_c_mission_ntf_array::default_instance_,
      gs_c_mission_ntf_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mission_ntf_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mission_ntf_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_mission_ntf_array));
  gs_c_mission_ntf_array_mission_opt_descriptor_ = gs_c_mission_ntf_array_descriptor_->nested_type(0);
  static const int gs_c_mission_ntf_array_mission_opt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mission_ntf_array_mission_opt, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mission_ntf_array_mission_opt, mis_),
  };
  gs_c_mission_ntf_array_mission_opt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_mission_ntf_array_mission_opt_descriptor_,
      gs_c_mission_ntf_array_mission_opt::default_instance_,
      gs_c_mission_ntf_array_mission_opt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mission_ntf_array_mission_opt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_mission_ntf_array_mission_opt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_mission_ntf_array_mission_opt));
  gs_c_mission_ntf_array_mission_opt_OPT_descriptor_ = gs_c_mission_ntf_array_mission_opt_descriptor_->enum_type(0);
  c_gs_get_mission_reward_req_descriptor_ = file->message_type(147);
  static const int c_gs_get_mission_reward_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_get_mission_reward_req, mission_id_),
  };
  c_gs_get_mission_reward_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_get_mission_reward_req_descriptor_,
      c_gs_get_mission_reward_req::default_instance_,
      c_gs_get_mission_reward_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_get_mission_reward_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_get_mission_reward_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_get_mission_reward_req));
  gs_c_get_mission_reward_res_descriptor_ = file->message_type(148);
  static const int gs_c_get_mission_reward_res_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_get_mission_reward_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_get_mission_reward_res, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_get_mission_reward_res, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_get_mission_reward_res, eles_),
  };
  gs_c_get_mission_reward_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_get_mission_reward_res_descriptor_,
      gs_c_get_mission_reward_res::default_instance_,
      gs_c_get_mission_reward_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_get_mission_reward_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_get_mission_reward_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_get_mission_reward_res));
  sign_n_reward_descriptor_ = file->message_type(149);
  static const int sign_n_reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_n_reward, reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_n_reward, status_),
  };
  sign_n_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sign_n_reward_descriptor_,
      sign_n_reward::default_instance_,
      sign_n_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_n_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sign_n_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sign_n_reward));
  sign_n_reward_SIGN_N_REWARD_TYPE_descriptor_ = sign_n_reward_descriptor_->enum_type(0);
  sign_n_reward_SIGN_N_REWARD_STATUS_descriptor_ = sign_n_reward_descriptor_->enum_type(1);
  user_sign_descriptor_ = file->message_type(150);
  static const int user_sign_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sign, signed_1_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sign, signed_n_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sign, left_add_sign_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sign, is_already_sign_),
  };
  user_sign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_sign_descriptor_,
      user_sign::default_instance_,
      user_sign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_sign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_sign));
  c_gs_sign_req_descriptor_ = file->message_type(151);
  static const int c_gs_sign_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_sign_req, sign_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_sign_req, reward_type_),
  };
  c_gs_sign_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_sign_req_descriptor_,
      c_gs_sign_req::default_instance_,
      c_gs_sign_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_sign_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_sign_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_sign_req));
  c_gs_sign_req_SIGN_TYPE_descriptor_ = c_gs_sign_req_descriptor_->enum_type(0);
  gs_c_sign_res_descriptor_ = file->message_type(152);
  static const int gs_c_sign_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sign_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sign_res, eles_),
  };
  gs_c_sign_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_sign_res_descriptor_,
      gs_c_sign_res::default_instance_,
      gs_c_sign_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sign_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sign_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_sign_res));
  c_gs_sign_add_req_descriptor_ = file->message_type(153);
  static const int c_gs_sign_add_req_offsets_[1] = {
  };
  c_gs_sign_add_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_sign_add_req_descriptor_,
      c_gs_sign_add_req::default_instance_,
      c_gs_sign_add_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_sign_add_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_sign_add_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_sign_add_req));
  gs_c_sign_add_res_descriptor_ = file->message_type(154);
  static const int gs_c_sign_add_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sign_add_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sign_add_res, left_add_sign_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sign_add_res, eles_),
  };
  gs_c_sign_add_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_sign_add_res_descriptor_,
      gs_c_sign_add_res::default_instance_,
      gs_c_sign_add_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sign_add_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_sign_add_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_sign_add_res));
  c_gs_head_or_frame_change_req_descriptor_ = file->message_type(155);
  static const int c_gs_head_or_frame_change_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_head_or_frame_change_req, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_head_or_frame_change_req, target_id_),
  };
  c_gs_head_or_frame_change_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_head_or_frame_change_req_descriptor_,
      c_gs_head_or_frame_change_req::default_instance_,
      c_gs_head_or_frame_change_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_head_or_frame_change_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_head_or_frame_change_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_head_or_frame_change_req));
  gs_c_head_or_frame_change_res_descriptor_ = file->message_type(156);
  static const int gs_c_head_or_frame_change_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_head_or_frame_change_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_head_or_frame_change_res, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_head_or_frame_change_res, target_id_),
  };
  gs_c_head_or_frame_change_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_head_or_frame_change_res_descriptor_,
      gs_c_head_or_frame_change_res::default_instance_,
      gs_c_head_or_frame_change_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_head_or_frame_change_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_head_or_frame_change_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_head_or_frame_change_res));
  c_gs_edit_player_info_req_descriptor_ = file->message_type(157);
  static const int c_gs_edit_player_info_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_edit_player_info_req, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_edit_player_info_req, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_edit_player_info_req, head_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_edit_player_info_req, signature_),
  };
  c_gs_edit_player_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_edit_player_info_req_descriptor_,
      c_gs_edit_player_info_req::default_instance_,
      c_gs_edit_player_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_edit_player_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_edit_player_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_edit_player_info_req));
  gs_c_edit_player_info_res_descriptor_ = file->message_type(158);
  static const int gs_c_edit_player_info_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_edit_player_info_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_edit_player_info_res, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_edit_player_info_res, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_edit_player_info_res, head_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_edit_player_info_res, signature_),
  };
  gs_c_edit_player_info_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_edit_player_info_res_descriptor_,
      gs_c_edit_player_info_res::default_instance_,
      gs_c_edit_player_info_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_edit_player_info_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_edit_player_info_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_edit_player_info_res));
  c_gs_finish_novice_guide_req_descriptor_ = file->message_type(159);
  static const int c_gs_finish_novice_guide_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_finish_novice_guide_req, guide_id_),
  };
  c_gs_finish_novice_guide_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_finish_novice_guide_req_descriptor_,
      c_gs_finish_novice_guide_req::default_instance_,
      c_gs_finish_novice_guide_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_finish_novice_guide_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_finish_novice_guide_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_finish_novice_guide_req));
  gs_c_finish_novice_guide_res_descriptor_ = file->message_type(160);
  static const int gs_c_finish_novice_guide_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_finish_novice_guide_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_finish_novice_guide_res, guide_id_),
  };
  gs_c_finish_novice_guide_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_finish_novice_guide_res_descriptor_,
      gs_c_finish_novice_guide_res::default_instance_,
      gs_c_finish_novice_guide_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_finish_novice_guide_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_finish_novice_guide_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_finish_novice_guide_res));
  gs_c_marquee_ntf_descriptor_ = file->message_type(161);
  static const int gs_c_marquee_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_marquee_ntf, marquee_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_marquee_ntf, marquee_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_marquee_ntf, content_),
  };
  gs_c_marquee_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_marquee_ntf_descriptor_,
      gs_c_marquee_ntf::default_instance_,
      gs_c_marquee_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_marquee_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_marquee_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_marquee_ntf));
  gs_c_marquee_ntf_MARQUEE_TYPE_descriptor_ = gs_c_marquee_ntf_descriptor_->enum_type(0);
  gs_c_element_ntf_descriptor_ = file->message_type(162);
  static const int gs_c_element_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_element_ntf, eles_),
  };
  gs_c_element_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_element_ntf_descriptor_,
      gs_c_element_ntf::default_instance_,
      gs_c_element_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_element_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_element_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_element_ntf));
  friend_base_info_descriptor_ = file->message_type(163);
  static const int friend_base_info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, head_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, arena_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, signature_),
  };
  friend_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      friend_base_info_descriptor_,
      friend_base_info::default_instance_,
      friend_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(friend_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(friend_base_info));
  user_friend_descriptor_ = file->message_type(164);
  static const int user_friend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friend, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friend, applies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friend, confirms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friend, recommends_),
  };
  user_friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_friend_descriptor_,
      user_friend::default_instance_,
      user_friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_friend));
  user_friend_friend_info_descriptor_ = user_friend_descriptor_->nested_type(0);
  static const int user_friend_friend_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friend_friend_info, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friend_friend_info, is_friend_give_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friend_friend_info, is_me_give_),
  };
  user_friend_friend_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_friend_friend_info_descriptor_,
      user_friend_friend_info::default_instance_,
      user_friend_friend_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friend_friend_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_friend_friend_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_friend_friend_info));
  c_gs_user_friend_op_req_descriptor_ = file->message_type(165);
  static const int c_gs_user_friend_op_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_user_friend_op_req, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_user_friend_op_req, user_id_),
  };
  c_gs_user_friend_op_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_user_friend_op_req_descriptor_,
      c_gs_user_friend_op_req::default_instance_,
      c_gs_user_friend_op_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_user_friend_op_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_user_friend_op_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_user_friend_op_req));
  c_gs_user_friend_op_req_OP_TYPE_descriptor_ = c_gs_user_friend_op_req_descriptor_->enum_type(0);
  gs_c_user_friend_op_res_descriptor_ = file->message_type(166);
  static const int gs_c_user_friend_op_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_friend_op_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_friend_op_res, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_friend_op_res, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_friend_op_res, eles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_friend_op_res, base_info_),
  };
  gs_c_user_friend_op_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_user_friend_op_res_descriptor_,
      gs_c_user_friend_op_res::default_instance_,
      gs_c_user_friend_op_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_friend_op_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_user_friend_op_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_user_friend_op_res));
  c_gs_search_user_req_descriptor_ = file->message_type(167);
  static const int c_gs_search_user_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_search_user_req, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_search_user_req, user_id_),
  };
  c_gs_search_user_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_search_user_req_descriptor_,
      c_gs_search_user_req::default_instance_,
      c_gs_search_user_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_search_user_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_search_user_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_search_user_req));
  gs_c_search_user_res_descriptor_ = file->message_type(168);
  static const int gs_c_search_user_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_search_user_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_search_user_res, base_info_),
  };
  gs_c_search_user_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_search_user_res_descriptor_,
      gs_c_search_user_res::default_instance_,
      gs_c_search_user_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_search_user_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_search_user_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_search_user_res));
  gs_c_friend_ntf_descriptor_ = file->message_type(169);
  static const int gs_c_friend_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_friend_ntf, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_friend_ntf, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_friend_ntf, base_info_),
  };
  gs_c_friend_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_friend_ntf_descriptor_,
      gs_c_friend_ntf::default_instance_,
      gs_c_friend_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_friend_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_friend_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_friend_ntf));
  gs_c_friend_ntf_OP_TYPE_descriptor_ = gs_c_friend_ntf_descriptor_->enum_type(0);
  c_gs_chat_req_descriptor_ = file->message_type(170);
  static const int c_gs_chat_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_chat_req, chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_chat_req, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_chat_req, to_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_chat_req, word_),
  };
  c_gs_chat_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_chat_req_descriptor_,
      c_gs_chat_req::default_instance_,
      c_gs_chat_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_chat_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_chat_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_chat_req));
  c_gs_chat_req_CHAT_TYPE_descriptor_ = c_gs_chat_req_descriptor_->enum_type(0);
  gs_c_chat_res_descriptor_ = file->message_type(171);
  static const int gs_c_chat_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_chat_res, error_code_),
  };
  gs_c_chat_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_chat_res_descriptor_,
      gs_c_chat_res::default_instance_,
      gs_c_chat_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_chat_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_chat_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_chat_res));
  gs_c_chat_ntf_descriptor_ = file->message_type(172);
  static const int gs_c_chat_ntf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_chat_ntf, chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_chat_ntf, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_chat_ntf, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_chat_ntf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_chat_ntf, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_chat_ntf, head_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_chat_ntf, word_),
  };
  gs_c_chat_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_chat_ntf_descriptor_,
      gs_c_chat_ntf::default_instance_,
      gs_c_chat_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_chat_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_chat_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_chat_ntf));
  c_gs_fight_power_req_descriptor_ = file->message_type(173);
  static const int c_gs_fight_power_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_fight_power_req, fight_power_),
  };
  c_gs_fight_power_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_fight_power_req_descriptor_,
      c_gs_fight_power_req::default_instance_,
      c_gs_fight_power_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_fight_power_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_fight_power_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_fight_power_req));
  gs_c_fight_power_res_descriptor_ = file->message_type(174);
  static const int gs_c_fight_power_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_fight_power_res, error_code_),
  };
  gs_c_fight_power_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_fight_power_res_descriptor_,
      gs_c_fight_power_res::default_instance_,
      gs_c_fight_power_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_fight_power_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_fight_power_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_fight_power_res));
  c_gs_rank_req_descriptor_ = file->message_type(175);
  static const int c_gs_rank_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_rank_req, rank_type_),
  };
  c_gs_rank_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_rank_req_descriptor_,
      c_gs_rank_req::default_instance_,
      c_gs_rank_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_rank_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_rank_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_rank_req));
  c_gs_rank_req_RANK_TYPE_descriptor_ = c_gs_rank_req_descriptor_->enum_type(0);
  gs_c_rank_res_descriptor_ = file->message_type(176);
  static const int gs_c_rank_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res, ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res, me_cur_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res, me_cur_value_),
  };
  gs_c_rank_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_rank_res_descriptor_,
      gs_c_rank_res::default_instance_,
      gs_c_rank_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_rank_res));
  gs_c_rank_res_user_hero_brief_info_descriptor_ = gs_c_rank_res_descriptor_->nested_type(0);
  static const int gs_c_rank_res_user_hero_brief_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_user_hero_brief_info, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_user_hero_brief_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_user_hero_brief_info, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_user_hero_brief_info, star_),
  };
  gs_c_rank_res_user_hero_brief_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_rank_res_user_hero_brief_info_descriptor_,
      gs_c_rank_res_user_hero_brief_info::default_instance_,
      gs_c_rank_res_user_hero_brief_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_user_hero_brief_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_user_hero_brief_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_rank_res_user_hero_brief_info));
  gs_c_rank_res_rank_info_descriptor_ = gs_c_rank_res_descriptor_->nested_type(1);
  static const int gs_c_rank_res_rank_info_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_rank_info, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_rank_info, head_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_rank_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_rank_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_rank_info, arena_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_rank_info, fight_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_rank_info, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_rank_info, level_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_rank_info, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_rank_info, heros_),
  };
  gs_c_rank_res_rank_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_rank_res_rank_info_descriptor_,
      gs_c_rank_res_rank_info::default_instance_,
      gs_c_rank_res_rank_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_rank_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_rank_res_rank_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_rank_res_rank_info));
  c_gs_crusade_start_req_descriptor_ = file->message_type(177);
  static const int c_gs_crusade_start_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_start_req, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_start_req, enemy_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_start_req, me_heros_),
  };
  c_gs_crusade_start_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_crusade_start_req_descriptor_,
      c_gs_crusade_start_req::default_instance_,
      c_gs_crusade_start_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_start_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_start_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_crusade_start_req));
  gs_c_crusade_start_res_descriptor_ = file->message_type(178);
  static const int gs_c_crusade_start_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_start_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_start_res, wave_),
  };
  gs_c_crusade_start_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_crusade_start_res_descriptor_,
      gs_c_crusade_start_res::default_instance_,
      gs_c_crusade_start_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_start_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_start_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_crusade_start_res));
  c_gs_crusade_end_req_descriptor_ = file->message_type(179);
  static const int c_gs_crusade_end_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_end_req, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_end_req, enemy_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_end_req, me_heros_),
  };
  c_gs_crusade_end_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_crusade_end_req_descriptor_,
      c_gs_crusade_end_req::default_instance_,
      c_gs_crusade_end_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_end_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_end_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_crusade_end_req));
  gs_c_crusade_end_res_descriptor_ = file->message_type(180);
  static const int gs_c_crusade_end_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_end_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_end_res, outputs_),
  };
  gs_c_crusade_end_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_crusade_end_res_descriptor_,
      gs_c_crusade_end_res::default_instance_,
      gs_c_crusade_end_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_end_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_end_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_crusade_end_res));
  c_gs_crusade_hero_life_req_descriptor_ = file->message_type(181);
  static const int c_gs_crusade_hero_life_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_hero_life_req, hero_id_),
  };
  c_gs_crusade_hero_life_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_crusade_hero_life_req_descriptor_,
      c_gs_crusade_hero_life_req::default_instance_,
      c_gs_crusade_hero_life_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_hero_life_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_hero_life_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_crusade_hero_life_req));
  gs_c_crusade_hero_life_res_descriptor_ = file->message_type(182);
  static const int gs_c_crusade_hero_life_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_hero_life_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_hero_life_res, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_hero_life_res, consumes_),
  };
  gs_c_crusade_hero_life_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_crusade_hero_life_res_descriptor_,
      gs_c_crusade_hero_life_res::default_instance_,
      gs_c_crusade_hero_life_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_hero_life_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_hero_life_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_crusade_hero_life_res));
  c_gs_crusade_reset_req_descriptor_ = file->message_type(183);
  static const int c_gs_crusade_reset_req_offsets_[1] = {
  };
  c_gs_crusade_reset_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_crusade_reset_req_descriptor_,
      c_gs_crusade_reset_req::default_instance_,
      c_gs_crusade_reset_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_reset_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_reset_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_crusade_reset_req));
  gs_c_crusade_reset_res_descriptor_ = file->message_type(184);
  static const int gs_c_crusade_reset_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_reset_res, error_code_),
  };
  gs_c_crusade_reset_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_crusade_reset_res_descriptor_,
      gs_c_crusade_reset_res::default_instance_,
      gs_c_crusade_reset_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_reset_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_reset_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_crusade_reset_res));
  c_gs_crusade_promote_award_req_descriptor_ = file->message_type(185);
  static const int c_gs_crusade_promote_award_req_offsets_[1] = {
  };
  c_gs_crusade_promote_award_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_crusade_promote_award_req_descriptor_,
      c_gs_crusade_promote_award_req::default_instance_,
      c_gs_crusade_promote_award_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_promote_award_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_promote_award_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_crusade_promote_award_req));
  gs_c_crusade_promote_award_res_descriptor_ = file->message_type(186);
  static const int gs_c_crusade_promote_award_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_promote_award_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_promote_award_res, consumes_),
  };
  gs_c_crusade_promote_award_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_crusade_promote_award_res_descriptor_,
      gs_c_crusade_promote_award_res::default_instance_,
      gs_c_crusade_promote_award_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_promote_award_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_promote_award_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_crusade_promote_award_res));
  c_gs_crusade_buff_refresh_req_descriptor_ = file->message_type(187);
  static const int c_gs_crusade_buff_refresh_req_offsets_[1] = {
  };
  c_gs_crusade_buff_refresh_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_crusade_buff_refresh_req_descriptor_,
      c_gs_crusade_buff_refresh_req::default_instance_,
      c_gs_crusade_buff_refresh_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_buff_refresh_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_crusade_buff_refresh_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_crusade_buff_refresh_req));
  gs_c_crusade_buff_refresh_res_descriptor_ = file->message_type(188);
  static const int gs_c_crusade_buff_refresh_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_buff_refresh_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_buff_refresh_res, consumes_),
  };
  gs_c_crusade_buff_refresh_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_crusade_buff_refresh_res_descriptor_,
      gs_c_crusade_buff_refresh_res::default_instance_,
      gs_c_crusade_buff_refresh_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_buff_refresh_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_crusade_buff_refresh_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_crusade_buff_refresh_res));
  struct_guild_list_item_descriptor_ = file->message_type(189);
  static const int struct_guild_list_item_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_list_item, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_list_item, president_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_list_item, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_list_item, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_list_item, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_list_item, president_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_list_item, member_num_),
  };
  struct_guild_list_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      struct_guild_list_item_descriptor_,
      struct_guild_list_item::default_instance_,
      struct_guild_list_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_list_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_list_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(struct_guild_list_item));
  struct_user_guild_info_descriptor_ = file->message_type(190);
  static const int struct_user_guild_info_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, leave_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, my_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, my_contribution_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, president_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, contribution_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, announcement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, max_boss_position_),
  };
  struct_user_guild_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      struct_user_guild_info_descriptor_,
      struct_user_guild_info::default_instance_,
      struct_user_guild_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(struct_user_guild_info));
  struct_user_guild_info_struct_guild_member_descriptor_ = struct_user_guild_info_descriptor_->nested_type(0);
  static const int struct_user_guild_info_struct_guild_member_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info_struct_guild_member, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info_struct_guild_member, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info_struct_guild_member, contribution_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info_struct_guild_member, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info_struct_guild_member, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info_struct_guild_member, head_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info_struct_guild_member, last_online_time_),
  };
  struct_user_guild_info_struct_guild_member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      struct_user_guild_info_struct_guild_member_descriptor_,
      struct_user_guild_info_struct_guild_member::default_instance_,
      struct_user_guild_info_struct_guild_member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info_struct_guild_member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_user_guild_info_struct_guild_member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(struct_user_guild_info_struct_guild_member));
  struct_guild_boss_descriptor_ = file->message_type(191);
  static const int struct_guild_boss_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss, lose_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss, killed_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss, killer_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss, killer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss, killer_head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss, killer_head_frame_id_),
  };
  struct_guild_boss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      struct_guild_boss_descriptor_,
      struct_guild_boss::default_instance_,
      struct_guild_boss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(struct_guild_boss));
  struct_guild_boss_attacker_dead_hero_descriptor_ = file->message_type(192);
  static const int struct_guild_boss_attacker_dead_hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss_attacker_dead_hero, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss_attacker_dead_hero, dead_time_),
  };
  struct_guild_boss_attacker_dead_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      struct_guild_boss_attacker_dead_hero_descriptor_,
      struct_guild_boss_attacker_dead_hero::default_instance_,
      struct_guild_boss_attacker_dead_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss_attacker_dead_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_guild_boss_attacker_dead_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(struct_guild_boss_attacker_dead_hero));
  c_gs_guild_new_req_descriptor_ = file->message_type(193);
  static const int c_gs_guild_new_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_new_req, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_new_req, flag_),
  };
  c_gs_guild_new_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_new_req_descriptor_,
      c_gs_guild_new_req::default_instance_,
      c_gs_guild_new_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_new_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_new_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_new_req));
  gs_c_guild_new_res_descriptor_ = file->message_type(194);
  static const int gs_c_guild_new_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_new_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_new_res, consume_),
  };
  gs_c_guild_new_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_new_res_descriptor_,
      gs_c_guild_new_res::default_instance_,
      gs_c_guild_new_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_new_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_new_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_new_res));
  c_gs_guild_edit_req_descriptor_ = file->message_type(195);
  static const int c_gs_guild_edit_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_edit_req, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_edit_req, president_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_edit_req, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_edit_req, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_edit_req, announcement_),
  };
  c_gs_guild_edit_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_edit_req_descriptor_,
      c_gs_guild_edit_req::default_instance_,
      c_gs_guild_edit_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_edit_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_edit_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_edit_req));
  gs_c_guild_edit_res_descriptor_ = file->message_type(196);
  static const int gs_c_guild_edit_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_edit_res, error_code_),
  };
  gs_c_guild_edit_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_edit_res_descriptor_,
      gs_c_guild_edit_res::default_instance_,
      gs_c_guild_edit_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_edit_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_edit_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_edit_res));
  c_gs_guild_delete_req_descriptor_ = file->message_type(197);
  static const int c_gs_guild_delete_req_offsets_[1] = {
  };
  c_gs_guild_delete_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_delete_req_descriptor_,
      c_gs_guild_delete_req::default_instance_,
      c_gs_guild_delete_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_delete_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_delete_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_delete_req));
  gs_c_guild_delete_res_descriptor_ = file->message_type(198);
  static const int gs_c_guild_delete_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_delete_res, error_code_),
  };
  gs_c_guild_delete_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_delete_res_descriptor_,
      gs_c_guild_delete_res::default_instance_,
      gs_c_guild_delete_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_delete_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_delete_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_delete_res));
  gs_c_guild_quit_ntf_descriptor_ = file->message_type(199);
  static const int gs_c_guild_quit_ntf_offsets_[1] = {
  };
  gs_c_guild_quit_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_quit_ntf_descriptor_,
      gs_c_guild_quit_ntf::default_instance_,
      gs_c_guild_quit_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_quit_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_quit_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_quit_ntf));
  gs_c_guild_join_ntf_descriptor_ = file->message_type(200);
  static const int gs_c_guild_join_ntf_offsets_[1] = {
  };
  gs_c_guild_join_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_join_ntf_descriptor_,
      gs_c_guild_join_ntf::default_instance_,
      gs_c_guild_join_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_join_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_join_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_join_ntf));
  c_gs_guild_apply_list_req_descriptor_ = file->message_type(201);
  static const int c_gs_guild_apply_list_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_apply_list_req, who_),
  };
  c_gs_guild_apply_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_apply_list_req_descriptor_,
      c_gs_guild_apply_list_req::default_instance_,
      c_gs_guild_apply_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_apply_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_apply_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_apply_list_req));
  c_gs_guild_apply_list_req_e_show_for_descriptor_ = c_gs_guild_apply_list_req_descriptor_->enum_type(0);
  gs_c_guild_apply_list_res_descriptor_ = file->message_type(202);
  static const int gs_c_guild_apply_list_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_list_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_list_res, applys_for_manager_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_list_res, applys_for_outsider_),
  };
  gs_c_guild_apply_list_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_apply_list_res_descriptor_,
      gs_c_guild_apply_list_res::default_instance_,
      gs_c_guild_apply_list_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_list_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_list_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_apply_list_res));
  gs_c_guild_apply_list_res_struct_apply_for_outsider_descriptor_ = gs_c_guild_apply_list_res_descriptor_->nested_type(0);
  static const int gs_c_guild_apply_list_res_struct_apply_for_outsider_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_list_res_struct_apply_for_outsider, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_list_res_struct_apply_for_outsider, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_list_res_struct_apply_for_outsider, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_list_res_struct_apply_for_outsider, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_list_res_struct_apply_for_outsider, fight_power_),
  };
  gs_c_guild_apply_list_res_struct_apply_for_outsider_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_apply_list_res_struct_apply_for_outsider_descriptor_,
      gs_c_guild_apply_list_res_struct_apply_for_outsider::default_instance_,
      gs_c_guild_apply_list_res_struct_apply_for_outsider_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_list_res_struct_apply_for_outsider, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_list_res_struct_apply_for_outsider, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_apply_list_res_struct_apply_for_outsider));
  c_gs_guild_apply_op_req_descriptor_ = file->message_type(203);
  static const int c_gs_guild_apply_op_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_apply_op_req, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_apply_op_req, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_apply_op_req, user_id_),
  };
  c_gs_guild_apply_op_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_apply_op_req_descriptor_,
      c_gs_guild_apply_op_req::default_instance_,
      c_gs_guild_apply_op_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_apply_op_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_apply_op_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_apply_op_req));
  c_gs_guild_apply_op_req_e_op_type_descriptor_ = c_gs_guild_apply_op_req_descriptor_->enum_type(0);
  gs_c_guild_apply_op_res_descriptor_ = file->message_type(204);
  static const int gs_c_guild_apply_op_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_op_res, error_code_),
  };
  gs_c_guild_apply_op_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_apply_op_res_descriptor_,
      gs_c_guild_apply_op_res::default_instance_,
      gs_c_guild_apply_op_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_op_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_apply_op_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_apply_op_res));
  c_gs_guild_member_op_req_descriptor_ = file->message_type(205);
  static const int c_gs_guild_member_op_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_member_op_req, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_member_op_req, new_position_),
  };
  c_gs_guild_member_op_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_member_op_req_descriptor_,
      c_gs_guild_member_op_req::default_instance_,
      c_gs_guild_member_op_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_member_op_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_member_op_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_member_op_req));
  gs_c_guild_member_op_res_descriptor_ = file->message_type(206);
  static const int gs_c_guild_member_op_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_member_op_res, error_code_),
  };
  gs_c_guild_member_op_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_member_op_res_descriptor_,
      gs_c_guild_member_op_res::default_instance_,
      gs_c_guild_member_op_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_member_op_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_member_op_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_member_op_res));
  c_gs_guild_boss_refresh_req_descriptor_ = file->message_type(207);
  static const int c_gs_guild_boss_refresh_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_refresh_req, position_),
  };
  c_gs_guild_boss_refresh_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_boss_refresh_req_descriptor_,
      c_gs_guild_boss_refresh_req::default_instance_,
      c_gs_guild_boss_refresh_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_refresh_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_refresh_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_boss_refresh_req));
  gs_c_guild_boss_refresh_res_descriptor_ = file->message_type(208);
  static const int gs_c_guild_boss_refresh_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_refresh_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_refresh_res, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_refresh_res, boss_),
  };
  gs_c_guild_boss_refresh_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_boss_refresh_res_descriptor_,
      gs_c_guild_boss_refresh_res::default_instance_,
      gs_c_guild_boss_refresh_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_refresh_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_refresh_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_boss_refresh_res));
  c_gs_guild_search_req_descriptor_ = file->message_type(209);
  static const int c_gs_guild_search_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_search_req, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_search_req, guild_id_),
  };
  c_gs_guild_search_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_search_req_descriptor_,
      c_gs_guild_search_req::default_instance_,
      c_gs_guild_search_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_search_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_search_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_search_req));
  gs_c_guild_search_res_descriptor_ = file->message_type(210);
  static const int gs_c_guild_search_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_search_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_search_res, guilds_),
  };
  gs_c_guild_search_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_search_res_descriptor_,
      gs_c_guild_search_res::default_instance_,
      gs_c_guild_search_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_search_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_search_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_search_res));
  c_gs_guild_list_req_descriptor_ = file->message_type(211);
  static const int c_gs_guild_list_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_list_req, type_),
  };
  c_gs_guild_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_list_req_descriptor_,
      c_gs_guild_list_req::default_instance_,
      c_gs_guild_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_list_req));
  c_gs_guild_list_req_e_list_type_descriptor_ = c_gs_guild_list_req_descriptor_->enum_type(0);
  gs_c_guild_list_res_descriptor_ = file->message_type(212);
  static const int gs_c_guild_list_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_list_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_list_res, guilds_),
  };
  gs_c_guild_list_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_list_res_descriptor_,
      gs_c_guild_list_res::default_instance_,
      gs_c_guild_list_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_list_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_list_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_list_res));
  c_gs_guild_info_req_descriptor_ = file->message_type(213);
  static const int c_gs_guild_info_req_offsets_[1] = {
  };
  c_gs_guild_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_info_req_descriptor_,
      c_gs_guild_info_req::default_instance_,
      c_gs_guild_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_info_req));
  gs_c_guild_info_res_descriptor_ = file->message_type(214);
  static const int gs_c_guild_info_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_info_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_info_res, my_guild_),
  };
  gs_c_guild_info_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_info_res_descriptor_,
      gs_c_guild_info_res::default_instance_,
      gs_c_guild_info_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_info_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_info_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_info_res));
  c_gs_guild_boss_list_req_descriptor_ = file->message_type(215);
  static const int c_gs_guild_boss_list_req_offsets_[1] = {
  };
  c_gs_guild_boss_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_boss_list_req_descriptor_,
      c_gs_guild_boss_list_req::default_instance_,
      c_gs_guild_boss_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_boss_list_req));
  gs_c_guild_boss_list_res_descriptor_ = file->message_type(216);
  static const int gs_c_guild_boss_list_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_list_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_list_res, bosses_),
  };
  gs_c_guild_boss_list_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_boss_list_res_descriptor_,
      gs_c_guild_boss_list_res::default_instance_,
      gs_c_guild_boss_list_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_list_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_list_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_boss_list_res));
  c_gs_guild_boss_info_req_descriptor_ = file->message_type(217);
  static const int c_gs_guild_boss_info_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_info_req, position_),
  };
  c_gs_guild_boss_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_boss_info_req_descriptor_,
      c_gs_guild_boss_info_req::default_instance_,
      c_gs_guild_boss_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_boss_info_req));
  gs_c_guild_boss_info_res_descriptor_ = file->message_type(218);
  static const int gs_c_guild_boss_info_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_info_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_info_res, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_info_res, last_reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_info_res, last_day_reset_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_info_res, dead_heros_),
  };
  gs_c_guild_boss_info_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_boss_info_res_descriptor_,
      gs_c_guild_boss_info_res::default_instance_,
      gs_c_guild_boss_info_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_info_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_info_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_boss_info_res));
  c_gs_guild_boss_attack_req_descriptor_ = file->message_type(219);
  static const int c_gs_guild_boss_attack_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_attack_req, boss_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_attack_req, lose_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_attack_req, dead_heros_),
  };
  c_gs_guild_boss_attack_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_boss_attack_req_descriptor_,
      c_gs_guild_boss_attack_req::default_instance_,
      c_gs_guild_boss_attack_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_attack_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_attack_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_boss_attack_req));
  gs_c_guild_boss_attack_res_descriptor_ = file->message_type(220);
  static const int gs_c_guild_boss_attack_res_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attack_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attack_res, is_killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attack_res, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attack_res, output_),
  };
  gs_c_guild_boss_attack_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_boss_attack_res_descriptor_,
      gs_c_guild_boss_attack_res::default_instance_,
      gs_c_guild_boss_attack_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attack_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attack_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_boss_attack_res));
  c_gs_guild_boss_dead_hero_reset_req_descriptor_ = file->message_type(221);
  static const int c_gs_guild_boss_dead_hero_reset_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_dead_hero_reset_req, boss_position_),
  };
  c_gs_guild_boss_dead_hero_reset_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_boss_dead_hero_reset_req_descriptor_,
      c_gs_guild_boss_dead_hero_reset_req::default_instance_,
      c_gs_guild_boss_dead_hero_reset_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_dead_hero_reset_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_dead_hero_reset_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_boss_dead_hero_reset_req));
  gs_c_guild_boss_dead_hero_reset_res_descriptor_ = file->message_type(222);
  static const int gs_c_guild_boss_dead_hero_reset_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_dead_hero_reset_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_dead_hero_reset_res, boss_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_dead_hero_reset_res, reset_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_dead_hero_reset_res, last_reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_dead_hero_reset_res, consume_),
  };
  gs_c_guild_boss_dead_hero_reset_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_boss_dead_hero_reset_res_descriptor_,
      gs_c_guild_boss_dead_hero_reset_res::default_instance_,
      gs_c_guild_boss_dead_hero_reset_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_dead_hero_reset_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_dead_hero_reset_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_boss_dead_hero_reset_res));
  c_gs_guild_boss_attacker_rank_req_descriptor_ = file->message_type(223);
  static const int c_gs_guild_boss_attacker_rank_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_attacker_rank_req, boss_position_),
  };
  c_gs_guild_boss_attacker_rank_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_guild_boss_attacker_rank_req_descriptor_,
      c_gs_guild_boss_attacker_rank_req::default_instance_,
      c_gs_guild_boss_attacker_rank_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_attacker_rank_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_guild_boss_attacker_rank_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_guild_boss_attacker_rank_req));
  gs_c_guild_boss_attacker_rank_res_descriptor_ = file->message_type(224);
  static const int gs_c_guild_boss_attacker_rank_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attacker_rank_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attacker_rank_res, attckers_),
  };
  gs_c_guild_boss_attacker_rank_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_boss_attacker_rank_res_descriptor_,
      gs_c_guild_boss_attacker_rank_res::default_instance_,
      gs_c_guild_boss_attacker_rank_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attacker_rank_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attacker_rank_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_boss_attacker_rank_res));
  gs_c_guild_boss_attacker_rank_res_struct_boss_attacker_descriptor_ = gs_c_guild_boss_attacker_rank_res_descriptor_->nested_type(0);
  static const int gs_c_guild_boss_attacker_rank_res_struct_boss_attacker_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attacker_rank_res_struct_boss_attacker, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attacker_rank_res_struct_boss_attacker, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attacker_rank_res_struct_boss_attacker, lose_hp_),
  };
  gs_c_guild_boss_attacker_rank_res_struct_boss_attacker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_guild_boss_attacker_rank_res_struct_boss_attacker_descriptor_,
      gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::default_instance_,
      gs_c_guild_boss_attacker_rank_res_struct_boss_attacker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attacker_rank_res_struct_boss_attacker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_guild_boss_attacker_rank_res_struct_boss_attacker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_guild_boss_attacker_rank_res_struct_boss_attacker));
  c_gs_server_time_req_descriptor_ = file->message_type(225);
  static const int c_gs_server_time_req_offsets_[1] = {
  };
  c_gs_server_time_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      c_gs_server_time_req_descriptor_,
      c_gs_server_time_req::default_instance_,
      c_gs_server_time_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_server_time_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c_gs_server_time_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(c_gs_server_time_req));
  gs_c_server_time_res_descriptor_ = file->message_type(226);
  static const int gs_c_server_time_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_server_time_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_server_time_res, server_time_),
  };
  gs_c_server_time_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_c_server_time_res_descriptor_,
      gs_c_server_time_res::default_instance_,
      gs_c_server_time_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_server_time_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_c_server_time_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_c_server_time_res));
  e_msg_c_gs_descriptor_ = file->enum_type(0);
  e_msg_gs_c_descriptor_ = file->enum_type(1);
  e_gsc_errorcode_descriptor_ = file->enum_type(2);
  MAIL_STATUS_descriptor_ = file->enum_type(3);
  MAIL_TYPE_descriptor_ = file->enum_type(4);
  HEAD_CHANGE_TYPE_descriptor_ = file->enum_type(5);
  e_guild_position_descriptor_ = file->enum_type(6);
  e_apply_switch_status_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gs_5fc_5fproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AOYI_descriptor_, &AOYI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AOYI_ARRAY_descriptor_, &AOYI_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ARENAPRICE_descriptor_, &ARENAPRICE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ARENAPRICE_ARRAY_descriptor_, &ARENAPRICE_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BAG_descriptor_, &BAG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BAG_ARRAY_descriptor_, &BAG_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BATTLE_descriptor_, &BATTLE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BATTLE_ARRAY_descriptor_, &BATTLE_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BOSSPROP_descriptor_, &BOSSPROP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BOSSPROP_ARRAY_descriptor_, &BOSSPROP_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BOSSSKILL_descriptor_, &BOSSSKILL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BOSSSKILL_ARRAY_descriptor_, &BOSSSKILL_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BUFF_descriptor_, &BUFF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BUFF_ARRAY_descriptor_, &BUFF_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHAPTERMAP_descriptor_, &CHAPTERMAP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CHAPTERMAP_ARRAY_descriptor_, &CHAPTERMAP_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    COINPRICE_descriptor_, &COINPRICE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    COINPRICE_ARRAY_descriptor_, &COINPRICE_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EQUIP_descriptor_, &EQUIP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EQUIP_ARRAY_descriptor_, &EQUIP_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EVOLUTIONCOIN_descriptor_, &EVOLUTIONCOIN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EVOLUTIONCOIN_ARRAY_descriptor_, &EVOLUTIONCOIN_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HEROPROP_descriptor_, &HEROPROP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HEROPROP_ARRAY_descriptor_, &HEROPROP_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HEROSKILL_descriptor_, &HEROSKILL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HEROSKILL_ARRAY_descriptor_, &HEROSKILL_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HEROSTAR_descriptor_, &HEROSTAR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HEROSTAR_ARRAY_descriptor_, &HEROSTAR_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MONSTERPROP_descriptor_, &MONSTERPROP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MONSTERPROP_ARRAY_descriptor_, &MONSTERPROP_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PASSIVE_descriptor_, &PASSIVE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PASSIVE_ARRAY_descriptor_, &PASSIVE_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PRIZESHOW_descriptor_, &PRIZESHOW::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PRIZESHOW_ARRAY_descriptor_, &PRIZESHOW_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QUALITYRULE_descriptor_, &QUALITYRULE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QUALITYRULE_ARRAY_descriptor_, &QUALITYRULE_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REALTIMECHECK_descriptor_, &REALTIMECHECK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REALTIMECHECK_ARRAY_descriptor_, &REALTIMECHECK_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RESETPRICE_descriptor_, &RESETPRICE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RESETPRICE_ARRAY_descriptor_, &RESETPRICE_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RULE_descriptor_, &RULE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RULE_ARRAY_descriptor_, &RULE_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SHOPRESETPRICE_descriptor_, &SHOPRESETPRICE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SHOPRESETPRICE_ARRAY_descriptor_, &SHOPRESETPRICE_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPPRICE_descriptor_, &SPPRICE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPPRICE_ARRAY_descriptor_, &SPPRICE_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STAPRICE_descriptor_, &STAPRICE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STAPRICE_ARRAY_descriptor_, &STAPRICE_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SUBTASK_descriptor_, &SUBTASK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SUBTASK_ARRAY_descriptor_, &SUBTASK_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TASK_descriptor_, &TASK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TASK_ARRAY_descriptor_, &TASK_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRIGGERATTACK_descriptor_, &TRIGGERATTACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRIGGERATTACK_ARRAY_descriptor_, &TRIGGERATTACK_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRIGGERSTARTCONDITION_descriptor_, &TRIGGERSTARTCONDITION::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRIGGERSTARTCONDITION_ARRAY_descriptor_, &TRIGGERSTARTCONDITION_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIP_descriptor_, &VIP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIP_ARRAY_descriptor_, &VIP_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPFUNCTION_descriptor_, &VIPFUNCTION::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPFUNCTION_ARRAY_descriptor_, &VIPFUNCTION_ARRAY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_enter_gs_req_descriptor_, &c_gs_enter_gs_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_enter_gs_res_descriptor_, &gs_c_enter_gs_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_leave_gs_req_descriptor_, &c_gs_leave_gs_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_leave_gs_res_descriptor_, &gs_c_leave_gs_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_json_config_version_req_descriptor_, &c_gs_json_config_version_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_json_config_version_res_descriptor_, &gs_c_json_config_version_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_json_config_version_res_config_version_descriptor_, &gs_c_json_config_version_res_config_version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_json_config_req_descriptor_, &c_gs_json_config_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_json_config_res_descriptor_, &gs_c_json_config_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_json_config_res_config_descriptor_, &gs_c_json_config_res_config::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_config_req_descriptor_, &c_gs_config_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_config_res_descriptor_, &gs_c_config_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_user_info_req_descriptor_, &c_gs_user_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_sub_task_descriptor_, &user_sub_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_sub_task_array_descriptor_, &user_sub_task_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_hero_equip_descriptor_, &user_hero_equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_hero_skill_descriptor_, &user_hero_skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_hero_descriptor_, &user_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_hero_array_descriptor_, &user_hero_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_base_info_descriptor_, &user_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    struct_game_element_descriptor_, &struct_game_element::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_shop_item_descriptor_, &user_shop_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_shop_descriptor_, &user_shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_arena_log_descriptor_, &user_arena_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_arena_log_user_arena_log_hero_descriptor_, &user_arena_log_user_arena_log_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_arena_contestant_descriptor_, &user_arena_contestant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_arena_descriptor_, &user_arena::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_crusade_descriptor_, &user_crusade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_crusade_crusade_hero_descriptor_, &user_crusade_crusade_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_user_info_res_descriptor_, &gs_c_user_info_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_start_sub_task_req_descriptor_, &c_gs_start_sub_task_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_start_sub_task_res_descriptor_, &gs_c_start_sub_task_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_end_sub_task_req_descriptor_, &c_gs_end_sub_task_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_end_sub_task_res_descriptor_, &gs_c_end_sub_task_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_invoke_hero_req_descriptor_, &c_gs_invoke_hero_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_invoke_hero_res_descriptor_, &gs_c_invoke_hero_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_equip_level_up_req_descriptor_, &c_gs_equip_level_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_equip_level_up_res_descriptor_, &gs_c_equip_level_up_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_equip_evolution_req_descriptor_, &c_gs_equip_evolution_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_equip_evolution_res_descriptor_, &gs_c_equip_evolution_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_hero_evolution_req_descriptor_, &c_gs_hero_evolution_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_hero_evolution_res_descriptor_, &gs_c_hero_evolution_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_hero_star_up_req_descriptor_, &c_gs_hero_star_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_hero_star_up_res_descriptor_, &gs_c_hero_star_up_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_skill_level_up_req_descriptor_, &c_gs_skill_level_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_skill_level_up_res_descriptor_, &gs_c_skill_level_up_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_invoke_req_descriptor_, &c_gs_invoke_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_invoke_res_descriptor_, &gs_c_invoke_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    struct_game_element_array_descriptor_, &struct_game_element_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_diamond_speed_kill_req_descriptor_, &c_gs_diamond_speed_kill_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_diamond_speed_kill_res_descriptor_, &gs_c_diamond_speed_kill_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_use_item_req_descriptor_, &c_gs_use_item_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_use_item_res_descriptor_, &gs_c_use_item_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_shop_info_req_descriptor_, &c_gs_shop_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_shop_info_res_descriptor_, &gs_c_shop_info_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_shop_buy_item_req_descriptor_, &c_gs_shop_buy_item_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_shop_buy_item_res_descriptor_, &gs_c_shop_buy_item_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_shop_refresh_req_descriptor_, &c_gs_shop_refresh_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_shop_refresh_res_descriptor_, &gs_c_shop_refresh_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_sell_req_descriptor_, &c_gs_sell_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_sell_res_descriptor_, &gs_c_sell_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_arena_refresh_match_req_descriptor_, &c_gs_arena_refresh_match_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_arena_refresh_match_res_descriptor_, &gs_c_arena_refresh_match_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_arena_update_team_req_descriptor_, &c_gs_arena_update_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_arena_update_team_res_descriptor_, &gs_c_arena_update_team_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_arena_start_challenge_req_descriptor_, &c_gs_arena_start_challenge_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_arena_start_challenge_res_descriptor_, &gs_c_arena_start_challenge_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_arena_end_challenge_req_descriptor_, &c_gs_arena_end_challenge_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_arena_end_challenge_res_descriptor_, &gs_c_arena_end_challenge_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_arena_challenge_ntf_descriptor_, &gs_c_arena_challenge_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_arena_challenge_reset_cd_req_descriptor_, &c_gs_arena_challenge_reset_cd_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_arena_challenge_reset_cd_res_descriptor_, &gs_c_arena_challenge_reset_cd_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_arena_challenge_reset_num_req_descriptor_, &c_gs_arena_challenge_reset_num_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_arena_challenge_reset_num_res_descriptor_, &gs_c_arena_challenge_reset_num_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_arena_ranks_req_descriptor_, &c_gs_arena_ranks_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_arena_ranks_res_descriptor_, &gs_c_arena_ranks_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_arena_log_req_descriptor_, &c_gs_arena_log_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_arena_log_res_descriptor_, &gs_c_arena_log_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_arena_search_req_descriptor_, &c_gs_arena_search_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_arena_search_res_descriptor_, &gs_c_arena_search_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_fragment_compound_req_descriptor_, &c_gs_fragment_compound_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_fragment_compound_res_descriptor_, &gs_c_fragment_compound_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_mail_descriptor_, &user_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_mail_opt_req_descriptor_, &c_gs_mail_opt_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_mail_opt_res_descriptor_, &gs_c_mail_opt_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_mail_opt_res_mail_update_descriptor_, &gs_c_mail_opt_res_mail_update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_mail_ntf_descriptor_, &gs_c_mail_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_mail_ntf_array_descriptor_, &gs_c_mail_ntf_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_buy_req_descriptor_, &c_gs_buy_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_buy_res_descriptor_, &gs_c_buy_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_mission_descriptor_, &user_mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_mission_mission_event_need_descriptor_, &user_mission_mission_event_need::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_mission_ntf_array_descriptor_, &gs_c_mission_ntf_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_mission_ntf_array_mission_opt_descriptor_, &gs_c_mission_ntf_array_mission_opt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_get_mission_reward_req_descriptor_, &c_gs_get_mission_reward_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_get_mission_reward_res_descriptor_, &gs_c_get_mission_reward_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sign_n_reward_descriptor_, &sign_n_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_sign_descriptor_, &user_sign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_sign_req_descriptor_, &c_gs_sign_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_sign_res_descriptor_, &gs_c_sign_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_sign_add_req_descriptor_, &c_gs_sign_add_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_sign_add_res_descriptor_, &gs_c_sign_add_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_head_or_frame_change_req_descriptor_, &c_gs_head_or_frame_change_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_head_or_frame_change_res_descriptor_, &gs_c_head_or_frame_change_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_edit_player_info_req_descriptor_, &c_gs_edit_player_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_edit_player_info_res_descriptor_, &gs_c_edit_player_info_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_finish_novice_guide_req_descriptor_, &c_gs_finish_novice_guide_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_finish_novice_guide_res_descriptor_, &gs_c_finish_novice_guide_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_marquee_ntf_descriptor_, &gs_c_marquee_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_element_ntf_descriptor_, &gs_c_element_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    friend_base_info_descriptor_, &friend_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_friend_descriptor_, &user_friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_friend_friend_info_descriptor_, &user_friend_friend_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_user_friend_op_req_descriptor_, &c_gs_user_friend_op_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_user_friend_op_res_descriptor_, &gs_c_user_friend_op_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_search_user_req_descriptor_, &c_gs_search_user_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_search_user_res_descriptor_, &gs_c_search_user_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_friend_ntf_descriptor_, &gs_c_friend_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_chat_req_descriptor_, &c_gs_chat_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_chat_res_descriptor_, &gs_c_chat_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_chat_ntf_descriptor_, &gs_c_chat_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_fight_power_req_descriptor_, &c_gs_fight_power_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_fight_power_res_descriptor_, &gs_c_fight_power_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_rank_req_descriptor_, &c_gs_rank_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_rank_res_descriptor_, &gs_c_rank_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_rank_res_user_hero_brief_info_descriptor_, &gs_c_rank_res_user_hero_brief_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_rank_res_rank_info_descriptor_, &gs_c_rank_res_rank_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_crusade_start_req_descriptor_, &c_gs_crusade_start_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_crusade_start_res_descriptor_, &gs_c_crusade_start_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_crusade_end_req_descriptor_, &c_gs_crusade_end_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_crusade_end_res_descriptor_, &gs_c_crusade_end_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_crusade_hero_life_req_descriptor_, &c_gs_crusade_hero_life_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_crusade_hero_life_res_descriptor_, &gs_c_crusade_hero_life_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_crusade_reset_req_descriptor_, &c_gs_crusade_reset_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_crusade_reset_res_descriptor_, &gs_c_crusade_reset_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_crusade_promote_award_req_descriptor_, &c_gs_crusade_promote_award_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_crusade_promote_award_res_descriptor_, &gs_c_crusade_promote_award_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_crusade_buff_refresh_req_descriptor_, &c_gs_crusade_buff_refresh_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_crusade_buff_refresh_res_descriptor_, &gs_c_crusade_buff_refresh_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    struct_guild_list_item_descriptor_, &struct_guild_list_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    struct_user_guild_info_descriptor_, &struct_user_guild_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    struct_user_guild_info_struct_guild_member_descriptor_, &struct_user_guild_info_struct_guild_member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    struct_guild_boss_descriptor_, &struct_guild_boss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    struct_guild_boss_attacker_dead_hero_descriptor_, &struct_guild_boss_attacker_dead_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_new_req_descriptor_, &c_gs_guild_new_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_new_res_descriptor_, &gs_c_guild_new_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_edit_req_descriptor_, &c_gs_guild_edit_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_edit_res_descriptor_, &gs_c_guild_edit_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_delete_req_descriptor_, &c_gs_guild_delete_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_delete_res_descriptor_, &gs_c_guild_delete_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_quit_ntf_descriptor_, &gs_c_guild_quit_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_join_ntf_descriptor_, &gs_c_guild_join_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_apply_list_req_descriptor_, &c_gs_guild_apply_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_apply_list_res_descriptor_, &gs_c_guild_apply_list_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_apply_list_res_struct_apply_for_outsider_descriptor_, &gs_c_guild_apply_list_res_struct_apply_for_outsider::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_apply_op_req_descriptor_, &c_gs_guild_apply_op_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_apply_op_res_descriptor_, &gs_c_guild_apply_op_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_member_op_req_descriptor_, &c_gs_guild_member_op_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_member_op_res_descriptor_, &gs_c_guild_member_op_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_boss_refresh_req_descriptor_, &c_gs_guild_boss_refresh_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_boss_refresh_res_descriptor_, &gs_c_guild_boss_refresh_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_search_req_descriptor_, &c_gs_guild_search_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_search_res_descriptor_, &gs_c_guild_search_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_list_req_descriptor_, &c_gs_guild_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_list_res_descriptor_, &gs_c_guild_list_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_info_req_descriptor_, &c_gs_guild_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_info_res_descriptor_, &gs_c_guild_info_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_boss_list_req_descriptor_, &c_gs_guild_boss_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_boss_list_res_descriptor_, &gs_c_guild_boss_list_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_boss_info_req_descriptor_, &c_gs_guild_boss_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_boss_info_res_descriptor_, &gs_c_guild_boss_info_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_boss_attack_req_descriptor_, &c_gs_guild_boss_attack_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_boss_attack_res_descriptor_, &gs_c_guild_boss_attack_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_boss_dead_hero_reset_req_descriptor_, &c_gs_guild_boss_dead_hero_reset_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_boss_dead_hero_reset_res_descriptor_, &gs_c_guild_boss_dead_hero_reset_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_guild_boss_attacker_rank_req_descriptor_, &c_gs_guild_boss_attacker_rank_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_boss_attacker_rank_res_descriptor_, &gs_c_guild_boss_attacker_rank_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_guild_boss_attacker_rank_res_struct_boss_attacker_descriptor_, &gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    c_gs_server_time_req_descriptor_, &c_gs_server_time_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_c_server_time_res_descriptor_, &gs_c_server_time_res::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gs_5fc_5fproto_2eproto() {
  delete AOYI::default_instance_;
  delete AOYI_reflection_;
  delete AOYI_ARRAY::default_instance_;
  delete AOYI_ARRAY_reflection_;
  delete ARENAPRICE::default_instance_;
  delete ARENAPRICE_reflection_;
  delete ARENAPRICE_ARRAY::default_instance_;
  delete ARENAPRICE_ARRAY_reflection_;
  delete BAG::default_instance_;
  delete BAG_reflection_;
  delete BAG_ARRAY::default_instance_;
  delete BAG_ARRAY_reflection_;
  delete BATTLE::default_instance_;
  delete BATTLE_reflection_;
  delete BATTLE_ARRAY::default_instance_;
  delete BATTLE_ARRAY_reflection_;
  delete BOSSPROP::default_instance_;
  delete BOSSPROP_reflection_;
  delete BOSSPROP_ARRAY::default_instance_;
  delete BOSSPROP_ARRAY_reflection_;
  delete BOSSSKILL::default_instance_;
  delete BOSSSKILL_reflection_;
  delete BOSSSKILL_ARRAY::default_instance_;
  delete BOSSSKILL_ARRAY_reflection_;
  delete BUFF::default_instance_;
  delete BUFF_reflection_;
  delete BUFF_ARRAY::default_instance_;
  delete BUFF_ARRAY_reflection_;
  delete CHAPTERMAP::default_instance_;
  delete CHAPTERMAP_reflection_;
  delete CHAPTERMAP_ARRAY::default_instance_;
  delete CHAPTERMAP_ARRAY_reflection_;
  delete COINPRICE::default_instance_;
  delete COINPRICE_reflection_;
  delete COINPRICE_ARRAY::default_instance_;
  delete COINPRICE_ARRAY_reflection_;
  delete EQUIP::default_instance_;
  delete EQUIP_reflection_;
  delete EQUIP_ARRAY::default_instance_;
  delete EQUIP_ARRAY_reflection_;
  delete EVOLUTIONCOIN::default_instance_;
  delete EVOLUTIONCOIN_reflection_;
  delete EVOLUTIONCOIN_ARRAY::default_instance_;
  delete EVOLUTIONCOIN_ARRAY_reflection_;
  delete HEROPROP::default_instance_;
  delete HEROPROP_reflection_;
  delete HEROPROP_ARRAY::default_instance_;
  delete HEROPROP_ARRAY_reflection_;
  delete HEROSKILL::default_instance_;
  delete HEROSKILL_reflection_;
  delete HEROSKILL_ARRAY::default_instance_;
  delete HEROSKILL_ARRAY_reflection_;
  delete HEROSTAR::default_instance_;
  delete HEROSTAR_reflection_;
  delete HEROSTAR_ARRAY::default_instance_;
  delete HEROSTAR_ARRAY_reflection_;
  delete MONSTERPROP::default_instance_;
  delete MONSTERPROP_reflection_;
  delete MONSTERPROP_ARRAY::default_instance_;
  delete MONSTERPROP_ARRAY_reflection_;
  delete PASSIVE::default_instance_;
  delete PASSIVE_reflection_;
  delete PASSIVE_ARRAY::default_instance_;
  delete PASSIVE_ARRAY_reflection_;
  delete PRIZESHOW::default_instance_;
  delete PRIZESHOW_reflection_;
  delete PRIZESHOW_ARRAY::default_instance_;
  delete PRIZESHOW_ARRAY_reflection_;
  delete QUALITYRULE::default_instance_;
  delete QUALITYRULE_reflection_;
  delete QUALITYRULE_ARRAY::default_instance_;
  delete QUALITYRULE_ARRAY_reflection_;
  delete REALTIMECHECK::default_instance_;
  delete REALTIMECHECK_reflection_;
  delete REALTIMECHECK_ARRAY::default_instance_;
  delete REALTIMECHECK_ARRAY_reflection_;
  delete RESETPRICE::default_instance_;
  delete RESETPRICE_reflection_;
  delete RESETPRICE_ARRAY::default_instance_;
  delete RESETPRICE_ARRAY_reflection_;
  delete RULE::default_instance_;
  delete RULE_reflection_;
  delete RULE_ARRAY::default_instance_;
  delete RULE_ARRAY_reflection_;
  delete SHOPRESETPRICE::default_instance_;
  delete SHOPRESETPRICE_reflection_;
  delete SHOPRESETPRICE_ARRAY::default_instance_;
  delete SHOPRESETPRICE_ARRAY_reflection_;
  delete SPPRICE::default_instance_;
  delete SPPRICE_reflection_;
  delete SPPRICE_ARRAY::default_instance_;
  delete SPPRICE_ARRAY_reflection_;
  delete STAPRICE::default_instance_;
  delete STAPRICE_reflection_;
  delete STAPRICE_ARRAY::default_instance_;
  delete STAPRICE_ARRAY_reflection_;
  delete SUBTASK::default_instance_;
  delete SUBTASK_reflection_;
  delete SUBTASK_ARRAY::default_instance_;
  delete SUBTASK_ARRAY_reflection_;
  delete TASK::default_instance_;
  delete TASK_reflection_;
  delete TASK_ARRAY::default_instance_;
  delete TASK_ARRAY_reflection_;
  delete TRIGGERATTACK::default_instance_;
  delete TRIGGERATTACK_reflection_;
  delete TRIGGERATTACK_ARRAY::default_instance_;
  delete TRIGGERATTACK_ARRAY_reflection_;
  delete TRIGGERSTARTCONDITION::default_instance_;
  delete TRIGGERSTARTCONDITION_reflection_;
  delete TRIGGERSTARTCONDITION_ARRAY::default_instance_;
  delete TRIGGERSTARTCONDITION_ARRAY_reflection_;
  delete VIP::default_instance_;
  delete VIP_reflection_;
  delete VIP_ARRAY::default_instance_;
  delete VIP_ARRAY_reflection_;
  delete VIPFUNCTION::default_instance_;
  delete VIPFUNCTION_reflection_;
  delete VIPFUNCTION_ARRAY::default_instance_;
  delete VIPFUNCTION_ARRAY_reflection_;
  delete c_gs_enter_gs_req::default_instance_;
  delete c_gs_enter_gs_req_reflection_;
  delete gs_c_enter_gs_res::default_instance_;
  delete gs_c_enter_gs_res_reflection_;
  delete c_gs_leave_gs_req::default_instance_;
  delete c_gs_leave_gs_req_reflection_;
  delete gs_c_leave_gs_res::default_instance_;
  delete gs_c_leave_gs_res_reflection_;
  delete c_gs_json_config_version_req::default_instance_;
  delete c_gs_json_config_version_req_reflection_;
  delete gs_c_json_config_version_res::default_instance_;
  delete gs_c_json_config_version_res_reflection_;
  delete gs_c_json_config_version_res_config_version::default_instance_;
  delete gs_c_json_config_version_res_config_version_reflection_;
  delete c_gs_json_config_req::default_instance_;
  delete c_gs_json_config_req_reflection_;
  delete gs_c_json_config_res::default_instance_;
  delete gs_c_json_config_res_reflection_;
  delete gs_c_json_config_res_config::default_instance_;
  delete gs_c_json_config_res_config_reflection_;
  delete c_gs_config_req::default_instance_;
  delete c_gs_config_req_reflection_;
  delete gs_c_config_res::default_instance_;
  delete gs_c_config_res_reflection_;
  delete c_gs_user_info_req::default_instance_;
  delete c_gs_user_info_req_reflection_;
  delete user_sub_task::default_instance_;
  delete user_sub_task_reflection_;
  delete user_sub_task_array::default_instance_;
  delete user_sub_task_array_reflection_;
  delete user_hero_equip::default_instance_;
  delete user_hero_equip_reflection_;
  delete user_hero_skill::default_instance_;
  delete user_hero_skill_reflection_;
  delete user_hero::default_instance_;
  delete user_hero_reflection_;
  delete user_hero_array::default_instance_;
  delete user_hero_array_reflection_;
  delete user_base_info::default_instance_;
  delete user_base_info_reflection_;
  delete struct_game_element::default_instance_;
  delete struct_game_element_reflection_;
  delete user_shop_item::default_instance_;
  delete user_shop_item_reflection_;
  delete user_shop::default_instance_;
  delete user_shop_reflection_;
  delete user_arena_log::default_instance_;
  delete user_arena_log_reflection_;
  delete user_arena_log_user_arena_log_hero::default_instance_;
  delete user_arena_log_user_arena_log_hero_reflection_;
  delete user_arena_contestant::default_instance_;
  delete user_arena_contestant_reflection_;
  delete user_arena::default_instance_;
  delete user_arena_reflection_;
  delete user_crusade::default_instance_;
  delete user_crusade_reflection_;
  delete user_crusade_crusade_hero::default_instance_;
  delete user_crusade_crusade_hero_reflection_;
  delete gs_c_user_info_res::default_instance_;
  delete gs_c_user_info_res_reflection_;
  delete c_gs_start_sub_task_req::default_instance_;
  delete c_gs_start_sub_task_req_reflection_;
  delete gs_c_start_sub_task_res::default_instance_;
  delete gs_c_start_sub_task_res_reflection_;
  delete c_gs_end_sub_task_req::default_instance_;
  delete c_gs_end_sub_task_req_reflection_;
  delete gs_c_end_sub_task_res::default_instance_;
  delete gs_c_end_sub_task_res_reflection_;
  delete c_gs_invoke_hero_req::default_instance_;
  delete c_gs_invoke_hero_req_reflection_;
  delete gs_c_invoke_hero_res::default_instance_;
  delete gs_c_invoke_hero_res_reflection_;
  delete c_gs_equip_level_up_req::default_instance_;
  delete c_gs_equip_level_up_req_reflection_;
  delete gs_c_equip_level_up_res::default_instance_;
  delete gs_c_equip_level_up_res_reflection_;
  delete c_gs_equip_evolution_req::default_instance_;
  delete c_gs_equip_evolution_req_reflection_;
  delete gs_c_equip_evolution_res::default_instance_;
  delete gs_c_equip_evolution_res_reflection_;
  delete c_gs_hero_evolution_req::default_instance_;
  delete c_gs_hero_evolution_req_reflection_;
  delete gs_c_hero_evolution_res::default_instance_;
  delete gs_c_hero_evolution_res_reflection_;
  delete c_gs_hero_star_up_req::default_instance_;
  delete c_gs_hero_star_up_req_reflection_;
  delete gs_c_hero_star_up_res::default_instance_;
  delete gs_c_hero_star_up_res_reflection_;
  delete c_gs_skill_level_up_req::default_instance_;
  delete c_gs_skill_level_up_req_reflection_;
  delete gs_c_skill_level_up_res::default_instance_;
  delete gs_c_skill_level_up_res_reflection_;
  delete c_gs_invoke_req::default_instance_;
  delete c_gs_invoke_req_reflection_;
  delete gs_c_invoke_res::default_instance_;
  delete gs_c_invoke_res_reflection_;
  delete struct_game_element_array::default_instance_;
  delete struct_game_element_array_reflection_;
  delete c_gs_diamond_speed_kill_req::default_instance_;
  delete c_gs_diamond_speed_kill_req_reflection_;
  delete gs_c_diamond_speed_kill_res::default_instance_;
  delete gs_c_diamond_speed_kill_res_reflection_;
  delete c_gs_use_item_req::default_instance_;
  delete c_gs_use_item_req_reflection_;
  delete gs_c_use_item_res::default_instance_;
  delete gs_c_use_item_res_reflection_;
  delete c_gs_shop_info_req::default_instance_;
  delete c_gs_shop_info_req_reflection_;
  delete gs_c_shop_info_res::default_instance_;
  delete gs_c_shop_info_res_reflection_;
  delete c_gs_shop_buy_item_req::default_instance_;
  delete c_gs_shop_buy_item_req_reflection_;
  delete gs_c_shop_buy_item_res::default_instance_;
  delete gs_c_shop_buy_item_res_reflection_;
  delete c_gs_shop_refresh_req::default_instance_;
  delete c_gs_shop_refresh_req_reflection_;
  delete gs_c_shop_refresh_res::default_instance_;
  delete gs_c_shop_refresh_res_reflection_;
  delete c_gs_sell_req::default_instance_;
  delete c_gs_sell_req_reflection_;
  delete gs_c_sell_res::default_instance_;
  delete gs_c_sell_res_reflection_;
  delete c_gs_arena_refresh_match_req::default_instance_;
  delete c_gs_arena_refresh_match_req_reflection_;
  delete gs_c_arena_refresh_match_res::default_instance_;
  delete gs_c_arena_refresh_match_res_reflection_;
  delete c_gs_arena_update_team_req::default_instance_;
  delete c_gs_arena_update_team_req_reflection_;
  delete gs_c_arena_update_team_res::default_instance_;
  delete gs_c_arena_update_team_res_reflection_;
  delete c_gs_arena_start_challenge_req::default_instance_;
  delete c_gs_arena_start_challenge_req_reflection_;
  delete gs_c_arena_start_challenge_res::default_instance_;
  delete gs_c_arena_start_challenge_res_reflection_;
  delete c_gs_arena_end_challenge_req::default_instance_;
  delete c_gs_arena_end_challenge_req_reflection_;
  delete gs_c_arena_end_challenge_res::default_instance_;
  delete gs_c_arena_end_challenge_res_reflection_;
  delete gs_c_arena_challenge_ntf::default_instance_;
  delete gs_c_arena_challenge_ntf_reflection_;
  delete c_gs_arena_challenge_reset_cd_req::default_instance_;
  delete c_gs_arena_challenge_reset_cd_req_reflection_;
  delete gs_c_arena_challenge_reset_cd_res::default_instance_;
  delete gs_c_arena_challenge_reset_cd_res_reflection_;
  delete c_gs_arena_challenge_reset_num_req::default_instance_;
  delete c_gs_arena_challenge_reset_num_req_reflection_;
  delete gs_c_arena_challenge_reset_num_res::default_instance_;
  delete gs_c_arena_challenge_reset_num_res_reflection_;
  delete c_gs_arena_ranks_req::default_instance_;
  delete c_gs_arena_ranks_req_reflection_;
  delete gs_c_arena_ranks_res::default_instance_;
  delete gs_c_arena_ranks_res_reflection_;
  delete c_gs_arena_log_req::default_instance_;
  delete c_gs_arena_log_req_reflection_;
  delete gs_c_arena_log_res::default_instance_;
  delete gs_c_arena_log_res_reflection_;
  delete c_gs_arena_search_req::default_instance_;
  delete c_gs_arena_search_req_reflection_;
  delete gs_c_arena_search_res::default_instance_;
  delete gs_c_arena_search_res_reflection_;
  delete c_gs_fragment_compound_req::default_instance_;
  delete c_gs_fragment_compound_req_reflection_;
  delete gs_c_fragment_compound_res::default_instance_;
  delete gs_c_fragment_compound_res_reflection_;
  delete user_mail::default_instance_;
  delete user_mail_reflection_;
  delete c_gs_mail_opt_req::default_instance_;
  delete c_gs_mail_opt_req_reflection_;
  delete gs_c_mail_opt_res::default_instance_;
  delete gs_c_mail_opt_res_reflection_;
  delete gs_c_mail_opt_res_mail_update::default_instance_;
  delete gs_c_mail_opt_res_mail_update_reflection_;
  delete gs_c_mail_ntf::default_instance_;
  delete gs_c_mail_ntf_reflection_;
  delete gs_c_mail_ntf_array::default_instance_;
  delete gs_c_mail_ntf_array_reflection_;
  delete c_gs_buy_req::default_instance_;
  delete c_gs_buy_req_reflection_;
  delete gs_c_buy_res::default_instance_;
  delete gs_c_buy_res_reflection_;
  delete user_mission::default_instance_;
  delete user_mission_reflection_;
  delete user_mission_mission_event_need::default_instance_;
  delete user_mission_mission_event_need_reflection_;
  delete gs_c_mission_ntf_array::default_instance_;
  delete gs_c_mission_ntf_array_reflection_;
  delete gs_c_mission_ntf_array_mission_opt::default_instance_;
  delete gs_c_mission_ntf_array_mission_opt_reflection_;
  delete c_gs_get_mission_reward_req::default_instance_;
  delete c_gs_get_mission_reward_req_reflection_;
  delete gs_c_get_mission_reward_res::default_instance_;
  delete gs_c_get_mission_reward_res_reflection_;
  delete sign_n_reward::default_instance_;
  delete sign_n_reward_reflection_;
  delete user_sign::default_instance_;
  delete user_sign_reflection_;
  delete c_gs_sign_req::default_instance_;
  delete c_gs_sign_req_reflection_;
  delete gs_c_sign_res::default_instance_;
  delete gs_c_sign_res_reflection_;
  delete c_gs_sign_add_req::default_instance_;
  delete c_gs_sign_add_req_reflection_;
  delete gs_c_sign_add_res::default_instance_;
  delete gs_c_sign_add_res_reflection_;
  delete c_gs_head_or_frame_change_req::default_instance_;
  delete c_gs_head_or_frame_change_req_reflection_;
  delete gs_c_head_or_frame_change_res::default_instance_;
  delete gs_c_head_or_frame_change_res_reflection_;
  delete c_gs_edit_player_info_req::default_instance_;
  delete c_gs_edit_player_info_req_reflection_;
  delete gs_c_edit_player_info_res::default_instance_;
  delete gs_c_edit_player_info_res_reflection_;
  delete c_gs_finish_novice_guide_req::default_instance_;
  delete c_gs_finish_novice_guide_req_reflection_;
  delete gs_c_finish_novice_guide_res::default_instance_;
  delete gs_c_finish_novice_guide_res_reflection_;
  delete gs_c_marquee_ntf::default_instance_;
  delete gs_c_marquee_ntf_reflection_;
  delete gs_c_element_ntf::default_instance_;
  delete gs_c_element_ntf_reflection_;
  delete friend_base_info::default_instance_;
  delete friend_base_info_reflection_;
  delete user_friend::default_instance_;
  delete user_friend_reflection_;
  delete user_friend_friend_info::default_instance_;
  delete user_friend_friend_info_reflection_;
  delete c_gs_user_friend_op_req::default_instance_;
  delete c_gs_user_friend_op_req_reflection_;
  delete gs_c_user_friend_op_res::default_instance_;
  delete gs_c_user_friend_op_res_reflection_;
  delete c_gs_search_user_req::default_instance_;
  delete c_gs_search_user_req_reflection_;
  delete gs_c_search_user_res::default_instance_;
  delete gs_c_search_user_res_reflection_;
  delete gs_c_friend_ntf::default_instance_;
  delete gs_c_friend_ntf_reflection_;
  delete c_gs_chat_req::default_instance_;
  delete c_gs_chat_req_reflection_;
  delete gs_c_chat_res::default_instance_;
  delete gs_c_chat_res_reflection_;
  delete gs_c_chat_ntf::default_instance_;
  delete gs_c_chat_ntf_reflection_;
  delete c_gs_fight_power_req::default_instance_;
  delete c_gs_fight_power_req_reflection_;
  delete gs_c_fight_power_res::default_instance_;
  delete gs_c_fight_power_res_reflection_;
  delete c_gs_rank_req::default_instance_;
  delete c_gs_rank_req_reflection_;
  delete gs_c_rank_res::default_instance_;
  delete gs_c_rank_res_reflection_;
  delete gs_c_rank_res_user_hero_brief_info::default_instance_;
  delete gs_c_rank_res_user_hero_brief_info_reflection_;
  delete gs_c_rank_res_rank_info::default_instance_;
  delete gs_c_rank_res_rank_info_reflection_;
  delete c_gs_crusade_start_req::default_instance_;
  delete c_gs_crusade_start_req_reflection_;
  delete gs_c_crusade_start_res::default_instance_;
  delete gs_c_crusade_start_res_reflection_;
  delete c_gs_crusade_end_req::default_instance_;
  delete c_gs_crusade_end_req_reflection_;
  delete gs_c_crusade_end_res::default_instance_;
  delete gs_c_crusade_end_res_reflection_;
  delete c_gs_crusade_hero_life_req::default_instance_;
  delete c_gs_crusade_hero_life_req_reflection_;
  delete gs_c_crusade_hero_life_res::default_instance_;
  delete gs_c_crusade_hero_life_res_reflection_;
  delete c_gs_crusade_reset_req::default_instance_;
  delete c_gs_crusade_reset_req_reflection_;
  delete gs_c_crusade_reset_res::default_instance_;
  delete gs_c_crusade_reset_res_reflection_;
  delete c_gs_crusade_promote_award_req::default_instance_;
  delete c_gs_crusade_promote_award_req_reflection_;
  delete gs_c_crusade_promote_award_res::default_instance_;
  delete gs_c_crusade_promote_award_res_reflection_;
  delete c_gs_crusade_buff_refresh_req::default_instance_;
  delete c_gs_crusade_buff_refresh_req_reflection_;
  delete gs_c_crusade_buff_refresh_res::default_instance_;
  delete gs_c_crusade_buff_refresh_res_reflection_;
  delete struct_guild_list_item::default_instance_;
  delete struct_guild_list_item_reflection_;
  delete struct_user_guild_info::default_instance_;
  delete struct_user_guild_info_reflection_;
  delete struct_user_guild_info_struct_guild_member::default_instance_;
  delete struct_user_guild_info_struct_guild_member_reflection_;
  delete struct_guild_boss::default_instance_;
  delete struct_guild_boss_reflection_;
  delete struct_guild_boss_attacker_dead_hero::default_instance_;
  delete struct_guild_boss_attacker_dead_hero_reflection_;
  delete c_gs_guild_new_req::default_instance_;
  delete c_gs_guild_new_req_reflection_;
  delete gs_c_guild_new_res::default_instance_;
  delete gs_c_guild_new_res_reflection_;
  delete c_gs_guild_edit_req::default_instance_;
  delete c_gs_guild_edit_req_reflection_;
  delete gs_c_guild_edit_res::default_instance_;
  delete gs_c_guild_edit_res_reflection_;
  delete c_gs_guild_delete_req::default_instance_;
  delete c_gs_guild_delete_req_reflection_;
  delete gs_c_guild_delete_res::default_instance_;
  delete gs_c_guild_delete_res_reflection_;
  delete gs_c_guild_quit_ntf::default_instance_;
  delete gs_c_guild_quit_ntf_reflection_;
  delete gs_c_guild_join_ntf::default_instance_;
  delete gs_c_guild_join_ntf_reflection_;
  delete c_gs_guild_apply_list_req::default_instance_;
  delete c_gs_guild_apply_list_req_reflection_;
  delete gs_c_guild_apply_list_res::default_instance_;
  delete gs_c_guild_apply_list_res_reflection_;
  delete gs_c_guild_apply_list_res_struct_apply_for_outsider::default_instance_;
  delete gs_c_guild_apply_list_res_struct_apply_for_outsider_reflection_;
  delete c_gs_guild_apply_op_req::default_instance_;
  delete c_gs_guild_apply_op_req_reflection_;
  delete gs_c_guild_apply_op_res::default_instance_;
  delete gs_c_guild_apply_op_res_reflection_;
  delete c_gs_guild_member_op_req::default_instance_;
  delete c_gs_guild_member_op_req_reflection_;
  delete gs_c_guild_member_op_res::default_instance_;
  delete gs_c_guild_member_op_res_reflection_;
  delete c_gs_guild_boss_refresh_req::default_instance_;
  delete c_gs_guild_boss_refresh_req_reflection_;
  delete gs_c_guild_boss_refresh_res::default_instance_;
  delete gs_c_guild_boss_refresh_res_reflection_;
  delete c_gs_guild_search_req::default_instance_;
  delete c_gs_guild_search_req_reflection_;
  delete gs_c_guild_search_res::default_instance_;
  delete gs_c_guild_search_res_reflection_;
  delete c_gs_guild_list_req::default_instance_;
  delete c_gs_guild_list_req_reflection_;
  delete gs_c_guild_list_res::default_instance_;
  delete gs_c_guild_list_res_reflection_;
  delete c_gs_guild_info_req::default_instance_;
  delete c_gs_guild_info_req_reflection_;
  delete gs_c_guild_info_res::default_instance_;
  delete gs_c_guild_info_res_reflection_;
  delete c_gs_guild_boss_list_req::default_instance_;
  delete c_gs_guild_boss_list_req_reflection_;
  delete gs_c_guild_boss_list_res::default_instance_;
  delete gs_c_guild_boss_list_res_reflection_;
  delete c_gs_guild_boss_info_req::default_instance_;
  delete c_gs_guild_boss_info_req_reflection_;
  delete gs_c_guild_boss_info_res::default_instance_;
  delete gs_c_guild_boss_info_res_reflection_;
  delete c_gs_guild_boss_attack_req::default_instance_;
  delete c_gs_guild_boss_attack_req_reflection_;
  delete gs_c_guild_boss_attack_res::default_instance_;
  delete gs_c_guild_boss_attack_res_reflection_;
  delete c_gs_guild_boss_dead_hero_reset_req::default_instance_;
  delete c_gs_guild_boss_dead_hero_reset_req_reflection_;
  delete gs_c_guild_boss_dead_hero_reset_res::default_instance_;
  delete gs_c_guild_boss_dead_hero_reset_res_reflection_;
  delete c_gs_guild_boss_attacker_rank_req::default_instance_;
  delete c_gs_guild_boss_attacker_rank_req_reflection_;
  delete gs_c_guild_boss_attacker_rank_res::default_instance_;
  delete gs_c_guild_boss_attacker_rank_res_reflection_;
  delete gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::default_instance_;
  delete gs_c_guild_boss_attacker_rank_res_struct_boss_attacker_reflection_;
  delete c_gs_server_time_req::default_instance_;
  delete c_gs_server_time_req_reflection_;
  delete gs_c_server_time_res::default_instance_;
  delete gs_c_server_time_res_reflection_;
}

void protobuf_AddDesc_gs_5fc_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020gs_c_proto.proto\"\'\n\004AOYI\022\014\n\002id\030\001 \002(\t:\000"
    "\022\021\n\006factor\030\002 \002(\002:\0010\"\"\n\nAOYI_ARRAY\022\024\n\005ite"
    "ms\030\001 \003(\0132\005.AOYI\",\n\nARENAPRICE\022\014\n\002id\030\001 \002("
    "\t:\000\022\020\n\005price\030\002 \002(\005:\0010\".\n\020ARENAPRICE_ARRA"
    "Y\022\032\n\005items\030\001 \003(\0132\013.ARENAPRICE\"\235\001\n\003BAG\022\014\n"
    "\002id\030\001 \002(\t:\000\022\022\n\007useType\030\002 \002(\005:\0010\022\022\n\007quali"
    "ty\030\003 \002(\005:\0010\022\024\n\tsellPrice\030\004 \002(\005:\0010\022\r\n\003exp"
    "\030\005 \002(\t:\000\022\017\n\005needs\030\006 \002(\t:\000\022\024\n\nneedCounts\030"
    "\007 \002(\t:\000\022\024\n\tneedGolds\030\010 \002(\005:\0010\" \n\tBAG_ARR"
    "AY\022\023\n\005items\030\001 \003(\0132\004.BAG\"<\n\006BATTLE\022\014\n\002id\030"
    "\001 \002(\t:\000\022\017\n\005infos\030\002 \002(\t:\000\022\023\n\tpositions\030\003 "
    "\002(\t:\000\"&\n\014BATTLE_ARRAY\022\026\n\005items\030\001 \003(\0132\007.B"
    "ATTLE\"\271\005\n\010BOSSPROP\022\014\n\002id\030\001 \002(\t:\000\022\021\n\007poin"
    "tId\030\002 \002(\t:\000\022\017\n\004area\030\003 \002(\005:\0010\022\025\n\noccupati"
    "on\030\004 \002(\005:\0010\022\020\n\005level\030\005 \002(\005:\0010\022\021\n\006health\030"
    "\006 \002(\005:\0010\022\021\n\006damage\030\007 \002(\005:\0010\022\016\n\003pdd\030\010 \002(\005"
    ":\0010\022\016\n\003mdd\030\t \002(\005:\0010\022\023\n\010hitLevel\030\n \002(\005:\0010"
    "\022\025\n\ndodgeLevel\030\013 \002(\005:\0010\022\023\n\010criLevel\030\014 \002("
    "\005:\0010\022\030\n\rtenacityLevel\030\r \002(\005:\0010\022\024\n\tpddPie"
    "rce\030\016 \002(\005:\0010\022\030\n\016passiveSkillId\030\017 \002(\t:\000\022\033"
    "\n\021passiveSkillLevel\030\020 \002(\t:\000\022\022\n\007range_X\030\021"
    " \002(\002:\0010\022\022\n\007range_Y\030\022 \002(\002:\0010\022\022\n\007range_Z\030\023"
    " \002(\002:\0010\022\026\n\013attackSpeed\030\024 \002(\002:\0010\022\020\n\005h_Dis"
    "\030\025 \002(\002:\0010\022\020\n\005v_Dis\030\026 \002(\002:\0010\022\024\n\tmoveSpeed"
    "\030\027 \002(\002:\0010\022\017\n\004star\030\030 \002(\005:\0010\022\022\n\007stage_B\030\031 "
    "\002(\005:\0010\022\022\n\010hitNum_B\030\032 \002(\t:\000\022\027\n\rskillTimeL"
    "ist\030\033 \002(\t:\000\022\031\n\017warningTimeList\030\034 \002(\t:\000\022\027"
    "\n\014maxIntensity\030\035 \002(\005:\0010\022\037\n\024recoverIntens"
    "ityRate\030\036 \002(\005:\0010\022\027\n\014minIntensity\030\037 \002(\005:\001"
    "0\022\026\n\013type_Normal\030  \002(\005:\0010\"*\n\016BOSSPROP_AR"
    "RAY\022\030\n\005items\030\001 \003(\0132\t.BOSSPROP\"\245\001\n\tBOSSSK"
    "ILL\022\014\n\002id\030\001 \002(\t:\000\022\021\n\006factor\030\002 \002(\002:\0010\022\023\n\010"
    "distance\030\003 \002(\002:\0010\022\021\n\006height\030\004 \002(\002:\0010\022\022\n\007"
    "range_x\030\005 \002(\002:\0010\022\022\n\007range_y\030\006 \002(\002:\0010\022\022\n\007"
    "range_z\030\007 \002(\002:\0010\022\023\n\010waitTime\030\010 \002(\002:\0010\",\n"
    "\017BOSSSKILL_ARRAY\022\031\n\005items\030\001 \003(\0132\n.BOSSSK"
    "ILL\"\350\001\n\004BUFF\022\014\n\002id\030\001 \002(\t:\000\022\017\n\004type\030\002 \002(\005"
    ":\0010\022\023\n\010duration\030\003 \002(\002:\0010\022\027\n\014durationGrow"
    "\030\004 \002(\002:\0010\022\023\n\010interval\030\005 \002(\002:\0010\022\020\n\005value\030"
    "\006 \002(\005:\0010\022\024\n\tvalueGrow\030\007 \002(\005:\0010\022\022\n\007useTyp"
    "e\030\010 \002(\005:\0010\022\023\n\010lifeLine\030\t \002(\005:\0010\022\023\n\010buffT"
    "ype\030\n \002(\005:\0010\022\030\n\rmaxLimitCount\030\013 \002(\005:\0010\"\""
    "\n\nBUFF_ARRAY\022\024\n\005items\030\001 \003(\0132\005.BUFF\"]\n\nCH"
    "APTERMAP\022\014\n\002id\030\001 \002(\t:\000\022\025\n\ncapterType\030\002 \002"
    "(\005:\0010\022\024\n\tpointType\030\003 \002(\005:\0010\022\024\n\topenLevel"
    "\030\004 \002(\005:\0010\".\n\020CHAPTERMAP_ARRAY\022\032\n\005items\030\001"
    " \003(\0132\013.CHAPTERMAP\".\n\tCOINPRICE\022\014\n\002id\030\001 \002"
    "(\t:\000\022\023\n\010needGems\030\002 \002(\005:\0010\",\n\017COINPRICE_A"
    "RRAY\022\031\n\005items\030\001 \003(\0132\n.COINPRICE\"\246\004\n\005EQUI"
    "P\022\014\n\002id\030\001 \002(\t:\000\022\016\n\003pos\030\002 \002(\005:\0010\022\021\n\007name_"
    "ch\030\003 \002(\t:\000\022\021\n\007name_en\030\004 \002(\t:\000\022\022\n\007quality"
    "\030\005 \002(\005:\0010\022\021\n\006health\030\006 \002(\005:\0010\022\025\n\nhealthGr"
    "ow\030\007 \002(\005:\0010\022\021\n\006damage\030\010 \002(\005:\0010\022\025\n\ndamage"
    "Grow\030\t \002(\005:\0010\022\016\n\003pdd\030\n \002(\005:\0010\022\022\n\007pddGrow"
    "\030\013 \002(\005:\0010\022\016\n\003mdd\030\014 \002(\005:\0010\022\022\n\007mddGrow\030\r \002"
    "(\005:\0010\022\023\n\010hitLevel\030\016 \002(\005:\0010\022\022\n\007hitGrow\030\017 "
    "\002(\005:\0010\022\025\n\ndodgeLevel\030\020 \002(\005:\0010\022\024\n\tdodgeGr"
    "ow\030\021 \002(\005:\0010\022\023\n\010criLevel\030\022 \002(\005:\0010\022\022\n\007criG"
    "row\030\023 \002(\005:\0010\022\030\n\rtenacityLevel\030\024 \002(\005:\0010\022\027"
    "\n\014tenacityGrow\030\025 \002(\005:\0010\022\024\n\tpddPierce\030\026 \002"
    "(\005:\0010\022\030\n\rpddPierceGrow\030\027 \002(\005:\0010\022\017\n\005needs"
    "\030\030 \002(\t:\000\022\024\n\nneedCounts\030\031 \002(\t:\000\022\020\n\006nextId"
    "\030\032 \002(\t:\000\022\016\n\004icon\030\033 \002(\t:\000\"$\n\013EQUIP_ARRAY\022"
    "\025\n\005items\030\001 \003(\0132\006.EQUIP\"\252\001\n\rEVOLUTIONCOIN"
    "\022\014\n\002id\030\001 \002(\t:\000\022\026\n\014equip_Weapon\030\002 \002(\t:\000\022\030"
    "\n\016equip_Necklace\030\003 \002(\t:\000\022\027\n\requip_Clothe"
    "s\030\004 \002(\t:\000\022\024\n\nequip_Belt\030\005 \002(\t:\000\022\024\n\nequip"
    "_Ring\030\006 \002(\t:\000\022\024\n\nequip_Boot\030\007 \002(\t:\000\"4\n\023E"
    "VOLUTIONCOIN_ARRAY\022\035\n\005items\030\001 \003(\0132\016.EVOL"
    "UTIONCOIN\"\377\t\n\010HEROPROP\022\014\n\002id\030\001 \002(\t:\000\022\017\n\004"
    "area\030\002 \002(\005:\0010\022\023\n\010property\030\003 \002(\005:\0010\022\025\n\noc"
    "cupation\030\004 \002(\005:\0010\022\021\n\006health\030\005 \002(\005:\0010\022\024\n\n"
    "healthGrow\030\006 \002(\t:\000\022\021\n\006damage\030\007 \002(\005:\0010\022\024\n"
    "\ndamageGrow\030\010 \002(\t:\000\022\016\n\003pdd\030\t \002(\005:\0010\022\021\n\007p"
    "ddGrow\030\n \002(\t:\000\022\016\n\003mdd\030\013 \002(\005:\0010\022\021\n\007mddGro"
    "w\030\014 \002(\t:\000\022\023\n\010hitLevel\030\r \002(\005:\0010\022\021\n\007hitGro"
    "w\030\016 \002(\t:\000\022\025\n\ndodgeLevel\030\017 \002(\005:\0010\022\023\n\tdodg"
    "eGrow\030\020 \002(\t:\000\022\023\n\010criLevel\030\021 \002(\005:\0010\022\021\n\007cr"
    "iGrow\030\022 \002(\t:\000\022\030\n\rtenacityLevel\030\023 \002(\005:\0010\022"
    "\026\n\014tenacityGrow\030\024 \002(\t:\000\022\024\n\tpddPierce\030\025 \002"
    "(\005:\0010\022\027\n\rpddPierceGrow\030\026 \002(\t:\000\022\026\n\013type_N"
    "ormal\030\027 \002(\005:\0010\022\025\n\ntype_Skill\030\030 \002(\005:\0010\022\030\n"
    "\rpercent_Skill\030\031 \002(\005:\0010\022\027\n\014addNum_Skill\030"
    "\032 \002(\005:\0010\022\033\n\020addNumGrow_Skill\030\033 \002(\005:\0010\022\024\n"
    "\ttype_AoYi\030\034 \002(\005:\0010\022\027\n\014percent_AoYi\030\035 \002("
    "\005:\0010\022\026\n\013addNum_AoYi\030\036 \002(\005:\0010\022\032\n\017addNumGr"
    "ow_AoYi\030\037 \002(\005:\0010\022\030\n\016passiveSkill_1\030  \002(\t"
    ":\000\022\030\n\016passiveSkill_2\030! \002(\t:\000\022\030\n\016passiveS"
    "kill_3\030\" \002(\t:\000\022\022\n\007range_X\030# \002(\002:\0010\022\022\n\007ra"
    "nge_Y\030$ \002(\002:\0010\022\022\n\007range_Z\030% \002(\002:\0010\022\026\n\013at"
    "tackSpeed\030& \002(\002:\0010\022\020\n\005h_Dis\030\' \002(\002:\0010\022\020\n\005"
    "v_Dis\030( \002(\002:\0010\022\024\n\tmoveSpeed\030) \002(\002:\0010\022\017\n\004"
    "star\030* \002(\005:\0010\022\022\n\007stage_B\030+ \002(\005:\0010\022\022\n\010hit"
    "Num_B\030, \002(\t:\000\022\023\n\010hitNum_A\030- \002(\005:\0010\022\021\n\006po"
    "sNum\030. \002(\005:\0010\022\034\n\021recoverTime_Skill\030/ \002(\002"
    ":\0010\022\022\n\007aoYiNum\0300 \002(\005:\0010\022\026\n\014equip_Weapon\030"
    "1 \002(\t:\000\022\030\n\016equip_Necklace\0302 \002(\t:\000\022\027\n\requ"
    "ip_Clothes\0303 \002(\t:\000\022\024\n\nequip_Belt\0304 \002(\t:\000"
    "\022\024\n\nequip_Ring\0305 \002(\t:\000\022\024\n\nequip_Boot\0306 \002"
    "(\t:\000\022\020\n\006needId\0307 \002(\t:\000\022\"\n\027skillTriggerPr"
    "obability\0308 \002(\005:\0010\022\037\n\024skillTriggerDurati"
    "on\0309 \002(\002:\0010\"*\n\016HEROPROP_ARRAY\022\030\n\005items\030\001"
    " \003(\0132\t.HEROPROP\"\273\001\n\tHEROSKILL\022\014\n\002id\030\001 \002("
    "\t:\000\022\021\n\006factor\030\002 \002(\002:\0010\022\023\n\010distance\030\003 \002(\002"
    ":\0010\022\021\n\006height\030\004 \002(\002:\0010\022\022\n\007range_x\030\005 \002(\002:"
    "\0010\022\022\n\007range_y\030\006 \002(\002:\0010\022\022\n\007range_z\030\007 \002(\002:"
    "\0010\022\023\n\010waitTime\030\010 \002(\002:\0010\022\024\n\tintensity\030\t \002"
    "(\005:\0010\",\n\017HEROSKILL_ARRAY\022\031\n\005items\030\001 \003(\0132"
    "\n.HEROSKILL\",\n\010HEROSTAR\022\014\n\002id\030\001 \002(\t:\000\022\022\n"
    "\007needNum\030\002 \002(\005:\0010\"*\n\016HEROSTAR_ARRAY\022\030\n\005i"
    "tems\030\001 \003(\0132\t.HEROSTAR\"\315\004\n\013MONSTERPROP\022\014\n"
    "\002id\030\001 \002(\t:\000\022\017\n\004area\030\002 \002(\005:\0010\022\025\n\noccupati"
    "on\030\003 \002(\005:\0010\022\020\n\005level\030\004 \002(\005:\0010\022\021\n\006health\030"
    "\005 \002(\005:\0010\022\021\n\006damage\030\006 \002(\005:\0010\022\016\n\003pdd\030\007 \002(\005"
    ":\0010\022\016\n\003mdd\030\010 \002(\005:\0010\022\023\n\010hitLevel\030\t \002(\005:\0010"
    "\022\025\n\ndodgeLevel\030\n \002(\005:\0010\022\023\n\010criLevel\030\013 \002("
    "\005:\0010\022\030\n\rtenacityLevel\030\014 \002(\005:\0010\022\024\n\tpddPie"
    "rce\030\r \002(\005:\0010\022\022\n\007range_X\030\016 \002(\002:\0010\022\022\n\007rang"
    "e_Y\030\017 \002(\002:\0010\022\022\n\007range_Z\030\020 \002(\002:\0010\022\026\n\013atta"
    "ckSpeed\030\021 \002(\002:\0010\022\020\n\005h_Dis\030\022 \002(\002:\0010\022\020\n\005v_"
    "Dis\030\023 \002(\002:\0010\022\024\n\tmoveSpeed\030\024 \002(\002:\0010\022\017\n\004st"
    "ar\030\025 \002(\005:\0010\022\027\n\014maxIntensity\030\026 \002(\005:\0010\022\037\n\024"
    "recoverIntensityRate\030\027 \002(\005:\0010\022\027\n\014minInte"
    "nsity\030\030 \002(\005:\0010\022\026\n\013type_Normal\030\031 \002(\005:\0010\022\030"
    "\n\016passiveSkillId\030\032 \002(\t:\000\022\033\n\021passiveSkill"
    "Level\030\033 \002(\t:\000\"0\n\021MONSTERPROP_ARRAY\022\033\n\005it"
    "ems\030\001 \003(\0132\014.MONSTERPROP\"\245\001\n\007PASSIVE\022\014\n\002i"
    "d\030\001 \002(\t:\000\022\026\n\013triggerEnum\030\002 \002(\005:\0010\022\023\n\ttri"
    "ggerId\030\003 \002(\t:\000\022\020\n\006buffId\030\004 \002(\t:\000\022\026\n\013targ"
    "et_Team\030\005 \002(\005:\0010\022\027\n\014target_State\030\006 \002(\005:\001"
    "0\022\034\n\021target_Occupation\030\007 \002(\005:\0010\"(\n\rPASSI"
    "VE_ARRAY\022\027\n\005items\030\001 \003(\0132\010.PASSIVE\"M\n\tPRI"
    "ZESHOW\022\014\n\002id\030\001 \002(\t:\000\022\016\n\004type\030\002 \002(\t:\000\022\020\n\006"
    "counts\030\003 \002(\t:\000\022\020\n\006awards\030\004 \002(\t:\000\",\n\017PRIZ"
    "ESHOW_ARRAY\022\031\n\005items\030\001 \003(\0132\n.PRIZESHOW\"\217"
    "\002\n\013QUALITYRULE\022\014\n\002id\030\001 \002(\t:\000\022\024\n\tneedLeve"
    "l\030\002 \002(\005:\0010\022\024\n\tneedGolds\030\003 \002(\005:\0010\022\021\n\006heal"
    "th\030\004 \002(\005:\0010\022\021\n\006damage\030\005 \002(\005:\0010\022\016\n\003pdd\030\006 "
    "\002(\005:\0010\022\016\n\003mdd\030\007 \002(\005:\0010\022\023\n\010hitLevel\030\010 \002(\005"
    ":\0010\022\025\n\ndodgeLevel\030\t \002(\005:\0010\022\023\n\010criLevel\030\n"
    " \002(\005:\0010\022\030\n\rtenacityLevel\030\013 \002(\005:\0010\022\024\n\tpdd"
    "Pierce\030\014 \002(\005:\0010\022\017\n\004open\030\r \002(\005:\0010\"0\n\021QUAL"
    "ITYRULE_ARRAY\022\033\n\005items\030\001 \003(\0132\014.QUALITYRU"
    "LE\">\n\rREALTIMECHECK\022\014\n\002id\030\001 \002(\t:\000\022\017\n\004typ"
    "e\030\002 \002(\005:\0010\022\016\n\003num\030\003 \002(\005:\0010\"4\n\023REALTIMECH"
    "ECK_ARRAY\022\035\n\005items\030\001 \003(\0132\016.REALTIMECHECK"
    "\"/\n\nRESETPRICE\022\014\n\002id\030\001 \002(\t:\000\022\023\n\010needGems"
    "\030\002 \002(\005:\0010\".\n\020RESETPRICE_ARRAY\022\032\n\005items\030\001"
    " \003(\0132\013.RESETPRICE\"\224\004\n\004RULE\022\014\n\002id\030\001 \002(\t:\000"
    "\022\033\n\020upgrade_Exp_User\030\002 \002(\005:\0010\022\033\n\020upgrade"
    "_Exp_Hero\030\003 \002(\005:\0010\022\025\n\nfactor_Hit\030\004 \002(\005:\001"
    "0\022\027\n\014factor_Dodge\030\005 \002(\005:\0010\022\025\n\nfactor_Cri"
    "\030\006 \002(\005:\0010\022\032\n\017factor_Tenacity\030\007 \002(\005:\0010\022\035\n"
    "\022upgrade_Gold_Skill\030\010 \002(\005:\0010\022\034\n\021upgrade_"
    "Gold_AoYi\030\t \002(\005:\0010\022!\n\026upgrade_Gold_Passi"
    "ve_1\030\n \002(\005:\0010\022!\n\026upgrade_Gold_Passive_2\030"
    "\013 \002(\005:\0010\022!\n\026upgrade_Gold_Passive_3\030\014 \002(\005"
    ":\0010\022\036\n\023upgrade_Gold_Weapon\030\r \002(\005:\0010\022 \n\025u"
    "pgrade_Gold_Necklace\030\016 \002(\005:\0010\022\037\n\024upgrade"
    "_Gold_Clothes\030\017 \002(\005:\0010\022\034\n\021upgrade_Gold_B"
    "elt\030\020 \002(\005:\0010\022\034\n\021upgrade_Gold_Ring\030\021 \002(\005:"
    "\0010\022\034\n\021upgrade_Gold_Boot\030\022 \002(\005:\0010\"\"\n\nRULE"
    "_ARRAY\022\024\n\005items\030\001 \003(\0132\005.RULE\"3\n\016SHOPRESE"
    "TPRICE\022\014\n\002id\030\001 \002(\t:\000\022\023\n\010needGems\030\002 \002(\005:\001"
    "0\"6\n\024SHOPRESETPRICE_ARRAY\022\036\n\005items\030\001 \003(\013"
    "2\017.SHOPRESETPRICE\",\n\007SPPRICE\022\014\n\002id\030\001 \002(\t"
    ":\000\022\023\n\010needGems\030\002 \002(\005:\0010\"(\n\rSPPRICE_ARRAY"
    "\022\027\n\005items\030\001 \003(\0132\010.SPPRICE\"-\n\010STAPRICE\022\014\n"
    "\002id\030\001 \002(\t:\000\022\023\n\010needGems\030\002 \002(\005:\0010\"*\n\016STAP"
    "RICE_ARRAY\022\030\n\005items\030\001 \003(\0132\t.STAPRICE\"\223\002\n"
    "\007SUBTASK\022\014\n\002id\030\001 \002(\t:\000\022\024\n\nbattleData\030\002 \002"
    "(\t:\000\022\017\n\005diffs\030\003 \002(\t:\000\022\024\n\ntotalTimes\030\004 \002("
    "\t:\000\022\021\n\007name_ch\030\005 \002(\t:\000\022\023\n\010expendSt\030\006 \002(\005"
    ":\0010\022\025\n\nfightCount\030\007 \002(\005:\0010\022\020\n\005idExp\030\010 \002("
    "\005:\0010\022\022\n\007heroExp\030\t \002(\005:\0010\022\023\n\010dropGold\030\n \002"
    "(\005:\0010\022\027\n\rpointParentId\030\013 \002(\t:\000\022\023\n\010priori"
    "ty\030\014 \002(\002:\0010\022\025\n\nfightPower\030\r \002(\005:\0010\"(\n\rSU"
    "BTASK_ARRAY\022\027\n\005items\030\001 \003(\0132\010.SUBTASK\"\370\001\n"
    "\004TASK\022\014\n\002id\030\001 \002(\t:\000\022\025\n\nseriesType\030\002 \002(\005:"
    "\0010\022\027\n\rseriesName_ch\030\003 \002(\t:\000\022\022\n\010rewardId\030"
    "\004 \002(\t:\000\022\027\n\014openTimeType\030\005 \002(\005:\0010\022\022\n\010open"
    "Time\030\006 \002(\t:\000\022\030\n\rtotalEnterNum\030\007 \002(\005:\0010\022\024"
    "\n\nenterLimit\030\010 \002(\t:\000\022\027\n\rpointParentId\030\t "
    "\002(\t:\000\022\023\n\tnextPoint\030\n \002(\t:\000\022\023\n\010priority\030\013"
    " \002(\002:\0010\"\"\n\nTASK_ARRAY\022\024\n\005items\030\001 \003(\0132\005.T"
    "ASK\"=\n\rTRIGGERATTACK\022\014\n\002id\030\001 \002(\t:\000\022\017\n\004ty"
    "pe\030\002 \002(\005:\0010\022\r\n\002cd\030\003 \002(\002:\0010\"4\n\023TRIGGERATT"
    "ACK_ARRAY\022\035\n\005items\030\001 \003(\0132\016.TRIGGERATTACK"
    "\"\303\001\n\025TRIGGERSTARTCONDITION\022\014\n\002id\030\001 \002(\t:\000"
    "\022\027\n\014trigger_Time\030\002 \002(\005:\0010\022\027\n\014trigger_Tea"
    "m\030\003 \002(\005:\0010\022\030\n\rtrigger_State\030\004 \002(\005:\0010\022\035\n\022"
    "trigger_Occupation\030\005 \002(\005:\0010\022\027\n\014trigger_M"
    "ark\030\006 \002(\005:\0010\022\030\n\rtrigger_Count\030\007 \002(\005:\0010\"D"
    "\n\033TRIGGERSTARTCONDITION_ARRAY\022%\n\005items\030\001"
    " \003(\0132\026.TRIGGERSTARTCONDITION\"\271\002\n\003VIP\022\014\n\002"
    "id\030\001 \002(\t:\000\022\022\n\007needRMB\030\002 \002(\005:\0010\022\030\n\rfreeIt"
    "emCount\030\003 \002(\005:\0010\022\030\n\rbuyPowerCount\030\004 \002(\005:"
    "\0010\022\025\n\nbuyFBCount\030\005 \002(\005:\0010\022\030\n\rbuyArenaCou"
    "nt\030\006 \002(\005:\0010\022\030\n\rbuyGoldsCount\030\007 \002(\005:\0010\022\030\n"
    "\rmaxSkillPoint\030\010 \002(\005:\0010\022\027\n\014expBattleNum\030"
    "\t \002(\005:\0010\022\030\n\rgoldBattleNum\030\n \002(\005:\0010\022\023\n\010to"
    "werNum\030\013 \002(\005:\0010\022\025\n\ncrusadeNum\030\014 \002(\005:\0010\022\030"
    "\n\rbuySkillPoint\030\r \002(\005:\0010\" \n\tVIP_ARRAY\022\023\n"
    "\005items\030\001 \003(\0132\004.VIP\"/\n\013VIPFUNCTION\022\014\n\002id\030"
    "\001 \002(\t:\000\022\022\n\007openVip\030\002 \002(\005:\0010\"0\n\021VIPFUNCTI"
    "ON_ARRAY\022\033\n\005items\030\001 \003(\0132\014.VIPFUNCTION\"\"\n"
    "\021c_gs_enter_gs_req\022\r\n\005token\030\001 \002(\014\"X\n\021gs_"
    "c_enter_gs_res\022\022\n\nerror_code\030\001 \002(\r\022\025\n\rpr"
    "oto_version\030\002 \001(\r\022\030\n\020server_timestamp\030\003 "
    "\001(\r\"\023\n\021c_gs_leave_gs_req\"\'\n\021gs_c_leave_g"
    "s_res\022\022\n\nerror_code\030\001 \002(\r\"\036\n\034c_gs_json_c"
    "onfig_version_req\"\237\001\n\034gs_c_json_config_v"
    "ersion_res\022\022\n\nerror_code\030\001 \002(\r\022>\n\010versio"
    "ns\030\002 \003(\0132,.gs_c_json_config_version_res."
    "config_version\032+\n\016config_version\022\014\n\004name"
    "\030\001 \002(\t\022\013\n\003md5\030\002 \002(\t\"%\n\024c_gs_json_config_"
    "req\022\r\n\005names\030\001 \003(\t\"\217\001\n\024gs_c_json_config_"
    "res\022\022\n\nerror_code\030\001 \002(\r\022-\n\007configs\030\002 \003(\013"
    "2\034.gs_c_json_config_res.config\0324\n\006config"
    "\022\014\n\004name\030\001 \002(\t\022\013\n\003md5\030\002 \002(\t\022\017\n\007content\030\003"
    " \002(\t\"\021\n\017c_gs_config_req\"\321\010\n\017gs_c_config_"
    "res\022\022\n\nerror_code\030\001 \002(\r\022&\n\013chapter_map\030\002"
    " \001(\0132\021.CHAPTERMAP_ARRAY\022\031\n\004task\030\003 \001(\0132\013."
    "TASK_ARRAY\022 \n\010sub_task\030\004 \001(\0132\016.SUBTASK_A"
    "RRAY\022\035\n\006battle\030\005 \001(\0132\r.BATTLE_ARRAY\022\"\n\th"
    "ero_prop\030\006 \001(\0132\017.HEROPROP_ARRAY\022\"\n\tboss_"
    "prop\030\007 \001(\0132\017.BOSSPROP_ARRAY\022(\n\014monster_p"
    "rop\030\010 \001(\0132\022.MONSTERPROP_ARRAY\022\033\n\005equip\030\t"
    " \001(\0132\014.EQUIP_ARRAY\022\031\n\004aoyi\030\n \001(\0132\013.AOYI_"
    "ARRAY\022\027\n\003bag\030\013 \001(\0132\n.BAG_ARRAY\022\037\n\007passiv"
    "e\030\014 \001(\0132\016.PASSIVE_ARRAY\022=\n\027trigger_start"
    "_condition\030\r \001(\0132\034.TRIGGERSTARTCONDITION"
    "_ARRAY\022,\n\016realtime_check\030\016 \001(\0132\024.REALTIM"
    "ECHECK_ARRAY\022,\n\016trigger_attack\030\017 \001(\0132\024.T"
    "RIGGERATTACK_ARRAY\022\031\n\004buff\030\020 \001(\0132\013.BUFF_"
    "ARRAY\022$\n\nhero_skill\030\021 \001(\0132\020.HEROSKILL_AR"
    "RAY\022$\n\nboss_skill\030\022 \001(\0132\020.BOSSSKILL_ARRA"
    "Y\022$\n\ncoin_price\030\023 \001(\0132\020.COINPRICE_ARRAY\022"
    "&\n\013reset_price\030\024 \001(\0132\021.RESETPRICE_ARRAY\022"
    "\037\n\007spprice\030\025 \001(\0132\016.SPPRICE_ARRAY\022!\n\010stap"
    "rice\030\026 \001(\0132\017.STAPRICE_ARRAY\022\027\n\003vip\030\027 \001(\013"
    "2\n.VIP_ARRAY\022(\n\014vip_function\030\030 \001(\0132\022.VIP"
    "FUNCTION_ARRAY\022.\n\017shop_resetprice\030\031 \001(\0132"
    "\025.SHOPRESETPRICE_ARRAY\022$\n\nprize_show\030\032 \001"
    "(\0132\020.PRIZESHOW_ARRAY\022\"\n\thero_star\030\033 \001(\0132"
    "\017.HEROSTAR_ARRAY\022,\n\016evolution_coin\030\034 \001(\013"
    "2\024.EVOLUTIONCOIN_ARRAY\022(\n\014quality_rule\030\035"
    " \001(\0132\022.QUALITYRULE_ARRAY\022\031\n\004rule\030\036 \001(\0132\013"
    ".RULE_ARRAY\"\024\n\022c_gs_user_info_req\"\265\001\n\rus"
    "er_sub_task\022\023\n\013sub_task_id\030\001 \002(\r\022\014\n\004star"
    "\030\002 \002(\r\022\027\n\017last_enter_time\030\003 \002(\r\022\032\n\022last_"
    "day_enter_num\030\004 \002(\r\022\027\n\017total_enter_num\030\005"
    " \002(\r\022\027\n\017last_reset_time\030\006 \002(\r\022\032\n\022last_da"
    "y_reset_num\030\007 \002(\r\"4\n\023user_sub_task_array"
    "\022\035\n\005items\030\001 \003(\0132\016.user_sub_task\"8\n\017user_"
    "hero_equip\022\023\n\010equip_id\030\001 \002(\r:\0010\022\020\n\005level"
    "\030\002 \002(\r:\0010\"\237\001\n\017user_hero_skill\022+\n\004type\030\001 "
    "\002(\0162\035.user_hero_skill.e_skill_type\022\020\n\005le"
    "vel\030\002 \002(\r:\0010\"M\n\014e_skill_type\022\t\n\005BISHA\020\001\022"
    "\010\n\004AOYI\020\002\022\014\n\010PASSIVE1\020\003\022\014\n\010PASSIVE2\020\004\022\014\n"
    "\010PASSIVE3\020\005\"\310\001\n\tuser_hero\022\022\n\007hero_id\030\001 \002"
    "(\r:\0010\022\017\n\004star\030\002 \002(\r:\0010\022\022\n\007quality\030\003 \002(\r:"
    "\0010\022\020\n\005level\030\004 \002(\r:\0010\022\022\n\007cur_exp\030\005 \002(\r:\0010"
    "\022\030\n\rgot_timestamp\030\006 \002(\r:\0010\022 \n\006equips\030\007 \003"
    "(\0132\020.user_hero_equip\022 \n\006skills\030\010 \003(\0132\020.u"
    "ser_hero_skill\",\n\017user_hero_array\022\031\n\005ite"
    "ms\030\001 \003(\0132\n.user_hero\"\360\004\n\016user_base_info\022"
    "\017\n\007user_id\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\r\n\005level\030"
    "\003 \002(\r\022\013\n\003exp\030\004 \002(\r\022\013\n\003vip\030\005 \002(\r\022\017\n\007diamo"
    "nd\030\006 \002(\r\022\014\n\004gold\030\007 \002(\r\022\022\n\nhealth_cur\030\010 \002"
    "(\r\022$\n\034health_last_update_timestamp\030\t \002(\r"
    "\022\023\n\013skill_point\030\n \002(\r\022)\n!skill_point_las"
    "t_update_timestamp\030\013 \002(\r\022!\n\031invoke_gold_"
    "free_left_num\030\014 \002(\r\022)\n!invoke_gold_free_"
    "update_timestamp\030\r \002(\r\022$\n\034invoke_diamond"
    "_free_left_num\030\016 \002(\r\022,\n$invoke_diamond_f"
    "ree_update_timestamp\030\017 \002(\r\022\033\n\023buy_used_t"
    "imes_gold\030\020 \002(\r\022\035\n\025buy_used_times_health"
    "\030\021 \002(\r\022\"\n\032buy_used_times_skill_point\030\022 \002"
    "(\r\022\017\n\007head_id\030\023 \002(\r\022\025\n\rhead_frame_id\030\024 \002"
    "(\r\022\024\n\014friend_point\030\025 \002(\r\022\021\n\tsignature\030\026 "
    "\002(\t\022\023\n\013fight_power\030\027 \002(\r\022\025\n\rcrusade_poin"
    "t\030\030 \002(\r\"\247\t\n\023struct_game_element\022/\n\004type\030"
    "\001 \002(\0162!.struct_game_element.EELEMENTTYPE"
    "\022\n\n\002id\030\002 \002(\r\022\016\n\006sub_id\030\003 \001(\r\0228\n\010num_type"
    "\030\004 \002(\0162&.struct_game_element.EELEMENT_NU"
    "M_TYPE\022\013\n\003num\030\005 \002(\r\"\255\007\n\014EELEMENTTYPE\022\024\n\020"
    "EELEMENTTYPE_min\020\000\022\026\n\022EELEMENTTYPE_SKILL"
    "\020\001\022\025\n\021EELEMENTTYPE_TASK\020\002\022\031\n\025EELEMENTTYP"
    "E_SUB_TASK\020\003\022\027\n\023EELEMENTTYPE_BATTLE\020\004\022\025\n"
    "\021EELEMENTTYPE_HERO\020\005\022\025\n\021EELEMENTTYPE_BOS"
    "S\020\006\022\030\n\024EELEMENTTYPE_MONSTER\020\007\022\025\n\021EELEMEN"
    "TTYPE_ITEM\020\010\022\026\n\022EELEMENTTYPE_EQUIP\020\n\022\024\n\020"
    "EELEMENTTYPE_EXP\020\013\022\025\n\021EELEMENTTYPE_GOLD\020"
    "\014\022\030\n\024EELEMENTTYPE_DIAMOND\020\r\022\027\n\023EELEMENTT"
    "YPE_HEALTH\020\016\022\034\n\030EELEMENTTYPE_SKILL_POINT"
    "\020\017\022\034\n\030EELEMENTTYPE_ARENA_POINT\020\020\022\027\n\023EELE"
    "MENTTYPE_PACKET\020\021\022!\n\035EELEMENTTYPE_INVOKE"
    "_GOLD_FREE\020\022\022$\n EELEMENTTYPE_INVOKE_DIAM"
    "OND_FREE\020\023\022\035\n\031EELEMENTTYPE_PLAYER_LEVEL\020"
    "\024\022\033\n\027EELEMENTTYPE_PLAYER_EXP\020\025\022\033\n\027EELEME"
    "NTTYPE_HERO_LEVEL\020\026\022\031\n\025EELEMENTTYPE_HERO"
    "_EXP\020\027\022#\n\037EELEMENTTYPE_SUB_TASK_ENTER_NU"
    "M\020\030\022#\n\037EELEMENTTYPE_SUB_TASK_RESET_NUM\020\031"
    "\022\035\n\031EELEMENTTYPE_FRIEND_POINT\020\032\022)\n%EELEM"
    "ENTTYPE_GUILD_CONTRIBUTION_POINT\020\033\022\033\n\027EE"
    "LEMENTTYPE_GUILD_COIN\020\035\0220\n,EELEMENTTYPE_"
    "GUILD_MEMBER_CONTRIBUTION_POINT\020\036\022\"\n\036EEL"
    "EMENTTYPE_GUILD_MEMBER_COIN\020\037\022\036\n\032EELEMEN"
    "TTYPE_CRUSADE_POINT\020 \022\024\n\020EELEMENTTYPE_ma"
    "x\020!\"L\n\021EELEMENT_NUM_TYPE\022\007\n\003min\020\000\022\014\n\010INC"
    "REASE\020\001\022\014\n\010DECREASE\020\002\022\t\n\005TOTAL\020\003\022\007\n\003max\020"
    "\004\"\351\002\n\016user_shop_item\022\013\n\003pos\030\001 \002(\r\0227\n\014ele"
    "ment_type\030\002 \002(\0162!.struct_game_element.EE"
    "LEMENTTYPE\022\022\n\nelement_id\030\003 \002(\r\022\023\n\013elemen"
    "t_num\030\004 \002(\r\0227\n\014consume_type\030\005 \002(\0162!.stru"
    "ct_game_element.EELEMENTTYPE\022\022\n\nconsume_"
    "id\030\006 \002(\r\022\023\n\013consume_num\030\007 \002(\r\022+\n\004flag\030\010 "
    "\002(\0162\035.user_shop_item.ESHOPITEMFLAG\022\017\n\007is"
    "_sold\030\t \002(\010\"H\n\rESHOPITEMFLAG\022\010\n\004NONE\020\000\022\007"
    "\n\003HOT\020\001\022\014\n\010DISCOUNT\020\002\022\r\n\tFLASHSALE\020\003\022\007\n\003"
    "MAX\020\004\"\345\002\n\tuser_shop\022\'\n\tshop_type\030\001 \002(\0162\024"
    ".user_shop.ESHOPTYPE\022\036\n\026last_auto_refres"
    "h_time\030\002 \002(\r\022 \n\030last_manual_refresh_time"
    "\030\003 \002(\r\022#\n\033last_day_manual_refresh_num\030\004 "
    "\002(\r\022#\n\033random_open_start_timestamp\030\005 \002(\r"
    "\022!\n\031random_open_end_timestamp\030\006 \002(\r\022\036\n\005i"
    "tems\030\007 \003(\0132\017.user_shop_item\"`\n\tESHOPTYPE"
    "\022\007\n\003min\020\000\022\n\n\006COMMON\020\001\022\n\n\006QIWUGE\020\002\022\016\n\nYIJ"
    "IEBAOKU\020\003\022\t\n\005ARENA\020\004\022\016\n\nEXPEDITION\020\005\022\007\n\003"
    "max\020\006\"\331\002\n\016user_arena_log\022\027\n\017is_attacker_"
    "win\030\001 \002(\010\022\014\n\004time\030\002 \002(\r\022\026\n\016is_me_attacke"
    "r\030\003 \002(\010\022\017\n\007me_rank\030\004 \002(\r\022\025\n\rmatch_user_i"
    "d\030\005 \002(\r\022\022\n\nmatch_rank\030\006 \002(\r\022\023\n\013match_pow"
    "er\030\007 \002(\r\022\022\n\nmatch_name\030\010 \002(\t\022\023\n\013match_le"
    "vel\030\t \002(\r\0228\n\013match_heros\030\n \003(\0132#.user_ar"
    "ena_log.user_arena_log_hero\032T\n\023user_aren"
    "a_log_hero\022\017\n\007hero_id\030\001 \002(\r\022\017\n\007quality\030\002"
    " \002(\r\022\r\n\005level\030\003 \002(\r\022\014\n\004star\030\004 \002(\r\"\226\001\n\025us"
    "er_arena_contestant\022\014\n\004rank\030\001 \002(\r\022\017\n\007use"
    "r_id\030\002 \002(\r\022\014\n\004name\030\003 \002(\t\022\r\n\005level\030\004 \002(\r\022"
    "\017\n\007head_id\030\005 \002(\r\022\025\n\rhead_frame_id\030\006 \002(\r\022"
    "\031\n\005heros\030\007 \003(\0132\n.user_hero\"\252\002\n\nuser_aren"
    "a\022\014\n\004rank\030\001 \002(\r\022\r\n\005score\030\002 \002(\r\022\033\n\023last_c"
    "hallenge_time\030\003 \002(\r\022\036\n\026last_day_challeng"
    "e_num\030\004 \002(\r\022\034\n\024history_highest_rank\030\005 \002("
    "\r\022\r\n\005heros\030\006 \003(\r\022%\n\035last_time_buy_arena_"
    "challenge\030\007 \002(\r\022(\n last_day_buy_arena_ch"
    "allenge_num\030\010 \002(\r\022\034\n\003log\030\t \003(\0132\017.user_ar"
    "ena_log\022&\n\006matchs\030\n \003(\0132\026.user_arena_con"
    "testant\"\233\002\n\014user_crusade\022\026\n\016is_all_throu"
    "gh\030\001 \002(\010\022,\n\010me_heros\030\002 \003(\0132\032.user_crusad"
    "e.crusade_hero\022/\n\013enemy_heros\030\003 \003(\0132\032.us"
    "er_crusade.crusade_hero\022\014\n\004wave\030\004 \001(\r\022\030\n"
    "\020left_reset_times\030\005 \001(\r\022 \n\030left_promote_"
    "award_times\030\006 \001(\r\032J\n\014crusade_hero\022\017\n\007her"
    "o_id\030\001 \002(\r\022\n\n\002hp\030\002 \002(\r\022\r\n\005ao_yi\030\003 \002(\r\022\016\n"
    "\006bi_sha\030\004 \002(\r\"\256\003\n\022gs_c_user_info_res\022\022\n\n"
    "error_code\030\001 \002(\r\022\"\n\tbase_info\030\002 \001(\0132\017.us"
    "er_base_info\022\'\n\tsub_tasks\030\003 \001(\0132\024.user_s"
    "ub_task_array\022\037\n\005heros\030\004 \001(\0132\020.user_hero"
    "_array\022+\n\ritem_elements\030\005 \003(\0132\024.struct_g"
    "ame_element\022!\n\rmail_elements\030\006 \003(\0132\n.use"
    "r_mail\022\031\n\005shops\030\007 \003(\0132\n.user_shop\022\037\n\010mis"
    "sions\030\010 \003(\0132\r.user_mission\022\032\n\005arena\030\t \001("
    "\0132\013.user_arena\022\030\n\004sign\030\n \001(\0132\n.user_sign"
    "\022\021\n\tguide_ids\030\013 \003(\r\022!\n\013friend_info\030\014 \001(\013"
    "2\014.user_friend\022\036\n\007crusade\030\r \001(\0132\r.user_c"
    "rusade\"=\n\027c_gs_start_sub_task_req\022\023\n\013sub"
    "_task_id\030\001 \002(\r\022\r\n\005heros\030\002 \003(\r\"\243\001\n\027gs_c_s"
    "tart_sub_task_res\022\022\n\nerror_code\030\001 \002(\r\022\023\n"
    "\013sub_task_id\030\002 \001(\r\022$\n\006output\030\003 \003(\0132\024.str"
    "uct_game_element\022%\n\007consume\030\004 \003(\0132\024.stru"
    "ct_game_element\022\022\n\nenter_time\030\005 \001(\r\"5\n\025c"
    "_gs_end_sub_task_req\022\016\n\006is_win\030\001 \002(\010\022\014\n\004"
    "star\030\002 \001(\r\"\271\001\n\025gs_c_end_sub_task_res\022\022\n\n"
    "error_code\030\001 \002(\r\022$\n\006output\030\002 \003(\0132\024.struc"
    "t_game_element\0221\n\023task_complete_prize\030\003 "
    "\003(\0132\024.struct_game_element\022\031\n\005heros\030\004 \003(\013"
    "2\n.user_hero\022\030\n\004shop\030\005 \001(\0132\n.user_shop\"\302"
    "\001\n\024c_gs_invoke_hero_req\0227\n\013invoke_type\030\001"
    " \002(\0162\".c_gs_invoke_hero_req.EINVOKE_TYPE"
    "\022\020\n\010hero_num\030\002 \001(\r\022\017\n\007item_id\030\003 \001(\r\022\017\n\007h"
    "ero_id\030\004 \001(\r\"=\n\014EINVOKE_TYPE\022\010\n\004FREE\020\001\022\010"
    "\n\004GOLD\020\002\022\013\n\007DIAMOND\020\003\022\014\n\010FRAGMENT\020\004\"\222\001\n\024"
    "gs_c_invoke_hero_res\022\022\n\nerror_code\030\001 \002(\r"
    "\022\031\n\005heros\030\002 \003(\0132\n.user_hero\022%\n\007consume\030\003"
    " \003(\0132\024.struct_game_element\022$\n\006output\030\004 \003"
    "(\0132\024.struct_game_element\"\310\001\n\027c_gs_equip_"
    "level_up_req\0221\n\007op_type\030\001 \002(\0162 .c_gs_equ"
    "ip_level_up_req.OP_TYPE\022\017\n\007hero_id\030\002 \002(\r"
    "\022\020\n\010equip_id\030\003 \001(\r\022\024\n\014level_up_num\030\004 \001(\r"
    "\"A\n\007OP_TYPE\022\020\n\014EQUIP1_LEVEL\020\001\022\021\n\rEQUIP1_"
    "LEVELN\020\002\022\021\n\rEQUIPN_LEVELN\020\003\"\207\001\n\027gs_c_equ"
    "ip_level_up_res\022\022\n\nerror_code\030\001 \002(\r\022\017\n\007h"
    "ero_id\030\002 \001(\r\022 \n\006equips\030\003 \003(\0132\020.user_hero"
    "_equip\022%\n\007consume\030\004 \003(\0132\024.struct_game_el"
    "ement\"=\n\030c_gs_equip_evolution_req\022\017\n\007her"
    "o_id\030\001 \002(\r\022\020\n\010equip_id\030\002 \002(\r\"\224\001\n\030gs_c_eq"
    "uip_evolution_res\022\022\n\nerror_code\030\001 \002(\r\022\017\n"
    "\007hero_id\030\002 \001(\r\022\020\n\010equip_id\030\003 \001(\r\022\032\n\022evol"
    "ution_equip_id\030\004 \001(\r\022%\n\007consume\030\005 \003(\0132\024."
    "struct_game_element\"*\n\027c_gs_hero_evoluti"
    "on_req\022\017\n\007hero_id\030\001 \002(\r\"\213\001\n\027gs_c_hero_ev"
    "olution_res\022\022\n\nerror_code\030\001 \002(\r\022\017\n\007hero_"
    "id\030\002 \001(\r\022%\n\007consume\030\003 \003(\0132\024.struct_game_"
    "element\022$\n\nnew_skills\030\004 \003(\0132\020.user_hero_"
    "skill\"(\n\025c_gs_hero_star_up_req\022\017\n\007hero_i"
    "d\030\001 \002(\r\"c\n\025gs_c_hero_star_up_res\022\022\n\nerro"
    "r_code\030\001 \002(\r\022\017\n\007hero_id\030\002 \001(\r\022%\n\007consume"
    "\030\003 \003(\0132\024.struct_game_element\"l\n\027c_gs_ski"
    "ll_level_up_req\022\017\n\007hero_id\030\001 \002(\r\0221\n\nskil"
    "l_type\030\002 \002(\0162\035.user_hero_skill.e_skill_t"
    "ype\022\r\n\005level\030\003 \002(\r\"\247\001\n\027gs_c_skill_level_"
    "up_res\022\022\n\nerror_code\030\001 \002(\r\022\017\n\007hero_id\030\002 "
    "\001(\r\0221\n\nskill_type\030\003 \001(\0162\035.user_hero_skil"
    "l.e_skill_type\022\r\n\005level\030\004 \001(\r\022%\n\007consume"
    "\030\005 \003(\0132\024.struct_game_element\"\371\001\n\017c_gs_in"
    "voke_req\0222\n\013invoke_type\030\001 \002(\0162\035.c_gs_inv"
    "oke_req.EINVOKE_TYPE\022\022\n\ninvoke_num\030\002 \001(\r"
    "\"\235\001\n\014EINVOKE_TYPE\022\r\n\tGOLD_FREE\020\001\022\n\n\006GOLD"
    "_1\020\002\022\n\n\006GOLD_N\020\003\022\020\n\014DIAMOND_FREE\020\004\022\r\n\tDI"
    "AMOND_1\020\005\022\r\n\tDIAMOND_N\020\006\022\021\n\rVIP_DIAMOND_"
    "1\020\007\022\021\n\rVIP_DIAMOND_N\020\010\022\020\n\014FRIEND_POINT\020\t"
    "\"\214\001\n\017gs_c_invoke_res\022\022\n\nerror_code\030\001 \002(\r"
    "\022%\n\007consume\030\002 \003(\0132\024.struct_game_element\022"
    "#\n\005ouput\030\003 \003(\0132\024.struct_game_element\022\031\n\005"
    "heros\030\004 \003(\0132\n.user_hero\"@\n\031struct_game_e"
    "lement_array\022#\n\005items\030\001 \003(\0132\024.struct_gam"
    "e_element\"\?\n\033c_gs_diamond_speed_kill_req"
    "\022\013\n\003num\030\001 \002(\r\022\023\n\013sub_task_id\030\002 \002(\r\"\241\001\n\033g"
    "s_c_diamond_speed_kill_res\022\022\n\nerror_code"
    "\030\001 \002(\r\022%\n\007consume\030\002 \003(\0132\024.struct_game_el"
    "ement\022-\n\titems_arr\030\003 \003(\0132\032.struct_game_e"
    "lement_array\022\030\n\004shop\030\005 \001(\0132\n.user_shop\"D"
    "\n\021c_gs_use_item_req\022\017\n\007item_id\030\001 \002(\r\022\013\n\003"
    "num\030\002 \002(\r\022\021\n\ttarget_id\030\003 \001(\r\"\227\001\n\021gs_c_us"
    "e_item_res\022\022\n\nerror_code\030\001 \002(\r\022%\n\007consum"
    "e\030\002 \003(\0132\024.struct_game_element\022-\n\titems_a"
    "rr\030\003 \003(\0132\032.struct_game_element_array\022\030\n\004"
    "shop\030\005 \001(\0132\n.user_shop\"\214\001\n\022c_gs_shop_inf"
    "o_req\022/\n\tpull_type\030\001 \002(\0162\034.c_gs_shop_inf"
    "o_req.PULLTYPE\022\'\n\tshop_type\030\002 \001(\0162\024.user"
    "_shop.ESHOPTYPE\"\034\n\010PULLTYPE\022\007\n\003ONE\020\001\022\007\n\003"
    "ALL\020\002\"C\n\022gs_c_shop_info_res\022\022\n\nerror_cod"
    "e\030\001 \002(\r\022\031\n\005shops\030\002 \003(\0132\n.user_shop\"N\n\026c_"
    "gs_shop_buy_item_req\022\'\n\tshop_type\030\001 \002(\0162"
    "\024.user_shop.ESHOPTYPE\022\013\n\003pos\030\002 \002(\r\"\323\001\n\026g"
    "s_c_shop_buy_item_res\022\022\n\nerror_code\030\001 \002("
    "\r\022\"\n\016refreshed_shop\030\002 \001(\0132\n.user_shop\022\'\n"
    "\tshop_type\030\003 \001(\0162\024.user_shop.ESHOPTYPE\022\013"
    "\n\003pos\030\004 \001(\r\022$\n\006output\030\005 \003(\0132\024.struct_gam"
    "e_element\022%\n\007consume\030\006 \003(\0132\024.struct_game"
    "_element\"@\n\025c_gs_shop_refresh_req\022\'\n\tsho"
    "p_type\030\001 \002(\0162\024.user_shop.ESHOPTYPE\"l\n\025gs"
    "_c_shop_refresh_res\022\022\n\nerror_code\030\001 \002(\r\022"
    "\030\n\004shop\030\002 \001(\0132\n.user_shop\022%\n\007consume\030\003 \003"
    "(\0132\024.struct_game_element\"4\n\rc_gs_sell_re"
    "q\022#\n\005items\030\001 \003(\0132\024.struct_game_element\"G"
    "\n\rgs_c_sell_res\022\022\n\nerror_code\030\001 \002(\r\022\"\n\004e"
    "les\030\002 \003(\0132\024.struct_game_element\"\036\n\034c_gs_"
    "arena_refresh_match_req\"Z\n\034gs_c_arena_re"
    "fresh_match_res\022\022\n\nerror_code\030\001 \002(\r\022&\n\006m"
    "atchs\030\002 \003(\0132\026.user_arena_contestant\"+\n\032c"
    "_gs_arena_update_team_req\022\r\n\005heros\030\001 \003(\r"
    "\"0\n\032gs_c_arena_update_team_res\022\022\n\nerror_"
    "code\030\001 \002(\r\"p\n\036c_gs_arena_start_challenge"
    "_req\022\r\n\005heros\030\001 \003(\r\022\030\n\020defender_user_id\030"
    "\002 \002(\r\022\r\n\005power\030\003 \002(\r\022\026\n\016defender_power\030\004"
    " \002(\r\"\231\001\n\036gs_c_arena_start_challenge_res\022"
    "\022\n\nerror_code\030\001 \002(\r\022\033\n\023last_challenge_ti"
    "me\030\002 \001(\r\022\036\n\026last_day_challenge_num\030\003 \001(\r"
    "\022&\n\006matchs\030\004 \003(\0132\026.user_arena_contestant"
    "\".\n\034c_gs_arena_end_challenge_req\022\016\n\006is_w"
    "in\030\001 \002(\010\"f\n\034gs_c_arena_end_challenge_res"
    "\022\022\n\nerror_code\030\001 \002(\r\022\014\n\004rank\030\002 \001(\r\022$\n\006ou"
    "tput\030\003 \003(\0132\024.struct_game_element\"8\n\030gs_c"
    "_arena_challenge_ntf\022\034\n\003ele\030\001 \002(\0132\017.user"
    "_arena_log\"#\n!c_gs_arena_challenge_reset"
    "_cd_req\"{\n!gs_c_arena_challenge_reset_cd"
    "_res\022\022\n\nerror_code\030\001 \002(\r\022\033\n\023last_challen"
    "ge_time\030\002 \001(\r\022%\n\007consume\030\003 \003(\0132\024.struct_"
    "game_element\"$\n\"c_gs_arena_challenge_res"
    "et_num_req\"\355\001\n\"gs_c_arena_challenge_rese"
    "t_num_res\022\022\n\nerror_code\030\001 \002(\r\022\033\n\023last_ch"
    "allenge_time\030\002 \001(\r\022\036\n\026last_day_challenge"
    "_num\030\003 \001(\r\022%\n\035last_time_buy_arena_challe"
    "nge\030\004 \001(\r\022(\n last_day_buy_arena_challeng"
    "e_num\030\005 \001(\r\022%\n\007consume\030\006 \003(\0132\024.struct_ga"
    "me_element\"(\n\024c_gs_arena_ranks_req\022\020\n\010pa"
    "ge_num\030\001 \002(\r\"Q\n\024gs_c_arena_ranks_res\022\022\n\n"
    "error_code\030\001 \002(\r\022%\n\005ranks\030\002 \003(\0132\026.user_a"
    "rena_contestant\"\024\n\022c_gs_arena_log_req\"2\n"
    "\022gs_c_arena_log_res\022\034\n\003log\030\001 \003(\0132\017.user_"
    "arena_log\";\n\025c_gs_arena_search_req\022\017\n\007us"
    "er_id\030\001 \001(\r\022\021\n\tuser_name\030\002 \001(\t\"W\n\025gs_c_a"
    "rena_search_res\022\022\n\nerror_code\030\001 \002(\r\022*\n\nc"
    "ontestant\030\002 \001(\0132\026.user_arena_contestant\""
    "1\n\032c_gs_fragment_compound_req\022\023\n\013compoun"
    "d_id\030\001 \002(\r\"T\n\032gs_c_fragment_compound_res"
    "\022\022\n\nerror_code\030\001 \002(\r\022\"\n\004eles\030\002 \003(\0132\024.str"
    "uct_game_element\"\240\001\n\tuser_mail\022\017\n\007mail_i"
    "d\030\001 \002(\r\022\021\n\tsend_time\030\002 \002(\r\022\030\n\004type\030\004 \002(\016"
    "2\n.MAIL_TYPE\022\017\n\007content\030\006 \001(\t\022\034\n\006status\030"
    "\007 \002(\0162\014.MAIL_STATUS\022&\n\010elements\030\010 \003(\0132\024."
    "struct_game_element\"\242\001\n\021c_gs_mail_opt_re"
    "q\022(\n\010mail_opt\030\001 \002(\0162\026.c_gs_mail_opt_req."
    "OPT\022\023\n\013mail_id_arr\030\002 \003(\r\"N\n\003OPT\022\007\n\003DEL\020\001"
    "\022\t\n\005READ1\020\002\022\027\n\023GET_ATTACH_AND_DEL1\020\003\022\032\n\026"
    "GET_ATTACH_AND_DEL_ALL\020\004\"\315\001\n\021gs_c_mail_o"
    "pt_res\022\022\n\nerror_code\030\001 \002(\r\0227\n\017mail_updat"
    "e_arr\030\002 \003(\0132\036.gs_c_mail_opt_res.mail_upd"
    "ate\022(\n\noutput_arr\030\003 \003(\0132\024.struct_game_el"
    "ement\032A\n\013mail_update\022\017\n\007mail_id\030\001 \002(\r\022!\n"
    "\013mail_status\030\002 \002(\0162\014.MAIL_STATUS\"|\n\rgs_c"
    "_mail_ntf\022$\n\004type\030\001 \002(\0162\026.gs_c_mail_ntf."
    "OP_TYPE\022\027\n\003ele\030\002 \001(\0132\n.user_mail\022\017\n\007mail"
    "_id\030\003 \001(\r\"\033\n\007OP_TYPE\022\007\n\003ADD\020\001\022\007\n\003DEL\020\002\"X"
    "\n\023gs_c_mail_ntf_array\022\035\n\005mails\030\001 \003(\0132\016.g"
    "s_c_mail_ntf\022\"\n\004eles\030\002 \003(\0132\024.struct_game"
    "_element\"W\n\014c_gs_buy_req\0223\n\010buy_type\030\001 \002"
    "(\0162!.struct_game_element.EELEMENTTYPE\022\022\n"
    "\nelement_id\030\002 \001(\r\"\274\001\n\014gs_c_buy_res\022\022\n\ner"
    "ror_code\030\001 \002(\r\0223\n\010buy_type\030\002 \001(\0162!.struc"
    "t_game_element.EELEMENTTYPE\022%\n\007consume\030\003"
    " \003(\0132\024.struct_game_element\022$\n\006output\030\004 \001"
    "(\0132\024.struct_game_element\022\026\n\016buy_used_tim"
    "es\030\005 \001(\r\"\237\t\n\014user_mission\022\022\n\nmission_id\030"
    "\001 \002(\r\0224\n\016mission_status\030\002 \002(\0162\034.user_mis"
    "sion.MISSION_STATUS\0225\n\013event_needs\030\003 \003(\013"
    "2 .user_mission.mission_event_need\032\205\001\n\022m"
    "ission_event_need\0224\n\nevent_type\030\001 \001(\0162 ."
    "user_mission.MISSION_EVENT_TYPE\022\026\n\016event"
    "_sub_type\030\002 \001(\r\022\017\n\007cur_val\030\003 \001(\r\022\020\n\010need"
    "_val\030\004 \001(\r\"\263\004\n\022MISSION_EVENT_TYPE\022\007\n\003min"
    "\020\000\022\022\n\016SKILL_LEVEL_UP\020\001\022\014\n\010RECHARGE\020\002\022\026\n\022"
    "COMMON_FB_COMPLETE\020\003\022\031\n\025COMMON_FB_ALL_TH"
    "ROUGH\020\004\022$\n COMMON_FB_ALL_THROUGH_THREE_S"
    "TAR\020\005\022\022\n\016EQUIP_LEVEL_UP\020\006\022 \n\034RECHARGE_MI"
    "SSION_MONTH_CARD1\020\007\022\026\n\022GIVE_FRIEND_HEALT"
    "H\020\010\022\020\n\014HERO_COLLECT\020\t\022\017\n\013HEALTH_MEAL\020\n\022\016"
    "\n\nGET_REWARD\020\013\022 \n\034RECHARGE_MISSION_MONTH"
    "_CARD2\020\014\022\020\n\014MISSION_MAIN\020\r\022\020\n\014MISSION_FR"
    "EE\020\016\022\014\n\010ACTIVITY\020\017\022\n\n\006JI_TAN\020\020\022\023\n\017ARENA_"
    "CHALLENGE\020\021\022\017\n\013SHI_LIAN_TA\020\022\022\013\n\007CRUSADE\020"
    "\023\022\014\n\010LEVEL_UP\020\024\022\014\n\010BUY_GOLD\020\025\022\013\n\007FB_FAIL"
    "\020\026\022&\n\"COMPLETE_CHAPTER_ALL_FB_THREE_STAR"
    "\020\027\022\022\n\016ARENA_RANK_TOP\020\030\022\027\n\023COMPLETE_CHAPT"
    "ER_FB\020\031\022\007\n\003max\020\032\"\271\001\n\026MISSION_EVENT_SUB_T"
    "YPE\022\007\n\003MIN\020\000\022\010\n\004NONE\020\001\022\026\n\022HERO_QUALITY_G"
    "REEN\020\002\022\025\n\021HERO_QUALITY_BLUE\020\003\022\022\n\016HERO_ST"
    "AR_FOUR\020\004\022\023\n\017HERO_STAR_THREE\020\005\022\020\n\014PLAYER"
    "_LEVEL\020\006\022\r\n\tVIP_LEVEL\020\007\022\n\n\006HUAXIA\020\010\022\007\n\003M"
    "AX\020\t\"\223\001\n\016MISSION_STATUS\022\025\n\021STATUS_CAN_AT"
    "TACH\020\001\022\r\n\tSTATUS_IN\020\002\022\026\n\022STATUS_NOT_TO_T"
    "IME\020\003\022\026\n\022STATUS_CAN_NOT_SEE\020\004\022\020\n\014STATUS_"
    "DELED\020\005\022\031\n\025STATUS_ALREADY_ATTACH\020\006\"\326\001\n\026g"
    "s_c_mission_ntf_array\0225\n\010mis_opts\030\001 \003(\0132"
    "#.gs_c_mission_ntf_array.mission_opt\032\204\001\n"
    "\013mission_opt\0224\n\003opt\030\001 \002(\0162\'.gs_c_mission"
    "_ntf_array.mission_opt.OPT\022\032\n\003mis\030\002 \002(\0132"
    "\r.user_mission\"#\n\003OPT\022\007\n\003ADD\020\001\022\007\n\003DEL\020\002\022"
    "\n\n\006UPDATE\020\003\"1\n\033c_gs_get_mission_reward_r"
    "eq\022\022\n\nmission_id\030\001 \002(\r\"\227\001\n\033gs_c_get_miss"
    "ion_reward_res\022\022\n\nerror_code\030\001 \002(\r\022\022\n\nmi"
    "ssion_id\030\002 \001(\r\022,\n\006status\030\003 \001(\0162\034.user_mi"
    "ssion.MISSION_STATUS\022\"\n\004eles\030\004 \003(\0132\024.str"
    "uct_game_element\"\215\003\n\rsign_n_reward\0226\n\013re"
    "ward_type\030\001 \002(\0162!.sign_n_reward.SIGN_N_R"
    "EWARD_TYPE\0223\n\006status\030\002 \002(\0162#.sign_n_rewa"
    "rd.SIGN_N_REWARD_STATUS\"\236\001\n\022SIGN_N_REWAR"
    "D_TYPE\022\007\n\003MIN\020\001\022\034\n\030SIGN_N_REWARD_TYPE_FI"
    "RST\020\002\022\035\n\031SIGN_N_REWARD_TYPE_SECOND\020\003\022\034\n\030"
    "SIGN_N_REWARD_TYPE_THREE\020\004\022\033\n\027SIGN_N_REW"
    "ARD_TYPE_FOUR\020\005\022\007\n\003MAX\020\006\"n\n\024SIGN_N_REWAR"
    "D_STATUS\022 \n\034STATUS_CONDITION_NOT_SATISFY"
    "\020\001\022\035\n\031STATUS_ALREADY_GET_ATTACH\020\002\022\025\n\021STA"
    "TUS_CAN_ATTACH\020\003\"\202\001\n\tuser_sign\022\026\n\016signed"
    "_1_times\030\001 \002(\r\022\'\n\017signed_n_reward\030\002 \003(\0132"
    "\016.sign_n_reward\022\033\n\023left_add_sign_times\030\003"
    " \002(\r\022\027\n\017is_already_sign\030\004 \002(\010\"\243\001\n\rc_gs_s"
    "ign_req\022+\n\tsign_type\030\001 \002(\0162\030.c_gs_sign_r"
    "eq.SIGN_TYPE\0226\n\013reward_type\030\002 \001(\0162!.sign"
    "_n_reward.SIGN_N_REWARD_TYPE\"-\n\tSIGN_TYP"
    "E\022\017\n\013SIGN_TYPE_1\020\001\022\017\n\013SIGN_TYPE_N\020\002\"Y\n\rg"
    "s_c_sign_res\022$\n\nerror_code\030\001 \002(\0162\020.e_gsc"
    "_errorcode\022\"\n\004eles\030\002 \003(\0132\024.struct_game_e"
    "lement\"\023\n\021c_gs_sign_add_req\"z\n\021gs_c_sign"
    "_add_res\022$\n\nerror_code\030\001 \002(\0162\020.e_gsc_err"
    "orcode\022\033\n\023left_add_sign_times\030\002 \001(\r\022\"\n\004e"
    "les\030\003 \003(\0132\024.struct_game_element\"Z\n\035c_gs_"
    "head_or_frame_change_req\022&\n\013change_type\030"
    "\001 \002(\0162\021.HEAD_CHANGE_TYPE\022\021\n\ttarget_id\030\002 "
    "\002(\r\"\200\001\n\035gs_c_head_or_frame_change_res\022$\n"
    "\nerror_code\030\001 \002(\0162\020.e_gsc_errorcode\022&\n\013c"
    "hange_type\030\002 \001(\0162\021.HEAD_CHANGE_TYPE\022\021\n\tt"
    "arget_id\030\003 \001(\r\"d\n\031c_gs_edit_player_info_"
    "req\022\014\n\004name\030\001 \001(\t\022\017\n\007head_id\030\002 \001(\r\022\025\n\rhe"
    "ad_frame_id\030\003 \001(\r\022\021\n\tsignature\030\004 \001(\t\"\212\001\n"
    "\031gs_c_edit_player_info_res\022$\n\nerror_code"
    "\030\001 \002(\0162\020.e_gsc_errorcode\022\014\n\004name\030\002 \001(\t\022\017"
    "\n\007head_id\030\003 \001(\r\022\025\n\rhead_frame_id\030\004 \001(\r\022\021"
    "\n\tsignature\030\005 \001(\t\"0\n\034c_gs_finish_novice_"
    "guide_req\022\020\n\010guide_id\030\001 \002(\r\"V\n\034gs_c_fini"
    "sh_novice_guide_res\022$\n\nerror_code\030\001 \002(\0162"
    "\020.e_gsc_errorcode\022\020\n\010guide_id\030\002 \001(\r\"\265\002\n\020"
    "gs_c_marquee_ntf\0224\n\014marquee_type\030\001 \002(\0162\036"
    ".gs_c_marquee_ntf.MARQUEE_TYPE\022\025\n\rmarque"
    "e_times\030\002 \002(\r\022\017\n\007content\030\003 \002(\t\"\302\001\n\014MARQU"
    "EE_TYPE\022\017\n\013MARQUEE_MIN\020\000\022\022\n\016MARQUEE_INVO"
    "KE\020\001\022\032\n\026MARQUEE_HERO_EVOLUTION\020\002\022\027\n\023MARQ"
    "UEE_INVOKE_HERO\020\003\022\030\n\024MARQUEE_HERO_STAR_U"
    "P\020\004\022\033\n\027MARQUEE_ARENA_CHALLENGE\020\005\022\020\n\014MARQ"
    "UEE_WORD\020\006\022\017\n\013MARQUEE_MAX\020\007\"6\n\020gs_c_elem"
    "ent_ntf\022\"\n\004eles\030\001 \003(\0132\024.struct_game_elem"
    "ent\"\265\001\n\020friend_base_info\022\017\n\007user_id\030\001 \002("
    "\r\022\017\n\007head_id\030\002 \002(\r\022\025\n\rhead_frame_id\030\003 \002("
    "\r\022\014\n\004name\030\004 \002(\t\022\r\n\005level\030\005 \002(\r\022\013\n\003vip\030\006 "
    "\002(\r\022\022\n\narena_rank\030\007 \002(\r\022\027\n\017last_login_ti"
    "me\030\010 \002(\r\022\021\n\tsignature\030\t \001(\t\"\211\002\n\013user_fri"
    "end\022)\n\007friends\030\001 \003(\0132\030.user_friend.frien"
    "d_info\022\"\n\007applies\030\002 \003(\0132\021.friend_base_in"
    "fo\022#\n\010confirms\030\003 \003(\0132\021.friend_base_info\022"
    "%\n\nrecommends\030\004 \003(\0132\021.friend_base_info\032_"
    "\n\013friend_info\022$\n\tbase_info\030\001 \002(\0132\021.frien"
    "d_base_info\022\026\n\016is_friend_give\030\002 \002(\010\022\022\n\ni"
    "s_me_give\030\003 \002(\010\"\333\002\n\027c_gs_user_friend_op_"
    "req\0221\n\007op_type\030\001 \002(\0162 .c_gs_user_friend_"
    "op_req.OP_TYPE\022\017\n\007user_id\030\002 \001(\r\"\373\001\n\007OP_T"
    "YPE\022\007\n\003MIN\020\000\022\020\n\014GET_ELEMENT1\020\001\022\020\n\014GET_EL"
    "EMENTN\020\002\022\021\n\rGIVE_ELEMENT1\020\003\022\021\n\rGIVE_ELEM"
    "ENTN\020\004\022\022\n\016GIVE_UP_APPLY1\020\005\022\022\n\016GIVE_UP_AP"
    "PLYN\020\006\022\021\n\rAFFIRM_AGREE1\020\007\022\021\n\rAFFIRM_AGRE"
    "EN\020\010\022\022\n\016AFFIRM_REFUSE1\020\t\022\022\n\016AFFIRM_REFUS"
    "EN\020\n\022\016\n\nADD_FRIEND\020\013\022\016\n\nDEL_FRIEND\020\014\022\007\n\003"
    "MAX\020\r\"\273\001\n\027gs_c_user_friend_op_res\022\022\n\nerr"
    "or_code\030\001 \002(\005\0221\n\007op_type\030\002 \002(\0162 .c_gs_us"
    "er_friend_op_req.OP_TYPE\022\017\n\007user_id\030\003 \001("
    "\r\022\"\n\004eles\030\004 \003(\0132\024.struct_game_element\022$\n"
    "\tbase_info\030\005 \001(\0132\021.friend_base_info\"5\n\024c"
    "_gs_search_user_req\022\014\n\004name\030\001 \001(\t\022\017\n\007use"
    "r_id\030\002 \001(\r\"P\n\024gs_c_search_user_res\022\022\n\ner"
    "ror_code\030\001 \002(\005\022$\n\tbase_info\030\002 \001(\0132\021.frie"
    "nd_base_info\"\225\002\n\017gs_c_friend_ntf\022)\n\007op_t"
    "ype\030\001 \002(\0162\030.gs_c_friend_ntf.OP_TYPE\022\021\n\tf"
    "riend_id\030\002 \001(\r\022$\n\tbase_info\030\003 \001(\0132\021.frie"
    "nd_base_info\"\235\001\n\007OP_TYPE\022\027\n\023FRIEND_GIVE_"
    "ELEMENT\020\001\022\030\n\024FRIEND_GIVE_UP_APPLY\020\002\022\027\n\023F"
    "RIEND_AFFIRM_AGREE\020\003\022\025\n\021FRIEND_DEL_FRIEN"
    "D\020\004\022\030\n\024FRIEND_AFFIRM_REFUSE\020\005\022\025\n\021FRIEND_"
    "ADD_FRIEND\020\006\"\232\001\n\rc_gs_chat_req\022+\n\tchat_t"
    "ype\030\001 \002(\0162\030.c_gs_chat_req.CHAT_TYPE\022\r\n\005t"
    "o_id\030\002 \001(\r\022\017\n\007to_name\030\003 \001(\t\022\014\n\004word\030\004 \002("
    "\t\".\n\tCHAT_TYPE\022\t\n\005WORLD\020\001\022\t\n\005GUILD\020\002\022\013\n\007"
    "WHISPER\020\003\"#\n\rgs_c_chat_res\022\022\n\nerror_code"
    "\030\001 \002(\r\"\236\001\n\rgs_c_chat_ntf\022+\n\tchat_type\030\001 "
    "\002(\0162\030.c_gs_chat_req.CHAT_TYPE\022\017\n\007user_id"
    "\030\002 \002(\r\022\013\n\003vip\030\003 \002(\r\022\014\n\004name\030\004 \002(\t\022\017\n\007hea"
    "d_id\030\005 \002(\r\022\025\n\rhead_frame_id\030\006 \002(\r\022\014\n\004wor"
    "d\030\007 \002(\t\"+\n\024c_gs_fight_power_req\022\023\n\013fight"
    "_power\030\001 \002(\r\"*\n\024gs_c_fight_power_res\022\022\n\n"
    "error_code\030\001 \002(\r\"{\n\rc_gs_rank_req\022+\n\tran"
    "k_type\030\001 \002(\0162\030.c_gs_rank_req.RANK_TYPE\"="
    "\n\tRANK_TYPE\022\t\n\005ARENA\020\001\022\017\n\013FIGHT_POWER\020\002\022"
    "\t\n\005LEVEL\020\003\022\t\n\005GUILD\020\004\"\340\003\n\rgs_c_rank_res\022"
    "\022\n\nerror_code\030\001 \002(\r\022+\n\trank_type\030\002 \001(\0162\030"
    ".c_gs_rank_req.RANK_TYPE\022\'\n\005ranks\030\003 \003(\0132"
    "\030.gs_c_rank_res.rank_info\022\023\n\013me_cur_rank"
    "\030\004 \001(\r\022\024\n\014me_cur_value\030\005 \001(\r\032U\n\024user_her"
    "o_brief_info\022\017\n\007hero_id\030\001 \002(\r\022\r\n\005level\030\002"
    " \002(\r\022\017\n\007quality\030\003 \002(\r\022\014\n\004star\030\004 \002(\r\032\342\001\n\t"
    "rank_info\022\017\n\007head_id\030\001 \002(\r\022\025\n\rhead_frame"
    "_id\030\002 \002(\r\022\r\n\005level\030\003 \002(\r\022\014\n\004name\030\004 \002(\t\022\022"
    "\n\narena_rank\030\005 \002(\r\022\022\n\nfight_rank\030\006 \002(\r\022\023"
    "\n\013fight_power\030\007 \002(\r\022\022\n\nlevel_rank\030\010 \002(\r\022"
    "\013\n\003vip\030\t \002(\r\0222\n\005heros\030\n \003(\0132#.gs_c_rank_"
    "res.user_hero_brief_info\"M\n\026c_gs_crusade"
    "_start_req\022\014\n\004wave\030\001 \002(\r\022\023\n\013enemy_heros\030"
    "\002 \003(\r\022\020\n\010me_heros\030\003 \003(\r\":\n\026gs_c_crusade_"
    "start_res\022\022\n\nerror_code\030\001 \002(\r\022\014\n\004wave\030\002 "
    "\001(\r\"\205\001\n\024c_gs_crusade_end_req\022\016\n\006is_win\030\001"
    " \002(\010\022/\n\013enemy_heros\030\002 \003(\0132\032.user_crusade"
    ".crusade_hero\022,\n\010me_heros\030\003 \003(\0132\032.user_c"
    "rusade.crusade_hero\"Q\n\024gs_c_crusade_end_"
    "res\022\022\n\nerror_code\030\001 \002(\r\022%\n\007outputs\030\002 \003(\013"
    "2\024.struct_game_element\"-\n\032c_gs_crusade_h"
    "ero_life_req\022\017\n\007hero_id\030\001 \002(\r\"i\n\032gs_c_cr"
    "usade_hero_life_res\022\022\n\nerror_code\030\001 \002(\r\022"
    "\017\n\007hero_id\030\002 \001(\r\022&\n\010consumes\030\003 \003(\0132\024.str"
    "uct_game_element\"\030\n\026c_gs_crusade_reset_r"
    "eq\",\n\026gs_c_crusade_reset_res\022\022\n\nerror_co"
    "de\030\001 \002(\r\" \n\036c_gs_crusade_promote_award_r"
    "eq\"\\\n\036gs_c_crusade_promote_award_res\022\022\n\n"
    "error_code\030\001 \002(\r\022&\n\010consumes\030\002 \003(\0132\024.str"
    "uct_game_element\"\037\n\035c_gs_crusade_buff_re"
    "fresh_req\"[\n\035gs_c_crusade_buff_refresh_r"
    "es\022\022\n\nerror_code\030\001 \002(\r\022&\n\010consumes\030\002 \003(\013"
    "2\024.struct_game_element\"\265\001\n\026struct_guild_"
    "list_item\022\014\n\004name\030\001 \002(\t\022\031\n\021president_use"
    "r_id\030\002 \002(\r\022&\n\006status\030\003 \002(\0162\026.e_apply_swi"
    "tch_status\022\014\n\004flag\030\004 \002(\r\022\020\n\010guild_id\030\005 \002"
    "(\r\022\026\n\016president_name\030\006 \002(\t\022\022\n\nmember_num"
    "\030\007 \002(\r\"\262\004\n\026struct_user_guild_info\022#\n\010pos"
    "ition\030\001 \002(\0162\021.e_guild_position\022\022\n\nleave_"
    "time\030\002 \002(\r\022\017\n\007my_coin\030\003 \002(\r\022\035\n\025my_contri"
    "bution_point\030\004 \001(\r\022\020\n\010guild_id\030\005 \001(\r\022\014\n\004"
    "name\030\006 \001(\t\022\031\n\021president_user_id\030\007 \001(\r\022&\n"
    "\006status\030\010 \001(\0162\026.e_apply_switch_status\022\014\n"
    "\004flag\030\t \001(\r\022\032\n\022contribution_point\030\013 \001(\r\022"
    "\014\n\004coin\030\014 \001(\r\022\024\n\014announcement\030\r \001(\t\022<\n\007m"
    "embers\030\016 \003(\0132+.struct_user_guild_info.st"
    "ruct_guild_member\022\031\n\021max_boss_position\030\017"
    " \001(\r\032\244\001\n\023struct_guild_member\022\017\n\007user_id\030"
    "\001 \002(\r\022\020\n\010position\030\002 \002(\r\022\032\n\022contribution_"
    "point\030\003 \002(\r\022\014\n\004name\030\004 \002(\t\022\017\n\007head_id\030\005 \002"
    "(\r\022\025\n\rhead_frame_id\030\006 \002(\r\022\030\n\020last_online"
    "_time\030\007 \002(\r\"\255\001\n\021struct_guild_boss\022\020\n\010pos"
    "ition\030\001 \002(\r\022\017\n\007lose_hp\030\003 \002(\r\022\022\n\nkilled_n"
    "um\030\004 \002(\r\022\026\n\016killer_user_id\030\005 \001(\r\022\023\n\013kill"
    "er_name\030\006 \001(\t\022\026\n\016killer_head_id\030\007 \001(\r\022\034\n"
    "\024killer_head_frame_id\030\010 \001(\r\"J\n$struct_gu"
    "ild_boss_attacker_dead_hero\022\017\n\007hero_id\030\003"
    " \002(\r\022\021\n\tdead_time\030\004 \002(\r\"0\n\022c_gs_guild_ne"
    "w_req\022\014\n\004name\030\001 \002(\t\022\014\n\004flag\030\002 \002(\r\"O\n\022gs_"
    "c_guild_new_res\022\022\n\nerror_code\030\001 \002(\005\022%\n\007c"
    "onsume\030\002 \003(\0132\024.struct_game_element\"\212\001\n\023c"
    "_gs_guild_edit_req\022\014\n\004name\030\001 \002(\t\022\031\n\021pres"
    "ident_user_id\030\004 \002(\r\022&\n\006status\030\005 \002(\0162\026.e_"
    "apply_switch_status\022\014\n\004flag\030\006 \002(\r\022\024\n\014ann"
    "ouncement\030\n \002(\t\")\n\023gs_c_guild_edit_res\022\022"
    "\n\nerror_code\030\001 \002(\005\"\027\n\025c_gs_guild_delete_"
    "req\"+\n\025gs_c_guild_delete_res\022\022\n\nerror_co"
    "de\030\001 \002(\005\"\025\n\023gs_c_guild_quit_ntf\"\025\n\023gs_c_"
    "guild_join_ntf\"z\n\031c_gs_guild_apply_list_"
    "req\0222\n\003who\030\001 \002(\0162%.c_gs_guild_apply_list"
    "_req.e_show_for\")\n\ne_show_for\022\r\n\tEOutsid"
    "er\020\001\022\014\n\010EManager\020\002\"\245\002\n\031gs_c_guild_apply_"
    "list_res\022\022\n\nerror_code\030\001 \002(\005\022P\n\022applys_f"
    "or_manager\030\002 \003(\01324.gs_c_guild_apply_list"
    "_res.struct_apply_for_outsider\0224\n\023applys"
    "_for_outsider\030\003 \003(\0132\027.struct_guild_list_"
    "item\032l\n\031struct_apply_for_outsider\022\017\n\007use"
    "r_id\030\002 \002(\r\022\014\n\004time\030\003 \002(\r\022\014\n\004name\030\005 \002(\t\022\r"
    "\n\005level\030\006 \002(\r\022\023\n\013fight_power\030\007 \002(\r\"\334\001\n\027c"
    "_gs_guild_apply_op_req\0223\n\007op_type\030\001 \002(\0162"
    "\".c_gs_guild_apply_op_req.e_op_type\022\020\n\010g"
    "uild_id\030\002 \001(\r\022\017\n\007user_id\030\003 \001(\r\"i\n\te_op_t"
    "ype\022\016\n\nEUser_Send\020\001\022\024\n\020EUser_Quick_Send\020"
    "\002\022\020\n\014EUser_Cancel\020\003\022\021\n\rEGuild_Accept\020\004\022\021"
    "\n\rEGuild_Refuse\020\005\"-\n\027gs_c_guild_apply_op"
    "_res\022\022\n\nerror_code\030\001 \002(\005\"T\n\030c_gs_guild_m"
    "ember_op_req\022\017\n\007user_id\030\001 \001(\r\022\'\n\014new_pos"
    "ition\030\002 \002(\0162\021.e_guild_position\".\n\030gs_c_g"
    "uild_member_op_res\022\022\n\nerror_code\030\001 \002(\005\"/"
    "\n\033c_gs_guild_boss_refresh_req\022\020\n\010positio"
    "n\030\001 \002(\r\"z\n\033gs_c_guild_boss_refresh_res\022\022"
    "\n\nerror_code\030\001 \002(\005\022%\n\007consume\030\002 \003(\0132\024.st"
    "ruct_game_element\022 \n\004boss\030\003 \001(\0132\022.struct"
    "_guild_boss\"7\n\025c_gs_guild_search_req\022\014\n\004"
    "name\030\001 \001(\t\022\020\n\010guild_id\030\002 \001(\r\"T\n\025gs_c_gui"
    "ld_search_res\022\022\n\nerror_code\030\001 \002(\005\022\'\n\006gui"
    "lds\030\002 \003(\0132\027.struct_guild_list_item\"\177\n\023c_"
    "gs_guild_list_req\022.\n\004type\030\001 \002(\0162 .c_gs_g"
    "uild_list_req.e_list_type\"8\n\013e_list_type"
    "\022\016\n\nERecommend\020\001\022\014\n\010EApplied\020\002\022\013\n\007EActiv"
    "e\020\003\"R\n\023gs_c_guild_list_res\022\022\n\nerror_code"
    "\030\001 \002(\005\022\'\n\006guilds\030\002 \003(\0132\027.struct_guild_li"
    "st_item\"\025\n\023c_gs_guild_info_req\"T\n\023gs_c_g"
    "uild_info_res\022\022\n\nerror_code\030\001 \002(\005\022)\n\010my_"
    "guild\030\002 \001(\0132\027.struct_user_guild_info\"\032\n\030"
    "c_gs_guild_boss_list_req\"R\n\030gs_c_guild_b"
    "oss_list_res\022\022\n\nerror_code\030\001 \002(\005\022\"\n\006boss"
    "es\030\002 \003(\0132\022.struct_guild_boss\",\n\030c_gs_gui"
    "ld_boss_info_req\022\020\n\010position\030\001 \002(\r\"\300\001\n\030g"
    "s_c_guild_boss_info_res\022\022\n\nerror_code\030\001 "
    "\002(\005\022 \n\004boss\030\002 \001(\0132\022.struct_guild_boss\022\027\n"
    "\017last_reset_time\030\003 \001(\r\022\032\n\022last_day_reset"
    "_num\030\004 \001(\r\0229\n\ndead_heros\030\005 \003(\0132%.struct_"
    "guild_boss_attacker_dead_hero\"X\n\032c_gs_gu"
    "ild_boss_attack_req\022\025\n\rboss_position\030\001 \002"
    "(\r\022\017\n\007lose_hp\030\002 \002(\r\022\022\n\ndead_heros\030\003 \003(\r\""
    "\220\001\n\032gs_c_guild_boss_attack_res\022\022\n\nerror_"
    "code\030\001 \002(\005\022\021\n\tis_killer\030\002 \001(\r\022%\n\007consume"
    "\030\004 \003(\0132\024.struct_game_element\022$\n\006output\030\005"
    " \003(\0132\024.struct_game_element\"<\n#c_gs_guild"
    "_boss_dead_hero_reset_req\022\025\n\rboss_positi"
    "on\030\001 \002(\r\"\243\001\n#gs_c_guild_boss_dead_hero_r"
    "eset_res\022\022\n\nerror_code\030\001 \002(\005\022\025\n\rboss_pos"
    "ition\030\002 \001(\r\022\021\n\treset_num\030\003 \001(\r\022\027\n\017last_r"
    "eset_time\030\004 \001(\r\022%\n\007consume\030\005 \003(\0132\024.struc"
    "t_game_element\":\n!c_gs_guild_boss_attack"
    "er_rank_req\022\025\n\rboss_position\030\001 \002(\r\"\312\001\n!g"
    "s_c_guild_boss_attacker_rank_res\022\022\n\nerro"
    "r_code\030\001 \002(\005\022I\n\010attckers\030\002 \003(\01327.gs_c_gu"
    "ild_boss_attacker_rank_res.struct_boss_a"
    "ttacker\032F\n\024struct_boss_attacker\022\017\n\007user_"
    "id\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\017\n\007lose_hp\030\003 \002(\r\""
    "\026\n\024c_gs_server_time_req\"\?\n\024gs_c_server_t"
    "ime_res\022\022\n\nerror_code\030\001 \002(\005\022\023\n\013server_ti"
    "me\030\002 \001(\r*\257\022\n\ne_msg_c_gs\022\022\n\016e_msg_c_gs_mi"
    "n\020\000\022\033\n\027e_msg_c_gs_enter_gs_req\020\001\022\031\n\025e_ms"
    "g_c_gs_config_req\020\002\022\034\n\030e_msg_c_gs_user_i"
    "nfo_req\020\003\022!\n\035e_msg_c_gs_start_sub_task_r"
    "eq\020\004\022\037\n\033e_msg_c_gs_end_sub_task_req\020\005\022\036\n"
    "\032e_msg_c_gs_invoke_hero_req\020\006\022\033\n\027e_msg_c"
    "_gs_leave_gs_req\020\007\022!\n\035e_msg_c_gs_equip_l"
    "evel_up_req\020\010\022\"\n\036e_msg_c_gs_equip_evolut"
    "ion_req\020\t\022\027\n\023e_msg_c_gs_sell_req\020\n\022$\n e_"
    "msg_c_gs_fragment_compound_req\020\013\022\033\n\027e_ms"
    "g_c_gs_mail_opt_req\020\014\022!\n\035e_msg_c_gs_hero"
    "_evolution_req\020\r\022\037\n\033e_msg_c_gs_hero_star"
    "_up_req\020\016\022!\n\035e_msg_c_gs_skill_level_up_r"
    "eq\020\017\022\031\n\025e_msg_c_gs_invoke_req\020\020\022\026\n\022e_msg"
    "_c_gs_buy_req\020\021\022\036\n\032e_msg_c_gs_server_tim"
    "e_req\020\022\022\033\n\027e_msg_c_gs_use_item_req\020\023\022 \n\034"
    "e_msg_c_gs_shop_buy_item_req\020\024\022\037\n\033e_msg_"
    "c_gs_shop_refresh_req\020\025\022\034\n\030e_msg_c_gs_sh"
    "op_info_req\020\026\022&\n\"e_msg_c_gs_arena_refres"
    "h_match_req\020\027\022$\n e_msg_c_gs_arena_update"
    "_team_req\020\030\022(\n$e_msg_c_gs_arena_start_ch"
    "allenge_req\020\031\022&\n\"e_msg_c_gs_arena_end_ch"
    "allenge_req\020\032\022+\n\'e_msg_c_gs_arena_challe"
    "nge_reset_cd_req\020\033\022,\n(e_msg_c_gs_arena_c"
    "hallenge_reset_num_req\020\034\022\034\n\030e_msg_c_gs_a"
    "rena_log_req\020\035\022\036\n\032e_msg_c_gs_arena_ranks"
    "_req\020\036\022%\n!e_msg_c_gs_get_mission_reward_"
    "req\020\037\022\027\n\023e_msg_c_gs_sign_req\020 \022\033\n\027e_msg_"
    "c_gs_sign_add_req\020!\022\037\n\033e_msg_c_gs_arena_"
    "search_req\020\"\022%\n!e_msg_c_gs_diamond_speed"
    "_kill_req\020#\022\'\n#e_msg_c_gs_head_or_frame_"
    "change_req\020$\022&\n\"e_msg_c_gs_finish_novice"
    "_guide_req\020%\022#\n\037e_msg_c_gs_edit_player_i"
    "nfo_req\020&\022&\n\"e_msg_c_gs_json_config_vers"
    "ion_req\020\'\022\036\n\032e_msg_c_gs_json_config_req\020"
    "(\022!\n\035e_msg_c_gs_user_friend_op_req\020)\022\036\n\032"
    "e_msg_c_gs_search_user_req\020*\022\027\n\023e_msg_c_"
    "gs_chat_req\020+\022\036\n\032e_msg_c_gs_fight_power_"
    "req\020,\022\027\n\023e_msg_c_gs_rank_req\020-\022\034\n\030e_msg_"
    "c_gs_guild_new_req\020.\022\035\n\031e_msg_c_gs_guild"
    "_edit_req\020/\022\037\n\033e_msg_c_gs_guild_delete_r"
    "eq\0200\022#\n\037e_msg_c_gs_guild_apply_list_req\020"
    "1\022!\n\035e_msg_c_gs_guild_apply_op_req\0202\022\037\n\033"
    "e_msg_c_gs_guild_invite_req\0203\022\"\n\036e_msg_c"
    "_gs_guild_member_op_req\0204\022%\n!e_msg_c_gs_"
    "guild_boss_refresh_req\0205\022\037\n\033e_msg_c_gs_g"
    "uild_search_req\0206\022\035\n\031e_msg_c_gs_guild_li"
    "st_req\0207\022\035\n\031e_msg_c_gs_guild_info_req\0208\022"
    "\"\n\036e_msg_c_gs_guild_boss_list_req\0209\022\"\n\036e"
    "_msg_c_gs_guild_boss_info_req\020:\022$\n e_msg"
    "_c_gs_guild_boss_attack_req\020;\022-\n)e_msg_c"
    "_gs_guild_boss_dead_hero_reset_req\020<\022+\n\'"
    "e_msg_c_gs_guild_boss_attacker_rank_req\020"
    "=\022 \n\034e_msg_c_gs_crusade_start_req\020>\022\036\n\032e"
    "_msg_c_gs_crusade_end_req\020\?\022$\n e_msg_c_g"
    "s_crusade_hero_life_req\020@\022 \n\034e_msg_c_gs_"
    "crusade_reset_req\020A\022(\n$e_msg_c_gs_crusad"
    "e_promote_award_req\020B\022\'\n#e_msg_c_gs_crus"
    "ade_buff_refresh_req\020C\022\022\n\016e_msg_c_gs_max"
    "\020D*\267\024\n\ne_msg_gs_c\022\022\n\016e_msg_gs_c_min\020\000\022\033\n"
    "\027e_msg_gs_c_enter_gs_res\020\001\022\031\n\025e_msg_gs_c"
    "_config_res\020\002\022\034\n\030e_msg_gs_c_user_info_re"
    "s\020\003\022!\n\035e_msg_gs_c_start_sub_task_res\020\004\022\037"
    "\n\033e_msg_gs_c_end_sub_task_res\020\005\022\036\n\032e_msg"
    "_gs_c_invoke_hero_res\020\006\022!\n\035e_msg_gs_c_eq"
    "uip_level_up_res\020\007\022\"\n\036e_msg_gs_c_equip_e"
    "volution_res\020\010\022\033\n\027e_msg_gs_c_leave_gs_re"
    "s\020\t\022\027\n\023e_msg_gs_c_sell_res\020\n\022$\n e_msg_gs"
    "_c_fragment_compound_res\020\013\022\033\n\027e_msg_gs_c"
    "_mail_opt_res\020\014\022\027\n\023e_msg_gs_c_mail_ntf\020\r"
    "\022!\n\035e_msg_gs_c_hero_evolution_res\020\016\022\037\n\033e"
    "_msg_gs_c_hero_star_up_res\020\017\022!\n\035e_msg_gs"
    "_c_skill_level_up_res\020\020\022\031\n\025e_msg_gs_c_in"
    "voke_res\020\021\022\026\n\022e_msg_gs_c_buy_res\020\022\022\036\n\032e_"
    "msg_gs_c_server_time_res\020\023\022\033\n\027e_msg_gs_c"
    "_use_item_res\020\024\022 \n\034e_msg_gs_c_shop_buy_i"
    "tem_res\020\025\022\037\n\033e_msg_gs_c_shop_refresh_res"
    "\020\026\022\034\n\030e_msg_gs_c_shop_info_res\020\027\022&\n\"e_ms"
    "g_gs_c_arena_refresh_match_res\020\030\022$\n e_ms"
    "g_gs_c_arena_update_team_res\020\031\022(\n$e_msg_"
    "gs_c_arena_start_challenge_res\020\032\022&\n\"e_ms"
    "g_gs_c_arena_end_challenge_res\020\033\022+\n\'e_ms"
    "g_gs_c_arena_challenge_reset_cd_res\020\034\022,\n"
    "(e_msg_gs_c_arena_challenge_reset_num_re"
    "s\020\035\022\"\n\036e_msg_gs_c_arena_challenge_ntf\020\036\022"
    "\034\n\030e_msg_gs_c_arena_log_res\020\037\022\036\n\032e_msg_g"
    "s_c_arena_ranks_res\020 \022%\n!e_msg_gs_c_get_"
    "mission_reward_res\020!\022\032\n\026e_msg_gs_c_missi"
    "on_ntf\020\"\022\027\n\023e_msg_gs_c_sign_res\020#\022\033\n\027e_m"
    "sg_gs_c_sign_add_res\020$\022\037\n\033e_msg_gs_c_are"
    "na_search_res\020%\022%\n!e_msg_gs_c_diamond_sp"
    "eed_kill_res\020&\022\'\n#e_msg_gs_c_head_or_fra"
    "me_change_res\020\'\022&\n\"e_msg_gs_c_finish_nov"
    "ice_guide_res\020(\022#\n\037e_msg_gs_c_edit_playe"
    "r_info_res\020)\022\032\n\026e_msg_gs_c_marquee_ntf\020*"
    "\022\032\n\026e_msg_gs_c_element_ntf\020+\022&\n\"e_msg_gs"
    "_c_json_config_version_res\020,\022\036\n\032e_msg_gs"
    "_c_json_config_res\020-\022!\n\035e_msg_gs_c_user_"
    "friend_op_res\020.\022\036\n\032e_msg_gs_c_user_frien"
    "d_ntf\020/\022\036\n\032e_msg_gs_c_search_user_res\0200\022"
    "\027\n\023e_msg_gs_c_chat_res\0201\022\027\n\023e_msg_gs_c_c"
    "hat_ntf\0202\022\036\n\032e_msg_gs_c_fight_power_res\020"
    "3\022\027\n\023e_msg_gs_c_rank_res\0204\022\034\n\030e_msg_gs_c"
    "_guild_new_res\0205\022\035\n\031e_msg_gs_c_guild_edi"
    "t_res\0206\022\037\n\033e_msg_gs_c_guild_delete_res\0207"
    "\022#\n\037e_msg_gs_c_guild_apply_list_res\0208\022!\n"
    "\035e_msg_gs_c_guild_apply_op_res\0209\022\037\n\033e_ms"
    "g_gs_c_guild_invite_res\020:\022\"\n\036e_msg_gs_c_"
    "guild_member_op_res\020;\022%\n!e_msg_gs_c_guil"
    "d_boss_refresh_res\020<\022\037\n\033e_msg_gs_c_guild"
    "_search_res\020=\022\035\n\031e_msg_gs_c_guild_list_r"
    "es\020>\022\035\n\031e_msg_gs_c_guild_info_res\020\?\022\"\n\036e"
    "_msg_gs_c_guild_boss_list_res\020@\022\"\n\036e_msg"
    "_gs_c_guild_boss_info_res\020A\022$\n e_msg_gs_"
    "c_guild_boss_attack_res\020B\022-\n)e_msg_gs_c_"
    "guild_boss_dead_hero_reset_res\020C\022+\n\'e_ms"
    "g_gs_c_guild_boss_attacker_rank_res\020D\022\035\n"
    "\031e_msg_gs_c_guild_quit_ntf\020E\022\035\n\031e_msg_gs"
    "_c_guild_join_ntf\020F\022 \n\034e_msg_gs_c_crusad"
    "e_start_res\020G\022\036\n\032e_msg_gs_c_crusade_end_"
    "res\020H\022$\n e_msg_gs_c_crusade_hero_life_re"
    "s\020I\022 \n\034e_msg_gs_c_crusade_reset_res\020J\022(\n"
    "$e_msg_gs_c_crusade_promote_award_res\020K\022"
    "\'\n#e_msg_gs_c_crusade_buff_refresh_res\020L"
    "\022\022\n\016e_msg_gs_c_max\020M*\223 \n\017e_gsc_errorcode"
    "\022\027\n\023e_gsc_errorcode_min\020\000\022\033\n\027e_gsc_error"
    "code_success\020\001\022!\n\035e_gsc_errorcode_unknow"
    "n_error\020\002\022\037\n\033e_gsc_errorcode_not_logined"
    "\020\003\022%\n!e_gsc_errorcode_not_get_user_info\020"
    "\004\022)\n%e_gsc_errorcode_cannot_start_sub_ta"
    "sk\020\005\022\'\n#e_gsc_errorcode_cannot_end_sub_t"
    "ask\020\006\022%\n!e_gsc_errorcode_sub_task_time_o"
    "ut\020\007\0224\n0e_gsc_errorcode_user_info_not_ex"
    "sit_or_has_error\020\010\0221\n-e_gsc_errorcode_us"
    "er_using_by_another_connect\020\t\0222\n.e_gsc_e"
    "rrorcode_no_enough_consume_or_reach_max\020"
    "\n\022%\n!e_gsc_errorcode_no_enough_consume\020\013"
    "\022\"\n\036e_gsc_errorcode_op_not_support\020\014\022$\n "
    "e_gsc_errorcode_no_enough_health\020\r\022#\n\037e_"
    "gsc_errorcode_not_enough_item\020\016\022&\n\"e_gsc"
    "_errorcode_not_enough_diamond\020\017\022$\n e_gsc"
    "_errorcode_not_enough_times\020\020\022(\n$e_gsc_e"
    "rrorcode_not_enough_bag_space\020\021\022\'\n#e_gsc"
    "_errorcode_vip_level_not_reach\020\022\022$\n e_gs"
    "c_errorcode_health_reach_max\020\023\022#\n\037e_gsc_"
    "errorcode_gold_not_enough\020\024\022$\n e_gsc_err"
    "orcode_level_not_enough\020\025\022,\n(e_gsc_error"
    "code_equip_quality_not_enough\020\026\022)\n%e_gsc"
    "_errorcode_not_exist_attach_mail\020\027\022.\n*e_"
    "gsc_errorcode_speed_kill_not_enough_star"
    "\020\030\0228\n4e_gsc_errorcode_speed_kill_not_eno"
    "ugh_left_enter_num\020\031\022+\n\'e_gsc_errorcode_"
    "speed_kill_exceed_limit\020\032\022$\n e_gsc_error"
    "code_item_can_not_use\020\033\022\"\n\036e_gsc_errorco"
    "de_shop_no_unlock\020\034\022%\n!e_gsc_errorcode_s"
    "hop_no_this_item\020\035\022\"\n\036e_gsc_errorcode_sh"
    "op_item_sold\020\036\022&\n\"e_gsc_errorcode_shop_h"
    "as_refreshed\020\037\0221\n-e_gsc_errorcode_arena_"
    "contestant_rank_changed\020 \022 \n\034e_gsc_error"
    "code_no_this_hero\020!\022!\n\035e_gsc_errorcode_h"
    "ero_exp_full\020\"\022+\n\'e_gsc_errorcode_arena_"
    "match_is_fighting\020#\0221\n-e_gsc_errorcode_a"
    "rena_no_enough_challenge_num\020$\022)\n%e_gsc_"
    "errorcode_arena_challenge_in_cd\020%\022-\n)e_g"
    "sc_errorcode_arena_challenge_not_in_cd\020&"
    "\0226\n2e_gsc_errorcode_arena_challenge_not_"
    "enough_buy_num\020\'\0220\n,e_gsc_errorcode_aren"
    "a_challenge_num_not_zero\020(\022\'\n#e_gsc_erro"
    "rcode_arena_i_am_fighting\020)\0226\n2e_gsc_err"
    "orcode_arena_cannot_fight_this_contestan"
    "t\020*\022\'\n#e_gsc_errorcode_arena_rank_page_o"
    "ut\020+\0228\n4e_gsc_errorcode_mission_reward_c"
    "ondition_not_satisfy\020,\022.\n*e_gsc_errorcod"
    "e_mission_already_get_reward\020-\022+\n\'e_gsc_"
    "errorcode_sign_already_sign_today\020.\022$\n e"
    "_gsc_errorcode_sign_no_need_add\020/\022*\n&e_g"
    "sc_errorcode_sign_no_left_add_times\0200\022.\n"
    "*e_gsc_errorcode_sign_confition_not_sati"
    "sfy\0201\022\'\n#e_gsc_errorcode_sign_already_re"
    "ward\0202\022*\n&e_gsc_errorcode_arena_search_n"
    "o_result\0203\022.\n*e_gsc_errorcode_guide_pre_"
    "guide_not_finish\0204\022(\n$e_gsc_errorcode_gu"
    "ide_already_finish\0205\0227\n3e_gsc_errorcode_"
    "guide_trigger_condition_not_satisfy\0206\022+\n"
    "\'e_gsc_errorcode_sub_task_has_not_passed"
    "\0207\022\'\n#e_gsc_errorcode_sub_task_not_branc"
    "h\0208\022/\n+e_gsc_errorcode_sub_task_has_left"
    "_enter_num\0209\0220\n,e_gsc_errorcode_sub_task"
    "_no_enough_reset_num\020:\022/\n+e_gsc_errorcod"
    "e_sub_task_no_enter_num_limit\020;\0222\n.e_gsc"
    "_errorcode_edit_player_info_name_too_lon"
    "g\020<\0225\n1e_gsc_errorcode_edit_player_info_"
    "name_forbid_word\020=\022.\n*e_gsc_errorcode_ed"
    "it_player_info_name_same\020>\022,\n(e_gsc_erro"
    "rcode_json_config_no_some_file\020\?\0222\n.e_gs"
    "c_errorcode_friend_me_friend_num_reach_m"
    "ax\020@\0226\n2e_gsc_errorcode_friend_friend_fr"
    "iend_num_reach_max\020A\022.\n*e_gsc_errorcode_"
    "friend_apply_num_reach_max\020B\0220\n,e_gsc_er"
    "rorcode_friend_already_in_apply_list\020C\022,"
    "\n(e_gsc_errorcode_friend_already_be_frie"
    "nd\020D\0223\n/e_gsc_errorcode_friend_del_frien"
    "d_num_reach_max\020E\0225\n1e_gsc_errorcode_fri"
    "end_already_give_element_today\020F\0223\n/e_gs"
    "c_errorcode_friend_affirm_num_reach_max_"
    "num\020G\0220\n,e_gsc_errorcode_friend_search_u"
    "ser_not_exist\020H\0221\n-e_gsc_errorcode_chat_"
    "user_not_online_or_exist\020I\022&\n\"e_gsc_erro"
    "rcode_signature_too_long\020J\022-\n)e_gsc_erro"
    "rcode_signature_has_forbid_word\020K\022(\n$e_g"
    "sc_errorcode_guild_info_not_exist\020L\022&\n\"e"
    "_gsc_errorcode_guild_no_authority\020M\022\'\n#e"
    "_gsc_errorcode_guild_already_apply\020N\0222\n."
    "e_gsc_errorcode_guild_user_apply_num_rea"
    "ch_max\020O\022-\n)e_gsc_errorcode_guild_apply_"
    "num_reach_max\020P\022&\n\"e_gsc_errorcode_guild"
    "_cannot_apply\020Q\0220\n,e_gsc_errorcode_guild"
    "_president_cannot_leave\020R\022\'\n#e_gsc_error"
    "code_guild_position_full\020S\022\'\n#e_gsc_erro"
    "rcode_guild_boss_not_open\020T\022(\n$e_gsc_err"
    "orcode_guild_no_enough_coin\020U\0222\n.e_gsc_e"
    "rrorcode_crusade_reset_times_not_enough\020"
    "V\0224\n0e_gsc_errorcode_crusade_promote_tim"
    "es_not_enough\020W\022*\n&e_gsc_errorcode_guild"
    "_apply_user_in_cd\020X\022+\n\'e_gsc_errorcode_g"
    "uild_boss_already_dead\020Y\022/\n+e_gsc_errorc"
    "ode_guild_boss_has_not_attacked\020Z\022\027\n\023e_g"
    "sc_errorcode_max\020[*X\n\013MAIL_STATUS\022\026\n\022MAI"
    "L_STATUS_READED\020\001\022\032\n\026MAIL_STATUS_NOT_REA"
    "DED\020\002\022\025\n\021MAIL_STATUS_DELED\020\003*\371\001\n\tMAIL_TY"
    "PE\022\036\n\032MAIL_TYPE_RECHARGE_SUCCESS\020\001\022\032\n\026MA"
    "IL_TYPE_VIP_LEVEL_UP\020\002\022\037\n\033MAIL_TYPE_AREN"
    "A_RANK_REWARD\020\003\022\034\n\030MAIL_TYPE_ARENA_TOP_R"
    "ANK\020\004\022\033\n\027MAIL_TYPE_OVERLAP_ITEMS\020\005\022\030\n\024MA"
    "IL_TYPE_SYS_NOTICE\020\006\022 \n\034MAIL_TYPE_PRE_MO"
    "NTH_ADD_SIGN\020\007\022\030\n\024MAIL_TYPE_MAIL_GUIDE\020\010"
    "*,\n\020HEAD_CHANGE_TYPE\022\010\n\004HEAD\020\001\022\016\n\nHEAD_F"
    "RAME\020\002*`\n\020e_guild_position\022\r\n\tEOutsider\020"
    "\000\022\013\n\007ECommon\020\001\022\022\n\016EVicePresident\020\002\022\016\n\nEP"
    "resident\020\003\022\014\n\010EInsider\020\004*L\n\025e_apply_swit"
    "ch_status\022\007\n\003MIN\020\000\022\t\n\005CLOSE\020\001\022\010\n\004Need\020\002\022"
    "\014\n\010Not_Need\020\003\022\007\n\003MAX\020\004", 41622);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gs_c_proto.proto", &protobuf_RegisterTypes);
  AOYI::default_instance_ = new AOYI();
  AOYI_ARRAY::default_instance_ = new AOYI_ARRAY();
  ARENAPRICE::default_instance_ = new ARENAPRICE();
  ARENAPRICE_ARRAY::default_instance_ = new ARENAPRICE_ARRAY();
  BAG::default_instance_ = new BAG();
  BAG_ARRAY::default_instance_ = new BAG_ARRAY();
  BATTLE::default_instance_ = new BATTLE();
  BATTLE_ARRAY::default_instance_ = new BATTLE_ARRAY();
  BOSSPROP::default_instance_ = new BOSSPROP();
  BOSSPROP_ARRAY::default_instance_ = new BOSSPROP_ARRAY();
  BOSSSKILL::default_instance_ = new BOSSSKILL();
  BOSSSKILL_ARRAY::default_instance_ = new BOSSSKILL_ARRAY();
  BUFF::default_instance_ = new BUFF();
  BUFF_ARRAY::default_instance_ = new BUFF_ARRAY();
  CHAPTERMAP::default_instance_ = new CHAPTERMAP();
  CHAPTERMAP_ARRAY::default_instance_ = new CHAPTERMAP_ARRAY();
  COINPRICE::default_instance_ = new COINPRICE();
  COINPRICE_ARRAY::default_instance_ = new COINPRICE_ARRAY();
  EQUIP::default_instance_ = new EQUIP();
  EQUIP_ARRAY::default_instance_ = new EQUIP_ARRAY();
  EVOLUTIONCOIN::default_instance_ = new EVOLUTIONCOIN();
  EVOLUTIONCOIN_ARRAY::default_instance_ = new EVOLUTIONCOIN_ARRAY();
  HEROPROP::default_instance_ = new HEROPROP();
  HEROPROP_ARRAY::default_instance_ = new HEROPROP_ARRAY();
  HEROSKILL::default_instance_ = new HEROSKILL();
  HEROSKILL_ARRAY::default_instance_ = new HEROSKILL_ARRAY();
  HEROSTAR::default_instance_ = new HEROSTAR();
  HEROSTAR_ARRAY::default_instance_ = new HEROSTAR_ARRAY();
  MONSTERPROP::default_instance_ = new MONSTERPROP();
  MONSTERPROP_ARRAY::default_instance_ = new MONSTERPROP_ARRAY();
  PASSIVE::default_instance_ = new PASSIVE();
  PASSIVE_ARRAY::default_instance_ = new PASSIVE_ARRAY();
  PRIZESHOW::default_instance_ = new PRIZESHOW();
  PRIZESHOW_ARRAY::default_instance_ = new PRIZESHOW_ARRAY();
  QUALITYRULE::default_instance_ = new QUALITYRULE();
  QUALITYRULE_ARRAY::default_instance_ = new QUALITYRULE_ARRAY();
  REALTIMECHECK::default_instance_ = new REALTIMECHECK();
  REALTIMECHECK_ARRAY::default_instance_ = new REALTIMECHECK_ARRAY();
  RESETPRICE::default_instance_ = new RESETPRICE();
  RESETPRICE_ARRAY::default_instance_ = new RESETPRICE_ARRAY();
  RULE::default_instance_ = new RULE();
  RULE_ARRAY::default_instance_ = new RULE_ARRAY();
  SHOPRESETPRICE::default_instance_ = new SHOPRESETPRICE();
  SHOPRESETPRICE_ARRAY::default_instance_ = new SHOPRESETPRICE_ARRAY();
  SPPRICE::default_instance_ = new SPPRICE();
  SPPRICE_ARRAY::default_instance_ = new SPPRICE_ARRAY();
  STAPRICE::default_instance_ = new STAPRICE();
  STAPRICE_ARRAY::default_instance_ = new STAPRICE_ARRAY();
  SUBTASK::default_instance_ = new SUBTASK();
  SUBTASK_ARRAY::default_instance_ = new SUBTASK_ARRAY();
  TASK::default_instance_ = new TASK();
  TASK_ARRAY::default_instance_ = new TASK_ARRAY();
  TRIGGERATTACK::default_instance_ = new TRIGGERATTACK();
  TRIGGERATTACK_ARRAY::default_instance_ = new TRIGGERATTACK_ARRAY();
  TRIGGERSTARTCONDITION::default_instance_ = new TRIGGERSTARTCONDITION();
  TRIGGERSTARTCONDITION_ARRAY::default_instance_ = new TRIGGERSTARTCONDITION_ARRAY();
  VIP::default_instance_ = new VIP();
  VIP_ARRAY::default_instance_ = new VIP_ARRAY();
  VIPFUNCTION::default_instance_ = new VIPFUNCTION();
  VIPFUNCTION_ARRAY::default_instance_ = new VIPFUNCTION_ARRAY();
  c_gs_enter_gs_req::default_instance_ = new c_gs_enter_gs_req();
  gs_c_enter_gs_res::default_instance_ = new gs_c_enter_gs_res();
  c_gs_leave_gs_req::default_instance_ = new c_gs_leave_gs_req();
  gs_c_leave_gs_res::default_instance_ = new gs_c_leave_gs_res();
  c_gs_json_config_version_req::default_instance_ = new c_gs_json_config_version_req();
  gs_c_json_config_version_res::default_instance_ = new gs_c_json_config_version_res();
  gs_c_json_config_version_res_config_version::default_instance_ = new gs_c_json_config_version_res_config_version();
  c_gs_json_config_req::default_instance_ = new c_gs_json_config_req();
  gs_c_json_config_res::default_instance_ = new gs_c_json_config_res();
  gs_c_json_config_res_config::default_instance_ = new gs_c_json_config_res_config();
  c_gs_config_req::default_instance_ = new c_gs_config_req();
  gs_c_config_res::default_instance_ = new gs_c_config_res();
  c_gs_user_info_req::default_instance_ = new c_gs_user_info_req();
  user_sub_task::default_instance_ = new user_sub_task();
  user_sub_task_array::default_instance_ = new user_sub_task_array();
  user_hero_equip::default_instance_ = new user_hero_equip();
  user_hero_skill::default_instance_ = new user_hero_skill();
  user_hero::default_instance_ = new user_hero();
  user_hero_array::default_instance_ = new user_hero_array();
  user_base_info::default_instance_ = new user_base_info();
  struct_game_element::default_instance_ = new struct_game_element();
  user_shop_item::default_instance_ = new user_shop_item();
  user_shop::default_instance_ = new user_shop();
  user_arena_log::default_instance_ = new user_arena_log();
  user_arena_log_user_arena_log_hero::default_instance_ = new user_arena_log_user_arena_log_hero();
  user_arena_contestant::default_instance_ = new user_arena_contestant();
  user_arena::default_instance_ = new user_arena();
  user_crusade::default_instance_ = new user_crusade();
  user_crusade_crusade_hero::default_instance_ = new user_crusade_crusade_hero();
  gs_c_user_info_res::default_instance_ = new gs_c_user_info_res();
  c_gs_start_sub_task_req::default_instance_ = new c_gs_start_sub_task_req();
  gs_c_start_sub_task_res::default_instance_ = new gs_c_start_sub_task_res();
  c_gs_end_sub_task_req::default_instance_ = new c_gs_end_sub_task_req();
  gs_c_end_sub_task_res::default_instance_ = new gs_c_end_sub_task_res();
  c_gs_invoke_hero_req::default_instance_ = new c_gs_invoke_hero_req();
  gs_c_invoke_hero_res::default_instance_ = new gs_c_invoke_hero_res();
  c_gs_equip_level_up_req::default_instance_ = new c_gs_equip_level_up_req();
  gs_c_equip_level_up_res::default_instance_ = new gs_c_equip_level_up_res();
  c_gs_equip_evolution_req::default_instance_ = new c_gs_equip_evolution_req();
  gs_c_equip_evolution_res::default_instance_ = new gs_c_equip_evolution_res();
  c_gs_hero_evolution_req::default_instance_ = new c_gs_hero_evolution_req();
  gs_c_hero_evolution_res::default_instance_ = new gs_c_hero_evolution_res();
  c_gs_hero_star_up_req::default_instance_ = new c_gs_hero_star_up_req();
  gs_c_hero_star_up_res::default_instance_ = new gs_c_hero_star_up_res();
  c_gs_skill_level_up_req::default_instance_ = new c_gs_skill_level_up_req();
  gs_c_skill_level_up_res::default_instance_ = new gs_c_skill_level_up_res();
  c_gs_invoke_req::default_instance_ = new c_gs_invoke_req();
  gs_c_invoke_res::default_instance_ = new gs_c_invoke_res();
  struct_game_element_array::default_instance_ = new struct_game_element_array();
  c_gs_diamond_speed_kill_req::default_instance_ = new c_gs_diamond_speed_kill_req();
  gs_c_diamond_speed_kill_res::default_instance_ = new gs_c_diamond_speed_kill_res();
  c_gs_use_item_req::default_instance_ = new c_gs_use_item_req();
  gs_c_use_item_res::default_instance_ = new gs_c_use_item_res();
  c_gs_shop_info_req::default_instance_ = new c_gs_shop_info_req();
  gs_c_shop_info_res::default_instance_ = new gs_c_shop_info_res();
  c_gs_shop_buy_item_req::default_instance_ = new c_gs_shop_buy_item_req();
  gs_c_shop_buy_item_res::default_instance_ = new gs_c_shop_buy_item_res();
  c_gs_shop_refresh_req::default_instance_ = new c_gs_shop_refresh_req();
  gs_c_shop_refresh_res::default_instance_ = new gs_c_shop_refresh_res();
  c_gs_sell_req::default_instance_ = new c_gs_sell_req();
  gs_c_sell_res::default_instance_ = new gs_c_sell_res();
  c_gs_arena_refresh_match_req::default_instance_ = new c_gs_arena_refresh_match_req();
  gs_c_arena_refresh_match_res::default_instance_ = new gs_c_arena_refresh_match_res();
  c_gs_arena_update_team_req::default_instance_ = new c_gs_arena_update_team_req();
  gs_c_arena_update_team_res::default_instance_ = new gs_c_arena_update_team_res();
  c_gs_arena_start_challenge_req::default_instance_ = new c_gs_arena_start_challenge_req();
  gs_c_arena_start_challenge_res::default_instance_ = new gs_c_arena_start_challenge_res();
  c_gs_arena_end_challenge_req::default_instance_ = new c_gs_arena_end_challenge_req();
  gs_c_arena_end_challenge_res::default_instance_ = new gs_c_arena_end_challenge_res();
  gs_c_arena_challenge_ntf::default_instance_ = new gs_c_arena_challenge_ntf();
  c_gs_arena_challenge_reset_cd_req::default_instance_ = new c_gs_arena_challenge_reset_cd_req();
  gs_c_arena_challenge_reset_cd_res::default_instance_ = new gs_c_arena_challenge_reset_cd_res();
  c_gs_arena_challenge_reset_num_req::default_instance_ = new c_gs_arena_challenge_reset_num_req();
  gs_c_arena_challenge_reset_num_res::default_instance_ = new gs_c_arena_challenge_reset_num_res();
  c_gs_arena_ranks_req::default_instance_ = new c_gs_arena_ranks_req();
  gs_c_arena_ranks_res::default_instance_ = new gs_c_arena_ranks_res();
  c_gs_arena_log_req::default_instance_ = new c_gs_arena_log_req();
  gs_c_arena_log_res::default_instance_ = new gs_c_arena_log_res();
  c_gs_arena_search_req::default_instance_ = new c_gs_arena_search_req();
  gs_c_arena_search_res::default_instance_ = new gs_c_arena_search_res();
  c_gs_fragment_compound_req::default_instance_ = new c_gs_fragment_compound_req();
  gs_c_fragment_compound_res::default_instance_ = new gs_c_fragment_compound_res();
  user_mail::default_instance_ = new user_mail();
  c_gs_mail_opt_req::default_instance_ = new c_gs_mail_opt_req();
  gs_c_mail_opt_res::default_instance_ = new gs_c_mail_opt_res();
  gs_c_mail_opt_res_mail_update::default_instance_ = new gs_c_mail_opt_res_mail_update();
  gs_c_mail_ntf::default_instance_ = new gs_c_mail_ntf();
  gs_c_mail_ntf_array::default_instance_ = new gs_c_mail_ntf_array();
  c_gs_buy_req::default_instance_ = new c_gs_buy_req();
  gs_c_buy_res::default_instance_ = new gs_c_buy_res();
  user_mission::default_instance_ = new user_mission();
  user_mission_mission_event_need::default_instance_ = new user_mission_mission_event_need();
  gs_c_mission_ntf_array::default_instance_ = new gs_c_mission_ntf_array();
  gs_c_mission_ntf_array_mission_opt::default_instance_ = new gs_c_mission_ntf_array_mission_opt();
  c_gs_get_mission_reward_req::default_instance_ = new c_gs_get_mission_reward_req();
  gs_c_get_mission_reward_res::default_instance_ = new gs_c_get_mission_reward_res();
  sign_n_reward::default_instance_ = new sign_n_reward();
  user_sign::default_instance_ = new user_sign();
  c_gs_sign_req::default_instance_ = new c_gs_sign_req();
  gs_c_sign_res::default_instance_ = new gs_c_sign_res();
  c_gs_sign_add_req::default_instance_ = new c_gs_sign_add_req();
  gs_c_sign_add_res::default_instance_ = new gs_c_sign_add_res();
  c_gs_head_or_frame_change_req::default_instance_ = new c_gs_head_or_frame_change_req();
  gs_c_head_or_frame_change_res::default_instance_ = new gs_c_head_or_frame_change_res();
  c_gs_edit_player_info_req::default_instance_ = new c_gs_edit_player_info_req();
  gs_c_edit_player_info_res::default_instance_ = new gs_c_edit_player_info_res();
  c_gs_finish_novice_guide_req::default_instance_ = new c_gs_finish_novice_guide_req();
  gs_c_finish_novice_guide_res::default_instance_ = new gs_c_finish_novice_guide_res();
  gs_c_marquee_ntf::default_instance_ = new gs_c_marquee_ntf();
  gs_c_element_ntf::default_instance_ = new gs_c_element_ntf();
  friend_base_info::default_instance_ = new friend_base_info();
  user_friend::default_instance_ = new user_friend();
  user_friend_friend_info::default_instance_ = new user_friend_friend_info();
  c_gs_user_friend_op_req::default_instance_ = new c_gs_user_friend_op_req();
  gs_c_user_friend_op_res::default_instance_ = new gs_c_user_friend_op_res();
  c_gs_search_user_req::default_instance_ = new c_gs_search_user_req();
  gs_c_search_user_res::default_instance_ = new gs_c_search_user_res();
  gs_c_friend_ntf::default_instance_ = new gs_c_friend_ntf();
  c_gs_chat_req::default_instance_ = new c_gs_chat_req();
  gs_c_chat_res::default_instance_ = new gs_c_chat_res();
  gs_c_chat_ntf::default_instance_ = new gs_c_chat_ntf();
  c_gs_fight_power_req::default_instance_ = new c_gs_fight_power_req();
  gs_c_fight_power_res::default_instance_ = new gs_c_fight_power_res();
  c_gs_rank_req::default_instance_ = new c_gs_rank_req();
  gs_c_rank_res::default_instance_ = new gs_c_rank_res();
  gs_c_rank_res_user_hero_brief_info::default_instance_ = new gs_c_rank_res_user_hero_brief_info();
  gs_c_rank_res_rank_info::default_instance_ = new gs_c_rank_res_rank_info();
  c_gs_crusade_start_req::default_instance_ = new c_gs_crusade_start_req();
  gs_c_crusade_start_res::default_instance_ = new gs_c_crusade_start_res();
  c_gs_crusade_end_req::default_instance_ = new c_gs_crusade_end_req();
  gs_c_crusade_end_res::default_instance_ = new gs_c_crusade_end_res();
  c_gs_crusade_hero_life_req::default_instance_ = new c_gs_crusade_hero_life_req();
  gs_c_crusade_hero_life_res::default_instance_ = new gs_c_crusade_hero_life_res();
  c_gs_crusade_reset_req::default_instance_ = new c_gs_crusade_reset_req();
  gs_c_crusade_reset_res::default_instance_ = new gs_c_crusade_reset_res();
  c_gs_crusade_promote_award_req::default_instance_ = new c_gs_crusade_promote_award_req();
  gs_c_crusade_promote_award_res::default_instance_ = new gs_c_crusade_promote_award_res();
  c_gs_crusade_buff_refresh_req::default_instance_ = new c_gs_crusade_buff_refresh_req();
  gs_c_crusade_buff_refresh_res::default_instance_ = new gs_c_crusade_buff_refresh_res();
  struct_guild_list_item::default_instance_ = new struct_guild_list_item();
  struct_user_guild_info::default_instance_ = new struct_user_guild_info();
  struct_user_guild_info_struct_guild_member::default_instance_ = new struct_user_guild_info_struct_guild_member();
  struct_guild_boss::default_instance_ = new struct_guild_boss();
  struct_guild_boss_attacker_dead_hero::default_instance_ = new struct_guild_boss_attacker_dead_hero();
  c_gs_guild_new_req::default_instance_ = new c_gs_guild_new_req();
  gs_c_guild_new_res::default_instance_ = new gs_c_guild_new_res();
  c_gs_guild_edit_req::default_instance_ = new c_gs_guild_edit_req();
  gs_c_guild_edit_res::default_instance_ = new gs_c_guild_edit_res();
  c_gs_guild_delete_req::default_instance_ = new c_gs_guild_delete_req();
  gs_c_guild_delete_res::default_instance_ = new gs_c_guild_delete_res();
  gs_c_guild_quit_ntf::default_instance_ = new gs_c_guild_quit_ntf();
  gs_c_guild_join_ntf::default_instance_ = new gs_c_guild_join_ntf();
  c_gs_guild_apply_list_req::default_instance_ = new c_gs_guild_apply_list_req();
  gs_c_guild_apply_list_res::default_instance_ = new gs_c_guild_apply_list_res();
  gs_c_guild_apply_list_res_struct_apply_for_outsider::default_instance_ = new gs_c_guild_apply_list_res_struct_apply_for_outsider();
  c_gs_guild_apply_op_req::default_instance_ = new c_gs_guild_apply_op_req();
  gs_c_guild_apply_op_res::default_instance_ = new gs_c_guild_apply_op_res();
  c_gs_guild_member_op_req::default_instance_ = new c_gs_guild_member_op_req();
  gs_c_guild_member_op_res::default_instance_ = new gs_c_guild_member_op_res();
  c_gs_guild_boss_refresh_req::default_instance_ = new c_gs_guild_boss_refresh_req();
  gs_c_guild_boss_refresh_res::default_instance_ = new gs_c_guild_boss_refresh_res();
  c_gs_guild_search_req::default_instance_ = new c_gs_guild_search_req();
  gs_c_guild_search_res::default_instance_ = new gs_c_guild_search_res();
  c_gs_guild_list_req::default_instance_ = new c_gs_guild_list_req();
  gs_c_guild_list_res::default_instance_ = new gs_c_guild_list_res();
  c_gs_guild_info_req::default_instance_ = new c_gs_guild_info_req();
  gs_c_guild_info_res::default_instance_ = new gs_c_guild_info_res();
  c_gs_guild_boss_list_req::default_instance_ = new c_gs_guild_boss_list_req();
  gs_c_guild_boss_list_res::default_instance_ = new gs_c_guild_boss_list_res();
  c_gs_guild_boss_info_req::default_instance_ = new c_gs_guild_boss_info_req();
  gs_c_guild_boss_info_res::default_instance_ = new gs_c_guild_boss_info_res();
  c_gs_guild_boss_attack_req::default_instance_ = new c_gs_guild_boss_attack_req();
  gs_c_guild_boss_attack_res::default_instance_ = new gs_c_guild_boss_attack_res();
  c_gs_guild_boss_dead_hero_reset_req::default_instance_ = new c_gs_guild_boss_dead_hero_reset_req();
  gs_c_guild_boss_dead_hero_reset_res::default_instance_ = new gs_c_guild_boss_dead_hero_reset_res();
  c_gs_guild_boss_attacker_rank_req::default_instance_ = new c_gs_guild_boss_attacker_rank_req();
  gs_c_guild_boss_attacker_rank_res::default_instance_ = new gs_c_guild_boss_attacker_rank_res();
  gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::default_instance_ = new gs_c_guild_boss_attacker_rank_res_struct_boss_attacker();
  c_gs_server_time_req::default_instance_ = new c_gs_server_time_req();
  gs_c_server_time_res::default_instance_ = new gs_c_server_time_res();
  AOYI::default_instance_->InitAsDefaultInstance();
  AOYI_ARRAY::default_instance_->InitAsDefaultInstance();
  ARENAPRICE::default_instance_->InitAsDefaultInstance();
  ARENAPRICE_ARRAY::default_instance_->InitAsDefaultInstance();
  BAG::default_instance_->InitAsDefaultInstance();
  BAG_ARRAY::default_instance_->InitAsDefaultInstance();
  BATTLE::default_instance_->InitAsDefaultInstance();
  BATTLE_ARRAY::default_instance_->InitAsDefaultInstance();
  BOSSPROP::default_instance_->InitAsDefaultInstance();
  BOSSPROP_ARRAY::default_instance_->InitAsDefaultInstance();
  BOSSSKILL::default_instance_->InitAsDefaultInstance();
  BOSSSKILL_ARRAY::default_instance_->InitAsDefaultInstance();
  BUFF::default_instance_->InitAsDefaultInstance();
  BUFF_ARRAY::default_instance_->InitAsDefaultInstance();
  CHAPTERMAP::default_instance_->InitAsDefaultInstance();
  CHAPTERMAP_ARRAY::default_instance_->InitAsDefaultInstance();
  COINPRICE::default_instance_->InitAsDefaultInstance();
  COINPRICE_ARRAY::default_instance_->InitAsDefaultInstance();
  EQUIP::default_instance_->InitAsDefaultInstance();
  EQUIP_ARRAY::default_instance_->InitAsDefaultInstance();
  EVOLUTIONCOIN::default_instance_->InitAsDefaultInstance();
  EVOLUTIONCOIN_ARRAY::default_instance_->InitAsDefaultInstance();
  HEROPROP::default_instance_->InitAsDefaultInstance();
  HEROPROP_ARRAY::default_instance_->InitAsDefaultInstance();
  HEROSKILL::default_instance_->InitAsDefaultInstance();
  HEROSKILL_ARRAY::default_instance_->InitAsDefaultInstance();
  HEROSTAR::default_instance_->InitAsDefaultInstance();
  HEROSTAR_ARRAY::default_instance_->InitAsDefaultInstance();
  MONSTERPROP::default_instance_->InitAsDefaultInstance();
  MONSTERPROP_ARRAY::default_instance_->InitAsDefaultInstance();
  PASSIVE::default_instance_->InitAsDefaultInstance();
  PASSIVE_ARRAY::default_instance_->InitAsDefaultInstance();
  PRIZESHOW::default_instance_->InitAsDefaultInstance();
  PRIZESHOW_ARRAY::default_instance_->InitAsDefaultInstance();
  QUALITYRULE::default_instance_->InitAsDefaultInstance();
  QUALITYRULE_ARRAY::default_instance_->InitAsDefaultInstance();
  REALTIMECHECK::default_instance_->InitAsDefaultInstance();
  REALTIMECHECK_ARRAY::default_instance_->InitAsDefaultInstance();
  RESETPRICE::default_instance_->InitAsDefaultInstance();
  RESETPRICE_ARRAY::default_instance_->InitAsDefaultInstance();
  RULE::default_instance_->InitAsDefaultInstance();
  RULE_ARRAY::default_instance_->InitAsDefaultInstance();
  SHOPRESETPRICE::default_instance_->InitAsDefaultInstance();
  SHOPRESETPRICE_ARRAY::default_instance_->InitAsDefaultInstance();
  SPPRICE::default_instance_->InitAsDefaultInstance();
  SPPRICE_ARRAY::default_instance_->InitAsDefaultInstance();
  STAPRICE::default_instance_->InitAsDefaultInstance();
  STAPRICE_ARRAY::default_instance_->InitAsDefaultInstance();
  SUBTASK::default_instance_->InitAsDefaultInstance();
  SUBTASK_ARRAY::default_instance_->InitAsDefaultInstance();
  TASK::default_instance_->InitAsDefaultInstance();
  TASK_ARRAY::default_instance_->InitAsDefaultInstance();
  TRIGGERATTACK::default_instance_->InitAsDefaultInstance();
  TRIGGERATTACK_ARRAY::default_instance_->InitAsDefaultInstance();
  TRIGGERSTARTCONDITION::default_instance_->InitAsDefaultInstance();
  TRIGGERSTARTCONDITION_ARRAY::default_instance_->InitAsDefaultInstance();
  VIP::default_instance_->InitAsDefaultInstance();
  VIP_ARRAY::default_instance_->InitAsDefaultInstance();
  VIPFUNCTION::default_instance_->InitAsDefaultInstance();
  VIPFUNCTION_ARRAY::default_instance_->InitAsDefaultInstance();
  c_gs_enter_gs_req::default_instance_->InitAsDefaultInstance();
  gs_c_enter_gs_res::default_instance_->InitAsDefaultInstance();
  c_gs_leave_gs_req::default_instance_->InitAsDefaultInstance();
  gs_c_leave_gs_res::default_instance_->InitAsDefaultInstance();
  c_gs_json_config_version_req::default_instance_->InitAsDefaultInstance();
  gs_c_json_config_version_res::default_instance_->InitAsDefaultInstance();
  gs_c_json_config_version_res_config_version::default_instance_->InitAsDefaultInstance();
  c_gs_json_config_req::default_instance_->InitAsDefaultInstance();
  gs_c_json_config_res::default_instance_->InitAsDefaultInstance();
  gs_c_json_config_res_config::default_instance_->InitAsDefaultInstance();
  c_gs_config_req::default_instance_->InitAsDefaultInstance();
  gs_c_config_res::default_instance_->InitAsDefaultInstance();
  c_gs_user_info_req::default_instance_->InitAsDefaultInstance();
  user_sub_task::default_instance_->InitAsDefaultInstance();
  user_sub_task_array::default_instance_->InitAsDefaultInstance();
  user_hero_equip::default_instance_->InitAsDefaultInstance();
  user_hero_skill::default_instance_->InitAsDefaultInstance();
  user_hero::default_instance_->InitAsDefaultInstance();
  user_hero_array::default_instance_->InitAsDefaultInstance();
  user_base_info::default_instance_->InitAsDefaultInstance();
  struct_game_element::default_instance_->InitAsDefaultInstance();
  user_shop_item::default_instance_->InitAsDefaultInstance();
  user_shop::default_instance_->InitAsDefaultInstance();
  user_arena_log::default_instance_->InitAsDefaultInstance();
  user_arena_log_user_arena_log_hero::default_instance_->InitAsDefaultInstance();
  user_arena_contestant::default_instance_->InitAsDefaultInstance();
  user_arena::default_instance_->InitAsDefaultInstance();
  user_crusade::default_instance_->InitAsDefaultInstance();
  user_crusade_crusade_hero::default_instance_->InitAsDefaultInstance();
  gs_c_user_info_res::default_instance_->InitAsDefaultInstance();
  c_gs_start_sub_task_req::default_instance_->InitAsDefaultInstance();
  gs_c_start_sub_task_res::default_instance_->InitAsDefaultInstance();
  c_gs_end_sub_task_req::default_instance_->InitAsDefaultInstance();
  gs_c_end_sub_task_res::default_instance_->InitAsDefaultInstance();
  c_gs_invoke_hero_req::default_instance_->InitAsDefaultInstance();
  gs_c_invoke_hero_res::default_instance_->InitAsDefaultInstance();
  c_gs_equip_level_up_req::default_instance_->InitAsDefaultInstance();
  gs_c_equip_level_up_res::default_instance_->InitAsDefaultInstance();
  c_gs_equip_evolution_req::default_instance_->InitAsDefaultInstance();
  gs_c_equip_evolution_res::default_instance_->InitAsDefaultInstance();
  c_gs_hero_evolution_req::default_instance_->InitAsDefaultInstance();
  gs_c_hero_evolution_res::default_instance_->InitAsDefaultInstance();
  c_gs_hero_star_up_req::default_instance_->InitAsDefaultInstance();
  gs_c_hero_star_up_res::default_instance_->InitAsDefaultInstance();
  c_gs_skill_level_up_req::default_instance_->InitAsDefaultInstance();
  gs_c_skill_level_up_res::default_instance_->InitAsDefaultInstance();
  c_gs_invoke_req::default_instance_->InitAsDefaultInstance();
  gs_c_invoke_res::default_instance_->InitAsDefaultInstance();
  struct_game_element_array::default_instance_->InitAsDefaultInstance();
  c_gs_diamond_speed_kill_req::default_instance_->InitAsDefaultInstance();
  gs_c_diamond_speed_kill_res::default_instance_->InitAsDefaultInstance();
  c_gs_use_item_req::default_instance_->InitAsDefaultInstance();
  gs_c_use_item_res::default_instance_->InitAsDefaultInstance();
  c_gs_shop_info_req::default_instance_->InitAsDefaultInstance();
  gs_c_shop_info_res::default_instance_->InitAsDefaultInstance();
  c_gs_shop_buy_item_req::default_instance_->InitAsDefaultInstance();
  gs_c_shop_buy_item_res::default_instance_->InitAsDefaultInstance();
  c_gs_shop_refresh_req::default_instance_->InitAsDefaultInstance();
  gs_c_shop_refresh_res::default_instance_->InitAsDefaultInstance();
  c_gs_sell_req::default_instance_->InitAsDefaultInstance();
  gs_c_sell_res::default_instance_->InitAsDefaultInstance();
  c_gs_arena_refresh_match_req::default_instance_->InitAsDefaultInstance();
  gs_c_arena_refresh_match_res::default_instance_->InitAsDefaultInstance();
  c_gs_arena_update_team_req::default_instance_->InitAsDefaultInstance();
  gs_c_arena_update_team_res::default_instance_->InitAsDefaultInstance();
  c_gs_arena_start_challenge_req::default_instance_->InitAsDefaultInstance();
  gs_c_arena_start_challenge_res::default_instance_->InitAsDefaultInstance();
  c_gs_arena_end_challenge_req::default_instance_->InitAsDefaultInstance();
  gs_c_arena_end_challenge_res::default_instance_->InitAsDefaultInstance();
  gs_c_arena_challenge_ntf::default_instance_->InitAsDefaultInstance();
  c_gs_arena_challenge_reset_cd_req::default_instance_->InitAsDefaultInstance();
  gs_c_arena_challenge_reset_cd_res::default_instance_->InitAsDefaultInstance();
  c_gs_arena_challenge_reset_num_req::default_instance_->InitAsDefaultInstance();
  gs_c_arena_challenge_reset_num_res::default_instance_->InitAsDefaultInstance();
  c_gs_arena_ranks_req::default_instance_->InitAsDefaultInstance();
  gs_c_arena_ranks_res::default_instance_->InitAsDefaultInstance();
  c_gs_arena_log_req::default_instance_->InitAsDefaultInstance();
  gs_c_arena_log_res::default_instance_->InitAsDefaultInstance();
  c_gs_arena_search_req::default_instance_->InitAsDefaultInstance();
  gs_c_arena_search_res::default_instance_->InitAsDefaultInstance();
  c_gs_fragment_compound_req::default_instance_->InitAsDefaultInstance();
  gs_c_fragment_compound_res::default_instance_->InitAsDefaultInstance();
  user_mail::default_instance_->InitAsDefaultInstance();
  c_gs_mail_opt_req::default_instance_->InitAsDefaultInstance();
  gs_c_mail_opt_res::default_instance_->InitAsDefaultInstance();
  gs_c_mail_opt_res_mail_update::default_instance_->InitAsDefaultInstance();
  gs_c_mail_ntf::default_instance_->InitAsDefaultInstance();
  gs_c_mail_ntf_array::default_instance_->InitAsDefaultInstance();
  c_gs_buy_req::default_instance_->InitAsDefaultInstance();
  gs_c_buy_res::default_instance_->InitAsDefaultInstance();
  user_mission::default_instance_->InitAsDefaultInstance();
  user_mission_mission_event_need::default_instance_->InitAsDefaultInstance();
  gs_c_mission_ntf_array::default_instance_->InitAsDefaultInstance();
  gs_c_mission_ntf_array_mission_opt::default_instance_->InitAsDefaultInstance();
  c_gs_get_mission_reward_req::default_instance_->InitAsDefaultInstance();
  gs_c_get_mission_reward_res::default_instance_->InitAsDefaultInstance();
  sign_n_reward::default_instance_->InitAsDefaultInstance();
  user_sign::default_instance_->InitAsDefaultInstance();
  c_gs_sign_req::default_instance_->InitAsDefaultInstance();
  gs_c_sign_res::default_instance_->InitAsDefaultInstance();
  c_gs_sign_add_req::default_instance_->InitAsDefaultInstance();
  gs_c_sign_add_res::default_instance_->InitAsDefaultInstance();
  c_gs_head_or_frame_change_req::default_instance_->InitAsDefaultInstance();
  gs_c_head_or_frame_change_res::default_instance_->InitAsDefaultInstance();
  c_gs_edit_player_info_req::default_instance_->InitAsDefaultInstance();
  gs_c_edit_player_info_res::default_instance_->InitAsDefaultInstance();
  c_gs_finish_novice_guide_req::default_instance_->InitAsDefaultInstance();
  gs_c_finish_novice_guide_res::default_instance_->InitAsDefaultInstance();
  gs_c_marquee_ntf::default_instance_->InitAsDefaultInstance();
  gs_c_element_ntf::default_instance_->InitAsDefaultInstance();
  friend_base_info::default_instance_->InitAsDefaultInstance();
  user_friend::default_instance_->InitAsDefaultInstance();
  user_friend_friend_info::default_instance_->InitAsDefaultInstance();
  c_gs_user_friend_op_req::default_instance_->InitAsDefaultInstance();
  gs_c_user_friend_op_res::default_instance_->InitAsDefaultInstance();
  c_gs_search_user_req::default_instance_->InitAsDefaultInstance();
  gs_c_search_user_res::default_instance_->InitAsDefaultInstance();
  gs_c_friend_ntf::default_instance_->InitAsDefaultInstance();
  c_gs_chat_req::default_instance_->InitAsDefaultInstance();
  gs_c_chat_res::default_instance_->InitAsDefaultInstance();
  gs_c_chat_ntf::default_instance_->InitAsDefaultInstance();
  c_gs_fight_power_req::default_instance_->InitAsDefaultInstance();
  gs_c_fight_power_res::default_instance_->InitAsDefaultInstance();
  c_gs_rank_req::default_instance_->InitAsDefaultInstance();
  gs_c_rank_res::default_instance_->InitAsDefaultInstance();
  gs_c_rank_res_user_hero_brief_info::default_instance_->InitAsDefaultInstance();
  gs_c_rank_res_rank_info::default_instance_->InitAsDefaultInstance();
  c_gs_crusade_start_req::default_instance_->InitAsDefaultInstance();
  gs_c_crusade_start_res::default_instance_->InitAsDefaultInstance();
  c_gs_crusade_end_req::default_instance_->InitAsDefaultInstance();
  gs_c_crusade_end_res::default_instance_->InitAsDefaultInstance();
  c_gs_crusade_hero_life_req::default_instance_->InitAsDefaultInstance();
  gs_c_crusade_hero_life_res::default_instance_->InitAsDefaultInstance();
  c_gs_crusade_reset_req::default_instance_->InitAsDefaultInstance();
  gs_c_crusade_reset_res::default_instance_->InitAsDefaultInstance();
  c_gs_crusade_promote_award_req::default_instance_->InitAsDefaultInstance();
  gs_c_crusade_promote_award_res::default_instance_->InitAsDefaultInstance();
  c_gs_crusade_buff_refresh_req::default_instance_->InitAsDefaultInstance();
  gs_c_crusade_buff_refresh_res::default_instance_->InitAsDefaultInstance();
  struct_guild_list_item::default_instance_->InitAsDefaultInstance();
  struct_user_guild_info::default_instance_->InitAsDefaultInstance();
  struct_user_guild_info_struct_guild_member::default_instance_->InitAsDefaultInstance();
  struct_guild_boss::default_instance_->InitAsDefaultInstance();
  struct_guild_boss_attacker_dead_hero::default_instance_->InitAsDefaultInstance();
  c_gs_guild_new_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_new_res::default_instance_->InitAsDefaultInstance();
  c_gs_guild_edit_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_edit_res::default_instance_->InitAsDefaultInstance();
  c_gs_guild_delete_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_delete_res::default_instance_->InitAsDefaultInstance();
  gs_c_guild_quit_ntf::default_instance_->InitAsDefaultInstance();
  gs_c_guild_join_ntf::default_instance_->InitAsDefaultInstance();
  c_gs_guild_apply_list_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_apply_list_res::default_instance_->InitAsDefaultInstance();
  gs_c_guild_apply_list_res_struct_apply_for_outsider::default_instance_->InitAsDefaultInstance();
  c_gs_guild_apply_op_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_apply_op_res::default_instance_->InitAsDefaultInstance();
  c_gs_guild_member_op_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_member_op_res::default_instance_->InitAsDefaultInstance();
  c_gs_guild_boss_refresh_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_boss_refresh_res::default_instance_->InitAsDefaultInstance();
  c_gs_guild_search_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_search_res::default_instance_->InitAsDefaultInstance();
  c_gs_guild_list_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_list_res::default_instance_->InitAsDefaultInstance();
  c_gs_guild_info_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_info_res::default_instance_->InitAsDefaultInstance();
  c_gs_guild_boss_list_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_boss_list_res::default_instance_->InitAsDefaultInstance();
  c_gs_guild_boss_info_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_boss_info_res::default_instance_->InitAsDefaultInstance();
  c_gs_guild_boss_attack_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_boss_attack_res::default_instance_->InitAsDefaultInstance();
  c_gs_guild_boss_dead_hero_reset_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_boss_dead_hero_reset_res::default_instance_->InitAsDefaultInstance();
  c_gs_guild_boss_attacker_rank_req::default_instance_->InitAsDefaultInstance();
  gs_c_guild_boss_attacker_rank_res::default_instance_->InitAsDefaultInstance();
  gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::default_instance_->InitAsDefaultInstance();
  c_gs_server_time_req::default_instance_->InitAsDefaultInstance();
  gs_c_server_time_res::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gs_5fc_5fproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gs_5fc_5fproto_2eproto {
  StaticDescriptorInitializer_gs_5fc_5fproto_2eproto() {
    protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  }
} static_descriptor_initializer_gs_5fc_5fproto_2eproto_;
const ::google::protobuf::EnumDescriptor* e_msg_c_gs_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_msg_c_gs_descriptor_;
}
bool e_msg_c_gs_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_msg_gs_c_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_msg_gs_c_descriptor_;
}
bool e_msg_gs_c_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_gsc_errorcode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_gsc_errorcode_descriptor_;
}
bool e_gsc_errorcode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MAIL_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MAIL_STATUS_descriptor_;
}
bool MAIL_STATUS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MAIL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MAIL_TYPE_descriptor_;
}
bool MAIL_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HEAD_CHANGE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HEAD_CHANGE_TYPE_descriptor_;
}
bool HEAD_CHANGE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_guild_position_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_guild_position_descriptor_;
}
bool e_guild_position_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_apply_switch_status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_apply_switch_status_descriptor_;
}
bool e_apply_switch_status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AOYI::kIdFieldNumber;
const int AOYI::kFactorFieldNumber;
#endif  // !_MSC_VER

AOYI::AOYI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AOYI::InitAsDefaultInstance() {
}

AOYI::AOYI(const AOYI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AOYI::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AOYI::~AOYI() {
  SharedDtor();
}

void AOYI::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void AOYI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AOYI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AOYI_descriptor_;
}

const AOYI& AOYI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

AOYI* AOYI::default_instance_ = NULL;

AOYI* AOYI::New() const {
  return new AOYI;
}

void AOYI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    factor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AOYI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_factor;
        break;
      }

      // required float factor = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AOYI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required float factor = 2 [default = 0];
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->factor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AOYI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required float factor = 2 [default = 0];
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->factor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AOYI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required float factor = 2 [default = 0];
    if (has_factor()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AOYI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AOYI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AOYI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AOYI::MergeFrom(const AOYI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AOYI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AOYI::CopyFrom(const AOYI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AOYI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AOYI::Swap(AOYI* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(factor_, other->factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AOYI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AOYI_descriptor_;
  metadata.reflection = AOYI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AOYI_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

AOYI_ARRAY::AOYI_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AOYI_ARRAY::InitAsDefaultInstance() {
}

AOYI_ARRAY::AOYI_ARRAY(const AOYI_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AOYI_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AOYI_ARRAY::~AOYI_ARRAY() {
  SharedDtor();
}

void AOYI_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AOYI_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AOYI_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AOYI_ARRAY_descriptor_;
}

const AOYI_ARRAY& AOYI_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

AOYI_ARRAY* AOYI_ARRAY::default_instance_ = NULL;

AOYI_ARRAY* AOYI_ARRAY::New() const {
  return new AOYI_ARRAY;
}

void AOYI_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AOYI_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AOYI items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AOYI_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AOYI items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AOYI_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AOYI items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AOYI_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .AOYI items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AOYI_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AOYI_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AOYI_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AOYI_ARRAY::MergeFrom(const AOYI_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AOYI_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AOYI_ARRAY::CopyFrom(const AOYI_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AOYI_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void AOYI_ARRAY::Swap(AOYI_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AOYI_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AOYI_ARRAY_descriptor_;
  metadata.reflection = AOYI_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ARENAPRICE::kIdFieldNumber;
const int ARENAPRICE::kPriceFieldNumber;
#endif  // !_MSC_VER

ARENAPRICE::ARENAPRICE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ARENAPRICE::InitAsDefaultInstance() {
}

ARENAPRICE::ARENAPRICE(const ARENAPRICE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ARENAPRICE::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ARENAPRICE::~ARENAPRICE() {
  SharedDtor();
}

void ARENAPRICE::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ARENAPRICE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ARENAPRICE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ARENAPRICE_descriptor_;
}

const ARENAPRICE& ARENAPRICE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

ARENAPRICE* ARENAPRICE::default_instance_ = NULL;

ARENAPRICE* ARENAPRICE::New() const {
  return new ARENAPRICE;
}

void ARENAPRICE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ARENAPRICE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // required int32 price = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ARENAPRICE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 price = 2 [default = 0];
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ARENAPRICE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 price = 2 [default = 0];
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ARENAPRICE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 price = 2 [default = 0];
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ARENAPRICE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ARENAPRICE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ARENAPRICE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ARENAPRICE::MergeFrom(const ARENAPRICE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ARENAPRICE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARENAPRICE::CopyFrom(const ARENAPRICE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARENAPRICE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ARENAPRICE::Swap(ARENAPRICE* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ARENAPRICE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ARENAPRICE_descriptor_;
  metadata.reflection = ARENAPRICE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ARENAPRICE_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

ARENAPRICE_ARRAY::ARENAPRICE_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ARENAPRICE_ARRAY::InitAsDefaultInstance() {
}

ARENAPRICE_ARRAY::ARENAPRICE_ARRAY(const ARENAPRICE_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ARENAPRICE_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ARENAPRICE_ARRAY::~ARENAPRICE_ARRAY() {
  SharedDtor();
}

void ARENAPRICE_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ARENAPRICE_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ARENAPRICE_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ARENAPRICE_ARRAY_descriptor_;
}

const ARENAPRICE_ARRAY& ARENAPRICE_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

ARENAPRICE_ARRAY* ARENAPRICE_ARRAY::default_instance_ = NULL;

ARENAPRICE_ARRAY* ARENAPRICE_ARRAY::New() const {
  return new ARENAPRICE_ARRAY;
}

void ARENAPRICE_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ARENAPRICE_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ARENAPRICE items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ARENAPRICE_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ARENAPRICE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ARENAPRICE_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ARENAPRICE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ARENAPRICE_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .ARENAPRICE items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ARENAPRICE_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ARENAPRICE_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ARENAPRICE_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ARENAPRICE_ARRAY::MergeFrom(const ARENAPRICE_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ARENAPRICE_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ARENAPRICE_ARRAY::CopyFrom(const ARENAPRICE_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ARENAPRICE_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ARENAPRICE_ARRAY::Swap(ARENAPRICE_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ARENAPRICE_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ARENAPRICE_ARRAY_descriptor_;
  metadata.reflection = ARENAPRICE_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BAG::kIdFieldNumber;
const int BAG::kUseTypeFieldNumber;
const int BAG::kQualityFieldNumber;
const int BAG::kSellPriceFieldNumber;
const int BAG::kExpFieldNumber;
const int BAG::kNeedsFieldNumber;
const int BAG::kNeedCountsFieldNumber;
const int BAG::kNeedGoldsFieldNumber;
#endif  // !_MSC_VER

BAG::BAG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BAG::InitAsDefaultInstance() {
}

BAG::BAG(const BAG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BAG::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usetype_ = 0;
  quality_ = 0;
  sellprice_ = 0;
  exp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needcounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needgolds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BAG::~BAG() {
  SharedDtor();
}

void BAG::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (exp_ != &::google::protobuf::internal::kEmptyString) {
    delete exp_;
  }
  if (needs_ != &::google::protobuf::internal::kEmptyString) {
    delete needs_;
  }
  if (needcounts_ != &::google::protobuf::internal::kEmptyString) {
    delete needcounts_;
  }
  if (this != default_instance_) {
  }
}

void BAG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BAG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BAG_descriptor_;
}

const BAG& BAG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

BAG* BAG::default_instance_ = NULL;

BAG* BAG::New() const {
  return new BAG;
}

void BAG::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    usetype_ = 0;
    quality_ = 0;
    sellprice_ = 0;
    if (has_exp()) {
      if (exp_ != &::google::protobuf::internal::kEmptyString) {
        exp_->clear();
      }
    }
    if (has_needs()) {
      if (needs_ != &::google::protobuf::internal::kEmptyString) {
        needs_->clear();
      }
    }
    if (has_needcounts()) {
      if (needcounts_ != &::google::protobuf::internal::kEmptyString) {
        needcounts_->clear();
      }
    }
    needgolds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BAG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_useType;
        break;
      }

      // required int32 useType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usetype_)));
          set_has_usetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // required int32 quality = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sellPrice;
        break;
      }

      // required int32 sellPrice = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice_)));
          set_has_sellprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_exp;
        break;
      }

      // required string exp = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exp().data(), this->exp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_needs;
        break;
      }

      // required string needs = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_needs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_needs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->needs().data(), this->needs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_needCounts;
        break;
      }

      // required string needCounts = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_needCounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_needcounts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->needcounts().data(), this->needcounts().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_needGolds;
        break;
      }

      // required int32 needGolds = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGolds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needgolds_)));
          set_has_needgolds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BAG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 useType = 2 [default = 0];
  if (has_usetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usetype(), output);
  }

  // required int32 quality = 3 [default = 0];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // required int32 sellPrice = 4 [default = 0];
  if (has_sellprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sellprice(), output);
  }

  // required string exp = 5 [default = ""];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exp().data(), this->exp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->exp(), output);
  }

  // required string needs = 6 [default = ""];
  if (has_needs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->needs().data(), this->needs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->needs(), output);
  }

  // required string needCounts = 7 [default = ""];
  if (has_needcounts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->needcounts().data(), this->needcounts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->needcounts(), output);
  }

  // required int32 needGolds = 8 [default = 0];
  if (has_needgolds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->needgolds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BAG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 useType = 2 [default = 0];
  if (has_usetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usetype(), target);
  }

  // required int32 quality = 3 [default = 0];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // required int32 sellPrice = 4 [default = 0];
  if (has_sellprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sellprice(), target);
  }

  // required string exp = 5 [default = ""];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exp().data(), this->exp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exp(), target);
  }

  // required string needs = 6 [default = ""];
  if (has_needs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->needs().data(), this->needs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->needs(), target);
  }

  // required string needCounts = 7 [default = ""];
  if (has_needcounts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->needcounts().data(), this->needcounts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->needcounts(), target);
  }

  // required int32 needGolds = 8 [default = 0];
  if (has_needgolds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->needgolds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BAG::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 useType = 2 [default = 0];
    if (has_usetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usetype());
    }

    // required int32 quality = 3 [default = 0];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // required int32 sellPrice = 4 [default = 0];
    if (has_sellprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice());
    }

    // required string exp = 5 [default = ""];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exp());
    }

    // required string needs = 6 [default = ""];
    if (has_needs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->needs());
    }

    // required string needCounts = 7 [default = ""];
    if (has_needcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->needcounts());
    }

    // required int32 needGolds = 8 [default = 0];
    if (has_needgolds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needgolds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BAG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BAG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BAG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BAG::MergeFrom(const BAG& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_usetype()) {
      set_usetype(from.usetype());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_sellprice()) {
      set_sellprice(from.sellprice());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_needs()) {
      set_needs(from.needs());
    }
    if (from.has_needcounts()) {
      set_needcounts(from.needcounts());
    }
    if (from.has_needgolds()) {
      set_needgolds(from.needgolds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BAG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BAG::CopyFrom(const BAG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BAG::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void BAG::Swap(BAG* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(usetype_, other->usetype_);
    std::swap(quality_, other->quality_);
    std::swap(sellprice_, other->sellprice_);
    std::swap(exp_, other->exp_);
    std::swap(needs_, other->needs_);
    std::swap(needcounts_, other->needcounts_);
    std::swap(needgolds_, other->needgolds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BAG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BAG_descriptor_;
  metadata.reflection = BAG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BAG_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

BAG_ARRAY::BAG_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BAG_ARRAY::InitAsDefaultInstance() {
}

BAG_ARRAY::BAG_ARRAY(const BAG_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BAG_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BAG_ARRAY::~BAG_ARRAY() {
  SharedDtor();
}

void BAG_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BAG_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BAG_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BAG_ARRAY_descriptor_;
}

const BAG_ARRAY& BAG_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

BAG_ARRAY* BAG_ARRAY::default_instance_ = NULL;

BAG_ARRAY* BAG_ARRAY::New() const {
  return new BAG_ARRAY;
}

void BAG_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BAG_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BAG items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BAG_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BAG items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BAG_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BAG items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BAG_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .BAG items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BAG_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BAG_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BAG_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BAG_ARRAY::MergeFrom(const BAG_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BAG_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BAG_ARRAY::CopyFrom(const BAG_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BAG_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void BAG_ARRAY::Swap(BAG_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BAG_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BAG_ARRAY_descriptor_;
  metadata.reflection = BAG_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BATTLE::kIdFieldNumber;
const int BATTLE::kInfosFieldNumber;
const int BATTLE::kPositionsFieldNumber;
#endif  // !_MSC_VER

BATTLE::BATTLE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BATTLE::InitAsDefaultInstance() {
}

BATTLE::BATTLE(const BATTLE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BATTLE::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  infos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  positions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BATTLE::~BATTLE() {
  SharedDtor();
}

void BATTLE::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (infos_ != &::google::protobuf::internal::kEmptyString) {
    delete infos_;
  }
  if (positions_ != &::google::protobuf::internal::kEmptyString) {
    delete positions_;
  }
  if (this != default_instance_) {
  }
}

void BATTLE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BATTLE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BATTLE_descriptor_;
}

const BATTLE& BATTLE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

BATTLE* BATTLE::default_instance_ = NULL;

BATTLE* BATTLE::New() const {
  return new BATTLE;
}

void BATTLE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_infos()) {
      if (infos_ != &::google::protobuf::internal::kEmptyString) {
        infos_->clear();
      }
    }
    if (has_positions()) {
      if (positions_ != &::google::protobuf::internal::kEmptyString) {
        positions_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BATTLE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // required string infos = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->infos().data(), this->infos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_positions;
        break;
      }

      // required string positions = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_positions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->positions().data(), this->positions().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BATTLE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string infos = 2 [default = ""];
  if (has_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infos().data(), this->infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->infos(), output);
  }

  // required string positions = 3 [default = ""];
  if (has_positions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positions().data(), this->positions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->positions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BATTLE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string infos = 2 [default = ""];
  if (has_infos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infos().data(), this->infos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->infos(), target);
  }

  // required string positions = 3 [default = ""];
  if (has_positions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positions().data(), this->positions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->positions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BATTLE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string infos = 2 [default = ""];
    if (has_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infos());
    }

    // required string positions = 3 [default = ""];
    if (has_positions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->positions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BATTLE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BATTLE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BATTLE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BATTLE::MergeFrom(const BATTLE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_infos()) {
      set_infos(from.infos());
    }
    if (from.has_positions()) {
      set_positions(from.positions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BATTLE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BATTLE::CopyFrom(const BATTLE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BATTLE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BATTLE::Swap(BATTLE* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(infos_, other->infos_);
    std::swap(positions_, other->positions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BATTLE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BATTLE_descriptor_;
  metadata.reflection = BATTLE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BATTLE_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

BATTLE_ARRAY::BATTLE_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BATTLE_ARRAY::InitAsDefaultInstance() {
}

BATTLE_ARRAY::BATTLE_ARRAY(const BATTLE_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BATTLE_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BATTLE_ARRAY::~BATTLE_ARRAY() {
  SharedDtor();
}

void BATTLE_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BATTLE_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BATTLE_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BATTLE_ARRAY_descriptor_;
}

const BATTLE_ARRAY& BATTLE_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

BATTLE_ARRAY* BATTLE_ARRAY::default_instance_ = NULL;

BATTLE_ARRAY* BATTLE_ARRAY::New() const {
  return new BATTLE_ARRAY;
}

void BATTLE_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BATTLE_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BATTLE items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BATTLE_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BATTLE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BATTLE_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BATTLE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BATTLE_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .BATTLE items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BATTLE_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BATTLE_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BATTLE_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BATTLE_ARRAY::MergeFrom(const BATTLE_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BATTLE_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BATTLE_ARRAY::CopyFrom(const BATTLE_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BATTLE_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void BATTLE_ARRAY::Swap(BATTLE_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BATTLE_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BATTLE_ARRAY_descriptor_;
  metadata.reflection = BATTLE_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BOSSPROP::kIdFieldNumber;
const int BOSSPROP::kPointIdFieldNumber;
const int BOSSPROP::kAreaFieldNumber;
const int BOSSPROP::kOccupationFieldNumber;
const int BOSSPROP::kLevelFieldNumber;
const int BOSSPROP::kHealthFieldNumber;
const int BOSSPROP::kDamageFieldNumber;
const int BOSSPROP::kPddFieldNumber;
const int BOSSPROP::kMddFieldNumber;
const int BOSSPROP::kHitLevelFieldNumber;
const int BOSSPROP::kDodgeLevelFieldNumber;
const int BOSSPROP::kCriLevelFieldNumber;
const int BOSSPROP::kTenacityLevelFieldNumber;
const int BOSSPROP::kPddPierceFieldNumber;
const int BOSSPROP::kPassiveSkillIdFieldNumber;
const int BOSSPROP::kPassiveSkillLevelFieldNumber;
const int BOSSPROP::kRangeXFieldNumber;
const int BOSSPROP::kRangeYFieldNumber;
const int BOSSPROP::kRangeZFieldNumber;
const int BOSSPROP::kAttackSpeedFieldNumber;
const int BOSSPROP::kHDisFieldNumber;
const int BOSSPROP::kVDisFieldNumber;
const int BOSSPROP::kMoveSpeedFieldNumber;
const int BOSSPROP::kStarFieldNumber;
const int BOSSPROP::kStageBFieldNumber;
const int BOSSPROP::kHitNumBFieldNumber;
const int BOSSPROP::kSkillTimeListFieldNumber;
const int BOSSPROP::kWarningTimeListFieldNumber;
const int BOSSPROP::kMaxIntensityFieldNumber;
const int BOSSPROP::kRecoverIntensityRateFieldNumber;
const int BOSSPROP::kMinIntensityFieldNumber;
const int BOSSPROP::kTypeNormalFieldNumber;
#endif  // !_MSC_VER

BOSSPROP::BOSSPROP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BOSSPROP::InitAsDefaultInstance() {
}

BOSSPROP::BOSSPROP(const BOSSPROP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BOSSPROP::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pointid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_ = 0;
  occupation_ = 0;
  level_ = 0;
  health_ = 0;
  damage_ = 0;
  pdd_ = 0;
  mdd_ = 0;
  hitlevel_ = 0;
  dodgelevel_ = 0;
  crilevel_ = 0;
  tenacitylevel_ = 0;
  pddpierce_ = 0;
  passiveskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passiveskilllevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  range_x_ = 0;
  range_y_ = 0;
  range_z_ = 0;
  attackspeed_ = 0;
  h_dis_ = 0;
  v_dis_ = 0;
  movespeed_ = 0;
  star_ = 0;
  stage_b_ = 0;
  hitnum_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skilltimelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  warningtimelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxintensity_ = 0;
  recoverintensityrate_ = 0;
  minintensity_ = 0;
  type_normal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BOSSPROP::~BOSSPROP() {
  SharedDtor();
}

void BOSSPROP::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (pointid_ != &::google::protobuf::internal::kEmptyString) {
    delete pointid_;
  }
  if (passiveskillid_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskillid_;
  }
  if (passiveskilllevel_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskilllevel_;
  }
  if (hitnum_b_ != &::google::protobuf::internal::kEmptyString) {
    delete hitnum_b_;
  }
  if (skilltimelist_ != &::google::protobuf::internal::kEmptyString) {
    delete skilltimelist_;
  }
  if (warningtimelist_ != &::google::protobuf::internal::kEmptyString) {
    delete warningtimelist_;
  }
  if (this != default_instance_) {
  }
}

void BOSSPROP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BOSSPROP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BOSSPROP_descriptor_;
}

const BOSSPROP& BOSSPROP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

BOSSPROP* BOSSPROP::default_instance_ = NULL;

BOSSPROP* BOSSPROP::New() const {
  return new BOSSPROP;
}

void BOSSPROP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_pointid()) {
      if (pointid_ != &::google::protobuf::internal::kEmptyString) {
        pointid_->clear();
      }
    }
    area_ = 0;
    occupation_ = 0;
    level_ = 0;
    health_ = 0;
    damage_ = 0;
    pdd_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mdd_ = 0;
    hitlevel_ = 0;
    dodgelevel_ = 0;
    crilevel_ = 0;
    tenacitylevel_ = 0;
    pddpierce_ = 0;
    if (has_passiveskillid()) {
      if (passiveskillid_ != &::google::protobuf::internal::kEmptyString) {
        passiveskillid_->clear();
      }
    }
    if (has_passiveskilllevel()) {
      if (passiveskilllevel_ != &::google::protobuf::internal::kEmptyString) {
        passiveskilllevel_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    range_x_ = 0;
    range_y_ = 0;
    range_z_ = 0;
    attackspeed_ = 0;
    h_dis_ = 0;
    v_dis_ = 0;
    movespeed_ = 0;
    star_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    stage_b_ = 0;
    if (has_hitnum_b()) {
      if (hitnum_b_ != &::google::protobuf::internal::kEmptyString) {
        hitnum_b_->clear();
      }
    }
    if (has_skilltimelist()) {
      if (skilltimelist_ != &::google::protobuf::internal::kEmptyString) {
        skilltimelist_->clear();
      }
    }
    if (has_warningtimelist()) {
      if (warningtimelist_ != &::google::protobuf::internal::kEmptyString) {
        warningtimelist_->clear();
      }
    }
    maxintensity_ = 0;
    recoverintensityrate_ = 0;
    minintensity_ = 0;
    type_normal_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BOSSPROP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pointId;
        break;
      }

      // required string pointId = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pointid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pointid().data(), this->pointid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area;
        break;
      }

      // required int32 area = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_occupation;
        break;
      }

      // required int32 occupation = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_health;
        break;
      }

      // required int32 health = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_damage;
        break;
      }

      // required int32 damage = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pdd;
        break;
      }

      // required int32 pdd = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pdd_)));
          set_has_pdd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mdd;
        break;
      }

      // required int32 mdd = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdd_)));
          set_has_mdd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hitLevel;
        break;
      }

      // required int32 hitLevel = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitlevel_)));
          set_has_hitlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_dodgeLevel;
        break;
      }

      // required int32 dodgeLevel = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodgeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodgelevel_)));
          set_has_dodgelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_criLevel;
        break;
      }

      // required int32 criLevel = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_criLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crilevel_)));
          set_has_crilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tenacityLevel;
        break;
      }

      // required int32 tenacityLevel = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacityLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tenacitylevel_)));
          set_has_tenacitylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_pddPierce;
        break;
      }

      // required int32 pddPierce = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pddPierce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pddpierce_)));
          set_has_pddpierce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_passiveSkillId;
        break;
      }

      // required string passiveSkillId = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passiveSkillId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passiveskillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passiveskillid().data(), this->passiveskillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_passiveSkillLevel;
        break;
      }

      // required string passiveSkillLevel = 16 [default = ""];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passiveSkillLevel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passiveskilllevel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passiveskilllevel().data(), this->passiveskilllevel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_range_X;
        break;
      }

      // required float range_X = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_x_)));
          set_has_range_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_range_Y;
        break;
      }

      // required float range_Y = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_y_)));
          set_has_range_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_range_Z;
        break;
      }

      // required float range_Z = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_z_)));
          set_has_range_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_attackSpeed;
        break;
      }

      // required float attackSpeed = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_attackSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackspeed_)));
          set_has_attackspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_h_Dis;
        break;
      }

      // required float h_Dis = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_h_Dis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_dis_)));
          set_has_h_dis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_v_Dis;
        break;
      }

      // required float v_Dis = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_Dis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_dis_)));
          set_has_v_dis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_moveSpeed;
        break;
      }

      // required float moveSpeed = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_star;
        break;
      }

      // required int32 star = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_stage_B;
        break;
      }

      // required int32 stage_B = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_b_)));
          set_has_stage_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_hitNum_B;
        break;
      }

      // required string hitNum_B = 26 [default = ""];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hitNum_B:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hitnum_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hitnum_b().data(), this->hitnum_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_skillTimeList;
        break;
      }

      // required string skillTimeList = 27 [default = ""];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillTimeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skilltimelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skilltimelist().data(), this->skilltimelist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_warningTimeList;
        break;
      }

      // required string warningTimeList = 28 [default = ""];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warningTimeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warningtimelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->warningtimelist().data(), this->warningtimelist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_maxIntensity;
        break;
      }

      // required int32 maxIntensity = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxIntensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxintensity_)));
          set_has_maxintensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_recoverIntensityRate;
        break;
      }

      // required int32 recoverIntensityRate = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recoverIntensityRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recoverintensityrate_)));
          set_has_recoverintensityrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_minIntensity;
        break;
      }

      // required int32 minIntensity = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minIntensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minintensity_)));
          set_has_minintensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_type_Normal;
        break;
      }

      // required int32 type_Normal = 32 [default = 0];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_Normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_normal_)));
          set_has_type_normal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BOSSPROP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string pointId = 2 [default = ""];
  if (has_pointid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pointid().data(), this->pointid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pointid(), output);
  }

  // required int32 area = 3 [default = 0];
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->area(), output);
  }

  // required int32 occupation = 4 [default = 0];
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->occupation(), output);
  }

  // required int32 level = 5 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // required int32 health = 6 [default = 0];
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->health(), output);
  }

  // required int32 damage = 7 [default = 0];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->damage(), output);
  }

  // required int32 pdd = 8 [default = 0];
  if (has_pdd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pdd(), output);
  }

  // required int32 mdd = 9 [default = 0];
  if (has_mdd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mdd(), output);
  }

  // required int32 hitLevel = 10 [default = 0];
  if (has_hitlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hitlevel(), output);
  }

  // required int32 dodgeLevel = 11 [default = 0];
  if (has_dodgelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dodgelevel(), output);
  }

  // required int32 criLevel = 12 [default = 0];
  if (has_crilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->crilevel(), output);
  }

  // required int32 tenacityLevel = 13 [default = 0];
  if (has_tenacitylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tenacitylevel(), output);
  }

  // required int32 pddPierce = 14 [default = 0];
  if (has_pddpierce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pddpierce(), output);
  }

  // required string passiveSkillId = 15 [default = ""];
  if (has_passiveskillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskillid().data(), this->passiveskillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->passiveskillid(), output);
  }

  // required string passiveSkillLevel = 16 [default = ""];
  if (has_passiveskilllevel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskilllevel().data(), this->passiveskilllevel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->passiveskilllevel(), output);
  }

  // required float range_X = 17 [default = 0];
  if (has_range_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->range_x(), output);
  }

  // required float range_Y = 18 [default = 0];
  if (has_range_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->range_y(), output);
  }

  // required float range_Z = 19 [default = 0];
  if (has_range_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->range_z(), output);
  }

  // required float attackSpeed = 20 [default = 0];
  if (has_attackspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->attackspeed(), output);
  }

  // required float h_Dis = 21 [default = 0];
  if (has_h_dis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->h_dis(), output);
  }

  // required float v_Dis = 22 [default = 0];
  if (has_v_dis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->v_dis(), output);
  }

  // required float moveSpeed = 23 [default = 0];
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->movespeed(), output);
  }

  // required int32 star = 24 [default = 0];
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->star(), output);
  }

  // required int32 stage_B = 25 [default = 0];
  if (has_stage_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->stage_b(), output);
  }

  // required string hitNum_B = 26 [default = ""];
  if (has_hitnum_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitnum_b().data(), this->hitnum_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->hitnum_b(), output);
  }

  // required string skillTimeList = 27 [default = ""];
  if (has_skilltimelist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skilltimelist().data(), this->skilltimelist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->skilltimelist(), output);
  }

  // required string warningTimeList = 28 [default = ""];
  if (has_warningtimelist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->warningtimelist().data(), this->warningtimelist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->warningtimelist(), output);
  }

  // required int32 maxIntensity = 29 [default = 0];
  if (has_maxintensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->maxintensity(), output);
  }

  // required int32 recoverIntensityRate = 30 [default = 0];
  if (has_recoverintensityrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->recoverintensityrate(), output);
  }

  // required int32 minIntensity = 31 [default = 0];
  if (has_minintensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->minintensity(), output);
  }

  // required int32 type_Normal = 32 [default = 0];
  if (has_type_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->type_normal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BOSSPROP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string pointId = 2 [default = ""];
  if (has_pointid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pointid().data(), this->pointid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pointid(), target);
  }

  // required int32 area = 3 [default = 0];
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->area(), target);
  }

  // required int32 occupation = 4 [default = 0];
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->occupation(), target);
  }

  // required int32 level = 5 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // required int32 health = 6 [default = 0];
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->health(), target);
  }

  // required int32 damage = 7 [default = 0];
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->damage(), target);
  }

  // required int32 pdd = 8 [default = 0];
  if (has_pdd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pdd(), target);
  }

  // required int32 mdd = 9 [default = 0];
  if (has_mdd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mdd(), target);
  }

  // required int32 hitLevel = 10 [default = 0];
  if (has_hitlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hitlevel(), target);
  }

  // required int32 dodgeLevel = 11 [default = 0];
  if (has_dodgelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dodgelevel(), target);
  }

  // required int32 criLevel = 12 [default = 0];
  if (has_crilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->crilevel(), target);
  }

  // required int32 tenacityLevel = 13 [default = 0];
  if (has_tenacitylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tenacitylevel(), target);
  }

  // required int32 pddPierce = 14 [default = 0];
  if (has_pddpierce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pddpierce(), target);
  }

  // required string passiveSkillId = 15 [default = ""];
  if (has_passiveskillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskillid().data(), this->passiveskillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->passiveskillid(), target);
  }

  // required string passiveSkillLevel = 16 [default = ""];
  if (has_passiveskilllevel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskilllevel().data(), this->passiveskilllevel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->passiveskilllevel(), target);
  }

  // required float range_X = 17 [default = 0];
  if (has_range_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->range_x(), target);
  }

  // required float range_Y = 18 [default = 0];
  if (has_range_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->range_y(), target);
  }

  // required float range_Z = 19 [default = 0];
  if (has_range_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->range_z(), target);
  }

  // required float attackSpeed = 20 [default = 0];
  if (has_attackspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->attackspeed(), target);
  }

  // required float h_Dis = 21 [default = 0];
  if (has_h_dis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->h_dis(), target);
  }

  // required float v_Dis = 22 [default = 0];
  if (has_v_dis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->v_dis(), target);
  }

  // required float moveSpeed = 23 [default = 0];
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->movespeed(), target);
  }

  // required int32 star = 24 [default = 0];
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->star(), target);
  }

  // required int32 stage_B = 25 [default = 0];
  if (has_stage_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->stage_b(), target);
  }

  // required string hitNum_B = 26 [default = ""];
  if (has_hitnum_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitnum_b().data(), this->hitnum_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->hitnum_b(), target);
  }

  // required string skillTimeList = 27 [default = ""];
  if (has_skilltimelist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skilltimelist().data(), this->skilltimelist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->skilltimelist(), target);
  }

  // required string warningTimeList = 28 [default = ""];
  if (has_warningtimelist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->warningtimelist().data(), this->warningtimelist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->warningtimelist(), target);
  }

  // required int32 maxIntensity = 29 [default = 0];
  if (has_maxintensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->maxintensity(), target);
  }

  // required int32 recoverIntensityRate = 30 [default = 0];
  if (has_recoverintensityrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->recoverintensityrate(), target);
  }

  // required int32 minIntensity = 31 [default = 0];
  if (has_minintensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->minintensity(), target);
  }

  // required int32 type_Normal = 32 [default = 0];
  if (has_type_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->type_normal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BOSSPROP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string pointId = 2 [default = ""];
    if (has_pointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pointid());
    }

    // required int32 area = 3 [default = 0];
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area());
    }

    // required int32 occupation = 4 [default = 0];
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupation());
    }

    // required int32 level = 5 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 health = 6 [default = 0];
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // required int32 damage = 7 [default = 0];
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // required int32 pdd = 8 [default = 0];
    if (has_pdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pdd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 mdd = 9 [default = 0];
    if (has_mdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mdd());
    }

    // required int32 hitLevel = 10 [default = 0];
    if (has_hitlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitlevel());
    }

    // required int32 dodgeLevel = 11 [default = 0];
    if (has_dodgelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodgelevel());
    }

    // required int32 criLevel = 12 [default = 0];
    if (has_crilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crilevel());
    }

    // required int32 tenacityLevel = 13 [default = 0];
    if (has_tenacitylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tenacitylevel());
    }

    // required int32 pddPierce = 14 [default = 0];
    if (has_pddpierce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pddpierce());
    }

    // required string passiveSkillId = 15 [default = ""];
    if (has_passiveskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passiveskillid());
    }

    // required string passiveSkillLevel = 16 [default = ""];
    if (has_passiveskilllevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passiveskilllevel());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required float range_X = 17 [default = 0];
    if (has_range_x()) {
      total_size += 2 + 4;
    }

    // required float range_Y = 18 [default = 0];
    if (has_range_y()) {
      total_size += 2 + 4;
    }

    // required float range_Z = 19 [default = 0];
    if (has_range_z()) {
      total_size += 2 + 4;
    }

    // required float attackSpeed = 20 [default = 0];
    if (has_attackspeed()) {
      total_size += 2 + 4;
    }

    // required float h_Dis = 21 [default = 0];
    if (has_h_dis()) {
      total_size += 2 + 4;
    }

    // required float v_Dis = 22 [default = 0];
    if (has_v_dis()) {
      total_size += 2 + 4;
    }

    // required float moveSpeed = 23 [default = 0];
    if (has_movespeed()) {
      total_size += 2 + 4;
    }

    // required int32 star = 24 [default = 0];
    if (has_star()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 stage_B = 25 [default = 0];
    if (has_stage_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_b());
    }

    // required string hitNum_B = 26 [default = ""];
    if (has_hitnum_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hitnum_b());
    }

    // required string skillTimeList = 27 [default = ""];
    if (has_skilltimelist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skilltimelist());
    }

    // required string warningTimeList = 28 [default = ""];
    if (has_warningtimelist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warningtimelist());
    }

    // required int32 maxIntensity = 29 [default = 0];
    if (has_maxintensity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxintensity());
    }

    // required int32 recoverIntensityRate = 30 [default = 0];
    if (has_recoverintensityrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recoverintensityrate());
    }

    // required int32 minIntensity = 31 [default = 0];
    if (has_minintensity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minintensity());
    }

    // required int32 type_Normal = 32 [default = 0];
    if (has_type_normal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_normal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BOSSPROP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BOSSPROP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BOSSPROP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BOSSPROP::MergeFrom(const BOSSPROP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pointid()) {
      set_pointid(from.pointid());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_pdd()) {
      set_pdd(from.pdd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mdd()) {
      set_mdd(from.mdd());
    }
    if (from.has_hitlevel()) {
      set_hitlevel(from.hitlevel());
    }
    if (from.has_dodgelevel()) {
      set_dodgelevel(from.dodgelevel());
    }
    if (from.has_crilevel()) {
      set_crilevel(from.crilevel());
    }
    if (from.has_tenacitylevel()) {
      set_tenacitylevel(from.tenacitylevel());
    }
    if (from.has_pddpierce()) {
      set_pddpierce(from.pddpierce());
    }
    if (from.has_passiveskillid()) {
      set_passiveskillid(from.passiveskillid());
    }
    if (from.has_passiveskilllevel()) {
      set_passiveskilllevel(from.passiveskilllevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_range_x()) {
      set_range_x(from.range_x());
    }
    if (from.has_range_y()) {
      set_range_y(from.range_y());
    }
    if (from.has_range_z()) {
      set_range_z(from.range_z());
    }
    if (from.has_attackspeed()) {
      set_attackspeed(from.attackspeed());
    }
    if (from.has_h_dis()) {
      set_h_dis(from.h_dis());
    }
    if (from.has_v_dis()) {
      set_v_dis(from.v_dis());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_stage_b()) {
      set_stage_b(from.stage_b());
    }
    if (from.has_hitnum_b()) {
      set_hitnum_b(from.hitnum_b());
    }
    if (from.has_skilltimelist()) {
      set_skilltimelist(from.skilltimelist());
    }
    if (from.has_warningtimelist()) {
      set_warningtimelist(from.warningtimelist());
    }
    if (from.has_maxintensity()) {
      set_maxintensity(from.maxintensity());
    }
    if (from.has_recoverintensityrate()) {
      set_recoverintensityrate(from.recoverintensityrate());
    }
    if (from.has_minintensity()) {
      set_minintensity(from.minintensity());
    }
    if (from.has_type_normal()) {
      set_type_normal(from.type_normal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BOSSPROP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BOSSPROP::CopyFrom(const BOSSPROP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BOSSPROP::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;

  return true;
}

void BOSSPROP::Swap(BOSSPROP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pointid_, other->pointid_);
    std::swap(area_, other->area_);
    std::swap(occupation_, other->occupation_);
    std::swap(level_, other->level_);
    std::swap(health_, other->health_);
    std::swap(damage_, other->damage_);
    std::swap(pdd_, other->pdd_);
    std::swap(mdd_, other->mdd_);
    std::swap(hitlevel_, other->hitlevel_);
    std::swap(dodgelevel_, other->dodgelevel_);
    std::swap(crilevel_, other->crilevel_);
    std::swap(tenacitylevel_, other->tenacitylevel_);
    std::swap(pddpierce_, other->pddpierce_);
    std::swap(passiveskillid_, other->passiveskillid_);
    std::swap(passiveskilllevel_, other->passiveskilllevel_);
    std::swap(range_x_, other->range_x_);
    std::swap(range_y_, other->range_y_);
    std::swap(range_z_, other->range_z_);
    std::swap(attackspeed_, other->attackspeed_);
    std::swap(h_dis_, other->h_dis_);
    std::swap(v_dis_, other->v_dis_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(star_, other->star_);
    std::swap(stage_b_, other->stage_b_);
    std::swap(hitnum_b_, other->hitnum_b_);
    std::swap(skilltimelist_, other->skilltimelist_);
    std::swap(warningtimelist_, other->warningtimelist_);
    std::swap(maxintensity_, other->maxintensity_);
    std::swap(recoverintensityrate_, other->recoverintensityrate_);
    std::swap(minintensity_, other->minintensity_);
    std::swap(type_normal_, other->type_normal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BOSSPROP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BOSSPROP_descriptor_;
  metadata.reflection = BOSSPROP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BOSSPROP_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

BOSSPROP_ARRAY::BOSSPROP_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BOSSPROP_ARRAY::InitAsDefaultInstance() {
}

BOSSPROP_ARRAY::BOSSPROP_ARRAY(const BOSSPROP_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BOSSPROP_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BOSSPROP_ARRAY::~BOSSPROP_ARRAY() {
  SharedDtor();
}

void BOSSPROP_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BOSSPROP_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BOSSPROP_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BOSSPROP_ARRAY_descriptor_;
}

const BOSSPROP_ARRAY& BOSSPROP_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

BOSSPROP_ARRAY* BOSSPROP_ARRAY::default_instance_ = NULL;

BOSSPROP_ARRAY* BOSSPROP_ARRAY::New() const {
  return new BOSSPROP_ARRAY;
}

void BOSSPROP_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BOSSPROP_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BOSSPROP items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BOSSPROP_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BOSSPROP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BOSSPROP_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BOSSPROP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BOSSPROP_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .BOSSPROP items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BOSSPROP_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BOSSPROP_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BOSSPROP_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BOSSPROP_ARRAY::MergeFrom(const BOSSPROP_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BOSSPROP_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BOSSPROP_ARRAY::CopyFrom(const BOSSPROP_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BOSSPROP_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void BOSSPROP_ARRAY::Swap(BOSSPROP_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BOSSPROP_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BOSSPROP_ARRAY_descriptor_;
  metadata.reflection = BOSSPROP_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BOSSSKILL::kIdFieldNumber;
const int BOSSSKILL::kFactorFieldNumber;
const int BOSSSKILL::kDistanceFieldNumber;
const int BOSSSKILL::kHeightFieldNumber;
const int BOSSSKILL::kRangeXFieldNumber;
const int BOSSSKILL::kRangeYFieldNumber;
const int BOSSSKILL::kRangeZFieldNumber;
const int BOSSSKILL::kWaitTimeFieldNumber;
#endif  // !_MSC_VER

BOSSSKILL::BOSSSKILL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BOSSSKILL::InitAsDefaultInstance() {
}

BOSSSKILL::BOSSSKILL(const BOSSSKILL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BOSSSKILL::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factor_ = 0;
  distance_ = 0;
  height_ = 0;
  range_x_ = 0;
  range_y_ = 0;
  range_z_ = 0;
  waittime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BOSSSKILL::~BOSSSKILL() {
  SharedDtor();
}

void BOSSSKILL::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BOSSSKILL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BOSSSKILL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BOSSSKILL_descriptor_;
}

const BOSSSKILL& BOSSSKILL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

BOSSSKILL* BOSSSKILL::default_instance_ = NULL;

BOSSSKILL* BOSSSKILL::New() const {
  return new BOSSSKILL;
}

void BOSSSKILL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    factor_ = 0;
    distance_ = 0;
    height_ = 0;
    range_x_ = 0;
    range_y_ = 0;
    range_z_ = 0;
    waittime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BOSSSKILL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_factor;
        break;
      }

      // required float factor = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_distance;
        break;
      }

      // required float distance = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }

      // required float height = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_range_x;
        break;
      }

      // required float range_x = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_x_)));
          set_has_range_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_range_y;
        break;
      }

      // required float range_y = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_y_)));
          set_has_range_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_range_z;
        break;
      }

      // required float range_z = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_z_)));
          set_has_range_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_waitTime;
        break;
      }

      // required float waitTime = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_waitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waittime_)));
          set_has_waittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BOSSSKILL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required float factor = 2 [default = 0];
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->factor(), output);
  }

  // required float distance = 3 [default = 0];
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->distance(), output);
  }

  // required float height = 4 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  // required float range_x = 5 [default = 0];
  if (has_range_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->range_x(), output);
  }

  // required float range_y = 6 [default = 0];
  if (has_range_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->range_y(), output);
  }

  // required float range_z = 7 [default = 0];
  if (has_range_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->range_z(), output);
  }

  // required float waitTime = 8 [default = 0];
  if (has_waittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->waittime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BOSSSKILL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required float factor = 2 [default = 0];
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->factor(), target);
  }

  // required float distance = 3 [default = 0];
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->distance(), target);
  }

  // required float height = 4 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  // required float range_x = 5 [default = 0];
  if (has_range_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->range_x(), target);
  }

  // required float range_y = 6 [default = 0];
  if (has_range_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->range_y(), target);
  }

  // required float range_z = 7 [default = 0];
  if (has_range_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->range_z(), target);
  }

  // required float waitTime = 8 [default = 0];
  if (has_waittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->waittime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BOSSSKILL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required float factor = 2 [default = 0];
    if (has_factor()) {
      total_size += 1 + 4;
    }

    // required float distance = 3 [default = 0];
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // required float height = 4 [default = 0];
    if (has_height()) {
      total_size += 1 + 4;
    }

    // required float range_x = 5 [default = 0];
    if (has_range_x()) {
      total_size += 1 + 4;
    }

    // required float range_y = 6 [default = 0];
    if (has_range_y()) {
      total_size += 1 + 4;
    }

    // required float range_z = 7 [default = 0];
    if (has_range_z()) {
      total_size += 1 + 4;
    }

    // required float waitTime = 8 [default = 0];
    if (has_waittime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BOSSSKILL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BOSSSKILL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BOSSSKILL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BOSSSKILL::MergeFrom(const BOSSSKILL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_range_x()) {
      set_range_x(from.range_x());
    }
    if (from.has_range_y()) {
      set_range_y(from.range_y());
    }
    if (from.has_range_z()) {
      set_range_z(from.range_z());
    }
    if (from.has_waittime()) {
      set_waittime(from.waittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BOSSSKILL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BOSSSKILL::CopyFrom(const BOSSSKILL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BOSSSKILL::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void BOSSSKILL::Swap(BOSSSKILL* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(factor_, other->factor_);
    std::swap(distance_, other->distance_);
    std::swap(height_, other->height_);
    std::swap(range_x_, other->range_x_);
    std::swap(range_y_, other->range_y_);
    std::swap(range_z_, other->range_z_);
    std::swap(waittime_, other->waittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BOSSSKILL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BOSSSKILL_descriptor_;
  metadata.reflection = BOSSSKILL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BOSSSKILL_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

BOSSSKILL_ARRAY::BOSSSKILL_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BOSSSKILL_ARRAY::InitAsDefaultInstance() {
}

BOSSSKILL_ARRAY::BOSSSKILL_ARRAY(const BOSSSKILL_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BOSSSKILL_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BOSSSKILL_ARRAY::~BOSSSKILL_ARRAY() {
  SharedDtor();
}

void BOSSSKILL_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BOSSSKILL_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BOSSSKILL_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BOSSSKILL_ARRAY_descriptor_;
}

const BOSSSKILL_ARRAY& BOSSSKILL_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

BOSSSKILL_ARRAY* BOSSSKILL_ARRAY::default_instance_ = NULL;

BOSSSKILL_ARRAY* BOSSSKILL_ARRAY::New() const {
  return new BOSSSKILL_ARRAY;
}

void BOSSSKILL_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BOSSSKILL_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BOSSSKILL items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BOSSSKILL_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BOSSSKILL items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BOSSSKILL_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BOSSSKILL items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BOSSSKILL_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .BOSSSKILL items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BOSSSKILL_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BOSSSKILL_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BOSSSKILL_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BOSSSKILL_ARRAY::MergeFrom(const BOSSSKILL_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BOSSSKILL_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BOSSSKILL_ARRAY::CopyFrom(const BOSSSKILL_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BOSSSKILL_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void BOSSSKILL_ARRAY::Swap(BOSSSKILL_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BOSSSKILL_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BOSSSKILL_ARRAY_descriptor_;
  metadata.reflection = BOSSSKILL_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BUFF::kIdFieldNumber;
const int BUFF::kTypeFieldNumber;
const int BUFF::kDurationFieldNumber;
const int BUFF::kDurationGrowFieldNumber;
const int BUFF::kIntervalFieldNumber;
const int BUFF::kValueFieldNumber;
const int BUFF::kValueGrowFieldNumber;
const int BUFF::kUseTypeFieldNumber;
const int BUFF::kLifeLineFieldNumber;
const int BUFF::kBuffTypeFieldNumber;
const int BUFF::kMaxLimitCountFieldNumber;
#endif  // !_MSC_VER

BUFF::BUFF()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BUFF::InitAsDefaultInstance() {
}

BUFF::BUFF(const BUFF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BUFF::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  duration_ = 0;
  durationgrow_ = 0;
  interval_ = 0;
  value_ = 0;
  valuegrow_ = 0;
  usetype_ = 0;
  lifeline_ = 0;
  bufftype_ = 0;
  maxlimitcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BUFF::~BUFF() {
  SharedDtor();
}

void BUFF::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void BUFF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BUFF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BUFF_descriptor_;
}

const BUFF& BUFF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

BUFF* BUFF::default_instance_ = NULL;

BUFF* BUFF::New() const {
  return new BUFF;
}

void BUFF::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    type_ = 0;
    duration_ = 0;
    durationgrow_ = 0;
    interval_ = 0;
    value_ = 0;
    valuegrow_ = 0;
    usetype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lifeline_ = 0;
    bufftype_ = 0;
    maxlimitcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BUFF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_duration;
        break;
      }

      // required float duration = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_durationGrow;
        break;
      }

      // required float durationGrow = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_durationGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &durationgrow_)));
          set_has_durationgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_interval;
        break;
      }

      // required float interval = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_value;
        break;
      }

      // required int32 value = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_valueGrow;
        break;
      }

      // required int32 valueGrow = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuegrow_)));
          set_has_valuegrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_useType;
        break;
      }

      // required int32 useType = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usetype_)));
          set_has_usetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lifeLine;
        break;
      }

      // required int32 lifeLine = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lifeLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lifeline_)));
          set_has_lifeline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_buffType;
        break;
      }

      // required int32 buffType = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufftype_)));
          set_has_bufftype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_maxLimitCount;
        break;
      }

      // required int32 maxLimitCount = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxLimitCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlimitcount_)));
          set_has_maxlimitcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BUFF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 type = 2 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required float duration = 3 [default = 0];
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->duration(), output);
  }

  // required float durationGrow = 4 [default = 0];
  if (has_durationgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->durationgrow(), output);
  }

  // required float interval = 5 [default = 0];
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->interval(), output);
  }

  // required int32 value = 6 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->value(), output);
  }

  // required int32 valueGrow = 7 [default = 0];
  if (has_valuegrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->valuegrow(), output);
  }

  // required int32 useType = 8 [default = 0];
  if (has_usetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->usetype(), output);
  }

  // required int32 lifeLine = 9 [default = 0];
  if (has_lifeline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lifeline(), output);
  }

  // required int32 buffType = 10 [default = 0];
  if (has_bufftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bufftype(), output);
  }

  // required int32 maxLimitCount = 11 [default = 0];
  if (has_maxlimitcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->maxlimitcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BUFF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 type = 2 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required float duration = 3 [default = 0];
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->duration(), target);
  }

  // required float durationGrow = 4 [default = 0];
  if (has_durationgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->durationgrow(), target);
  }

  // required float interval = 5 [default = 0];
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->interval(), target);
  }

  // required int32 value = 6 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->value(), target);
  }

  // required int32 valueGrow = 7 [default = 0];
  if (has_valuegrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->valuegrow(), target);
  }

  // required int32 useType = 8 [default = 0];
  if (has_usetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->usetype(), target);
  }

  // required int32 lifeLine = 9 [default = 0];
  if (has_lifeline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lifeline(), target);
  }

  // required int32 buffType = 10 [default = 0];
  if (has_bufftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bufftype(), target);
  }

  // required int32 maxLimitCount = 11 [default = 0];
  if (has_maxlimitcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->maxlimitcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BUFF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 type = 2 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required float duration = 3 [default = 0];
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // required float durationGrow = 4 [default = 0];
    if (has_durationgrow()) {
      total_size += 1 + 4;
    }

    // required float interval = 5 [default = 0];
    if (has_interval()) {
      total_size += 1 + 4;
    }

    // required int32 value = 6 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // required int32 valueGrow = 7 [default = 0];
    if (has_valuegrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuegrow());
    }

    // required int32 useType = 8 [default = 0];
    if (has_usetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 lifeLine = 9 [default = 0];
    if (has_lifeline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lifeline());
    }

    // required int32 buffType = 10 [default = 0];
    if (has_bufftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bufftype());
    }

    // required int32 maxLimitCount = 11 [default = 0];
    if (has_maxlimitcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlimitcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BUFF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BUFF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BUFF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BUFF::MergeFrom(const BUFF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_durationgrow()) {
      set_durationgrow(from.durationgrow());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_valuegrow()) {
      set_valuegrow(from.valuegrow());
    }
    if (from.has_usetype()) {
      set_usetype(from.usetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lifeline()) {
      set_lifeline(from.lifeline());
    }
    if (from.has_bufftype()) {
      set_bufftype(from.bufftype());
    }
    if (from.has_maxlimitcount()) {
      set_maxlimitcount(from.maxlimitcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BUFF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BUFF::CopyFrom(const BUFF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BUFF::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void BUFF::Swap(BUFF* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(duration_, other->duration_);
    std::swap(durationgrow_, other->durationgrow_);
    std::swap(interval_, other->interval_);
    std::swap(value_, other->value_);
    std::swap(valuegrow_, other->valuegrow_);
    std::swap(usetype_, other->usetype_);
    std::swap(lifeline_, other->lifeline_);
    std::swap(bufftype_, other->bufftype_);
    std::swap(maxlimitcount_, other->maxlimitcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BUFF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BUFF_descriptor_;
  metadata.reflection = BUFF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BUFF_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

BUFF_ARRAY::BUFF_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BUFF_ARRAY::InitAsDefaultInstance() {
}

BUFF_ARRAY::BUFF_ARRAY(const BUFF_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BUFF_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BUFF_ARRAY::~BUFF_ARRAY() {
  SharedDtor();
}

void BUFF_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BUFF_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BUFF_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BUFF_ARRAY_descriptor_;
}

const BUFF_ARRAY& BUFF_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

BUFF_ARRAY* BUFF_ARRAY::default_instance_ = NULL;

BUFF_ARRAY* BUFF_ARRAY::New() const {
  return new BUFF_ARRAY;
}

void BUFF_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BUFF_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BUFF items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BUFF_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BUFF items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BUFF_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BUFF items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BUFF_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .BUFF items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BUFF_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BUFF_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BUFF_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BUFF_ARRAY::MergeFrom(const BUFF_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BUFF_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BUFF_ARRAY::CopyFrom(const BUFF_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BUFF_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void BUFF_ARRAY::Swap(BUFF_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BUFF_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BUFF_ARRAY_descriptor_;
  metadata.reflection = BUFF_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CHAPTERMAP::kIdFieldNumber;
const int CHAPTERMAP::kCapterTypeFieldNumber;
const int CHAPTERMAP::kPointTypeFieldNumber;
const int CHAPTERMAP::kOpenLevelFieldNumber;
#endif  // !_MSC_VER

CHAPTERMAP::CHAPTERMAP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHAPTERMAP::InitAsDefaultInstance() {
}

CHAPTERMAP::CHAPTERMAP(const CHAPTERMAP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHAPTERMAP::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  captertype_ = 0;
  pointtype_ = 0;
  openlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHAPTERMAP::~CHAPTERMAP() {
  SharedDtor();
}

void CHAPTERMAP::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void CHAPTERMAP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHAPTERMAP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHAPTERMAP_descriptor_;
}

const CHAPTERMAP& CHAPTERMAP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

CHAPTERMAP* CHAPTERMAP::default_instance_ = NULL;

CHAPTERMAP* CHAPTERMAP::New() const {
  return new CHAPTERMAP;
}

void CHAPTERMAP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    captertype_ = 0;
    pointtype_ = 0;
    openlevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHAPTERMAP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_capterType;
        break;
      }

      // required int32 capterType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &captertype_)));
          set_has_captertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pointType;
        break;
      }

      // required int32 pointType = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointtype_)));
          set_has_pointtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_openLevel;
        break;
      }

      // required int32 openLevel = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openlevel_)));
          set_has_openlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHAPTERMAP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 capterType = 2 [default = 0];
  if (has_captertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->captertype(), output);
  }

  // required int32 pointType = 3 [default = 0];
  if (has_pointtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pointtype(), output);
  }

  // required int32 openLevel = 4 [default = 0];
  if (has_openlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->openlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHAPTERMAP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 capterType = 2 [default = 0];
  if (has_captertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->captertype(), target);
  }

  // required int32 pointType = 3 [default = 0];
  if (has_pointtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pointtype(), target);
  }

  // required int32 openLevel = 4 [default = 0];
  if (has_openlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->openlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHAPTERMAP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 capterType = 2 [default = 0];
    if (has_captertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->captertype());
    }

    // required int32 pointType = 3 [default = 0];
    if (has_pointtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointtype());
    }

    // required int32 openLevel = 4 [default = 0];
    if (has_openlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHAPTERMAP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHAPTERMAP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHAPTERMAP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHAPTERMAP::MergeFrom(const CHAPTERMAP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_captertype()) {
      set_captertype(from.captertype());
    }
    if (from.has_pointtype()) {
      set_pointtype(from.pointtype());
    }
    if (from.has_openlevel()) {
      set_openlevel(from.openlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHAPTERMAP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHAPTERMAP::CopyFrom(const CHAPTERMAP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHAPTERMAP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CHAPTERMAP::Swap(CHAPTERMAP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(captertype_, other->captertype_);
    std::swap(pointtype_, other->pointtype_);
    std::swap(openlevel_, other->openlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHAPTERMAP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHAPTERMAP_descriptor_;
  metadata.reflection = CHAPTERMAP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CHAPTERMAP_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

CHAPTERMAP_ARRAY::CHAPTERMAP_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CHAPTERMAP_ARRAY::InitAsDefaultInstance() {
}

CHAPTERMAP_ARRAY::CHAPTERMAP_ARRAY(const CHAPTERMAP_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CHAPTERMAP_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CHAPTERMAP_ARRAY::~CHAPTERMAP_ARRAY() {
  SharedDtor();
}

void CHAPTERMAP_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CHAPTERMAP_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHAPTERMAP_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHAPTERMAP_ARRAY_descriptor_;
}

const CHAPTERMAP_ARRAY& CHAPTERMAP_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

CHAPTERMAP_ARRAY* CHAPTERMAP_ARRAY::default_instance_ = NULL;

CHAPTERMAP_ARRAY* CHAPTERMAP_ARRAY::New() const {
  return new CHAPTERMAP_ARRAY;
}

void CHAPTERMAP_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CHAPTERMAP_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CHAPTERMAP items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CHAPTERMAP_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CHAPTERMAP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CHAPTERMAP_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CHAPTERMAP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CHAPTERMAP_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .CHAPTERMAP items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHAPTERMAP_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CHAPTERMAP_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CHAPTERMAP_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CHAPTERMAP_ARRAY::MergeFrom(const CHAPTERMAP_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CHAPTERMAP_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHAPTERMAP_ARRAY::CopyFrom(const CHAPTERMAP_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHAPTERMAP_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void CHAPTERMAP_ARRAY::Swap(CHAPTERMAP_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CHAPTERMAP_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CHAPTERMAP_ARRAY_descriptor_;
  metadata.reflection = CHAPTERMAP_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int COINPRICE::kIdFieldNumber;
const int COINPRICE::kNeedGemsFieldNumber;
#endif  // !_MSC_VER

COINPRICE::COINPRICE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void COINPRICE::InitAsDefaultInstance() {
}

COINPRICE::COINPRICE(const COINPRICE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void COINPRICE::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needgems_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COINPRICE::~COINPRICE() {
  SharedDtor();
}

void COINPRICE::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void COINPRICE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COINPRICE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COINPRICE_descriptor_;
}

const COINPRICE& COINPRICE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

COINPRICE* COINPRICE::default_instance_ = NULL;

COINPRICE* COINPRICE::New() const {
  return new COINPRICE;
}

void COINPRICE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    needgems_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool COINPRICE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needGems;
        break;
      }

      // required int32 needGems = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needgems_)));
          set_has_needgems();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void COINPRICE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 needGems = 2 [default = 0];
  if (has_needgems()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->needgems(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* COINPRICE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 needGems = 2 [default = 0];
  if (has_needgems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->needgems(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int COINPRICE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 needGems = 2 [default = 0];
    if (has_needgems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needgems());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COINPRICE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const COINPRICE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const COINPRICE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void COINPRICE::MergeFrom(const COINPRICE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_needgems()) {
      set_needgems(from.needgems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void COINPRICE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COINPRICE::CopyFrom(const COINPRICE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COINPRICE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void COINPRICE::Swap(COINPRICE* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(needgems_, other->needgems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata COINPRICE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = COINPRICE_descriptor_;
  metadata.reflection = COINPRICE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int COINPRICE_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

COINPRICE_ARRAY::COINPRICE_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void COINPRICE_ARRAY::InitAsDefaultInstance() {
}

COINPRICE_ARRAY::COINPRICE_ARRAY(const COINPRICE_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void COINPRICE_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

COINPRICE_ARRAY::~COINPRICE_ARRAY() {
  SharedDtor();
}

void COINPRICE_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void COINPRICE_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COINPRICE_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COINPRICE_ARRAY_descriptor_;
}

const COINPRICE_ARRAY& COINPRICE_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

COINPRICE_ARRAY* COINPRICE_ARRAY::default_instance_ = NULL;

COINPRICE_ARRAY* COINPRICE_ARRAY::New() const {
  return new COINPRICE_ARRAY;
}

void COINPRICE_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool COINPRICE_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .COINPRICE items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void COINPRICE_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .COINPRICE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* COINPRICE_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .COINPRICE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int COINPRICE_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .COINPRICE items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COINPRICE_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const COINPRICE_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const COINPRICE_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void COINPRICE_ARRAY::MergeFrom(const COINPRICE_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void COINPRICE_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COINPRICE_ARRAY::CopyFrom(const COINPRICE_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COINPRICE_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void COINPRICE_ARRAY::Swap(COINPRICE_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata COINPRICE_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = COINPRICE_ARRAY_descriptor_;
  metadata.reflection = COINPRICE_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EQUIP::kIdFieldNumber;
const int EQUIP::kPosFieldNumber;
const int EQUIP::kNameChFieldNumber;
const int EQUIP::kNameEnFieldNumber;
const int EQUIP::kQualityFieldNumber;
const int EQUIP::kHealthFieldNumber;
const int EQUIP::kHealthGrowFieldNumber;
const int EQUIP::kDamageFieldNumber;
const int EQUIP::kDamageGrowFieldNumber;
const int EQUIP::kPddFieldNumber;
const int EQUIP::kPddGrowFieldNumber;
const int EQUIP::kMddFieldNumber;
const int EQUIP::kMddGrowFieldNumber;
const int EQUIP::kHitLevelFieldNumber;
const int EQUIP::kHitGrowFieldNumber;
const int EQUIP::kDodgeLevelFieldNumber;
const int EQUIP::kDodgeGrowFieldNumber;
const int EQUIP::kCriLevelFieldNumber;
const int EQUIP::kCriGrowFieldNumber;
const int EQUIP::kTenacityLevelFieldNumber;
const int EQUIP::kTenacityGrowFieldNumber;
const int EQUIP::kPddPierceFieldNumber;
const int EQUIP::kPddPierceGrowFieldNumber;
const int EQUIP::kNeedsFieldNumber;
const int EQUIP::kNeedCountsFieldNumber;
const int EQUIP::kNextIdFieldNumber;
const int EQUIP::kIconFieldNumber;
#endif  // !_MSC_VER

EQUIP::EQUIP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EQUIP::InitAsDefaultInstance() {
}

EQUIP::EQUIP(const EQUIP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EQUIP::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = 0;
  name_ch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_en_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  health_ = 0;
  healthgrow_ = 0;
  damage_ = 0;
  damagegrow_ = 0;
  pdd_ = 0;
  pddgrow_ = 0;
  mdd_ = 0;
  mddgrow_ = 0;
  hitlevel_ = 0;
  hitgrow_ = 0;
  dodgelevel_ = 0;
  dodgegrow_ = 0;
  crilevel_ = 0;
  crigrow_ = 0;
  tenacitylevel_ = 0;
  tenacitygrow_ = 0;
  pddpierce_ = 0;
  pddpiercegrow_ = 0;
  needs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needcounts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nextid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EQUIP::~EQUIP() {
  SharedDtor();
}

void EQUIP::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ch_ != &::google::protobuf::internal::kEmptyString) {
    delete name_ch_;
  }
  if (name_en_ != &::google::protobuf::internal::kEmptyString) {
    delete name_en_;
  }
  if (needs_ != &::google::protobuf::internal::kEmptyString) {
    delete needs_;
  }
  if (needcounts_ != &::google::protobuf::internal::kEmptyString) {
    delete needcounts_;
  }
  if (nextid_ != &::google::protobuf::internal::kEmptyString) {
    delete nextid_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void EQUIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EQUIP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQUIP_descriptor_;
}

const EQUIP& EQUIP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

EQUIP* EQUIP::default_instance_ = NULL;

EQUIP* EQUIP::New() const {
  return new EQUIP;
}

void EQUIP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    pos_ = 0;
    if (has_name_ch()) {
      if (name_ch_ != &::google::protobuf::internal::kEmptyString) {
        name_ch_->clear();
      }
    }
    if (has_name_en()) {
      if (name_en_ != &::google::protobuf::internal::kEmptyString) {
        name_en_->clear();
      }
    }
    quality_ = 0;
    health_ = 0;
    healthgrow_ = 0;
    damage_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    damagegrow_ = 0;
    pdd_ = 0;
    pddgrow_ = 0;
    mdd_ = 0;
    mddgrow_ = 0;
    hitlevel_ = 0;
    hitgrow_ = 0;
    dodgelevel_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    dodgegrow_ = 0;
    crilevel_ = 0;
    crigrow_ = 0;
    tenacitylevel_ = 0;
    tenacitygrow_ = 0;
    pddpierce_ = 0;
    pddpiercegrow_ = 0;
    if (has_needs()) {
      if (needs_ != &::google::protobuf::internal::kEmptyString) {
        needs_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_needcounts()) {
      if (needcounts_ != &::google::protobuf::internal::kEmptyString) {
        needcounts_->clear();
      }
    }
    if (has_nextid()) {
      if (nextid_ != &::google::protobuf::internal::kEmptyString) {
        nextid_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EQUIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // required int32 pos = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name_ch;
        break;
      }

      // required string name_ch = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_ch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_ch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_ch().data(), this->name_ch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name_en;
        break;
      }

      // required string name_en = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_en:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_en()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_en().data(), this->name_en().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // required int32 quality = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_health;
        break;
      }

      // required int32 health = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_healthGrow;
        break;
      }

      // required int32 healthGrow = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_healthGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &healthgrow_)));
          set_has_healthgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_damage;
        break;
      }

      // required int32 damage = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_damageGrow;
        break;
      }

      // required int32 damageGrow = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damageGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagegrow_)));
          set_has_damagegrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pdd;
        break;
      }

      // required int32 pdd = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pdd_)));
          set_has_pdd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pddGrow;
        break;
      }

      // required int32 pddGrow = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pddGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pddgrow_)));
          set_has_pddgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mdd;
        break;
      }

      // required int32 mdd = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdd_)));
          set_has_mdd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mddGrow;
        break;
      }

      // required int32 mddGrow = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mddGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddgrow_)));
          set_has_mddgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_hitLevel;
        break;
      }

      // required int32 hitLevel = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitlevel_)));
          set_has_hitlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_hitGrow;
        break;
      }

      // required int32 hitGrow = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitgrow_)));
          set_has_hitgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_dodgeLevel;
        break;
      }

      // required int32 dodgeLevel = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodgeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodgelevel_)));
          set_has_dodgelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_dodgeGrow;
        break;
      }

      // required int32 dodgeGrow = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodgeGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodgegrow_)));
          set_has_dodgegrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_criLevel;
        break;
      }

      // required int32 criLevel = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_criLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crilevel_)));
          set_has_crilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_criGrow;
        break;
      }

      // required int32 criGrow = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_criGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crigrow_)));
          set_has_crigrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tenacityLevel;
        break;
      }

      // required int32 tenacityLevel = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacityLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tenacitylevel_)));
          set_has_tenacitylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_tenacityGrow;
        break;
      }

      // required int32 tenacityGrow = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacityGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tenacitygrow_)));
          set_has_tenacitygrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_pddPierce;
        break;
      }

      // required int32 pddPierce = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pddPierce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pddpierce_)));
          set_has_pddpierce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_pddPierceGrow;
        break;
      }

      // required int32 pddPierceGrow = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pddPierceGrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pddpiercegrow_)));
          set_has_pddpiercegrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_needs;
        break;
      }

      // required string needs = 24 [default = ""];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_needs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_needs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->needs().data(), this->needs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_needCounts;
        break;
      }

      // required string needCounts = 25 [default = ""];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_needCounts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_needcounts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->needcounts().data(), this->needcounts().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_nextId;
        break;
      }

      // required string nextId = 26 [default = ""];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nextId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nextid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nextid().data(), this->nextid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_icon;
        break;
      }

      // required string icon = 27 [default = ""];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EQUIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 pos = 2 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // required string name_ch = 3 [default = ""];
  if (has_name_ch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_ch().data(), this->name_ch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name_ch(), output);
  }

  // required string name_en = 4 [default = ""];
  if (has_name_en()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name_en(), output);
  }

  // required int32 quality = 5 [default = 0];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quality(), output);
  }

  // required int32 health = 6 [default = 0];
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->health(), output);
  }

  // required int32 healthGrow = 7 [default = 0];
  if (has_healthgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->healthgrow(), output);
  }

  // required int32 damage = 8 [default = 0];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->damage(), output);
  }

  // required int32 damageGrow = 9 [default = 0];
  if (has_damagegrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->damagegrow(), output);
  }

  // required int32 pdd = 10 [default = 0];
  if (has_pdd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pdd(), output);
  }

  // required int32 pddGrow = 11 [default = 0];
  if (has_pddgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pddgrow(), output);
  }

  // required int32 mdd = 12 [default = 0];
  if (has_mdd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mdd(), output);
  }

  // required int32 mddGrow = 13 [default = 0];
  if (has_mddgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mddgrow(), output);
  }

  // required int32 hitLevel = 14 [default = 0];
  if (has_hitlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->hitlevel(), output);
  }

  // required int32 hitGrow = 15 [default = 0];
  if (has_hitgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hitgrow(), output);
  }

  // required int32 dodgeLevel = 16 [default = 0];
  if (has_dodgelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->dodgelevel(), output);
  }

  // required int32 dodgeGrow = 17 [default = 0];
  if (has_dodgegrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->dodgegrow(), output);
  }

  // required int32 criLevel = 18 [default = 0];
  if (has_crilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->crilevel(), output);
  }

  // required int32 criGrow = 19 [default = 0];
  if (has_crigrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->crigrow(), output);
  }

  // required int32 tenacityLevel = 20 [default = 0];
  if (has_tenacitylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->tenacitylevel(), output);
  }

  // required int32 tenacityGrow = 21 [default = 0];
  if (has_tenacitygrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->tenacitygrow(), output);
  }

  // required int32 pddPierce = 22 [default = 0];
  if (has_pddpierce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->pddpierce(), output);
  }

  // required int32 pddPierceGrow = 23 [default = 0];
  if (has_pddpiercegrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->pddpiercegrow(), output);
  }

  // required string needs = 24 [default = ""];
  if (has_needs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->needs().data(), this->needs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->needs(), output);
  }

  // required string needCounts = 25 [default = ""];
  if (has_needcounts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->needcounts().data(), this->needcounts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->needcounts(), output);
  }

  // required string nextId = 26 [default = ""];
  if (has_nextid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nextid().data(), this->nextid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->nextid(), output);
  }

  // required string icon = 27 [default = ""];
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EQUIP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 pos = 2 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // required string name_ch = 3 [default = ""];
  if (has_name_ch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_ch().data(), this->name_ch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name_ch(), target);
  }

  // required string name_en = 4 [default = ""];
  if (has_name_en()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_en().data(), this->name_en().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name_en(), target);
  }

  // required int32 quality = 5 [default = 0];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quality(), target);
  }

  // required int32 health = 6 [default = 0];
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->health(), target);
  }

  // required int32 healthGrow = 7 [default = 0];
  if (has_healthgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->healthgrow(), target);
  }

  // required int32 damage = 8 [default = 0];
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->damage(), target);
  }

  // required int32 damageGrow = 9 [default = 0];
  if (has_damagegrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->damagegrow(), target);
  }

  // required int32 pdd = 10 [default = 0];
  if (has_pdd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pdd(), target);
  }

  // required int32 pddGrow = 11 [default = 0];
  if (has_pddgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pddgrow(), target);
  }

  // required int32 mdd = 12 [default = 0];
  if (has_mdd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mdd(), target);
  }

  // required int32 mddGrow = 13 [default = 0];
  if (has_mddgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mddgrow(), target);
  }

  // required int32 hitLevel = 14 [default = 0];
  if (has_hitlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->hitlevel(), target);
  }

  // required int32 hitGrow = 15 [default = 0];
  if (has_hitgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->hitgrow(), target);
  }

  // required int32 dodgeLevel = 16 [default = 0];
  if (has_dodgelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->dodgelevel(), target);
  }

  // required int32 dodgeGrow = 17 [default = 0];
  if (has_dodgegrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->dodgegrow(), target);
  }

  // required int32 criLevel = 18 [default = 0];
  if (has_crilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->crilevel(), target);
  }

  // required int32 criGrow = 19 [default = 0];
  if (has_crigrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->crigrow(), target);
  }

  // required int32 tenacityLevel = 20 [default = 0];
  if (has_tenacitylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->tenacitylevel(), target);
  }

  // required int32 tenacityGrow = 21 [default = 0];
  if (has_tenacitygrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->tenacitygrow(), target);
  }

  // required int32 pddPierce = 22 [default = 0];
  if (has_pddpierce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->pddpierce(), target);
  }

  // required int32 pddPierceGrow = 23 [default = 0];
  if (has_pddpiercegrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->pddpiercegrow(), target);
  }

  // required string needs = 24 [default = ""];
  if (has_needs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->needs().data(), this->needs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->needs(), target);
  }

  // required string needCounts = 25 [default = ""];
  if (has_needcounts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->needcounts().data(), this->needcounts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->needcounts(), target);
  }

  // required string nextId = 26 [default = ""];
  if (has_nextid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nextid().data(), this->nextid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->nextid(), target);
  }

  // required string icon = 27 [default = ""];
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EQUIP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 pos = 2 [default = 0];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required string name_ch = 3 [default = ""];
    if (has_name_ch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_ch());
    }

    // required string name_en = 4 [default = ""];
    if (has_name_en()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_en());
    }

    // required int32 quality = 5 [default = 0];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // required int32 health = 6 [default = 0];
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // required int32 healthGrow = 7 [default = 0];
    if (has_healthgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->healthgrow());
    }

    // required int32 damage = 8 [default = 0];
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 damageGrow = 9 [default = 0];
    if (has_damagegrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagegrow());
    }

    // required int32 pdd = 10 [default = 0];
    if (has_pdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pdd());
    }

    // required int32 pddGrow = 11 [default = 0];
    if (has_pddgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pddgrow());
    }

    // required int32 mdd = 12 [default = 0];
    if (has_mdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mdd());
    }

    // required int32 mddGrow = 13 [default = 0];
    if (has_mddgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mddgrow());
    }

    // required int32 hitLevel = 14 [default = 0];
    if (has_hitlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitlevel());
    }

    // required int32 hitGrow = 15 [default = 0];
    if (has_hitgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitgrow());
    }

    // required int32 dodgeLevel = 16 [default = 0];
    if (has_dodgelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodgelevel());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 dodgeGrow = 17 [default = 0];
    if (has_dodgegrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodgegrow());
    }

    // required int32 criLevel = 18 [default = 0];
    if (has_crilevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crilevel());
    }

    // required int32 criGrow = 19 [default = 0];
    if (has_crigrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crigrow());
    }

    // required int32 tenacityLevel = 20 [default = 0];
    if (has_tenacitylevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tenacitylevel());
    }

    // required int32 tenacityGrow = 21 [default = 0];
    if (has_tenacitygrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tenacitygrow());
    }

    // required int32 pddPierce = 22 [default = 0];
    if (has_pddpierce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pddpierce());
    }

    // required int32 pddPierceGrow = 23 [default = 0];
    if (has_pddpiercegrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pddpiercegrow());
    }

    // required string needs = 24 [default = ""];
    if (has_needs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->needs());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required string needCounts = 25 [default = ""];
    if (has_needcounts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->needcounts());
    }

    // required string nextId = 26 [default = ""];
    if (has_nextid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nextid());
    }

    // required string icon = 27 [default = ""];
    if (has_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EQUIP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EQUIP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EQUIP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EQUIP::MergeFrom(const EQUIP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_name_ch()) {
      set_name_ch(from.name_ch());
    }
    if (from.has_name_en()) {
      set_name_en(from.name_en());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_healthgrow()) {
      set_healthgrow(from.healthgrow());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_damagegrow()) {
      set_damagegrow(from.damagegrow());
    }
    if (from.has_pdd()) {
      set_pdd(from.pdd());
    }
    if (from.has_pddgrow()) {
      set_pddgrow(from.pddgrow());
    }
    if (from.has_mdd()) {
      set_mdd(from.mdd());
    }
    if (from.has_mddgrow()) {
      set_mddgrow(from.mddgrow());
    }
    if (from.has_hitlevel()) {
      set_hitlevel(from.hitlevel());
    }
    if (from.has_hitgrow()) {
      set_hitgrow(from.hitgrow());
    }
    if (from.has_dodgelevel()) {
      set_dodgelevel(from.dodgelevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dodgegrow()) {
      set_dodgegrow(from.dodgegrow());
    }
    if (from.has_crilevel()) {
      set_crilevel(from.crilevel());
    }
    if (from.has_crigrow()) {
      set_crigrow(from.crigrow());
    }
    if (from.has_tenacitylevel()) {
      set_tenacitylevel(from.tenacitylevel());
    }
    if (from.has_tenacitygrow()) {
      set_tenacitygrow(from.tenacitygrow());
    }
    if (from.has_pddpierce()) {
      set_pddpierce(from.pddpierce());
    }
    if (from.has_pddpiercegrow()) {
      set_pddpiercegrow(from.pddpiercegrow());
    }
    if (from.has_needs()) {
      set_needs(from.needs());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_needcounts()) {
      set_needcounts(from.needcounts());
    }
    if (from.has_nextid()) {
      set_nextid(from.nextid());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EQUIP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EQUIP::CopyFrom(const EQUIP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EQUIP::IsInitialized() const {
  if ((_has_bits_[0] & 0x07ffffff) != 0x07ffffff) return false;

  return true;
}

void EQUIP::Swap(EQUIP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(name_ch_, other->name_ch_);
    std::swap(name_en_, other->name_en_);
    std::swap(quality_, other->quality_);
    std::swap(health_, other->health_);
    std::swap(healthgrow_, other->healthgrow_);
    std::swap(damage_, other->damage_);
    std::swap(damagegrow_, other->damagegrow_);
    std::swap(pdd_, other->pdd_);
    std::swap(pddgrow_, other->pddgrow_);
    std::swap(mdd_, other->mdd_);
    std::swap(mddgrow_, other->mddgrow_);
    std::swap(hitlevel_, other->hitlevel_);
    std::swap(hitgrow_, other->hitgrow_);
    std::swap(dodgelevel_, other->dodgelevel_);
    std::swap(dodgegrow_, other->dodgegrow_);
    std::swap(crilevel_, other->crilevel_);
    std::swap(crigrow_, other->crigrow_);
    std::swap(tenacitylevel_, other->tenacitylevel_);
    std::swap(tenacitygrow_, other->tenacitygrow_);
    std::swap(pddpierce_, other->pddpierce_);
    std::swap(pddpiercegrow_, other->pddpiercegrow_);
    std::swap(needs_, other->needs_);
    std::swap(needcounts_, other->needcounts_);
    std::swap(nextid_, other->nextid_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EQUIP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EQUIP_descriptor_;
  metadata.reflection = EQUIP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EQUIP_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

EQUIP_ARRAY::EQUIP_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EQUIP_ARRAY::InitAsDefaultInstance() {
}

EQUIP_ARRAY::EQUIP_ARRAY(const EQUIP_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EQUIP_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EQUIP_ARRAY::~EQUIP_ARRAY() {
  SharedDtor();
}

void EQUIP_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EQUIP_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EQUIP_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQUIP_ARRAY_descriptor_;
}

const EQUIP_ARRAY& EQUIP_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

EQUIP_ARRAY* EQUIP_ARRAY::default_instance_ = NULL;

EQUIP_ARRAY* EQUIP_ARRAY::New() const {
  return new EQUIP_ARRAY;
}

void EQUIP_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EQUIP_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EQUIP items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EQUIP_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EQUIP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EQUIP_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EQUIP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EQUIP_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .EQUIP items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EQUIP_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EQUIP_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EQUIP_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EQUIP_ARRAY::MergeFrom(const EQUIP_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EQUIP_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EQUIP_ARRAY::CopyFrom(const EQUIP_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EQUIP_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void EQUIP_ARRAY::Swap(EQUIP_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EQUIP_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EQUIP_ARRAY_descriptor_;
  metadata.reflection = EQUIP_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EVOLUTIONCOIN::kIdFieldNumber;
const int EVOLUTIONCOIN::kEquipWeaponFieldNumber;
const int EVOLUTIONCOIN::kEquipNecklaceFieldNumber;
const int EVOLUTIONCOIN::kEquipClothesFieldNumber;
const int EVOLUTIONCOIN::kEquipBeltFieldNumber;
const int EVOLUTIONCOIN::kEquipRingFieldNumber;
const int EVOLUTIONCOIN::kEquipBootFieldNumber;
#endif  // !_MSC_VER

EVOLUTIONCOIN::EVOLUTIONCOIN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EVOLUTIONCOIN::InitAsDefaultInstance() {
}

EVOLUTIONCOIN::EVOLUTIONCOIN(const EVOLUTIONCOIN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EVOLUTIONCOIN::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_weapon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_necklace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_clothes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_belt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_ring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_boot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EVOLUTIONCOIN::~EVOLUTIONCOIN() {
  SharedDtor();
}

void EVOLUTIONCOIN::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (equip_weapon_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_weapon_;
  }
  if (equip_necklace_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_necklace_;
  }
  if (equip_clothes_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_clothes_;
  }
  if (equip_belt_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_belt_;
  }
  if (equip_ring_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_ring_;
  }
  if (equip_boot_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_boot_;
  }
  if (this != default_instance_) {
  }
}

void EVOLUTIONCOIN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EVOLUTIONCOIN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EVOLUTIONCOIN_descriptor_;
}

const EVOLUTIONCOIN& EVOLUTIONCOIN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

EVOLUTIONCOIN* EVOLUTIONCOIN::default_instance_ = NULL;

EVOLUTIONCOIN* EVOLUTIONCOIN::New() const {
  return new EVOLUTIONCOIN;
}

void EVOLUTIONCOIN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_equip_weapon()) {
      if (equip_weapon_ != &::google::protobuf::internal::kEmptyString) {
        equip_weapon_->clear();
      }
    }
    if (has_equip_necklace()) {
      if (equip_necklace_ != &::google::protobuf::internal::kEmptyString) {
        equip_necklace_->clear();
      }
    }
    if (has_equip_clothes()) {
      if (equip_clothes_ != &::google::protobuf::internal::kEmptyString) {
        equip_clothes_->clear();
      }
    }
    if (has_equip_belt()) {
      if (equip_belt_ != &::google::protobuf::internal::kEmptyString) {
        equip_belt_->clear();
      }
    }
    if (has_equip_ring()) {
      if (equip_ring_ != &::google::protobuf::internal::kEmptyString) {
        equip_ring_->clear();
      }
    }
    if (has_equip_boot()) {
      if (equip_boot_ != &::google::protobuf::internal::kEmptyString) {
        equip_boot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EVOLUTIONCOIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_Weapon;
        break;
      }

      // required string equip_Weapon = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Weapon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_weapon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_weapon().data(), this->equip_weapon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equip_Necklace;
        break;
      }

      // required string equip_Necklace = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Necklace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_necklace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_necklace().data(), this->equip_necklace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equip_Clothes;
        break;
      }

      // required string equip_Clothes = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Clothes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_clothes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_clothes().data(), this->equip_clothes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equip_Belt;
        break;
      }

      // required string equip_Belt = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Belt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_belt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_belt().data(), this->equip_belt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equip_Ring;
        break;
      }

      // required string equip_Ring = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Ring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_ring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_ring().data(), this->equip_ring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equip_Boot;
        break;
      }

      // required string equip_Boot = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Boot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_boot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_boot().data(), this->equip_boot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EVOLUTIONCOIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string equip_Weapon = 2 [default = ""];
  if (has_equip_weapon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_weapon().data(), this->equip_weapon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->equip_weapon(), output);
  }

  // required string equip_Necklace = 3 [default = ""];
  if (has_equip_necklace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_necklace().data(), this->equip_necklace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->equip_necklace(), output);
  }

  // required string equip_Clothes = 4 [default = ""];
  if (has_equip_clothes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_clothes().data(), this->equip_clothes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->equip_clothes(), output);
  }

  // required string equip_Belt = 5 [default = ""];
  if (has_equip_belt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_belt().data(), this->equip_belt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->equip_belt(), output);
  }

  // required string equip_Ring = 6 [default = ""];
  if (has_equip_ring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_ring().data(), this->equip_ring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->equip_ring(), output);
  }

  // required string equip_Boot = 7 [default = ""];
  if (has_equip_boot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_boot().data(), this->equip_boot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->equip_boot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EVOLUTIONCOIN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string equip_Weapon = 2 [default = ""];
  if (has_equip_weapon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_weapon().data(), this->equip_weapon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->equip_weapon(), target);
  }

  // required string equip_Necklace = 3 [default = ""];
  if (has_equip_necklace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_necklace().data(), this->equip_necklace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->equip_necklace(), target);
  }

  // required string equip_Clothes = 4 [default = ""];
  if (has_equip_clothes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_clothes().data(), this->equip_clothes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->equip_clothes(), target);
  }

  // required string equip_Belt = 5 [default = ""];
  if (has_equip_belt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_belt().data(), this->equip_belt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->equip_belt(), target);
  }

  // required string equip_Ring = 6 [default = ""];
  if (has_equip_ring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_ring().data(), this->equip_ring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->equip_ring(), target);
  }

  // required string equip_Boot = 7 [default = ""];
  if (has_equip_boot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_boot().data(), this->equip_boot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->equip_boot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EVOLUTIONCOIN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string equip_Weapon = 2 [default = ""];
    if (has_equip_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_weapon());
    }

    // required string equip_Necklace = 3 [default = ""];
    if (has_equip_necklace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_necklace());
    }

    // required string equip_Clothes = 4 [default = ""];
    if (has_equip_clothes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_clothes());
    }

    // required string equip_Belt = 5 [default = ""];
    if (has_equip_belt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_belt());
    }

    // required string equip_Ring = 6 [default = ""];
    if (has_equip_ring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_ring());
    }

    // required string equip_Boot = 7 [default = ""];
    if (has_equip_boot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_boot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EVOLUTIONCOIN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EVOLUTIONCOIN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EVOLUTIONCOIN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EVOLUTIONCOIN::MergeFrom(const EVOLUTIONCOIN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_equip_weapon()) {
      set_equip_weapon(from.equip_weapon());
    }
    if (from.has_equip_necklace()) {
      set_equip_necklace(from.equip_necklace());
    }
    if (from.has_equip_clothes()) {
      set_equip_clothes(from.equip_clothes());
    }
    if (from.has_equip_belt()) {
      set_equip_belt(from.equip_belt());
    }
    if (from.has_equip_ring()) {
      set_equip_ring(from.equip_ring());
    }
    if (from.has_equip_boot()) {
      set_equip_boot(from.equip_boot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EVOLUTIONCOIN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVOLUTIONCOIN::CopyFrom(const EVOLUTIONCOIN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVOLUTIONCOIN::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void EVOLUTIONCOIN::Swap(EVOLUTIONCOIN* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(equip_weapon_, other->equip_weapon_);
    std::swap(equip_necklace_, other->equip_necklace_);
    std::swap(equip_clothes_, other->equip_clothes_);
    std::swap(equip_belt_, other->equip_belt_);
    std::swap(equip_ring_, other->equip_ring_);
    std::swap(equip_boot_, other->equip_boot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EVOLUTIONCOIN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EVOLUTIONCOIN_descriptor_;
  metadata.reflection = EVOLUTIONCOIN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EVOLUTIONCOIN_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

EVOLUTIONCOIN_ARRAY::EVOLUTIONCOIN_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EVOLUTIONCOIN_ARRAY::InitAsDefaultInstance() {
}

EVOLUTIONCOIN_ARRAY::EVOLUTIONCOIN_ARRAY(const EVOLUTIONCOIN_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EVOLUTIONCOIN_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EVOLUTIONCOIN_ARRAY::~EVOLUTIONCOIN_ARRAY() {
  SharedDtor();
}

void EVOLUTIONCOIN_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EVOLUTIONCOIN_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EVOLUTIONCOIN_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EVOLUTIONCOIN_ARRAY_descriptor_;
}

const EVOLUTIONCOIN_ARRAY& EVOLUTIONCOIN_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

EVOLUTIONCOIN_ARRAY* EVOLUTIONCOIN_ARRAY::default_instance_ = NULL;

EVOLUTIONCOIN_ARRAY* EVOLUTIONCOIN_ARRAY::New() const {
  return new EVOLUTIONCOIN_ARRAY;
}

void EVOLUTIONCOIN_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EVOLUTIONCOIN_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EVOLUTIONCOIN items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EVOLUTIONCOIN_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .EVOLUTIONCOIN items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EVOLUTIONCOIN_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .EVOLUTIONCOIN items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EVOLUTIONCOIN_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .EVOLUTIONCOIN items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EVOLUTIONCOIN_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EVOLUTIONCOIN_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EVOLUTIONCOIN_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EVOLUTIONCOIN_ARRAY::MergeFrom(const EVOLUTIONCOIN_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EVOLUTIONCOIN_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EVOLUTIONCOIN_ARRAY::CopyFrom(const EVOLUTIONCOIN_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EVOLUTIONCOIN_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void EVOLUTIONCOIN_ARRAY::Swap(EVOLUTIONCOIN_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EVOLUTIONCOIN_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EVOLUTIONCOIN_ARRAY_descriptor_;
  metadata.reflection = EVOLUTIONCOIN_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HEROPROP::kIdFieldNumber;
const int HEROPROP::kAreaFieldNumber;
const int HEROPROP::kPropertyFieldNumber;
const int HEROPROP::kOccupationFieldNumber;
const int HEROPROP::kHealthFieldNumber;
const int HEROPROP::kHealthGrowFieldNumber;
const int HEROPROP::kDamageFieldNumber;
const int HEROPROP::kDamageGrowFieldNumber;
const int HEROPROP::kPddFieldNumber;
const int HEROPROP::kPddGrowFieldNumber;
const int HEROPROP::kMddFieldNumber;
const int HEROPROP::kMddGrowFieldNumber;
const int HEROPROP::kHitLevelFieldNumber;
const int HEROPROP::kHitGrowFieldNumber;
const int HEROPROP::kDodgeLevelFieldNumber;
const int HEROPROP::kDodgeGrowFieldNumber;
const int HEROPROP::kCriLevelFieldNumber;
const int HEROPROP::kCriGrowFieldNumber;
const int HEROPROP::kTenacityLevelFieldNumber;
const int HEROPROP::kTenacityGrowFieldNumber;
const int HEROPROP::kPddPierceFieldNumber;
const int HEROPROP::kPddPierceGrowFieldNumber;
const int HEROPROP::kTypeNormalFieldNumber;
const int HEROPROP::kTypeSkillFieldNumber;
const int HEROPROP::kPercentSkillFieldNumber;
const int HEROPROP::kAddNumSkillFieldNumber;
const int HEROPROP::kAddNumGrowSkillFieldNumber;
const int HEROPROP::kTypeAoYiFieldNumber;
const int HEROPROP::kPercentAoYiFieldNumber;
const int HEROPROP::kAddNumAoYiFieldNumber;
const int HEROPROP::kAddNumGrowAoYiFieldNumber;
const int HEROPROP::kPassiveSkill1FieldNumber;
const int HEROPROP::kPassiveSkill2FieldNumber;
const int HEROPROP::kPassiveSkill3FieldNumber;
const int HEROPROP::kRangeXFieldNumber;
const int HEROPROP::kRangeYFieldNumber;
const int HEROPROP::kRangeZFieldNumber;
const int HEROPROP::kAttackSpeedFieldNumber;
const int HEROPROP::kHDisFieldNumber;
const int HEROPROP::kVDisFieldNumber;
const int HEROPROP::kMoveSpeedFieldNumber;
const int HEROPROP::kStarFieldNumber;
const int HEROPROP::kStageBFieldNumber;
const int HEROPROP::kHitNumBFieldNumber;
const int HEROPROP::kHitNumAFieldNumber;
const int HEROPROP::kPosNumFieldNumber;
const int HEROPROP::kRecoverTimeSkillFieldNumber;
const int HEROPROP::kAoYiNumFieldNumber;
const int HEROPROP::kEquipWeaponFieldNumber;
const int HEROPROP::kEquipNecklaceFieldNumber;
const int HEROPROP::kEquipClothesFieldNumber;
const int HEROPROP::kEquipBeltFieldNumber;
const int HEROPROP::kEquipRingFieldNumber;
const int HEROPROP::kEquipBootFieldNumber;
const int HEROPROP::kNeedIdFieldNumber;
const int HEROPROP::kSkillTriggerProbabilityFieldNumber;
const int HEROPROP::kSkillTriggerDurationFieldNumber;
#endif  // !_MSC_VER

HEROPROP::HEROPROP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HEROPROP::InitAsDefaultInstance() {
}

HEROPROP::HEROPROP(const HEROPROP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HEROPROP::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_ = 0;
  property_ = 0;
  occupation_ = 0;
  health_ = 0;
  healthgrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  damage_ = 0;
  damagegrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pdd_ = 0;
  pddgrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mdd_ = 0;
  mddgrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hitlevel_ = 0;
  hitgrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dodgelevel_ = 0;
  dodgegrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crilevel_ = 0;
  crigrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tenacitylevel_ = 0;
  tenacitygrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pddpierce_ = 0;
  pddpiercegrow_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_normal_ = 0;
  type_skill_ = 0;
  percent_skill_ = 0;
  addnum_skill_ = 0;
  addnumgrow_skill_ = 0;
  type_aoyi_ = 0;
  percent_aoyi_ = 0;
  addnum_aoyi_ = 0;
  addnumgrow_aoyi_ = 0;
  passiveskill_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passiveskill_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passiveskill_3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  range_x_ = 0;
  range_y_ = 0;
  range_z_ = 0;
  attackspeed_ = 0;
  h_dis_ = 0;
  v_dis_ = 0;
  movespeed_ = 0;
  star_ = 0;
  stage_b_ = 0;
  hitnum_b_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hitnum_a_ = 0;
  posnum_ = 0;
  recovertime_skill_ = 0;
  aoyinum_ = 0;
  equip_weapon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_necklace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_clothes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_belt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_ring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_boot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skilltriggerprobability_ = 0;
  skilltriggerduration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HEROPROP::~HEROPROP() {
  SharedDtor();
}

void HEROPROP::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (healthgrow_ != &::google::protobuf::internal::kEmptyString) {
    delete healthgrow_;
  }
  if (damagegrow_ != &::google::protobuf::internal::kEmptyString) {
    delete damagegrow_;
  }
  if (pddgrow_ != &::google::protobuf::internal::kEmptyString) {
    delete pddgrow_;
  }
  if (mddgrow_ != &::google::protobuf::internal::kEmptyString) {
    delete mddgrow_;
  }
  if (hitgrow_ != &::google::protobuf::internal::kEmptyString) {
    delete hitgrow_;
  }
  if (dodgegrow_ != &::google::protobuf::internal::kEmptyString) {
    delete dodgegrow_;
  }
  if (crigrow_ != &::google::protobuf::internal::kEmptyString) {
    delete crigrow_;
  }
  if (tenacitygrow_ != &::google::protobuf::internal::kEmptyString) {
    delete tenacitygrow_;
  }
  if (pddpiercegrow_ != &::google::protobuf::internal::kEmptyString) {
    delete pddpiercegrow_;
  }
  if (passiveskill_1_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskill_1_;
  }
  if (passiveskill_2_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskill_2_;
  }
  if (passiveskill_3_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskill_3_;
  }
  if (hitnum_b_ != &::google::protobuf::internal::kEmptyString) {
    delete hitnum_b_;
  }
  if (equip_weapon_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_weapon_;
  }
  if (equip_necklace_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_necklace_;
  }
  if (equip_clothes_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_clothes_;
  }
  if (equip_belt_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_belt_;
  }
  if (equip_ring_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_ring_;
  }
  if (equip_boot_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_boot_;
  }
  if (needid_ != &::google::protobuf::internal::kEmptyString) {
    delete needid_;
  }
  if (this != default_instance_) {
  }
}

void HEROPROP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HEROPROP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HEROPROP_descriptor_;
}

const HEROPROP& HEROPROP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

HEROPROP* HEROPROP::default_instance_ = NULL;

HEROPROP* HEROPROP::New() const {
  return new HEROPROP;
}

void HEROPROP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    area_ = 0;
    property_ = 0;
    occupation_ = 0;
    health_ = 0;
    if (has_healthgrow()) {
      if (healthgrow_ != &::google::protobuf::internal::kEmptyString) {
        healthgrow_->clear();
      }
    }
    damage_ = 0;
    if (has_damagegrow()) {
      if (damagegrow_ != &::google::protobuf::internal::kEmptyString) {
        damagegrow_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pdd_ = 0;
    if (has_pddgrow()) {
      if (pddgrow_ != &::google::protobuf::internal::kEmptyString) {
        pddgrow_->clear();
      }
    }
    mdd_ = 0;
    if (has_mddgrow()) {
      if (mddgrow_ != &::google::protobuf::internal::kEmptyString) {
        mddgrow_->clear();
      }
    }
    hitlevel_ = 0;
    if (has_hitgrow()) {
      if (hitgrow_ != &::google::protobuf::internal::kEmptyString) {
        hitgrow_->clear();
      }
    }
    dodgelevel_ = 0;
    if (has_dodgegrow()) {
      if (dodgegrow_ != &::google::protobuf::internal::kEmptyString) {
        dodgegrow_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    crilevel_ = 0;
    if (has_crigrow()) {
      if (crigrow_ != &::google::protobuf::internal::kEmptyString) {
        crigrow_->clear();
      }
    }
    tenacitylevel_ = 0;
    if (has_tenacitygrow()) {
      if (tenacitygrow_ != &::google::protobuf::internal::kEmptyString) {
        tenacitygrow_->clear();
      }
    }
    pddpierce_ = 0;
    if (has_pddpiercegrow()) {
      if (pddpiercegrow_ != &::google::protobuf::internal::kEmptyString) {
        pddpiercegrow_->clear();
      }
    }
    type_normal_ = 0;
    type_skill_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    percent_skill_ = 0;
    addnum_skill_ = 0;
    addnumgrow_skill_ = 0;
    type_aoyi_ = 0;
    percent_aoyi_ = 0;
    addnum_aoyi_ = 0;
    addnumgrow_aoyi_ = 0;
    if (has_passiveskill_1()) {
      if (passiveskill_1_ != &::google::protobuf::internal::kEmptyString) {
        passiveskill_1_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_passiveskill_2()) {
      if (passiveskill_2_ != &::google::protobuf::internal::kEmptyString) {
        passiveskill_2_->clear();
      }
    }
    if (has_passiveskill_3()) {
      if (passiveskill_3_ != &::google::protobuf::internal::kEmptyString) {
        passiveskill_3_->clear();
      }
    }
    range_x_ = 0;
    range_y_ = 0;
    range_z_ = 0;
    attackspeed_ = 0;
    h_dis_ = 0;
    v_dis_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    movespeed_ = 0;
    star_ = 0;
    stage_b_ = 0;
    if (has_hitnum_b()) {
      if (hitnum_b_ != &::google::protobuf::internal::kEmptyString) {
        hitnum_b_->clear();
      }
    }
    hitnum_a_ = 0;
    posnum_ = 0;
    recovertime_skill_ = 0;
    aoyinum_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_equip_weapon()) {
      if (equip_weapon_ != &::google::protobuf::internal::kEmptyString) {
        equip_weapon_->clear();
      }
    }
    if (has_equip_necklace()) {
      if (equip_necklace_ != &::google::protobuf::internal::kEmptyString) {
        equip_necklace_->clear();
      }
    }
    if (has_equip_clothes()) {
      if (equip_clothes_ != &::google::protobuf::internal::kEmptyString) {
        equip_clothes_->clear();
      }
    }
    if (has_equip_belt()) {
      if (equip_belt_ != &::google::protobuf::internal::kEmptyString) {
        equip_belt_->clear();
      }
    }
    if (has_equip_ring()) {
      if (equip_ring_ != &::google::protobuf::internal::kEmptyString) {
        equip_ring_->clear();
      }
    }
    if (has_equip_boot()) {
      if (equip_boot_ != &::google::protobuf::internal::kEmptyString) {
        equip_boot_->clear();
      }
    }
    if (has_needid()) {
      if (needid_ != &::google::protobuf::internal::kEmptyString) {
        needid_->clear();
      }
    }
    skilltriggerprobability_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    skilltriggerduration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HEROPROP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area;
        break;
      }

      // required int32 area = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_property;
        break;
      }

      // required int32 property = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &property_)));
          set_has_property();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_occupation;
        break;
      }

      // required int32 occupation = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_health;
        break;
      }

      // required int32 health = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_healthGrow;
        break;
      }

      // required string healthGrow = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_healthGrow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_healthgrow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->healthgrow().data(), this->healthgrow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_damage;
        break;
      }

      // required int32 damage = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_damageGrow;
        break;
      }

      // required string damageGrow = 8 [default = ""];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damageGrow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_damagegrow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->damagegrow().data(), this->damagegrow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pdd;
        break;
      }

      // required int32 pdd = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pdd_)));
          set_has_pdd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_pddGrow;
        break;
      }

      // required string pddGrow = 10 [default = ""];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pddGrow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pddgrow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pddgrow().data(), this->pddgrow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mdd;
        break;
      }

      // required int32 mdd = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdd_)));
          set_has_mdd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_mddGrow;
        break;
      }

      // required string mddGrow = 12 [default = ""];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mddGrow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mddgrow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mddgrow().data(), this->mddgrow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hitLevel;
        break;
      }

      // required int32 hitLevel = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitlevel_)));
          set_has_hitlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_hitGrow;
        break;
      }

      // required string hitGrow = 14 [default = ""];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hitGrow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hitgrow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hitgrow().data(), this->hitgrow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_dodgeLevel;
        break;
      }

      // required int32 dodgeLevel = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodgeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodgelevel_)));
          set_has_dodgelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_dodgeGrow;
        break;
      }

      // required string dodgeGrow = 16 [default = ""];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dodgeGrow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dodgegrow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dodgegrow().data(), this->dodgegrow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_criLevel;
        break;
      }

      // required int32 criLevel = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_criLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crilevel_)));
          set_has_crilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_criGrow;
        break;
      }

      // required string criGrow = 18 [default = ""];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_criGrow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crigrow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crigrow().data(), this->crigrow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_tenacityLevel;
        break;
      }

      // required int32 tenacityLevel = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacityLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tenacitylevel_)));
          set_has_tenacitylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_tenacityGrow;
        break;
      }

      // required string tenacityGrow = 20 [default = ""];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tenacityGrow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tenacitygrow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tenacitygrow().data(), this->tenacitygrow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_pddPierce;
        break;
      }

      // required int32 pddPierce = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pddPierce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pddpierce_)));
          set_has_pddpierce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_pddPierceGrow;
        break;
      }

      // required string pddPierceGrow = 22 [default = ""];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pddPierceGrow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pddpiercegrow()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pddpiercegrow().data(), this->pddpiercegrow().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_type_Normal;
        break;
      }

      // required int32 type_Normal = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_Normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_normal_)));
          set_has_type_normal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_type_Skill;
        break;
      }

      // required int32 type_Skill = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_Skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_skill_)));
          set_has_type_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_percent_Skill;
        break;
      }

      // required int32 percent_Skill = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent_Skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_skill_)));
          set_has_percent_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_addNum_Skill;
        break;
      }

      // required int32 addNum_Skill = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addNum_Skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addnum_skill_)));
          set_has_addnum_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_addNumGrow_Skill;
        break;
      }

      // required int32 addNumGrow_Skill = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addNumGrow_Skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addnumgrow_skill_)));
          set_has_addnumgrow_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_type_AoYi;
        break;
      }

      // required int32 type_AoYi = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_AoYi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_aoyi_)));
          set_has_type_aoyi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_percent_AoYi;
        break;
      }

      // required int32 percent_AoYi = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent_AoYi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_aoyi_)));
          set_has_percent_aoyi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_addNum_AoYi;
        break;
      }

      // required int32 addNum_AoYi = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addNum_AoYi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addnum_aoyi_)));
          set_has_addnum_aoyi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_addNumGrow_AoYi;
        break;
      }

      // required int32 addNumGrow_AoYi = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addNumGrow_AoYi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addnumgrow_aoyi_)));
          set_has_addnumgrow_aoyi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_passiveSkill_1;
        break;
      }

      // required string passiveSkill_1 = 32 [default = ""];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passiveSkill_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passiveskill_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passiveskill_1().data(), this->passiveskill_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_passiveSkill_2;
        break;
      }

      // required string passiveSkill_2 = 33 [default = ""];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passiveSkill_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passiveskill_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passiveskill_2().data(), this->passiveskill_2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_passiveSkill_3;
        break;
      }

      // required string passiveSkill_3 = 34 [default = ""];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passiveSkill_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passiveskill_3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passiveskill_3().data(), this->passiveskill_3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(285)) goto parse_range_X;
        break;
      }

      // required float range_X = 35 [default = 0];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_x_)));
          set_has_range_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(293)) goto parse_range_Y;
        break;
      }

      // required float range_Y = 36 [default = 0];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_y_)));
          set_has_range_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(301)) goto parse_range_Z;
        break;
      }

      // required float range_Z = 37 [default = 0];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_z_)));
          set_has_range_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(309)) goto parse_attackSpeed;
        break;
      }

      // required float attackSpeed = 38 [default = 0];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_attackSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackspeed_)));
          set_has_attackspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(317)) goto parse_h_Dis;
        break;
      }

      // required float h_Dis = 39 [default = 0];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_h_Dis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_dis_)));
          set_has_h_dis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(325)) goto parse_v_Dis;
        break;
      }

      // required float v_Dis = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_Dis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_dis_)));
          set_has_v_dis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(333)) goto parse_moveSpeed;
        break;
      }

      // required float moveSpeed = 41 [default = 0];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_star;
        break;
      }

      // required int32 star = 42 [default = 0];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_stage_B;
        break;
      }

      // required int32 stage_B = 43 [default = 0];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_b_)));
          set_has_stage_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_hitNum_B;
        break;
      }

      // required string hitNum_B = 44 [default = ""];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hitNum_B:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hitnum_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hitnum_b().data(), this->hitnum_b().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_hitNum_A;
        break;
      }

      // required int32 hitNum_A = 45 [default = 0];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitNum_A:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitnum_a_)));
          set_has_hitnum_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_posNum;
        break;
      }

      // required int32 posNum = 46 [default = 0];
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posnum_)));
          set_has_posnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(381)) goto parse_recoverTime_Skill;
        break;
      }

      // required float recoverTime_Skill = 47 [default = 0];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_recoverTime_Skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recovertime_skill_)));
          set_has_recovertime_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_aoYiNum;
        break;
      }

      // required int32 aoYiNum = 48 [default = 0];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aoYiNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aoyinum_)));
          set_has_aoyinum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_equip_Weapon;
        break;
      }

      // required string equip_Weapon = 49 [default = ""];
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Weapon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_weapon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_weapon().data(), this->equip_weapon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_equip_Necklace;
        break;
      }

      // required string equip_Necklace = 50 [default = ""];
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Necklace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_necklace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_necklace().data(), this->equip_necklace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_equip_Clothes;
        break;
      }

      // required string equip_Clothes = 51 [default = ""];
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Clothes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_clothes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_clothes().data(), this->equip_clothes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_equip_Belt;
        break;
      }

      // required string equip_Belt = 52 [default = ""];
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Belt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_belt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_belt().data(), this->equip_belt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_equip_Ring;
        break;
      }

      // required string equip_Ring = 53 [default = ""];
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Ring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_ring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_ring().data(), this->equip_ring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_equip_Boot;
        break;
      }

      // required string equip_Boot = 54 [default = ""];
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Boot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_boot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_boot().data(), this->equip_boot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_needId;
        break;
      }

      // required string needId = 55 [default = ""];
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_needId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_needid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->needid().data(), this->needid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_skillTriggerProbability;
        break;
      }

      // required int32 skillTriggerProbability = 56 [default = 0];
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillTriggerProbability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilltriggerprobability_)));
          set_has_skilltriggerprobability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(461)) goto parse_skillTriggerDuration;
        break;
      }

      // required float skillTriggerDuration = 57 [default = 0];
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_skillTriggerDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &skilltriggerduration_)));
          set_has_skilltriggerduration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HEROPROP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 area = 2 [default = 0];
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->area(), output);
  }

  // required int32 property = 3 [default = 0];
  if (has_property()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->property(), output);
  }

  // required int32 occupation = 4 [default = 0];
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->occupation(), output);
  }

  // required int32 health = 5 [default = 0];
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->health(), output);
  }

  // required string healthGrow = 6 [default = ""];
  if (has_healthgrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->healthgrow().data(), this->healthgrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->healthgrow(), output);
  }

  // required int32 damage = 7 [default = 0];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->damage(), output);
  }

  // required string damageGrow = 8 [default = ""];
  if (has_damagegrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->damagegrow().data(), this->damagegrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->damagegrow(), output);
  }

  // required int32 pdd = 9 [default = 0];
  if (has_pdd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pdd(), output);
  }

  // required string pddGrow = 10 [default = ""];
  if (has_pddgrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pddgrow().data(), this->pddgrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->pddgrow(), output);
  }

  // required int32 mdd = 11 [default = 0];
  if (has_mdd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mdd(), output);
  }

  // required string mddGrow = 12 [default = ""];
  if (has_mddgrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mddgrow().data(), this->mddgrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->mddgrow(), output);
  }

  // required int32 hitLevel = 13 [default = 0];
  if (has_hitlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->hitlevel(), output);
  }

  // required string hitGrow = 14 [default = ""];
  if (has_hitgrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitgrow().data(), this->hitgrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->hitgrow(), output);
  }

  // required int32 dodgeLevel = 15 [default = 0];
  if (has_dodgelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->dodgelevel(), output);
  }

  // required string dodgeGrow = 16 [default = ""];
  if (has_dodgegrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dodgegrow().data(), this->dodgegrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->dodgegrow(), output);
  }

  // required int32 criLevel = 17 [default = 0];
  if (has_crilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->crilevel(), output);
  }

  // required string criGrow = 18 [default = ""];
  if (has_crigrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crigrow().data(), this->crigrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->crigrow(), output);
  }

  // required int32 tenacityLevel = 19 [default = 0];
  if (has_tenacitylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tenacitylevel(), output);
  }

  // required string tenacityGrow = 20 [default = ""];
  if (has_tenacitygrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tenacitygrow().data(), this->tenacitygrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->tenacitygrow(), output);
  }

  // required int32 pddPierce = 21 [default = 0];
  if (has_pddpierce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->pddpierce(), output);
  }

  // required string pddPierceGrow = 22 [default = ""];
  if (has_pddpiercegrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pddpiercegrow().data(), this->pddpiercegrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->pddpiercegrow(), output);
  }

  // required int32 type_Normal = 23 [default = 0];
  if (has_type_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->type_normal(), output);
  }

  // required int32 type_Skill = 24 [default = 0];
  if (has_type_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->type_skill(), output);
  }

  // required int32 percent_Skill = 25 [default = 0];
  if (has_percent_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->percent_skill(), output);
  }

  // required int32 addNum_Skill = 26 [default = 0];
  if (has_addnum_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->addnum_skill(), output);
  }

  // required int32 addNumGrow_Skill = 27 [default = 0];
  if (has_addnumgrow_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->addnumgrow_skill(), output);
  }

  // required int32 type_AoYi = 28 [default = 0];
  if (has_type_aoyi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->type_aoyi(), output);
  }

  // required int32 percent_AoYi = 29 [default = 0];
  if (has_percent_aoyi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->percent_aoyi(), output);
  }

  // required int32 addNum_AoYi = 30 [default = 0];
  if (has_addnum_aoyi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->addnum_aoyi(), output);
  }

  // required int32 addNumGrow_AoYi = 31 [default = 0];
  if (has_addnumgrow_aoyi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->addnumgrow_aoyi(), output);
  }

  // required string passiveSkill_1 = 32 [default = ""];
  if (has_passiveskill_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskill_1().data(), this->passiveskill_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->passiveskill_1(), output);
  }

  // required string passiveSkill_2 = 33 [default = ""];
  if (has_passiveskill_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskill_2().data(), this->passiveskill_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->passiveskill_2(), output);
  }

  // required string passiveSkill_3 = 34 [default = ""];
  if (has_passiveskill_3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskill_3().data(), this->passiveskill_3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->passiveskill_3(), output);
  }

  // required float range_X = 35 [default = 0];
  if (has_range_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->range_x(), output);
  }

  // required float range_Y = 36 [default = 0];
  if (has_range_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->range_y(), output);
  }

  // required float range_Z = 37 [default = 0];
  if (has_range_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->range_z(), output);
  }

  // required float attackSpeed = 38 [default = 0];
  if (has_attackspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->attackspeed(), output);
  }

  // required float h_Dis = 39 [default = 0];
  if (has_h_dis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->h_dis(), output);
  }

  // required float v_Dis = 40 [default = 0];
  if (has_v_dis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->v_dis(), output);
  }

  // required float moveSpeed = 41 [default = 0];
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->movespeed(), output);
  }

  // required int32 star = 42 [default = 0];
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->star(), output);
  }

  // required int32 stage_B = 43 [default = 0];
  if (has_stage_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->stage_b(), output);
  }

  // required string hitNum_B = 44 [default = ""];
  if (has_hitnum_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitnum_b().data(), this->hitnum_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      44, this->hitnum_b(), output);
  }

  // required int32 hitNum_A = 45 [default = 0];
  if (has_hitnum_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->hitnum_a(), output);
  }

  // required int32 posNum = 46 [default = 0];
  if (has_posnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->posnum(), output);
  }

  // required float recoverTime_Skill = 47 [default = 0];
  if (has_recovertime_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->recovertime_skill(), output);
  }

  // required int32 aoYiNum = 48 [default = 0];
  if (has_aoyinum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->aoyinum(), output);
  }

  // required string equip_Weapon = 49 [default = ""];
  if (has_equip_weapon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_weapon().data(), this->equip_weapon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      49, this->equip_weapon(), output);
  }

  // required string equip_Necklace = 50 [default = ""];
  if (has_equip_necklace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_necklace().data(), this->equip_necklace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->equip_necklace(), output);
  }

  // required string equip_Clothes = 51 [default = ""];
  if (has_equip_clothes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_clothes().data(), this->equip_clothes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      51, this->equip_clothes(), output);
  }

  // required string equip_Belt = 52 [default = ""];
  if (has_equip_belt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_belt().data(), this->equip_belt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      52, this->equip_belt(), output);
  }

  // required string equip_Ring = 53 [default = ""];
  if (has_equip_ring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_ring().data(), this->equip_ring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      53, this->equip_ring(), output);
  }

  // required string equip_Boot = 54 [default = ""];
  if (has_equip_boot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_boot().data(), this->equip_boot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      54, this->equip_boot(), output);
  }

  // required string needId = 55 [default = ""];
  if (has_needid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->needid().data(), this->needid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      55, this->needid(), output);
  }

  // required int32 skillTriggerProbability = 56 [default = 0];
  if (has_skilltriggerprobability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->skilltriggerprobability(), output);
  }

  // required float skillTriggerDuration = 57 [default = 0];
  if (has_skilltriggerduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->skilltriggerduration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HEROPROP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 area = 2 [default = 0];
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->area(), target);
  }

  // required int32 property = 3 [default = 0];
  if (has_property()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->property(), target);
  }

  // required int32 occupation = 4 [default = 0];
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->occupation(), target);
  }

  // required int32 health = 5 [default = 0];
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->health(), target);
  }

  // required string healthGrow = 6 [default = ""];
  if (has_healthgrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->healthgrow().data(), this->healthgrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->healthgrow(), target);
  }

  // required int32 damage = 7 [default = 0];
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->damage(), target);
  }

  // required string damageGrow = 8 [default = ""];
  if (has_damagegrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->damagegrow().data(), this->damagegrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->damagegrow(), target);
  }

  // required int32 pdd = 9 [default = 0];
  if (has_pdd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pdd(), target);
  }

  // required string pddGrow = 10 [default = ""];
  if (has_pddgrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pddgrow().data(), this->pddgrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pddgrow(), target);
  }

  // required int32 mdd = 11 [default = 0];
  if (has_mdd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mdd(), target);
  }

  // required string mddGrow = 12 [default = ""];
  if (has_mddgrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mddgrow().data(), this->mddgrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->mddgrow(), target);
  }

  // required int32 hitLevel = 13 [default = 0];
  if (has_hitlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->hitlevel(), target);
  }

  // required string hitGrow = 14 [default = ""];
  if (has_hitgrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitgrow().data(), this->hitgrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->hitgrow(), target);
  }

  // required int32 dodgeLevel = 15 [default = 0];
  if (has_dodgelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->dodgelevel(), target);
  }

  // required string dodgeGrow = 16 [default = ""];
  if (has_dodgegrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dodgegrow().data(), this->dodgegrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->dodgegrow(), target);
  }

  // required int32 criLevel = 17 [default = 0];
  if (has_crilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->crilevel(), target);
  }

  // required string criGrow = 18 [default = ""];
  if (has_crigrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crigrow().data(), this->crigrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->crigrow(), target);
  }

  // required int32 tenacityLevel = 19 [default = 0];
  if (has_tenacitylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->tenacitylevel(), target);
  }

  // required string tenacityGrow = 20 [default = ""];
  if (has_tenacitygrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tenacitygrow().data(), this->tenacitygrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->tenacitygrow(), target);
  }

  // required int32 pddPierce = 21 [default = 0];
  if (has_pddpierce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->pddpierce(), target);
  }

  // required string pddPierceGrow = 22 [default = ""];
  if (has_pddpiercegrow()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pddpiercegrow().data(), this->pddpiercegrow().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->pddpiercegrow(), target);
  }

  // required int32 type_Normal = 23 [default = 0];
  if (has_type_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->type_normal(), target);
  }

  // required int32 type_Skill = 24 [default = 0];
  if (has_type_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->type_skill(), target);
  }

  // required int32 percent_Skill = 25 [default = 0];
  if (has_percent_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->percent_skill(), target);
  }

  // required int32 addNum_Skill = 26 [default = 0];
  if (has_addnum_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->addnum_skill(), target);
  }

  // required int32 addNumGrow_Skill = 27 [default = 0];
  if (has_addnumgrow_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->addnumgrow_skill(), target);
  }

  // required int32 type_AoYi = 28 [default = 0];
  if (has_type_aoyi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->type_aoyi(), target);
  }

  // required int32 percent_AoYi = 29 [default = 0];
  if (has_percent_aoyi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->percent_aoyi(), target);
  }

  // required int32 addNum_AoYi = 30 [default = 0];
  if (has_addnum_aoyi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->addnum_aoyi(), target);
  }

  // required int32 addNumGrow_AoYi = 31 [default = 0];
  if (has_addnumgrow_aoyi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->addnumgrow_aoyi(), target);
  }

  // required string passiveSkill_1 = 32 [default = ""];
  if (has_passiveskill_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskill_1().data(), this->passiveskill_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->passiveskill_1(), target);
  }

  // required string passiveSkill_2 = 33 [default = ""];
  if (has_passiveskill_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskill_2().data(), this->passiveskill_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->passiveskill_2(), target);
  }

  // required string passiveSkill_3 = 34 [default = ""];
  if (has_passiveskill_3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskill_3().data(), this->passiveskill_3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->passiveskill_3(), target);
  }

  // required float range_X = 35 [default = 0];
  if (has_range_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->range_x(), target);
  }

  // required float range_Y = 36 [default = 0];
  if (has_range_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->range_y(), target);
  }

  // required float range_Z = 37 [default = 0];
  if (has_range_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->range_z(), target);
  }

  // required float attackSpeed = 38 [default = 0];
  if (has_attackspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->attackspeed(), target);
  }

  // required float h_Dis = 39 [default = 0];
  if (has_h_dis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->h_dis(), target);
  }

  // required float v_Dis = 40 [default = 0];
  if (has_v_dis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->v_dis(), target);
  }

  // required float moveSpeed = 41 [default = 0];
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->movespeed(), target);
  }

  // required int32 star = 42 [default = 0];
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->star(), target);
  }

  // required int32 stage_B = 43 [default = 0];
  if (has_stage_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->stage_b(), target);
  }

  // required string hitNum_B = 44 [default = ""];
  if (has_hitnum_b()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hitnum_b().data(), this->hitnum_b().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->hitnum_b(), target);
  }

  // required int32 hitNum_A = 45 [default = 0];
  if (has_hitnum_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->hitnum_a(), target);
  }

  // required int32 posNum = 46 [default = 0];
  if (has_posnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->posnum(), target);
  }

  // required float recoverTime_Skill = 47 [default = 0];
  if (has_recovertime_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(47, this->recovertime_skill(), target);
  }

  // required int32 aoYiNum = 48 [default = 0];
  if (has_aoyinum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->aoyinum(), target);
  }

  // required string equip_Weapon = 49 [default = ""];
  if (has_equip_weapon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_weapon().data(), this->equip_weapon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->equip_weapon(), target);
  }

  // required string equip_Necklace = 50 [default = ""];
  if (has_equip_necklace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_necklace().data(), this->equip_necklace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->equip_necklace(), target);
  }

  // required string equip_Clothes = 51 [default = ""];
  if (has_equip_clothes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_clothes().data(), this->equip_clothes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->equip_clothes(), target);
  }

  // required string equip_Belt = 52 [default = ""];
  if (has_equip_belt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_belt().data(), this->equip_belt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->equip_belt(), target);
  }

  // required string equip_Ring = 53 [default = ""];
  if (has_equip_ring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_ring().data(), this->equip_ring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        53, this->equip_ring(), target);
  }

  // required string equip_Boot = 54 [default = ""];
  if (has_equip_boot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_boot().data(), this->equip_boot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->equip_boot(), target);
  }

  // required string needId = 55 [default = ""];
  if (has_needid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->needid().data(), this->needid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->needid(), target);
  }

  // required int32 skillTriggerProbability = 56 [default = 0];
  if (has_skilltriggerprobability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->skilltriggerprobability(), target);
  }

  // required float skillTriggerDuration = 57 [default = 0];
  if (has_skilltriggerduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(57, this->skilltriggerduration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HEROPROP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 area = 2 [default = 0];
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area());
    }

    // required int32 property = 3 [default = 0];
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->property());
    }

    // required int32 occupation = 4 [default = 0];
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupation());
    }

    // required int32 health = 5 [default = 0];
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // required string healthGrow = 6 [default = ""];
    if (has_healthgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->healthgrow());
    }

    // required int32 damage = 7 [default = 0];
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // required string damageGrow = 8 [default = ""];
    if (has_damagegrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->damagegrow());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 pdd = 9 [default = 0];
    if (has_pdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pdd());
    }

    // required string pddGrow = 10 [default = ""];
    if (has_pddgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pddgrow());
    }

    // required int32 mdd = 11 [default = 0];
    if (has_mdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mdd());
    }

    // required string mddGrow = 12 [default = ""];
    if (has_mddgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mddgrow());
    }

    // required int32 hitLevel = 13 [default = 0];
    if (has_hitlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitlevel());
    }

    // required string hitGrow = 14 [default = ""];
    if (has_hitgrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hitgrow());
    }

    // required int32 dodgeLevel = 15 [default = 0];
    if (has_dodgelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodgelevel());
    }

    // required string dodgeGrow = 16 [default = ""];
    if (has_dodgegrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dodgegrow());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 criLevel = 17 [default = 0];
    if (has_crilevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crilevel());
    }

    // required string criGrow = 18 [default = ""];
    if (has_crigrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crigrow());
    }

    // required int32 tenacityLevel = 19 [default = 0];
    if (has_tenacitylevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tenacitylevel());
    }

    // required string tenacityGrow = 20 [default = ""];
    if (has_tenacitygrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tenacitygrow());
    }

    // required int32 pddPierce = 21 [default = 0];
    if (has_pddpierce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pddpierce());
    }

    // required string pddPierceGrow = 22 [default = ""];
    if (has_pddpiercegrow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pddpiercegrow());
    }

    // required int32 type_Normal = 23 [default = 0];
    if (has_type_normal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_normal());
    }

    // required int32 type_Skill = 24 [default = 0];
    if (has_type_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_skill());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 percent_Skill = 25 [default = 0];
    if (has_percent_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent_skill());
    }

    // required int32 addNum_Skill = 26 [default = 0];
    if (has_addnum_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addnum_skill());
    }

    // required int32 addNumGrow_Skill = 27 [default = 0];
    if (has_addnumgrow_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addnumgrow_skill());
    }

    // required int32 type_AoYi = 28 [default = 0];
    if (has_type_aoyi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_aoyi());
    }

    // required int32 percent_AoYi = 29 [default = 0];
    if (has_percent_aoyi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent_aoyi());
    }

    // required int32 addNum_AoYi = 30 [default = 0];
    if (has_addnum_aoyi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addnum_aoyi());
    }

    // required int32 addNumGrow_AoYi = 31 [default = 0];
    if (has_addnumgrow_aoyi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addnumgrow_aoyi());
    }

    // required string passiveSkill_1 = 32 [default = ""];
    if (has_passiveskill_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passiveskill_1());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required string passiveSkill_2 = 33 [default = ""];
    if (has_passiveskill_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passiveskill_2());
    }

    // required string passiveSkill_3 = 34 [default = ""];
    if (has_passiveskill_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passiveskill_3());
    }

    // required float range_X = 35 [default = 0];
    if (has_range_x()) {
      total_size += 2 + 4;
    }

    // required float range_Y = 36 [default = 0];
    if (has_range_y()) {
      total_size += 2 + 4;
    }

    // required float range_Z = 37 [default = 0];
    if (has_range_z()) {
      total_size += 2 + 4;
    }

    // required float attackSpeed = 38 [default = 0];
    if (has_attackspeed()) {
      total_size += 2 + 4;
    }

    // required float h_Dis = 39 [default = 0];
    if (has_h_dis()) {
      total_size += 2 + 4;
    }

    // required float v_Dis = 40 [default = 0];
    if (has_v_dis()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required float moveSpeed = 41 [default = 0];
    if (has_movespeed()) {
      total_size += 2 + 4;
    }

    // required int32 star = 42 [default = 0];
    if (has_star()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // required int32 stage_B = 43 [default = 0];
    if (has_stage_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_b());
    }

    // required string hitNum_B = 44 [default = ""];
    if (has_hitnum_b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hitnum_b());
    }

    // required int32 hitNum_A = 45 [default = 0];
    if (has_hitnum_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitnum_a());
    }

    // required int32 posNum = 46 [default = 0];
    if (has_posnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posnum());
    }

    // required float recoverTime_Skill = 47 [default = 0];
    if (has_recovertime_skill()) {
      total_size += 2 + 4;
    }

    // required int32 aoYiNum = 48 [default = 0];
    if (has_aoyinum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aoyinum());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // required string equip_Weapon = 49 [default = ""];
    if (has_equip_weapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_weapon());
    }

    // required string equip_Necklace = 50 [default = ""];
    if (has_equip_necklace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_necklace());
    }

    // required string equip_Clothes = 51 [default = ""];
    if (has_equip_clothes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_clothes());
    }

    // required string equip_Belt = 52 [default = ""];
    if (has_equip_belt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_belt());
    }

    // required string equip_Ring = 53 [default = ""];
    if (has_equip_ring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_ring());
    }

    // required string equip_Boot = 54 [default = ""];
    if (has_equip_boot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_boot());
    }

    // required string needId = 55 [default = ""];
    if (has_needid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->needid());
    }

    // required int32 skillTriggerProbability = 56 [default = 0];
    if (has_skilltriggerprobability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilltriggerprobability());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // required float skillTriggerDuration = 57 [default = 0];
    if (has_skilltriggerduration()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HEROPROP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HEROPROP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HEROPROP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HEROPROP::MergeFrom(const HEROPROP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_healthgrow()) {
      set_healthgrow(from.healthgrow());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_damagegrow()) {
      set_damagegrow(from.damagegrow());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pdd()) {
      set_pdd(from.pdd());
    }
    if (from.has_pddgrow()) {
      set_pddgrow(from.pddgrow());
    }
    if (from.has_mdd()) {
      set_mdd(from.mdd());
    }
    if (from.has_mddgrow()) {
      set_mddgrow(from.mddgrow());
    }
    if (from.has_hitlevel()) {
      set_hitlevel(from.hitlevel());
    }
    if (from.has_hitgrow()) {
      set_hitgrow(from.hitgrow());
    }
    if (from.has_dodgelevel()) {
      set_dodgelevel(from.dodgelevel());
    }
    if (from.has_dodgegrow()) {
      set_dodgegrow(from.dodgegrow());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_crilevel()) {
      set_crilevel(from.crilevel());
    }
    if (from.has_crigrow()) {
      set_crigrow(from.crigrow());
    }
    if (from.has_tenacitylevel()) {
      set_tenacitylevel(from.tenacitylevel());
    }
    if (from.has_tenacitygrow()) {
      set_tenacitygrow(from.tenacitygrow());
    }
    if (from.has_pddpierce()) {
      set_pddpierce(from.pddpierce());
    }
    if (from.has_pddpiercegrow()) {
      set_pddpiercegrow(from.pddpiercegrow());
    }
    if (from.has_type_normal()) {
      set_type_normal(from.type_normal());
    }
    if (from.has_type_skill()) {
      set_type_skill(from.type_skill());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_percent_skill()) {
      set_percent_skill(from.percent_skill());
    }
    if (from.has_addnum_skill()) {
      set_addnum_skill(from.addnum_skill());
    }
    if (from.has_addnumgrow_skill()) {
      set_addnumgrow_skill(from.addnumgrow_skill());
    }
    if (from.has_type_aoyi()) {
      set_type_aoyi(from.type_aoyi());
    }
    if (from.has_percent_aoyi()) {
      set_percent_aoyi(from.percent_aoyi());
    }
    if (from.has_addnum_aoyi()) {
      set_addnum_aoyi(from.addnum_aoyi());
    }
    if (from.has_addnumgrow_aoyi()) {
      set_addnumgrow_aoyi(from.addnumgrow_aoyi());
    }
    if (from.has_passiveskill_1()) {
      set_passiveskill_1(from.passiveskill_1());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_passiveskill_2()) {
      set_passiveskill_2(from.passiveskill_2());
    }
    if (from.has_passiveskill_3()) {
      set_passiveskill_3(from.passiveskill_3());
    }
    if (from.has_range_x()) {
      set_range_x(from.range_x());
    }
    if (from.has_range_y()) {
      set_range_y(from.range_y());
    }
    if (from.has_range_z()) {
      set_range_z(from.range_z());
    }
    if (from.has_attackspeed()) {
      set_attackspeed(from.attackspeed());
    }
    if (from.has_h_dis()) {
      set_h_dis(from.h_dis());
    }
    if (from.has_v_dis()) {
      set_v_dis(from.v_dis());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_stage_b()) {
      set_stage_b(from.stage_b());
    }
    if (from.has_hitnum_b()) {
      set_hitnum_b(from.hitnum_b());
    }
    if (from.has_hitnum_a()) {
      set_hitnum_a(from.hitnum_a());
    }
    if (from.has_posnum()) {
      set_posnum(from.posnum());
    }
    if (from.has_recovertime_skill()) {
      set_recovertime_skill(from.recovertime_skill());
    }
    if (from.has_aoyinum()) {
      set_aoyinum(from.aoyinum());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_equip_weapon()) {
      set_equip_weapon(from.equip_weapon());
    }
    if (from.has_equip_necklace()) {
      set_equip_necklace(from.equip_necklace());
    }
    if (from.has_equip_clothes()) {
      set_equip_clothes(from.equip_clothes());
    }
    if (from.has_equip_belt()) {
      set_equip_belt(from.equip_belt());
    }
    if (from.has_equip_ring()) {
      set_equip_ring(from.equip_ring());
    }
    if (from.has_equip_boot()) {
      set_equip_boot(from.equip_boot());
    }
    if (from.has_needid()) {
      set_needid(from.needid());
    }
    if (from.has_skilltriggerprobability()) {
      set_skilltriggerprobability(from.skilltriggerprobability());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_skilltriggerduration()) {
      set_skilltriggerduration(from.skilltriggerduration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HEROPROP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HEROPROP::CopyFrom(const HEROPROP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HEROPROP::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x01ffffff) != 0x01ffffff) return false;

  return true;
}

void HEROPROP::Swap(HEROPROP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(area_, other->area_);
    std::swap(property_, other->property_);
    std::swap(occupation_, other->occupation_);
    std::swap(health_, other->health_);
    std::swap(healthgrow_, other->healthgrow_);
    std::swap(damage_, other->damage_);
    std::swap(damagegrow_, other->damagegrow_);
    std::swap(pdd_, other->pdd_);
    std::swap(pddgrow_, other->pddgrow_);
    std::swap(mdd_, other->mdd_);
    std::swap(mddgrow_, other->mddgrow_);
    std::swap(hitlevel_, other->hitlevel_);
    std::swap(hitgrow_, other->hitgrow_);
    std::swap(dodgelevel_, other->dodgelevel_);
    std::swap(dodgegrow_, other->dodgegrow_);
    std::swap(crilevel_, other->crilevel_);
    std::swap(crigrow_, other->crigrow_);
    std::swap(tenacitylevel_, other->tenacitylevel_);
    std::swap(tenacitygrow_, other->tenacitygrow_);
    std::swap(pddpierce_, other->pddpierce_);
    std::swap(pddpiercegrow_, other->pddpiercegrow_);
    std::swap(type_normal_, other->type_normal_);
    std::swap(type_skill_, other->type_skill_);
    std::swap(percent_skill_, other->percent_skill_);
    std::swap(addnum_skill_, other->addnum_skill_);
    std::swap(addnumgrow_skill_, other->addnumgrow_skill_);
    std::swap(type_aoyi_, other->type_aoyi_);
    std::swap(percent_aoyi_, other->percent_aoyi_);
    std::swap(addnum_aoyi_, other->addnum_aoyi_);
    std::swap(addnumgrow_aoyi_, other->addnumgrow_aoyi_);
    std::swap(passiveskill_1_, other->passiveskill_1_);
    std::swap(passiveskill_2_, other->passiveskill_2_);
    std::swap(passiveskill_3_, other->passiveskill_3_);
    std::swap(range_x_, other->range_x_);
    std::swap(range_y_, other->range_y_);
    std::swap(range_z_, other->range_z_);
    std::swap(attackspeed_, other->attackspeed_);
    std::swap(h_dis_, other->h_dis_);
    std::swap(v_dis_, other->v_dis_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(star_, other->star_);
    std::swap(stage_b_, other->stage_b_);
    std::swap(hitnum_b_, other->hitnum_b_);
    std::swap(hitnum_a_, other->hitnum_a_);
    std::swap(posnum_, other->posnum_);
    std::swap(recovertime_skill_, other->recovertime_skill_);
    std::swap(aoyinum_, other->aoyinum_);
    std::swap(equip_weapon_, other->equip_weapon_);
    std::swap(equip_necklace_, other->equip_necklace_);
    std::swap(equip_clothes_, other->equip_clothes_);
    std::swap(equip_belt_, other->equip_belt_);
    std::swap(equip_ring_, other->equip_ring_);
    std::swap(equip_boot_, other->equip_boot_);
    std::swap(needid_, other->needid_);
    std::swap(skilltriggerprobability_, other->skilltriggerprobability_);
    std::swap(skilltriggerduration_, other->skilltriggerduration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HEROPROP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HEROPROP_descriptor_;
  metadata.reflection = HEROPROP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HEROPROP_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

HEROPROP_ARRAY::HEROPROP_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HEROPROP_ARRAY::InitAsDefaultInstance() {
}

HEROPROP_ARRAY::HEROPROP_ARRAY(const HEROPROP_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HEROPROP_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HEROPROP_ARRAY::~HEROPROP_ARRAY() {
  SharedDtor();
}

void HEROPROP_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HEROPROP_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HEROPROP_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HEROPROP_ARRAY_descriptor_;
}

const HEROPROP_ARRAY& HEROPROP_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

HEROPROP_ARRAY* HEROPROP_ARRAY::default_instance_ = NULL;

HEROPROP_ARRAY* HEROPROP_ARRAY::New() const {
  return new HEROPROP_ARRAY;
}

void HEROPROP_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HEROPROP_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HEROPROP items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HEROPROP_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HEROPROP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HEROPROP_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HEROPROP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HEROPROP_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .HEROPROP items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HEROPROP_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HEROPROP_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HEROPROP_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HEROPROP_ARRAY::MergeFrom(const HEROPROP_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HEROPROP_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HEROPROP_ARRAY::CopyFrom(const HEROPROP_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HEROPROP_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void HEROPROP_ARRAY::Swap(HEROPROP_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HEROPROP_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HEROPROP_ARRAY_descriptor_;
  metadata.reflection = HEROPROP_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HEROSKILL::kIdFieldNumber;
const int HEROSKILL::kFactorFieldNumber;
const int HEROSKILL::kDistanceFieldNumber;
const int HEROSKILL::kHeightFieldNumber;
const int HEROSKILL::kRangeXFieldNumber;
const int HEROSKILL::kRangeYFieldNumber;
const int HEROSKILL::kRangeZFieldNumber;
const int HEROSKILL::kWaitTimeFieldNumber;
const int HEROSKILL::kIntensityFieldNumber;
#endif  // !_MSC_VER

HEROSKILL::HEROSKILL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HEROSKILL::InitAsDefaultInstance() {
}

HEROSKILL::HEROSKILL(const HEROSKILL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HEROSKILL::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factor_ = 0;
  distance_ = 0;
  height_ = 0;
  range_x_ = 0;
  range_y_ = 0;
  range_z_ = 0;
  waittime_ = 0;
  intensity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HEROSKILL::~HEROSKILL() {
  SharedDtor();
}

void HEROSKILL::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void HEROSKILL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HEROSKILL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HEROSKILL_descriptor_;
}

const HEROSKILL& HEROSKILL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

HEROSKILL* HEROSKILL::default_instance_ = NULL;

HEROSKILL* HEROSKILL::New() const {
  return new HEROSKILL;
}

void HEROSKILL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    factor_ = 0;
    distance_ = 0;
    height_ = 0;
    range_x_ = 0;
    range_y_ = 0;
    range_z_ = 0;
    waittime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    intensity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HEROSKILL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_factor;
        break;
      }

      // required float factor = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_distance;
        break;
      }

      // required float distance = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }

      // required float height = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_range_x;
        break;
      }

      // required float range_x = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_x_)));
          set_has_range_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_range_y;
        break;
      }

      // required float range_y = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_y_)));
          set_has_range_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_range_z;
        break;
      }

      // required float range_z = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_z_)));
          set_has_range_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_waitTime;
        break;
      }

      // required float waitTime = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_waitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &waittime_)));
          set_has_waittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_intensity;
        break;
      }

      // required int32 intensity = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intensity_)));
          set_has_intensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HEROSKILL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required float factor = 2 [default = 0];
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->factor(), output);
  }

  // required float distance = 3 [default = 0];
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->distance(), output);
  }

  // required float height = 4 [default = 0];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  // required float range_x = 5 [default = 0];
  if (has_range_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->range_x(), output);
  }

  // required float range_y = 6 [default = 0];
  if (has_range_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->range_y(), output);
  }

  // required float range_z = 7 [default = 0];
  if (has_range_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->range_z(), output);
  }

  // required float waitTime = 8 [default = 0];
  if (has_waittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->waittime(), output);
  }

  // required int32 intensity = 9 [default = 0];
  if (has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->intensity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HEROSKILL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required float factor = 2 [default = 0];
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->factor(), target);
  }

  // required float distance = 3 [default = 0];
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->distance(), target);
  }

  // required float height = 4 [default = 0];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  // required float range_x = 5 [default = 0];
  if (has_range_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->range_x(), target);
  }

  // required float range_y = 6 [default = 0];
  if (has_range_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->range_y(), target);
  }

  // required float range_z = 7 [default = 0];
  if (has_range_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->range_z(), target);
  }

  // required float waitTime = 8 [default = 0];
  if (has_waittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->waittime(), target);
  }

  // required int32 intensity = 9 [default = 0];
  if (has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->intensity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HEROSKILL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required float factor = 2 [default = 0];
    if (has_factor()) {
      total_size += 1 + 4;
    }

    // required float distance = 3 [default = 0];
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // required float height = 4 [default = 0];
    if (has_height()) {
      total_size += 1 + 4;
    }

    // required float range_x = 5 [default = 0];
    if (has_range_x()) {
      total_size += 1 + 4;
    }

    // required float range_y = 6 [default = 0];
    if (has_range_y()) {
      total_size += 1 + 4;
    }

    // required float range_z = 7 [default = 0];
    if (has_range_z()) {
      total_size += 1 + 4;
    }

    // required float waitTime = 8 [default = 0];
    if (has_waittime()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 intensity = 9 [default = 0];
    if (has_intensity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intensity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HEROSKILL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HEROSKILL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HEROSKILL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HEROSKILL::MergeFrom(const HEROSKILL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_range_x()) {
      set_range_x(from.range_x());
    }
    if (from.has_range_y()) {
      set_range_y(from.range_y());
    }
    if (from.has_range_z()) {
      set_range_z(from.range_z());
    }
    if (from.has_waittime()) {
      set_waittime(from.waittime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_intensity()) {
      set_intensity(from.intensity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HEROSKILL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HEROSKILL::CopyFrom(const HEROSKILL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HEROSKILL::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void HEROSKILL::Swap(HEROSKILL* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(factor_, other->factor_);
    std::swap(distance_, other->distance_);
    std::swap(height_, other->height_);
    std::swap(range_x_, other->range_x_);
    std::swap(range_y_, other->range_y_);
    std::swap(range_z_, other->range_z_);
    std::swap(waittime_, other->waittime_);
    std::swap(intensity_, other->intensity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HEROSKILL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HEROSKILL_descriptor_;
  metadata.reflection = HEROSKILL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HEROSKILL_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

HEROSKILL_ARRAY::HEROSKILL_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HEROSKILL_ARRAY::InitAsDefaultInstance() {
}

HEROSKILL_ARRAY::HEROSKILL_ARRAY(const HEROSKILL_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HEROSKILL_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HEROSKILL_ARRAY::~HEROSKILL_ARRAY() {
  SharedDtor();
}

void HEROSKILL_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HEROSKILL_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HEROSKILL_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HEROSKILL_ARRAY_descriptor_;
}

const HEROSKILL_ARRAY& HEROSKILL_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

HEROSKILL_ARRAY* HEROSKILL_ARRAY::default_instance_ = NULL;

HEROSKILL_ARRAY* HEROSKILL_ARRAY::New() const {
  return new HEROSKILL_ARRAY;
}

void HEROSKILL_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HEROSKILL_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HEROSKILL items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HEROSKILL_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HEROSKILL items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HEROSKILL_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HEROSKILL items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HEROSKILL_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .HEROSKILL items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HEROSKILL_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HEROSKILL_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HEROSKILL_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HEROSKILL_ARRAY::MergeFrom(const HEROSKILL_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HEROSKILL_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HEROSKILL_ARRAY::CopyFrom(const HEROSKILL_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HEROSKILL_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void HEROSKILL_ARRAY::Swap(HEROSKILL_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HEROSKILL_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HEROSKILL_ARRAY_descriptor_;
  metadata.reflection = HEROSKILL_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HEROSTAR::kIdFieldNumber;
const int HEROSTAR::kNeedNumFieldNumber;
#endif  // !_MSC_VER

HEROSTAR::HEROSTAR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HEROSTAR::InitAsDefaultInstance() {
}

HEROSTAR::HEROSTAR(const HEROSTAR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HEROSTAR::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  neednum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HEROSTAR::~HEROSTAR() {
  SharedDtor();
}

void HEROSTAR::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void HEROSTAR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HEROSTAR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HEROSTAR_descriptor_;
}

const HEROSTAR& HEROSTAR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

HEROSTAR* HEROSTAR::default_instance_ = NULL;

HEROSTAR* HEROSTAR::New() const {
  return new HEROSTAR;
}

void HEROSTAR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    neednum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HEROSTAR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needNum;
        break;
      }

      // required int32 needNum = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &neednum_)));
          set_has_neednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HEROSTAR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 needNum = 2 [default = 0];
  if (has_neednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->neednum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HEROSTAR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 needNum = 2 [default = 0];
  if (has_neednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->neednum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HEROSTAR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 needNum = 2 [default = 0];
    if (has_neednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->neednum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HEROSTAR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HEROSTAR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HEROSTAR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HEROSTAR::MergeFrom(const HEROSTAR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_neednum()) {
      set_neednum(from.neednum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HEROSTAR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HEROSTAR::CopyFrom(const HEROSTAR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HEROSTAR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HEROSTAR::Swap(HEROSTAR* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(neednum_, other->neednum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HEROSTAR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HEROSTAR_descriptor_;
  metadata.reflection = HEROSTAR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HEROSTAR_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

HEROSTAR_ARRAY::HEROSTAR_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HEROSTAR_ARRAY::InitAsDefaultInstance() {
}

HEROSTAR_ARRAY::HEROSTAR_ARRAY(const HEROSTAR_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HEROSTAR_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HEROSTAR_ARRAY::~HEROSTAR_ARRAY() {
  SharedDtor();
}

void HEROSTAR_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HEROSTAR_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HEROSTAR_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HEROSTAR_ARRAY_descriptor_;
}

const HEROSTAR_ARRAY& HEROSTAR_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

HEROSTAR_ARRAY* HEROSTAR_ARRAY::default_instance_ = NULL;

HEROSTAR_ARRAY* HEROSTAR_ARRAY::New() const {
  return new HEROSTAR_ARRAY;
}

void HEROSTAR_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HEROSTAR_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HEROSTAR items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HEROSTAR_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HEROSTAR items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HEROSTAR_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HEROSTAR items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HEROSTAR_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .HEROSTAR items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HEROSTAR_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HEROSTAR_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HEROSTAR_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HEROSTAR_ARRAY::MergeFrom(const HEROSTAR_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HEROSTAR_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HEROSTAR_ARRAY::CopyFrom(const HEROSTAR_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HEROSTAR_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void HEROSTAR_ARRAY::Swap(HEROSTAR_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HEROSTAR_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HEROSTAR_ARRAY_descriptor_;
  metadata.reflection = HEROSTAR_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MONSTERPROP::kIdFieldNumber;
const int MONSTERPROP::kAreaFieldNumber;
const int MONSTERPROP::kOccupationFieldNumber;
const int MONSTERPROP::kLevelFieldNumber;
const int MONSTERPROP::kHealthFieldNumber;
const int MONSTERPROP::kDamageFieldNumber;
const int MONSTERPROP::kPddFieldNumber;
const int MONSTERPROP::kMddFieldNumber;
const int MONSTERPROP::kHitLevelFieldNumber;
const int MONSTERPROP::kDodgeLevelFieldNumber;
const int MONSTERPROP::kCriLevelFieldNumber;
const int MONSTERPROP::kTenacityLevelFieldNumber;
const int MONSTERPROP::kPddPierceFieldNumber;
const int MONSTERPROP::kRangeXFieldNumber;
const int MONSTERPROP::kRangeYFieldNumber;
const int MONSTERPROP::kRangeZFieldNumber;
const int MONSTERPROP::kAttackSpeedFieldNumber;
const int MONSTERPROP::kHDisFieldNumber;
const int MONSTERPROP::kVDisFieldNumber;
const int MONSTERPROP::kMoveSpeedFieldNumber;
const int MONSTERPROP::kStarFieldNumber;
const int MONSTERPROP::kMaxIntensityFieldNumber;
const int MONSTERPROP::kRecoverIntensityRateFieldNumber;
const int MONSTERPROP::kMinIntensityFieldNumber;
const int MONSTERPROP::kTypeNormalFieldNumber;
const int MONSTERPROP::kPassiveSkillIdFieldNumber;
const int MONSTERPROP::kPassiveSkillLevelFieldNumber;
#endif  // !_MSC_VER

MONSTERPROP::MONSTERPROP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MONSTERPROP::InitAsDefaultInstance() {
}

MONSTERPROP::MONSTERPROP(const MONSTERPROP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MONSTERPROP::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  area_ = 0;
  occupation_ = 0;
  level_ = 0;
  health_ = 0;
  damage_ = 0;
  pdd_ = 0;
  mdd_ = 0;
  hitlevel_ = 0;
  dodgelevel_ = 0;
  crilevel_ = 0;
  tenacitylevel_ = 0;
  pddpierce_ = 0;
  range_x_ = 0;
  range_y_ = 0;
  range_z_ = 0;
  attackspeed_ = 0;
  h_dis_ = 0;
  v_dis_ = 0;
  movespeed_ = 0;
  star_ = 0;
  maxintensity_ = 0;
  recoverintensityrate_ = 0;
  minintensity_ = 0;
  type_normal_ = 0;
  passiveskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passiveskilllevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MONSTERPROP::~MONSTERPROP() {
  SharedDtor();
}

void MONSTERPROP::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (passiveskillid_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskillid_;
  }
  if (passiveskilllevel_ != &::google::protobuf::internal::kEmptyString) {
    delete passiveskilllevel_;
  }
  if (this != default_instance_) {
  }
}

void MONSTERPROP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MONSTERPROP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MONSTERPROP_descriptor_;
}

const MONSTERPROP& MONSTERPROP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

MONSTERPROP* MONSTERPROP::default_instance_ = NULL;

MONSTERPROP* MONSTERPROP::New() const {
  return new MONSTERPROP;
}

void MONSTERPROP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    area_ = 0;
    occupation_ = 0;
    level_ = 0;
    health_ = 0;
    damage_ = 0;
    pdd_ = 0;
    mdd_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hitlevel_ = 0;
    dodgelevel_ = 0;
    crilevel_ = 0;
    tenacitylevel_ = 0;
    pddpierce_ = 0;
    range_x_ = 0;
    range_y_ = 0;
    range_z_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    attackspeed_ = 0;
    h_dis_ = 0;
    v_dis_ = 0;
    movespeed_ = 0;
    star_ = 0;
    maxintensity_ = 0;
    recoverintensityrate_ = 0;
    minintensity_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    type_normal_ = 0;
    if (has_passiveskillid()) {
      if (passiveskillid_ != &::google::protobuf::internal::kEmptyString) {
        passiveskillid_->clear();
      }
    }
    if (has_passiveskilllevel()) {
      if (passiveskilllevel_ != &::google::protobuf::internal::kEmptyString) {
        passiveskilllevel_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MONSTERPROP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_area;
        break;
      }

      // required int32 area = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_occupation;
        break;
      }

      // required int32 occupation = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_health;
        break;
      }

      // required int32 health = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_damage;
        break;
      }

      // required int32 damage = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pdd;
        break;
      }

      // required int32 pdd = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pdd_)));
          set_has_pdd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mdd;
        break;
      }

      // required int32 mdd = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdd_)));
          set_has_mdd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hitLevel;
        break;
      }

      // required int32 hitLevel = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitlevel_)));
          set_has_hitlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dodgeLevel;
        break;
      }

      // required int32 dodgeLevel = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodgeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodgelevel_)));
          set_has_dodgelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_criLevel;
        break;
      }

      // required int32 criLevel = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_criLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crilevel_)));
          set_has_crilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tenacityLevel;
        break;
      }

      // required int32 tenacityLevel = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacityLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tenacitylevel_)));
          set_has_tenacitylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pddPierce;
        break;
      }

      // required int32 pddPierce = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pddPierce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pddpierce_)));
          set_has_pddpierce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_range_X;
        break;
      }

      // required float range_X = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_x_)));
          set_has_range_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_range_Y;
        break;
      }

      // required float range_Y = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_y_)));
          set_has_range_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_range_Z;
        break;
      }

      // required float range_Z = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_z_)));
          set_has_range_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_attackSpeed;
        break;
      }

      // required float attackSpeed = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_attackSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attackspeed_)));
          set_has_attackspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_h_Dis;
        break;
      }

      // required float h_Dis = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_h_Dis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_dis_)));
          set_has_h_dis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_v_Dis;
        break;
      }

      // required float v_Dis = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_v_Dis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_dis_)));
          set_has_v_dis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_moveSpeed;
        break;
      }

      // required float moveSpeed = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_moveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_star;
        break;
      }

      // required int32 star = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_maxIntensity;
        break;
      }

      // required int32 maxIntensity = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxIntensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxintensity_)));
          set_has_maxintensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_recoverIntensityRate;
        break;
      }

      // required int32 recoverIntensityRate = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recoverIntensityRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recoverintensityrate_)));
          set_has_recoverintensityrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_minIntensity;
        break;
      }

      // required int32 minIntensity = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minIntensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minintensity_)));
          set_has_minintensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_type_Normal;
        break;
      }

      // required int32 type_Normal = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_Normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_normal_)));
          set_has_type_normal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_passiveSkillId;
        break;
      }

      // required string passiveSkillId = 26 [default = ""];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passiveSkillId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passiveskillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passiveskillid().data(), this->passiveskillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_passiveSkillLevel;
        break;
      }

      // required string passiveSkillLevel = 27 [default = ""];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passiveSkillLevel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passiveskilllevel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passiveskilllevel().data(), this->passiveskilllevel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MONSTERPROP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 area = 2 [default = 0];
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->area(), output);
  }

  // required int32 occupation = 3 [default = 0];
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->occupation(), output);
  }

  // required int32 level = 4 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 health = 5 [default = 0];
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->health(), output);
  }

  // required int32 damage = 6 [default = 0];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->damage(), output);
  }

  // required int32 pdd = 7 [default = 0];
  if (has_pdd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pdd(), output);
  }

  // required int32 mdd = 8 [default = 0];
  if (has_mdd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mdd(), output);
  }

  // required int32 hitLevel = 9 [default = 0];
  if (has_hitlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hitlevel(), output);
  }

  // required int32 dodgeLevel = 10 [default = 0];
  if (has_dodgelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dodgelevel(), output);
  }

  // required int32 criLevel = 11 [default = 0];
  if (has_crilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->crilevel(), output);
  }

  // required int32 tenacityLevel = 12 [default = 0];
  if (has_tenacitylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tenacitylevel(), output);
  }

  // required int32 pddPierce = 13 [default = 0];
  if (has_pddpierce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pddpierce(), output);
  }

  // required float range_X = 14 [default = 0];
  if (has_range_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->range_x(), output);
  }

  // required float range_Y = 15 [default = 0];
  if (has_range_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->range_y(), output);
  }

  // required float range_Z = 16 [default = 0];
  if (has_range_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->range_z(), output);
  }

  // required float attackSpeed = 17 [default = 0];
  if (has_attackspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->attackspeed(), output);
  }

  // required float h_Dis = 18 [default = 0];
  if (has_h_dis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->h_dis(), output);
  }

  // required float v_Dis = 19 [default = 0];
  if (has_v_dis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->v_dis(), output);
  }

  // required float moveSpeed = 20 [default = 0];
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->movespeed(), output);
  }

  // required int32 star = 21 [default = 0];
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->star(), output);
  }

  // required int32 maxIntensity = 22 [default = 0];
  if (has_maxintensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->maxintensity(), output);
  }

  // required int32 recoverIntensityRate = 23 [default = 0];
  if (has_recoverintensityrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->recoverintensityrate(), output);
  }

  // required int32 minIntensity = 24 [default = 0];
  if (has_minintensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->minintensity(), output);
  }

  // required int32 type_Normal = 25 [default = 0];
  if (has_type_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->type_normal(), output);
  }

  // required string passiveSkillId = 26 [default = ""];
  if (has_passiveskillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskillid().data(), this->passiveskillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->passiveskillid(), output);
  }

  // required string passiveSkillLevel = 27 [default = ""];
  if (has_passiveskilllevel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskilllevel().data(), this->passiveskilllevel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->passiveskilllevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MONSTERPROP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 area = 2 [default = 0];
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->area(), target);
  }

  // required int32 occupation = 3 [default = 0];
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->occupation(), target);
  }

  // required int32 level = 4 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 health = 5 [default = 0];
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->health(), target);
  }

  // required int32 damage = 6 [default = 0];
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->damage(), target);
  }

  // required int32 pdd = 7 [default = 0];
  if (has_pdd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pdd(), target);
  }

  // required int32 mdd = 8 [default = 0];
  if (has_mdd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mdd(), target);
  }

  // required int32 hitLevel = 9 [default = 0];
  if (has_hitlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hitlevel(), target);
  }

  // required int32 dodgeLevel = 10 [default = 0];
  if (has_dodgelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dodgelevel(), target);
  }

  // required int32 criLevel = 11 [default = 0];
  if (has_crilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->crilevel(), target);
  }

  // required int32 tenacityLevel = 12 [default = 0];
  if (has_tenacitylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tenacitylevel(), target);
  }

  // required int32 pddPierce = 13 [default = 0];
  if (has_pddpierce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pddpierce(), target);
  }

  // required float range_X = 14 [default = 0];
  if (has_range_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->range_x(), target);
  }

  // required float range_Y = 15 [default = 0];
  if (has_range_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->range_y(), target);
  }

  // required float range_Z = 16 [default = 0];
  if (has_range_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->range_z(), target);
  }

  // required float attackSpeed = 17 [default = 0];
  if (has_attackspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->attackspeed(), target);
  }

  // required float h_Dis = 18 [default = 0];
  if (has_h_dis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->h_dis(), target);
  }

  // required float v_Dis = 19 [default = 0];
  if (has_v_dis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->v_dis(), target);
  }

  // required float moveSpeed = 20 [default = 0];
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->movespeed(), target);
  }

  // required int32 star = 21 [default = 0];
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->star(), target);
  }

  // required int32 maxIntensity = 22 [default = 0];
  if (has_maxintensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->maxintensity(), target);
  }

  // required int32 recoverIntensityRate = 23 [default = 0];
  if (has_recoverintensityrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->recoverintensityrate(), target);
  }

  // required int32 minIntensity = 24 [default = 0];
  if (has_minintensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->minintensity(), target);
  }

  // required int32 type_Normal = 25 [default = 0];
  if (has_type_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->type_normal(), target);
  }

  // required string passiveSkillId = 26 [default = ""];
  if (has_passiveskillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskillid().data(), this->passiveskillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->passiveskillid(), target);
  }

  // required string passiveSkillLevel = 27 [default = ""];
  if (has_passiveskilllevel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passiveskilllevel().data(), this->passiveskilllevel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->passiveskilllevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MONSTERPROP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 area = 2 [default = 0];
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area());
    }

    // required int32 occupation = 3 [default = 0];
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupation());
    }

    // required int32 level = 4 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 health = 5 [default = 0];
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // required int32 damage = 6 [default = 0];
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // required int32 pdd = 7 [default = 0];
    if (has_pdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pdd());
    }

    // required int32 mdd = 8 [default = 0];
    if (has_mdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mdd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 hitLevel = 9 [default = 0];
    if (has_hitlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitlevel());
    }

    // required int32 dodgeLevel = 10 [default = 0];
    if (has_dodgelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodgelevel());
    }

    // required int32 criLevel = 11 [default = 0];
    if (has_crilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crilevel());
    }

    // required int32 tenacityLevel = 12 [default = 0];
    if (has_tenacitylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tenacitylevel());
    }

    // required int32 pddPierce = 13 [default = 0];
    if (has_pddpierce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pddpierce());
    }

    // required float range_X = 14 [default = 0];
    if (has_range_x()) {
      total_size += 1 + 4;
    }

    // required float range_Y = 15 [default = 0];
    if (has_range_y()) {
      total_size += 1 + 4;
    }

    // required float range_Z = 16 [default = 0];
    if (has_range_z()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required float attackSpeed = 17 [default = 0];
    if (has_attackspeed()) {
      total_size += 2 + 4;
    }

    // required float h_Dis = 18 [default = 0];
    if (has_h_dis()) {
      total_size += 2 + 4;
    }

    // required float v_Dis = 19 [default = 0];
    if (has_v_dis()) {
      total_size += 2 + 4;
    }

    // required float moveSpeed = 20 [default = 0];
    if (has_movespeed()) {
      total_size += 2 + 4;
    }

    // required int32 star = 21 [default = 0];
    if (has_star()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // required int32 maxIntensity = 22 [default = 0];
    if (has_maxintensity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxintensity());
    }

    // required int32 recoverIntensityRate = 23 [default = 0];
    if (has_recoverintensityrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recoverintensityrate());
    }

    // required int32 minIntensity = 24 [default = 0];
    if (has_minintensity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minintensity());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 type_Normal = 25 [default = 0];
    if (has_type_normal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_normal());
    }

    // required string passiveSkillId = 26 [default = ""];
    if (has_passiveskillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passiveskillid());
    }

    // required string passiveSkillLevel = 27 [default = ""];
    if (has_passiveskilllevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passiveskilllevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MONSTERPROP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MONSTERPROP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MONSTERPROP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MONSTERPROP::MergeFrom(const MONSTERPROP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_pdd()) {
      set_pdd(from.pdd());
    }
    if (from.has_mdd()) {
      set_mdd(from.mdd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hitlevel()) {
      set_hitlevel(from.hitlevel());
    }
    if (from.has_dodgelevel()) {
      set_dodgelevel(from.dodgelevel());
    }
    if (from.has_crilevel()) {
      set_crilevel(from.crilevel());
    }
    if (from.has_tenacitylevel()) {
      set_tenacitylevel(from.tenacitylevel());
    }
    if (from.has_pddpierce()) {
      set_pddpierce(from.pddpierce());
    }
    if (from.has_range_x()) {
      set_range_x(from.range_x());
    }
    if (from.has_range_y()) {
      set_range_y(from.range_y());
    }
    if (from.has_range_z()) {
      set_range_z(from.range_z());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_attackspeed()) {
      set_attackspeed(from.attackspeed());
    }
    if (from.has_h_dis()) {
      set_h_dis(from.h_dis());
    }
    if (from.has_v_dis()) {
      set_v_dis(from.v_dis());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_maxintensity()) {
      set_maxintensity(from.maxintensity());
    }
    if (from.has_recoverintensityrate()) {
      set_recoverintensityrate(from.recoverintensityrate());
    }
    if (from.has_minintensity()) {
      set_minintensity(from.minintensity());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_type_normal()) {
      set_type_normal(from.type_normal());
    }
    if (from.has_passiveskillid()) {
      set_passiveskillid(from.passiveskillid());
    }
    if (from.has_passiveskilllevel()) {
      set_passiveskilllevel(from.passiveskilllevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MONSTERPROP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MONSTERPROP::CopyFrom(const MONSTERPROP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MONSTERPROP::IsInitialized() const {
  if ((_has_bits_[0] & 0x07ffffff) != 0x07ffffff) return false;

  return true;
}

void MONSTERPROP::Swap(MONSTERPROP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(area_, other->area_);
    std::swap(occupation_, other->occupation_);
    std::swap(level_, other->level_);
    std::swap(health_, other->health_);
    std::swap(damage_, other->damage_);
    std::swap(pdd_, other->pdd_);
    std::swap(mdd_, other->mdd_);
    std::swap(hitlevel_, other->hitlevel_);
    std::swap(dodgelevel_, other->dodgelevel_);
    std::swap(crilevel_, other->crilevel_);
    std::swap(tenacitylevel_, other->tenacitylevel_);
    std::swap(pddpierce_, other->pddpierce_);
    std::swap(range_x_, other->range_x_);
    std::swap(range_y_, other->range_y_);
    std::swap(range_z_, other->range_z_);
    std::swap(attackspeed_, other->attackspeed_);
    std::swap(h_dis_, other->h_dis_);
    std::swap(v_dis_, other->v_dis_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(star_, other->star_);
    std::swap(maxintensity_, other->maxintensity_);
    std::swap(recoverintensityrate_, other->recoverintensityrate_);
    std::swap(minintensity_, other->minintensity_);
    std::swap(type_normal_, other->type_normal_);
    std::swap(passiveskillid_, other->passiveskillid_);
    std::swap(passiveskilllevel_, other->passiveskilllevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MONSTERPROP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MONSTERPROP_descriptor_;
  metadata.reflection = MONSTERPROP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MONSTERPROP_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

MONSTERPROP_ARRAY::MONSTERPROP_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MONSTERPROP_ARRAY::InitAsDefaultInstance() {
}

MONSTERPROP_ARRAY::MONSTERPROP_ARRAY(const MONSTERPROP_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MONSTERPROP_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MONSTERPROP_ARRAY::~MONSTERPROP_ARRAY() {
  SharedDtor();
}

void MONSTERPROP_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MONSTERPROP_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MONSTERPROP_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MONSTERPROP_ARRAY_descriptor_;
}

const MONSTERPROP_ARRAY& MONSTERPROP_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

MONSTERPROP_ARRAY* MONSTERPROP_ARRAY::default_instance_ = NULL;

MONSTERPROP_ARRAY* MONSTERPROP_ARRAY::New() const {
  return new MONSTERPROP_ARRAY;
}

void MONSTERPROP_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MONSTERPROP_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MONSTERPROP items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MONSTERPROP_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MONSTERPROP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MONSTERPROP_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MONSTERPROP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MONSTERPROP_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .MONSTERPROP items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MONSTERPROP_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MONSTERPROP_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MONSTERPROP_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MONSTERPROP_ARRAY::MergeFrom(const MONSTERPROP_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MONSTERPROP_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MONSTERPROP_ARRAY::CopyFrom(const MONSTERPROP_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MONSTERPROP_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void MONSTERPROP_ARRAY::Swap(MONSTERPROP_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MONSTERPROP_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MONSTERPROP_ARRAY_descriptor_;
  metadata.reflection = MONSTERPROP_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PASSIVE::kIdFieldNumber;
const int PASSIVE::kTriggerEnumFieldNumber;
const int PASSIVE::kTriggerIdFieldNumber;
const int PASSIVE::kBuffIdFieldNumber;
const int PASSIVE::kTargetTeamFieldNumber;
const int PASSIVE::kTargetStateFieldNumber;
const int PASSIVE::kTargetOccupationFieldNumber;
#endif  // !_MSC_VER

PASSIVE::PASSIVE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PASSIVE::InitAsDefaultInstance() {
}

PASSIVE::PASSIVE(const PASSIVE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PASSIVE::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  triggerenum_ = 0;
  triggerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buffid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_team_ = 0;
  target_state_ = 0;
  target_occupation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PASSIVE::~PASSIVE() {
  SharedDtor();
}

void PASSIVE::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (triggerid_ != &::google::protobuf::internal::kEmptyString) {
    delete triggerid_;
  }
  if (buffid_ != &::google::protobuf::internal::kEmptyString) {
    delete buffid_;
  }
  if (this != default_instance_) {
  }
}

void PASSIVE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PASSIVE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PASSIVE_descriptor_;
}

const PASSIVE& PASSIVE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

PASSIVE* PASSIVE::default_instance_ = NULL;

PASSIVE* PASSIVE::New() const {
  return new PASSIVE;
}

void PASSIVE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    triggerenum_ = 0;
    if (has_triggerid()) {
      if (triggerid_ != &::google::protobuf::internal::kEmptyString) {
        triggerid_->clear();
      }
    }
    if (has_buffid()) {
      if (buffid_ != &::google::protobuf::internal::kEmptyString) {
        buffid_->clear();
      }
    }
    target_team_ = 0;
    target_state_ = 0;
    target_occupation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PASSIVE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_triggerEnum;
        break;
      }

      // required int32 triggerEnum = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_triggerEnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerenum_)));
          set_has_triggerenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_triggerId;
        break;
      }

      // required string triggerId = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_triggerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_triggerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->triggerid().data(), this->triggerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buffId;
        break;
      }

      // required string buffId = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buffid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buffid().data(), this->buffid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_target_Team;
        break;
      }

      // required int32 target_Team = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_Team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_team_)));
          set_has_target_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_target_State;
        break;
      }

      // required int32 target_State = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_state_)));
          set_has_target_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_target_Occupation;
        break;
      }

      // required int32 target_Occupation = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_Occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_occupation_)));
          set_has_target_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PASSIVE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 triggerEnum = 2 [default = 0];
  if (has_triggerenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->triggerenum(), output);
  }

  // required string triggerId = 3 [default = ""];
  if (has_triggerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->triggerid().data(), this->triggerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->triggerid(), output);
  }

  // required string buffId = 4 [default = ""];
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buffid().data(), this->buffid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->buffid(), output);
  }

  // required int32 target_Team = 5 [default = 0];
  if (has_target_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->target_team(), output);
  }

  // required int32 target_State = 6 [default = 0];
  if (has_target_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->target_state(), output);
  }

  // required int32 target_Occupation = 7 [default = 0];
  if (has_target_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->target_occupation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PASSIVE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 triggerEnum = 2 [default = 0];
  if (has_triggerenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->triggerenum(), target);
  }

  // required string triggerId = 3 [default = ""];
  if (has_triggerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->triggerid().data(), this->triggerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->triggerid(), target);
  }

  // required string buffId = 4 [default = ""];
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buffid().data(), this->buffid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->buffid(), target);
  }

  // required int32 target_Team = 5 [default = 0];
  if (has_target_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->target_team(), target);
  }

  // required int32 target_State = 6 [default = 0];
  if (has_target_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->target_state(), target);
  }

  // required int32 target_Occupation = 7 [default = 0];
  if (has_target_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->target_occupation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PASSIVE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 triggerEnum = 2 [default = 0];
    if (has_triggerenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerenum());
    }

    // required string triggerId = 3 [default = ""];
    if (has_triggerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->triggerid());
    }

    // required string buffId = 4 [default = ""];
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buffid());
    }

    // required int32 target_Team = 5 [default = 0];
    if (has_target_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_team());
    }

    // required int32 target_State = 6 [default = 0];
    if (has_target_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_state());
    }

    // required int32 target_Occupation = 7 [default = 0];
    if (has_target_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_occupation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PASSIVE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PASSIVE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PASSIVE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PASSIVE::MergeFrom(const PASSIVE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_triggerenum()) {
      set_triggerenum(from.triggerenum());
    }
    if (from.has_triggerid()) {
      set_triggerid(from.triggerid());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_target_team()) {
      set_target_team(from.target_team());
    }
    if (from.has_target_state()) {
      set_target_state(from.target_state());
    }
    if (from.has_target_occupation()) {
      set_target_occupation(from.target_occupation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PASSIVE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PASSIVE::CopyFrom(const PASSIVE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PASSIVE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void PASSIVE::Swap(PASSIVE* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(triggerenum_, other->triggerenum_);
    std::swap(triggerid_, other->triggerid_);
    std::swap(buffid_, other->buffid_);
    std::swap(target_team_, other->target_team_);
    std::swap(target_state_, other->target_state_);
    std::swap(target_occupation_, other->target_occupation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PASSIVE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PASSIVE_descriptor_;
  metadata.reflection = PASSIVE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PASSIVE_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

PASSIVE_ARRAY::PASSIVE_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PASSIVE_ARRAY::InitAsDefaultInstance() {
}

PASSIVE_ARRAY::PASSIVE_ARRAY(const PASSIVE_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PASSIVE_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PASSIVE_ARRAY::~PASSIVE_ARRAY() {
  SharedDtor();
}

void PASSIVE_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PASSIVE_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PASSIVE_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PASSIVE_ARRAY_descriptor_;
}

const PASSIVE_ARRAY& PASSIVE_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

PASSIVE_ARRAY* PASSIVE_ARRAY::default_instance_ = NULL;

PASSIVE_ARRAY* PASSIVE_ARRAY::New() const {
  return new PASSIVE_ARRAY;
}

void PASSIVE_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PASSIVE_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PASSIVE items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PASSIVE_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PASSIVE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PASSIVE_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PASSIVE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PASSIVE_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .PASSIVE items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PASSIVE_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PASSIVE_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PASSIVE_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PASSIVE_ARRAY::MergeFrom(const PASSIVE_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PASSIVE_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PASSIVE_ARRAY::CopyFrom(const PASSIVE_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PASSIVE_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void PASSIVE_ARRAY::Swap(PASSIVE_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PASSIVE_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PASSIVE_ARRAY_descriptor_;
  metadata.reflection = PASSIVE_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PRIZESHOW::kIdFieldNumber;
const int PRIZESHOW::kTypeFieldNumber;
const int PRIZESHOW::kCountsFieldNumber;
const int PRIZESHOW::kAwardsFieldNumber;
#endif  // !_MSC_VER

PRIZESHOW::PRIZESHOW()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PRIZESHOW::InitAsDefaultInstance() {
}

PRIZESHOW::PRIZESHOW(const PRIZESHOW& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PRIZESHOW::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  counts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awards_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRIZESHOW::~PRIZESHOW() {
  SharedDtor();
}

void PRIZESHOW::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (counts_ != &::google::protobuf::internal::kEmptyString) {
    delete counts_;
  }
  if (awards_ != &::google::protobuf::internal::kEmptyString) {
    delete awards_;
  }
  if (this != default_instance_) {
  }
}

void PRIZESHOW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PRIZESHOW::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRIZESHOW_descriptor_;
}

const PRIZESHOW& PRIZESHOW::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

PRIZESHOW* PRIZESHOW::default_instance_ = NULL;

PRIZESHOW* PRIZESHOW::New() const {
  return new PRIZESHOW;
}

void PRIZESHOW::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_counts()) {
      if (counts_ != &::google::protobuf::internal::kEmptyString) {
        counts_->clear();
      }
    }
    if (has_awards()) {
      if (awards_ != &::google::protobuf::internal::kEmptyString) {
        awards_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PRIZESHOW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_counts;
        break;
      }

      // required string counts = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_counts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->counts().data(), this->counts().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_awards;
        break;
      }

      // required string awards = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awards()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->awards().data(), this->awards().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PRIZESHOW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string type = 2 [default = ""];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required string counts = 3 [default = ""];
  if (has_counts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->counts().data(), this->counts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->counts(), output);
  }

  // required string awards = 4 [default = ""];
  if (has_awards()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awards().data(), this->awards().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->awards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PRIZESHOW::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string type = 2 [default = ""];
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required string counts = 3 [default = ""];
  if (has_counts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->counts().data(), this->counts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->counts(), target);
  }

  // required string awards = 4 [default = ""];
  if (has_awards()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->awards().data(), this->awards().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->awards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PRIZESHOW::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string type = 2 [default = ""];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string counts = 3 [default = ""];
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->counts());
    }

    // required string awards = 4 [default = ""];
    if (has_awards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRIZESHOW::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PRIZESHOW* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PRIZESHOW*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PRIZESHOW::MergeFrom(const PRIZESHOW& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
    if (from.has_awards()) {
      set_awards(from.awards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PRIZESHOW::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRIZESHOW::CopyFrom(const PRIZESHOW& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRIZESHOW::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PRIZESHOW::Swap(PRIZESHOW* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(counts_, other->counts_);
    std::swap(awards_, other->awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PRIZESHOW::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PRIZESHOW_descriptor_;
  metadata.reflection = PRIZESHOW_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PRIZESHOW_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

PRIZESHOW_ARRAY::PRIZESHOW_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PRIZESHOW_ARRAY::InitAsDefaultInstance() {
}

PRIZESHOW_ARRAY::PRIZESHOW_ARRAY(const PRIZESHOW_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PRIZESHOW_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRIZESHOW_ARRAY::~PRIZESHOW_ARRAY() {
  SharedDtor();
}

void PRIZESHOW_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PRIZESHOW_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PRIZESHOW_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRIZESHOW_ARRAY_descriptor_;
}

const PRIZESHOW_ARRAY& PRIZESHOW_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

PRIZESHOW_ARRAY* PRIZESHOW_ARRAY::default_instance_ = NULL;

PRIZESHOW_ARRAY* PRIZESHOW_ARRAY::New() const {
  return new PRIZESHOW_ARRAY;
}

void PRIZESHOW_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PRIZESHOW_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PRIZESHOW items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PRIZESHOW_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PRIZESHOW items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PRIZESHOW_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PRIZESHOW items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PRIZESHOW_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .PRIZESHOW items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRIZESHOW_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PRIZESHOW_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PRIZESHOW_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PRIZESHOW_ARRAY::MergeFrom(const PRIZESHOW_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PRIZESHOW_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRIZESHOW_ARRAY::CopyFrom(const PRIZESHOW_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRIZESHOW_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void PRIZESHOW_ARRAY::Swap(PRIZESHOW_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PRIZESHOW_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PRIZESHOW_ARRAY_descriptor_;
  metadata.reflection = PRIZESHOW_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QUALITYRULE::kIdFieldNumber;
const int QUALITYRULE::kNeedLevelFieldNumber;
const int QUALITYRULE::kNeedGoldsFieldNumber;
const int QUALITYRULE::kHealthFieldNumber;
const int QUALITYRULE::kDamageFieldNumber;
const int QUALITYRULE::kPddFieldNumber;
const int QUALITYRULE::kMddFieldNumber;
const int QUALITYRULE::kHitLevelFieldNumber;
const int QUALITYRULE::kDodgeLevelFieldNumber;
const int QUALITYRULE::kCriLevelFieldNumber;
const int QUALITYRULE::kTenacityLevelFieldNumber;
const int QUALITYRULE::kPddPierceFieldNumber;
const int QUALITYRULE::kOpenFieldNumber;
#endif  // !_MSC_VER

QUALITYRULE::QUALITYRULE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QUALITYRULE::InitAsDefaultInstance() {
}

QUALITYRULE::QUALITYRULE(const QUALITYRULE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QUALITYRULE::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needlevel_ = 0;
  needgolds_ = 0;
  health_ = 0;
  damage_ = 0;
  pdd_ = 0;
  mdd_ = 0;
  hitlevel_ = 0;
  dodgelevel_ = 0;
  crilevel_ = 0;
  tenacitylevel_ = 0;
  pddpierce_ = 0;
  open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QUALITYRULE::~QUALITYRULE() {
  SharedDtor();
}

void QUALITYRULE::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void QUALITYRULE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QUALITYRULE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QUALITYRULE_descriptor_;
}

const QUALITYRULE& QUALITYRULE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

QUALITYRULE* QUALITYRULE::default_instance_ = NULL;

QUALITYRULE* QUALITYRULE::New() const {
  return new QUALITYRULE;
}

void QUALITYRULE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    needlevel_ = 0;
    needgolds_ = 0;
    health_ = 0;
    damage_ = 0;
    pdd_ = 0;
    mdd_ = 0;
    hitlevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dodgelevel_ = 0;
    crilevel_ = 0;
    tenacitylevel_ = 0;
    pddpierce_ = 0;
    open_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QUALITYRULE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needLevel;
        break;
      }

      // required int32 needLevel = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needlevel_)));
          set_has_needlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needGolds;
        break;
      }

      // required int32 needGolds = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGolds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needgolds_)));
          set_has_needgolds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_health;
        break;
      }

      // required int32 health = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage;
        break;
      }

      // required int32 damage = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pdd;
        break;
      }

      // required int32 pdd = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pdd_)));
          set_has_pdd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mdd;
        break;
      }

      // required int32 mdd = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdd_)));
          set_has_mdd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hitLevel;
        break;
      }

      // required int32 hitLevel = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitlevel_)));
          set_has_hitlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dodgeLevel;
        break;
      }

      // required int32 dodgeLevel = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodgeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dodgelevel_)));
          set_has_dodgelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_criLevel;
        break;
      }

      // required int32 criLevel = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_criLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crilevel_)));
          set_has_crilevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tenacityLevel;
        break;
      }

      // required int32 tenacityLevel = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenacityLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tenacitylevel_)));
          set_has_tenacitylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_pddPierce;
        break;
      }

      // required int32 pddPierce = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pddPierce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pddpierce_)));
          set_has_pddpierce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_open;
        break;
      }

      // required int32 open = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QUALITYRULE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 needLevel = 2 [default = 0];
  if (has_needlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->needlevel(), output);
  }

  // required int32 needGolds = 3 [default = 0];
  if (has_needgolds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->needgolds(), output);
  }

  // required int32 health = 4 [default = 0];
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->health(), output);
  }

  // required int32 damage = 5 [default = 0];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->damage(), output);
  }

  // required int32 pdd = 6 [default = 0];
  if (has_pdd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pdd(), output);
  }

  // required int32 mdd = 7 [default = 0];
  if (has_mdd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mdd(), output);
  }

  // required int32 hitLevel = 8 [default = 0];
  if (has_hitlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hitlevel(), output);
  }

  // required int32 dodgeLevel = 9 [default = 0];
  if (has_dodgelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dodgelevel(), output);
  }

  // required int32 criLevel = 10 [default = 0];
  if (has_crilevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->crilevel(), output);
  }

  // required int32 tenacityLevel = 11 [default = 0];
  if (has_tenacitylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tenacitylevel(), output);
  }

  // required int32 pddPierce = 12 [default = 0];
  if (has_pddpierce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->pddpierce(), output);
  }

  // required int32 open = 13 [default = 0];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QUALITYRULE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 needLevel = 2 [default = 0];
  if (has_needlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->needlevel(), target);
  }

  // required int32 needGolds = 3 [default = 0];
  if (has_needgolds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->needgolds(), target);
  }

  // required int32 health = 4 [default = 0];
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->health(), target);
  }

  // required int32 damage = 5 [default = 0];
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->damage(), target);
  }

  // required int32 pdd = 6 [default = 0];
  if (has_pdd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pdd(), target);
  }

  // required int32 mdd = 7 [default = 0];
  if (has_mdd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mdd(), target);
  }

  // required int32 hitLevel = 8 [default = 0];
  if (has_hitlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hitlevel(), target);
  }

  // required int32 dodgeLevel = 9 [default = 0];
  if (has_dodgelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dodgelevel(), target);
  }

  // required int32 criLevel = 10 [default = 0];
  if (has_crilevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->crilevel(), target);
  }

  // required int32 tenacityLevel = 11 [default = 0];
  if (has_tenacitylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tenacitylevel(), target);
  }

  // required int32 pddPierce = 12 [default = 0];
  if (has_pddpierce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->pddpierce(), target);
  }

  // required int32 open = 13 [default = 0];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QUALITYRULE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 needLevel = 2 [default = 0];
    if (has_needlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needlevel());
    }

    // required int32 needGolds = 3 [default = 0];
    if (has_needgolds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needgolds());
    }

    // required int32 health = 4 [default = 0];
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // required int32 damage = 5 [default = 0];
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // required int32 pdd = 6 [default = 0];
    if (has_pdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pdd());
    }

    // required int32 mdd = 7 [default = 0];
    if (has_mdd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mdd());
    }

    // required int32 hitLevel = 8 [default = 0];
    if (has_hitlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitlevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 dodgeLevel = 9 [default = 0];
    if (has_dodgelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dodgelevel());
    }

    // required int32 criLevel = 10 [default = 0];
    if (has_crilevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crilevel());
    }

    // required int32 tenacityLevel = 11 [default = 0];
    if (has_tenacitylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tenacitylevel());
    }

    // required int32 pddPierce = 12 [default = 0];
    if (has_pddpierce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pddpierce());
    }

    // required int32 open = 13 [default = 0];
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QUALITYRULE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QUALITYRULE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QUALITYRULE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QUALITYRULE::MergeFrom(const QUALITYRULE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_needlevel()) {
      set_needlevel(from.needlevel());
    }
    if (from.has_needgolds()) {
      set_needgolds(from.needgolds());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_pdd()) {
      set_pdd(from.pdd());
    }
    if (from.has_mdd()) {
      set_mdd(from.mdd());
    }
    if (from.has_hitlevel()) {
      set_hitlevel(from.hitlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dodgelevel()) {
      set_dodgelevel(from.dodgelevel());
    }
    if (from.has_crilevel()) {
      set_crilevel(from.crilevel());
    }
    if (from.has_tenacitylevel()) {
      set_tenacitylevel(from.tenacitylevel());
    }
    if (from.has_pddpierce()) {
      set_pddpierce(from.pddpierce());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QUALITYRULE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QUALITYRULE::CopyFrom(const QUALITYRULE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QUALITYRULE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void QUALITYRULE::Swap(QUALITYRULE* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(needlevel_, other->needlevel_);
    std::swap(needgolds_, other->needgolds_);
    std::swap(health_, other->health_);
    std::swap(damage_, other->damage_);
    std::swap(pdd_, other->pdd_);
    std::swap(mdd_, other->mdd_);
    std::swap(hitlevel_, other->hitlevel_);
    std::swap(dodgelevel_, other->dodgelevel_);
    std::swap(crilevel_, other->crilevel_);
    std::swap(tenacitylevel_, other->tenacitylevel_);
    std::swap(pddpierce_, other->pddpierce_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QUALITYRULE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QUALITYRULE_descriptor_;
  metadata.reflection = QUALITYRULE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QUALITYRULE_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

QUALITYRULE_ARRAY::QUALITYRULE_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QUALITYRULE_ARRAY::InitAsDefaultInstance() {
}

QUALITYRULE_ARRAY::QUALITYRULE_ARRAY(const QUALITYRULE_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QUALITYRULE_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QUALITYRULE_ARRAY::~QUALITYRULE_ARRAY() {
  SharedDtor();
}

void QUALITYRULE_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QUALITYRULE_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QUALITYRULE_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QUALITYRULE_ARRAY_descriptor_;
}

const QUALITYRULE_ARRAY& QUALITYRULE_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

QUALITYRULE_ARRAY* QUALITYRULE_ARRAY::default_instance_ = NULL;

QUALITYRULE_ARRAY* QUALITYRULE_ARRAY::New() const {
  return new QUALITYRULE_ARRAY;
}

void QUALITYRULE_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QUALITYRULE_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QUALITYRULE items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QUALITYRULE_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .QUALITYRULE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QUALITYRULE_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .QUALITYRULE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QUALITYRULE_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .QUALITYRULE items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QUALITYRULE_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QUALITYRULE_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QUALITYRULE_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QUALITYRULE_ARRAY::MergeFrom(const QUALITYRULE_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QUALITYRULE_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QUALITYRULE_ARRAY::CopyFrom(const QUALITYRULE_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QUALITYRULE_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void QUALITYRULE_ARRAY::Swap(QUALITYRULE_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QUALITYRULE_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QUALITYRULE_ARRAY_descriptor_;
  metadata.reflection = QUALITYRULE_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REALTIMECHECK::kIdFieldNumber;
const int REALTIMECHECK::kTypeFieldNumber;
const int REALTIMECHECK::kNumFieldNumber;
#endif  // !_MSC_VER

REALTIMECHECK::REALTIMECHECK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REALTIMECHECK::InitAsDefaultInstance() {
}

REALTIMECHECK::REALTIMECHECK(const REALTIMECHECK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REALTIMECHECK::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REALTIMECHECK::~REALTIMECHECK() {
  SharedDtor();
}

void REALTIMECHECK::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void REALTIMECHECK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REALTIMECHECK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REALTIMECHECK_descriptor_;
}

const REALTIMECHECK& REALTIMECHECK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

REALTIMECHECK* REALTIMECHECK::default_instance_ = NULL;

REALTIMECHECK* REALTIMECHECK::New() const {
  return new REALTIMECHECK;
}

void REALTIMECHECK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    type_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REALTIMECHECK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REALTIMECHECK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 type = 2 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 num = 3 [default = 0];
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REALTIMECHECK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 type = 2 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 num = 3 [default = 0];
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REALTIMECHECK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 type = 2 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 num = 3 [default = 0];
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REALTIMECHECK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REALTIMECHECK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REALTIMECHECK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REALTIMECHECK::MergeFrom(const REALTIMECHECK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REALTIMECHECK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REALTIMECHECK::CopyFrom(const REALTIMECHECK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REALTIMECHECK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void REALTIMECHECK::Swap(REALTIMECHECK* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REALTIMECHECK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REALTIMECHECK_descriptor_;
  metadata.reflection = REALTIMECHECK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REALTIMECHECK_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

REALTIMECHECK_ARRAY::REALTIMECHECK_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REALTIMECHECK_ARRAY::InitAsDefaultInstance() {
}

REALTIMECHECK_ARRAY::REALTIMECHECK_ARRAY(const REALTIMECHECK_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REALTIMECHECK_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REALTIMECHECK_ARRAY::~REALTIMECHECK_ARRAY() {
  SharedDtor();
}

void REALTIMECHECK_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REALTIMECHECK_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REALTIMECHECK_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REALTIMECHECK_ARRAY_descriptor_;
}

const REALTIMECHECK_ARRAY& REALTIMECHECK_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

REALTIMECHECK_ARRAY* REALTIMECHECK_ARRAY::default_instance_ = NULL;

REALTIMECHECK_ARRAY* REALTIMECHECK_ARRAY::New() const {
  return new REALTIMECHECK_ARRAY;
}

void REALTIMECHECK_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REALTIMECHECK_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .REALTIMECHECK items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REALTIMECHECK_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .REALTIMECHECK items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REALTIMECHECK_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .REALTIMECHECK items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REALTIMECHECK_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .REALTIMECHECK items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REALTIMECHECK_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REALTIMECHECK_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REALTIMECHECK_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REALTIMECHECK_ARRAY::MergeFrom(const REALTIMECHECK_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REALTIMECHECK_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REALTIMECHECK_ARRAY::CopyFrom(const REALTIMECHECK_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REALTIMECHECK_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void REALTIMECHECK_ARRAY::Swap(REALTIMECHECK_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REALTIMECHECK_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REALTIMECHECK_ARRAY_descriptor_;
  metadata.reflection = REALTIMECHECK_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RESETPRICE::kIdFieldNumber;
const int RESETPRICE::kNeedGemsFieldNumber;
#endif  // !_MSC_VER

RESETPRICE::RESETPRICE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RESETPRICE::InitAsDefaultInstance() {
}

RESETPRICE::RESETPRICE(const RESETPRICE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RESETPRICE::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needgems_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RESETPRICE::~RESETPRICE() {
  SharedDtor();
}

void RESETPRICE::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void RESETPRICE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RESETPRICE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESETPRICE_descriptor_;
}

const RESETPRICE& RESETPRICE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

RESETPRICE* RESETPRICE::default_instance_ = NULL;

RESETPRICE* RESETPRICE::New() const {
  return new RESETPRICE;
}

void RESETPRICE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    needgems_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RESETPRICE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needGems;
        break;
      }

      // required int32 needGems = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needgems_)));
          set_has_needgems();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RESETPRICE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 needGems = 2 [default = 0];
  if (has_needgems()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->needgems(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RESETPRICE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 needGems = 2 [default = 0];
  if (has_needgems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->needgems(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RESETPRICE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 needGems = 2 [default = 0];
    if (has_needgems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needgems());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RESETPRICE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RESETPRICE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RESETPRICE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RESETPRICE::MergeFrom(const RESETPRICE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_needgems()) {
      set_needgems(from.needgems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RESETPRICE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RESETPRICE::CopyFrom(const RESETPRICE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RESETPRICE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RESETPRICE::Swap(RESETPRICE* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(needgems_, other->needgems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RESETPRICE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RESETPRICE_descriptor_;
  metadata.reflection = RESETPRICE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RESETPRICE_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

RESETPRICE_ARRAY::RESETPRICE_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RESETPRICE_ARRAY::InitAsDefaultInstance() {
}

RESETPRICE_ARRAY::RESETPRICE_ARRAY(const RESETPRICE_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RESETPRICE_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RESETPRICE_ARRAY::~RESETPRICE_ARRAY() {
  SharedDtor();
}

void RESETPRICE_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RESETPRICE_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RESETPRICE_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESETPRICE_ARRAY_descriptor_;
}

const RESETPRICE_ARRAY& RESETPRICE_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

RESETPRICE_ARRAY* RESETPRICE_ARRAY::default_instance_ = NULL;

RESETPRICE_ARRAY* RESETPRICE_ARRAY::New() const {
  return new RESETPRICE_ARRAY;
}

void RESETPRICE_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RESETPRICE_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RESETPRICE items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RESETPRICE_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RESETPRICE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RESETPRICE_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RESETPRICE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RESETPRICE_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .RESETPRICE items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RESETPRICE_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RESETPRICE_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RESETPRICE_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RESETPRICE_ARRAY::MergeFrom(const RESETPRICE_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RESETPRICE_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RESETPRICE_ARRAY::CopyFrom(const RESETPRICE_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RESETPRICE_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void RESETPRICE_ARRAY::Swap(RESETPRICE_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RESETPRICE_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RESETPRICE_ARRAY_descriptor_;
  metadata.reflection = RESETPRICE_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RULE::kIdFieldNumber;
const int RULE::kUpgradeExpUserFieldNumber;
const int RULE::kUpgradeExpHeroFieldNumber;
const int RULE::kFactorHitFieldNumber;
const int RULE::kFactorDodgeFieldNumber;
const int RULE::kFactorCriFieldNumber;
const int RULE::kFactorTenacityFieldNumber;
const int RULE::kUpgradeGoldSkillFieldNumber;
const int RULE::kUpgradeGoldAoYiFieldNumber;
const int RULE::kUpgradeGoldPassive1FieldNumber;
const int RULE::kUpgradeGoldPassive2FieldNumber;
const int RULE::kUpgradeGoldPassive3FieldNumber;
const int RULE::kUpgradeGoldWeaponFieldNumber;
const int RULE::kUpgradeGoldNecklaceFieldNumber;
const int RULE::kUpgradeGoldClothesFieldNumber;
const int RULE::kUpgradeGoldBeltFieldNumber;
const int RULE::kUpgradeGoldRingFieldNumber;
const int RULE::kUpgradeGoldBootFieldNumber;
#endif  // !_MSC_VER

RULE::RULE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RULE::InitAsDefaultInstance() {
}

RULE::RULE(const RULE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RULE::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  upgrade_exp_user_ = 0;
  upgrade_exp_hero_ = 0;
  factor_hit_ = 0;
  factor_dodge_ = 0;
  factor_cri_ = 0;
  factor_tenacity_ = 0;
  upgrade_gold_skill_ = 0;
  upgrade_gold_aoyi_ = 0;
  upgrade_gold_passive_1_ = 0;
  upgrade_gold_passive_2_ = 0;
  upgrade_gold_passive_3_ = 0;
  upgrade_gold_weapon_ = 0;
  upgrade_gold_necklace_ = 0;
  upgrade_gold_clothes_ = 0;
  upgrade_gold_belt_ = 0;
  upgrade_gold_ring_ = 0;
  upgrade_gold_boot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RULE::~RULE() {
  SharedDtor();
}

void RULE::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void RULE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RULE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RULE_descriptor_;
}

const RULE& RULE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

RULE* RULE::default_instance_ = NULL;

RULE* RULE::New() const {
  return new RULE;
}

void RULE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    upgrade_exp_user_ = 0;
    upgrade_exp_hero_ = 0;
    factor_hit_ = 0;
    factor_dodge_ = 0;
    factor_cri_ = 0;
    factor_tenacity_ = 0;
    upgrade_gold_skill_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    upgrade_gold_aoyi_ = 0;
    upgrade_gold_passive_1_ = 0;
    upgrade_gold_passive_2_ = 0;
    upgrade_gold_passive_3_ = 0;
    upgrade_gold_weapon_ = 0;
    upgrade_gold_necklace_ = 0;
    upgrade_gold_clothes_ = 0;
    upgrade_gold_belt_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    upgrade_gold_ring_ = 0;
    upgrade_gold_boot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RULE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgrade_Exp_User;
        break;
      }

      // required int32 upgrade_Exp_User = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Exp_User:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_exp_user_)));
          set_has_upgrade_exp_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_upgrade_Exp_Hero;
        break;
      }

      // required int32 upgrade_Exp_Hero = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Exp_Hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_exp_hero_)));
          set_has_upgrade_exp_hero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_factor_Hit;
        break;
      }

      // required int32 factor_Hit = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factor_Hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factor_hit_)));
          set_has_factor_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_factor_Dodge;
        break;
      }

      // required int32 factor_Dodge = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factor_Dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factor_dodge_)));
          set_has_factor_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_factor_Cri;
        break;
      }

      // required int32 factor_Cri = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factor_Cri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factor_cri_)));
          set_has_factor_cri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_factor_Tenacity;
        break;
      }

      // required int32 factor_Tenacity = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factor_Tenacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factor_tenacity_)));
          set_has_factor_tenacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_upgrade_Gold_Skill;
        break;
      }

      // required int32 upgrade_Gold_Skill = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Gold_Skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_gold_skill_)));
          set_has_upgrade_gold_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_upgrade_Gold_AoYi;
        break;
      }

      // required int32 upgrade_Gold_AoYi = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Gold_AoYi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_gold_aoyi_)));
          set_has_upgrade_gold_aoyi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_upgrade_Gold_Passive_1;
        break;
      }

      // required int32 upgrade_Gold_Passive_1 = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Gold_Passive_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_gold_passive_1_)));
          set_has_upgrade_gold_passive_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_upgrade_Gold_Passive_2;
        break;
      }

      // required int32 upgrade_Gold_Passive_2 = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Gold_Passive_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_gold_passive_2_)));
          set_has_upgrade_gold_passive_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_upgrade_Gold_Passive_3;
        break;
      }

      // required int32 upgrade_Gold_Passive_3 = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Gold_Passive_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_gold_passive_3_)));
          set_has_upgrade_gold_passive_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_upgrade_Gold_Weapon;
        break;
      }

      // required int32 upgrade_Gold_Weapon = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Gold_Weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_gold_weapon_)));
          set_has_upgrade_gold_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_upgrade_Gold_Necklace;
        break;
      }

      // required int32 upgrade_Gold_Necklace = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Gold_Necklace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_gold_necklace_)));
          set_has_upgrade_gold_necklace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_upgrade_Gold_Clothes;
        break;
      }

      // required int32 upgrade_Gold_Clothes = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Gold_Clothes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_gold_clothes_)));
          set_has_upgrade_gold_clothes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_upgrade_Gold_Belt;
        break;
      }

      // required int32 upgrade_Gold_Belt = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Gold_Belt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_gold_belt_)));
          set_has_upgrade_gold_belt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_upgrade_Gold_Ring;
        break;
      }

      // required int32 upgrade_Gold_Ring = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Gold_Ring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_gold_ring_)));
          set_has_upgrade_gold_ring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_upgrade_Gold_Boot;
        break;
      }

      // required int32 upgrade_Gold_Boot = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgrade_Gold_Boot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_gold_boot_)));
          set_has_upgrade_gold_boot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RULE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 upgrade_Exp_User = 2 [default = 0];
  if (has_upgrade_exp_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgrade_exp_user(), output);
  }

  // required int32 upgrade_Exp_Hero = 3 [default = 0];
  if (has_upgrade_exp_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->upgrade_exp_hero(), output);
  }

  // required int32 factor_Hit = 4 [default = 0];
  if (has_factor_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->factor_hit(), output);
  }

  // required int32 factor_Dodge = 5 [default = 0];
  if (has_factor_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->factor_dodge(), output);
  }

  // required int32 factor_Cri = 6 [default = 0];
  if (has_factor_cri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->factor_cri(), output);
  }

  // required int32 factor_Tenacity = 7 [default = 0];
  if (has_factor_tenacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->factor_tenacity(), output);
  }

  // required int32 upgrade_Gold_Skill = 8 [default = 0];
  if (has_upgrade_gold_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->upgrade_gold_skill(), output);
  }

  // required int32 upgrade_Gold_AoYi = 9 [default = 0];
  if (has_upgrade_gold_aoyi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->upgrade_gold_aoyi(), output);
  }

  // required int32 upgrade_Gold_Passive_1 = 10 [default = 0];
  if (has_upgrade_gold_passive_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->upgrade_gold_passive_1(), output);
  }

  // required int32 upgrade_Gold_Passive_2 = 11 [default = 0];
  if (has_upgrade_gold_passive_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->upgrade_gold_passive_2(), output);
  }

  // required int32 upgrade_Gold_Passive_3 = 12 [default = 0];
  if (has_upgrade_gold_passive_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->upgrade_gold_passive_3(), output);
  }

  // required int32 upgrade_Gold_Weapon = 13 [default = 0];
  if (has_upgrade_gold_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->upgrade_gold_weapon(), output);
  }

  // required int32 upgrade_Gold_Necklace = 14 [default = 0];
  if (has_upgrade_gold_necklace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->upgrade_gold_necklace(), output);
  }

  // required int32 upgrade_Gold_Clothes = 15 [default = 0];
  if (has_upgrade_gold_clothes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->upgrade_gold_clothes(), output);
  }

  // required int32 upgrade_Gold_Belt = 16 [default = 0];
  if (has_upgrade_gold_belt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->upgrade_gold_belt(), output);
  }

  // required int32 upgrade_Gold_Ring = 17 [default = 0];
  if (has_upgrade_gold_ring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->upgrade_gold_ring(), output);
  }

  // required int32 upgrade_Gold_Boot = 18 [default = 0];
  if (has_upgrade_gold_boot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->upgrade_gold_boot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RULE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 upgrade_Exp_User = 2 [default = 0];
  if (has_upgrade_exp_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgrade_exp_user(), target);
  }

  // required int32 upgrade_Exp_Hero = 3 [default = 0];
  if (has_upgrade_exp_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->upgrade_exp_hero(), target);
  }

  // required int32 factor_Hit = 4 [default = 0];
  if (has_factor_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->factor_hit(), target);
  }

  // required int32 factor_Dodge = 5 [default = 0];
  if (has_factor_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->factor_dodge(), target);
  }

  // required int32 factor_Cri = 6 [default = 0];
  if (has_factor_cri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->factor_cri(), target);
  }

  // required int32 factor_Tenacity = 7 [default = 0];
  if (has_factor_tenacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->factor_tenacity(), target);
  }

  // required int32 upgrade_Gold_Skill = 8 [default = 0];
  if (has_upgrade_gold_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->upgrade_gold_skill(), target);
  }

  // required int32 upgrade_Gold_AoYi = 9 [default = 0];
  if (has_upgrade_gold_aoyi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->upgrade_gold_aoyi(), target);
  }

  // required int32 upgrade_Gold_Passive_1 = 10 [default = 0];
  if (has_upgrade_gold_passive_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->upgrade_gold_passive_1(), target);
  }

  // required int32 upgrade_Gold_Passive_2 = 11 [default = 0];
  if (has_upgrade_gold_passive_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->upgrade_gold_passive_2(), target);
  }

  // required int32 upgrade_Gold_Passive_3 = 12 [default = 0];
  if (has_upgrade_gold_passive_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->upgrade_gold_passive_3(), target);
  }

  // required int32 upgrade_Gold_Weapon = 13 [default = 0];
  if (has_upgrade_gold_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->upgrade_gold_weapon(), target);
  }

  // required int32 upgrade_Gold_Necklace = 14 [default = 0];
  if (has_upgrade_gold_necklace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->upgrade_gold_necklace(), target);
  }

  // required int32 upgrade_Gold_Clothes = 15 [default = 0];
  if (has_upgrade_gold_clothes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->upgrade_gold_clothes(), target);
  }

  // required int32 upgrade_Gold_Belt = 16 [default = 0];
  if (has_upgrade_gold_belt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->upgrade_gold_belt(), target);
  }

  // required int32 upgrade_Gold_Ring = 17 [default = 0];
  if (has_upgrade_gold_ring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->upgrade_gold_ring(), target);
  }

  // required int32 upgrade_Gold_Boot = 18 [default = 0];
  if (has_upgrade_gold_boot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->upgrade_gold_boot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RULE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 upgrade_Exp_User = 2 [default = 0];
    if (has_upgrade_exp_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_exp_user());
    }

    // required int32 upgrade_Exp_Hero = 3 [default = 0];
    if (has_upgrade_exp_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_exp_hero());
    }

    // required int32 factor_Hit = 4 [default = 0];
    if (has_factor_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factor_hit());
    }

    // required int32 factor_Dodge = 5 [default = 0];
    if (has_factor_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factor_dodge());
    }

    // required int32 factor_Cri = 6 [default = 0];
    if (has_factor_cri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factor_cri());
    }

    // required int32 factor_Tenacity = 7 [default = 0];
    if (has_factor_tenacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factor_tenacity());
    }

    // required int32 upgrade_Gold_Skill = 8 [default = 0];
    if (has_upgrade_gold_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_gold_skill());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 upgrade_Gold_AoYi = 9 [default = 0];
    if (has_upgrade_gold_aoyi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_gold_aoyi());
    }

    // required int32 upgrade_Gold_Passive_1 = 10 [default = 0];
    if (has_upgrade_gold_passive_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_gold_passive_1());
    }

    // required int32 upgrade_Gold_Passive_2 = 11 [default = 0];
    if (has_upgrade_gold_passive_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_gold_passive_2());
    }

    // required int32 upgrade_Gold_Passive_3 = 12 [default = 0];
    if (has_upgrade_gold_passive_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_gold_passive_3());
    }

    // required int32 upgrade_Gold_Weapon = 13 [default = 0];
    if (has_upgrade_gold_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_gold_weapon());
    }

    // required int32 upgrade_Gold_Necklace = 14 [default = 0];
    if (has_upgrade_gold_necklace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_gold_necklace());
    }

    // required int32 upgrade_Gold_Clothes = 15 [default = 0];
    if (has_upgrade_gold_clothes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_gold_clothes());
    }

    // required int32 upgrade_Gold_Belt = 16 [default = 0];
    if (has_upgrade_gold_belt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_gold_belt());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 upgrade_Gold_Ring = 17 [default = 0];
    if (has_upgrade_gold_ring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_gold_ring());
    }

    // required int32 upgrade_Gold_Boot = 18 [default = 0];
    if (has_upgrade_gold_boot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_gold_boot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RULE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RULE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RULE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RULE::MergeFrom(const RULE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_upgrade_exp_user()) {
      set_upgrade_exp_user(from.upgrade_exp_user());
    }
    if (from.has_upgrade_exp_hero()) {
      set_upgrade_exp_hero(from.upgrade_exp_hero());
    }
    if (from.has_factor_hit()) {
      set_factor_hit(from.factor_hit());
    }
    if (from.has_factor_dodge()) {
      set_factor_dodge(from.factor_dodge());
    }
    if (from.has_factor_cri()) {
      set_factor_cri(from.factor_cri());
    }
    if (from.has_factor_tenacity()) {
      set_factor_tenacity(from.factor_tenacity());
    }
    if (from.has_upgrade_gold_skill()) {
      set_upgrade_gold_skill(from.upgrade_gold_skill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_upgrade_gold_aoyi()) {
      set_upgrade_gold_aoyi(from.upgrade_gold_aoyi());
    }
    if (from.has_upgrade_gold_passive_1()) {
      set_upgrade_gold_passive_1(from.upgrade_gold_passive_1());
    }
    if (from.has_upgrade_gold_passive_2()) {
      set_upgrade_gold_passive_2(from.upgrade_gold_passive_2());
    }
    if (from.has_upgrade_gold_passive_3()) {
      set_upgrade_gold_passive_3(from.upgrade_gold_passive_3());
    }
    if (from.has_upgrade_gold_weapon()) {
      set_upgrade_gold_weapon(from.upgrade_gold_weapon());
    }
    if (from.has_upgrade_gold_necklace()) {
      set_upgrade_gold_necklace(from.upgrade_gold_necklace());
    }
    if (from.has_upgrade_gold_clothes()) {
      set_upgrade_gold_clothes(from.upgrade_gold_clothes());
    }
    if (from.has_upgrade_gold_belt()) {
      set_upgrade_gold_belt(from.upgrade_gold_belt());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_upgrade_gold_ring()) {
      set_upgrade_gold_ring(from.upgrade_gold_ring());
    }
    if (from.has_upgrade_gold_boot()) {
      set_upgrade_gold_boot(from.upgrade_gold_boot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RULE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RULE::CopyFrom(const RULE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RULE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;

  return true;
}

void RULE::Swap(RULE* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(upgrade_exp_user_, other->upgrade_exp_user_);
    std::swap(upgrade_exp_hero_, other->upgrade_exp_hero_);
    std::swap(factor_hit_, other->factor_hit_);
    std::swap(factor_dodge_, other->factor_dodge_);
    std::swap(factor_cri_, other->factor_cri_);
    std::swap(factor_tenacity_, other->factor_tenacity_);
    std::swap(upgrade_gold_skill_, other->upgrade_gold_skill_);
    std::swap(upgrade_gold_aoyi_, other->upgrade_gold_aoyi_);
    std::swap(upgrade_gold_passive_1_, other->upgrade_gold_passive_1_);
    std::swap(upgrade_gold_passive_2_, other->upgrade_gold_passive_2_);
    std::swap(upgrade_gold_passive_3_, other->upgrade_gold_passive_3_);
    std::swap(upgrade_gold_weapon_, other->upgrade_gold_weapon_);
    std::swap(upgrade_gold_necklace_, other->upgrade_gold_necklace_);
    std::swap(upgrade_gold_clothes_, other->upgrade_gold_clothes_);
    std::swap(upgrade_gold_belt_, other->upgrade_gold_belt_);
    std::swap(upgrade_gold_ring_, other->upgrade_gold_ring_);
    std::swap(upgrade_gold_boot_, other->upgrade_gold_boot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RULE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RULE_descriptor_;
  metadata.reflection = RULE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RULE_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

RULE_ARRAY::RULE_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RULE_ARRAY::InitAsDefaultInstance() {
}

RULE_ARRAY::RULE_ARRAY(const RULE_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RULE_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RULE_ARRAY::~RULE_ARRAY() {
  SharedDtor();
}

void RULE_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RULE_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RULE_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RULE_ARRAY_descriptor_;
}

const RULE_ARRAY& RULE_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

RULE_ARRAY* RULE_ARRAY::default_instance_ = NULL;

RULE_ARRAY* RULE_ARRAY::New() const {
  return new RULE_ARRAY;
}

void RULE_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RULE_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RULE items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RULE_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RULE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RULE_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RULE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RULE_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .RULE items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RULE_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RULE_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RULE_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RULE_ARRAY::MergeFrom(const RULE_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RULE_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RULE_ARRAY::CopyFrom(const RULE_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RULE_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void RULE_ARRAY::Swap(RULE_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RULE_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RULE_ARRAY_descriptor_;
  metadata.reflection = RULE_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SHOPRESETPRICE::kIdFieldNumber;
const int SHOPRESETPRICE::kNeedGemsFieldNumber;
#endif  // !_MSC_VER

SHOPRESETPRICE::SHOPRESETPRICE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SHOPRESETPRICE::InitAsDefaultInstance() {
}

SHOPRESETPRICE::SHOPRESETPRICE(const SHOPRESETPRICE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SHOPRESETPRICE::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needgems_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SHOPRESETPRICE::~SHOPRESETPRICE() {
  SharedDtor();
}

void SHOPRESETPRICE::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SHOPRESETPRICE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SHOPRESETPRICE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SHOPRESETPRICE_descriptor_;
}

const SHOPRESETPRICE& SHOPRESETPRICE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

SHOPRESETPRICE* SHOPRESETPRICE::default_instance_ = NULL;

SHOPRESETPRICE* SHOPRESETPRICE::New() const {
  return new SHOPRESETPRICE;
}

void SHOPRESETPRICE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    needgems_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SHOPRESETPRICE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needGems;
        break;
      }

      // required int32 needGems = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needgems_)));
          set_has_needgems();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SHOPRESETPRICE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 needGems = 2 [default = 0];
  if (has_needgems()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->needgems(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SHOPRESETPRICE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 needGems = 2 [default = 0];
  if (has_needgems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->needgems(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SHOPRESETPRICE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 needGems = 2 [default = 0];
    if (has_needgems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needgems());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SHOPRESETPRICE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SHOPRESETPRICE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SHOPRESETPRICE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SHOPRESETPRICE::MergeFrom(const SHOPRESETPRICE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_needgems()) {
      set_needgems(from.needgems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SHOPRESETPRICE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHOPRESETPRICE::CopyFrom(const SHOPRESETPRICE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHOPRESETPRICE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SHOPRESETPRICE::Swap(SHOPRESETPRICE* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(needgems_, other->needgems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SHOPRESETPRICE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SHOPRESETPRICE_descriptor_;
  metadata.reflection = SHOPRESETPRICE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SHOPRESETPRICE_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

SHOPRESETPRICE_ARRAY::SHOPRESETPRICE_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SHOPRESETPRICE_ARRAY::InitAsDefaultInstance() {
}

SHOPRESETPRICE_ARRAY::SHOPRESETPRICE_ARRAY(const SHOPRESETPRICE_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SHOPRESETPRICE_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SHOPRESETPRICE_ARRAY::~SHOPRESETPRICE_ARRAY() {
  SharedDtor();
}

void SHOPRESETPRICE_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SHOPRESETPRICE_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SHOPRESETPRICE_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SHOPRESETPRICE_ARRAY_descriptor_;
}

const SHOPRESETPRICE_ARRAY& SHOPRESETPRICE_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

SHOPRESETPRICE_ARRAY* SHOPRESETPRICE_ARRAY::default_instance_ = NULL;

SHOPRESETPRICE_ARRAY* SHOPRESETPRICE_ARRAY::New() const {
  return new SHOPRESETPRICE_ARRAY;
}

void SHOPRESETPRICE_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SHOPRESETPRICE_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SHOPRESETPRICE items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SHOPRESETPRICE_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SHOPRESETPRICE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SHOPRESETPRICE_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SHOPRESETPRICE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SHOPRESETPRICE_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .SHOPRESETPRICE items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SHOPRESETPRICE_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SHOPRESETPRICE_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SHOPRESETPRICE_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SHOPRESETPRICE_ARRAY::MergeFrom(const SHOPRESETPRICE_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SHOPRESETPRICE_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHOPRESETPRICE_ARRAY::CopyFrom(const SHOPRESETPRICE_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHOPRESETPRICE_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void SHOPRESETPRICE_ARRAY::Swap(SHOPRESETPRICE_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SHOPRESETPRICE_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SHOPRESETPRICE_ARRAY_descriptor_;
  metadata.reflection = SHOPRESETPRICE_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPPRICE::kIdFieldNumber;
const int SPPRICE::kNeedGemsFieldNumber;
#endif  // !_MSC_VER

SPPRICE::SPPRICE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPPRICE::InitAsDefaultInstance() {
}

SPPRICE::SPPRICE(const SPPRICE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPPRICE::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needgems_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPPRICE::~SPPRICE() {
  SharedDtor();
}

void SPPRICE::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void SPPRICE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPPRICE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPPRICE_descriptor_;
}

const SPPRICE& SPPRICE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

SPPRICE* SPPRICE::default_instance_ = NULL;

SPPRICE* SPPRICE::New() const {
  return new SPPRICE;
}

void SPPRICE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    needgems_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPPRICE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needGems;
        break;
      }

      // required int32 needGems = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needgems_)));
          set_has_needgems();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPPRICE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 needGems = 2 [default = 0];
  if (has_needgems()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->needgems(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPPRICE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 needGems = 2 [default = 0];
  if (has_needgems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->needgems(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPPRICE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 needGems = 2 [default = 0];
    if (has_needgems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needgems());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPPRICE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPPRICE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPPRICE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPPRICE::MergeFrom(const SPPRICE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_needgems()) {
      set_needgems(from.needgems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPPRICE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPPRICE::CopyFrom(const SPPRICE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPPRICE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SPPRICE::Swap(SPPRICE* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(needgems_, other->needgems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPPRICE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPPRICE_descriptor_;
  metadata.reflection = SPPRICE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPPRICE_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

SPPRICE_ARRAY::SPPRICE_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SPPRICE_ARRAY::InitAsDefaultInstance() {
}

SPPRICE_ARRAY::SPPRICE_ARRAY(const SPPRICE_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SPPRICE_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPPRICE_ARRAY::~SPPRICE_ARRAY() {
  SharedDtor();
}

void SPPRICE_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPPRICE_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPPRICE_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPPRICE_ARRAY_descriptor_;
}

const SPPRICE_ARRAY& SPPRICE_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

SPPRICE_ARRAY* SPPRICE_ARRAY::default_instance_ = NULL;

SPPRICE_ARRAY* SPPRICE_ARRAY::New() const {
  return new SPPRICE_ARRAY;
}

void SPPRICE_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPPRICE_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SPPRICE items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SPPRICE_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SPPRICE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SPPRICE_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SPPRICE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SPPRICE_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .SPPRICE items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPPRICE_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPPRICE_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPPRICE_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPPRICE_ARRAY::MergeFrom(const SPPRICE_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPPRICE_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPPRICE_ARRAY::CopyFrom(const SPPRICE_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPPRICE_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void SPPRICE_ARRAY::Swap(SPPRICE_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPPRICE_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPPRICE_ARRAY_descriptor_;
  metadata.reflection = SPPRICE_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int STAPRICE::kIdFieldNumber;
const int STAPRICE::kNeedGemsFieldNumber;
#endif  // !_MSC_VER

STAPRICE::STAPRICE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void STAPRICE::InitAsDefaultInstance() {
}

STAPRICE::STAPRICE(const STAPRICE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void STAPRICE::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needgems_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STAPRICE::~STAPRICE() {
  SharedDtor();
}

void STAPRICE::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void STAPRICE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STAPRICE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STAPRICE_descriptor_;
}

const STAPRICE& STAPRICE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

STAPRICE* STAPRICE::default_instance_ = NULL;

STAPRICE* STAPRICE::New() const {
  return new STAPRICE;
}

void STAPRICE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    needgems_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STAPRICE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needGems;
        break;
      }

      // required int32 needGems = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needGems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needgems_)));
          set_has_needgems();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void STAPRICE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 needGems = 2 [default = 0];
  if (has_needgems()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->needgems(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* STAPRICE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 needGems = 2 [default = 0];
  if (has_needgems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->needgems(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int STAPRICE::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 needGems = 2 [default = 0];
    if (has_needgems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needgems());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STAPRICE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STAPRICE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STAPRICE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STAPRICE::MergeFrom(const STAPRICE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_needgems()) {
      set_needgems(from.needgems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STAPRICE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STAPRICE::CopyFrom(const STAPRICE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STAPRICE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void STAPRICE::Swap(STAPRICE* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(needgems_, other->needgems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STAPRICE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STAPRICE_descriptor_;
  metadata.reflection = STAPRICE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int STAPRICE_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

STAPRICE_ARRAY::STAPRICE_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void STAPRICE_ARRAY::InitAsDefaultInstance() {
}

STAPRICE_ARRAY::STAPRICE_ARRAY(const STAPRICE_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void STAPRICE_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STAPRICE_ARRAY::~STAPRICE_ARRAY() {
  SharedDtor();
}

void STAPRICE_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STAPRICE_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STAPRICE_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STAPRICE_ARRAY_descriptor_;
}

const STAPRICE_ARRAY& STAPRICE_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

STAPRICE_ARRAY* STAPRICE_ARRAY::default_instance_ = NULL;

STAPRICE_ARRAY* STAPRICE_ARRAY::New() const {
  return new STAPRICE_ARRAY;
}

void STAPRICE_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STAPRICE_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .STAPRICE items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void STAPRICE_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .STAPRICE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* STAPRICE_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .STAPRICE items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int STAPRICE_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .STAPRICE items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STAPRICE_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STAPRICE_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STAPRICE_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STAPRICE_ARRAY::MergeFrom(const STAPRICE_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STAPRICE_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STAPRICE_ARRAY::CopyFrom(const STAPRICE_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STAPRICE_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void STAPRICE_ARRAY::Swap(STAPRICE_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STAPRICE_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STAPRICE_ARRAY_descriptor_;
  metadata.reflection = STAPRICE_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SUBTASK::kIdFieldNumber;
const int SUBTASK::kBattleDataFieldNumber;
const int SUBTASK::kDiffsFieldNumber;
const int SUBTASK::kTotalTimesFieldNumber;
const int SUBTASK::kNameChFieldNumber;
const int SUBTASK::kExpendStFieldNumber;
const int SUBTASK::kFightCountFieldNumber;
const int SUBTASK::kIdExpFieldNumber;
const int SUBTASK::kHeroExpFieldNumber;
const int SUBTASK::kDropGoldFieldNumber;
const int SUBTASK::kPointParentIdFieldNumber;
const int SUBTASK::kPriorityFieldNumber;
const int SUBTASK::kFightPowerFieldNumber;
#endif  // !_MSC_VER

SUBTASK::SUBTASK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SUBTASK::InitAsDefaultInstance() {
}

SUBTASK::SUBTASK(const SUBTASK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SUBTASK::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battledata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  diffs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totaltimes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expendst_ = 0;
  fightcount_ = 0;
  idexp_ = 0;
  heroexp_ = 0;
  dropgold_ = 0;
  pointparentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_ = 0;
  fightpower_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SUBTASK::~SUBTASK() {
  SharedDtor();
}

void SUBTASK::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (battledata_ != &::google::protobuf::internal::kEmptyString) {
    delete battledata_;
  }
  if (diffs_ != &::google::protobuf::internal::kEmptyString) {
    delete diffs_;
  }
  if (totaltimes_ != &::google::protobuf::internal::kEmptyString) {
    delete totaltimes_;
  }
  if (name_ch_ != &::google::protobuf::internal::kEmptyString) {
    delete name_ch_;
  }
  if (pointparentid_ != &::google::protobuf::internal::kEmptyString) {
    delete pointparentid_;
  }
  if (this != default_instance_) {
  }
}

void SUBTASK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SUBTASK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUBTASK_descriptor_;
}

const SUBTASK& SUBTASK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

SUBTASK* SUBTASK::default_instance_ = NULL;

SUBTASK* SUBTASK::New() const {
  return new SUBTASK;
}

void SUBTASK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_battledata()) {
      if (battledata_ != &::google::protobuf::internal::kEmptyString) {
        battledata_->clear();
      }
    }
    if (has_diffs()) {
      if (diffs_ != &::google::protobuf::internal::kEmptyString) {
        diffs_->clear();
      }
    }
    if (has_totaltimes()) {
      if (totaltimes_ != &::google::protobuf::internal::kEmptyString) {
        totaltimes_->clear();
      }
    }
    if (has_name_ch()) {
      if (name_ch_ != &::google::protobuf::internal::kEmptyString) {
        name_ch_->clear();
      }
    }
    expendst_ = 0;
    fightcount_ = 0;
    idexp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    heroexp_ = 0;
    dropgold_ = 0;
    if (has_pointparentid()) {
      if (pointparentid_ != &::google::protobuf::internal::kEmptyString) {
        pointparentid_->clear();
      }
    }
    priority_ = 0;
    fightpower_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SUBTASK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battleData;
        break;
      }

      // required string battleData = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battledata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->battledata().data(), this->battledata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_diffs;
        break;
      }

      // required string diffs = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diffs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diffs().data(), this->diffs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_totalTimes;
        break;
      }

      // required string totalTimes = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_totalTimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totaltimes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->totaltimes().data(), this->totaltimes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name_ch;
        break;
      }

      // required string name_ch = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name_ch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name_ch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name_ch().data(), this->name_ch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_expendSt;
        break;
      }

      // required int32 expendSt = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expendSt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expendst_)));
          set_has_expendst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fightCount;
        break;
      }

      // required int32 fightCount = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightcount_)));
          set_has_fightcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_idExp;
        break;
      }

      // required int32 idExp = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idexp_)));
          set_has_idexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_heroExp;
        break;
      }

      // required int32 heroExp = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heroexp_)));
          set_has_heroexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dropGold;
        break;
      }

      // required int32 dropGold = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropgold_)));
          set_has_dropgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_pointParentId;
        break;
      }

      // required string pointParentId = 11 [default = ""];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointParentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pointparentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pointparentid().data(), this->pointparentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_priority;
        break;
      }

      // required float priority = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fightPower;
        break;
      }

      // required int32 fightPower = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SUBTASK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string battleData = 2 [default = ""];
  if (has_battledata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battledata().data(), this->battledata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->battledata(), output);
  }

  // required string diffs = 3 [default = ""];
  if (has_diffs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diffs().data(), this->diffs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->diffs(), output);
  }

  // required string totalTimes = 4 [default = ""];
  if (has_totaltimes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->totaltimes().data(), this->totaltimes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->totaltimes(), output);
  }

  // required string name_ch = 5 [default = ""];
  if (has_name_ch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_ch().data(), this->name_ch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name_ch(), output);
  }

  // required int32 expendSt = 6 [default = 0];
  if (has_expendst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->expendst(), output);
  }

  // required int32 fightCount = 7 [default = 0];
  if (has_fightcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fightcount(), output);
  }

  // required int32 idExp = 8 [default = 0];
  if (has_idexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->idexp(), output);
  }

  // required int32 heroExp = 9 [default = 0];
  if (has_heroexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->heroexp(), output);
  }

  // required int32 dropGold = 10 [default = 0];
  if (has_dropgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dropgold(), output);
  }

  // required string pointParentId = 11 [default = ""];
  if (has_pointparentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pointparentid().data(), this->pointparentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->pointparentid(), output);
  }

  // required float priority = 12 [default = 0];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->priority(), output);
  }

  // required int32 fightPower = 13 [default = 0];
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fightpower(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SUBTASK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string battleData = 2 [default = ""];
  if (has_battledata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battledata().data(), this->battledata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->battledata(), target);
  }

  // required string diffs = 3 [default = ""];
  if (has_diffs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diffs().data(), this->diffs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->diffs(), target);
  }

  // required string totalTimes = 4 [default = ""];
  if (has_totaltimes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->totaltimes().data(), this->totaltimes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->totaltimes(), target);
  }

  // required string name_ch = 5 [default = ""];
  if (has_name_ch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name_ch().data(), this->name_ch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name_ch(), target);
  }

  // required int32 expendSt = 6 [default = 0];
  if (has_expendst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->expendst(), target);
  }

  // required int32 fightCount = 7 [default = 0];
  if (has_fightcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fightcount(), target);
  }

  // required int32 idExp = 8 [default = 0];
  if (has_idexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->idexp(), target);
  }

  // required int32 heroExp = 9 [default = 0];
  if (has_heroexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->heroexp(), target);
  }

  // required int32 dropGold = 10 [default = 0];
  if (has_dropgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dropgold(), target);
  }

  // required string pointParentId = 11 [default = ""];
  if (has_pointparentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pointparentid().data(), this->pointparentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->pointparentid(), target);
  }

  // required float priority = 12 [default = 0];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->priority(), target);
  }

  // required int32 fightPower = 13 [default = 0];
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fightpower(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SUBTASK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string battleData = 2 [default = ""];
    if (has_battledata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battledata());
    }

    // required string diffs = 3 [default = ""];
    if (has_diffs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diffs());
    }

    // required string totalTimes = 4 [default = ""];
    if (has_totaltimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->totaltimes());
    }

    // required string name_ch = 5 [default = ""];
    if (has_name_ch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name_ch());
    }

    // required int32 expendSt = 6 [default = 0];
    if (has_expendst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expendst());
    }

    // required int32 fightCount = 7 [default = 0];
    if (has_fightcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightcount());
    }

    // required int32 idExp = 8 [default = 0];
    if (has_idexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idexp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 heroExp = 9 [default = 0];
    if (has_heroexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heroexp());
    }

    // required int32 dropGold = 10 [default = 0];
    if (has_dropgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dropgold());
    }

    // required string pointParentId = 11 [default = ""];
    if (has_pointparentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pointparentid());
    }

    // required float priority = 12 [default = 0];
    if (has_priority()) {
      total_size += 1 + 4;
    }

    // required int32 fightPower = 13 [default = 0];
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightpower());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SUBTASK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SUBTASK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SUBTASK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SUBTASK::MergeFrom(const SUBTASK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_battledata()) {
      set_battledata(from.battledata());
    }
    if (from.has_diffs()) {
      set_diffs(from.diffs());
    }
    if (from.has_totaltimes()) {
      set_totaltimes(from.totaltimes());
    }
    if (from.has_name_ch()) {
      set_name_ch(from.name_ch());
    }
    if (from.has_expendst()) {
      set_expendst(from.expendst());
    }
    if (from.has_fightcount()) {
      set_fightcount(from.fightcount());
    }
    if (from.has_idexp()) {
      set_idexp(from.idexp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_heroexp()) {
      set_heroexp(from.heroexp());
    }
    if (from.has_dropgold()) {
      set_dropgold(from.dropgold());
    }
    if (from.has_pointparentid()) {
      set_pointparentid(from.pointparentid());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SUBTASK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUBTASK::CopyFrom(const SUBTASK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUBTASK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void SUBTASK::Swap(SUBTASK* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(battledata_, other->battledata_);
    std::swap(diffs_, other->diffs_);
    std::swap(totaltimes_, other->totaltimes_);
    std::swap(name_ch_, other->name_ch_);
    std::swap(expendst_, other->expendst_);
    std::swap(fightcount_, other->fightcount_);
    std::swap(idexp_, other->idexp_);
    std::swap(heroexp_, other->heroexp_);
    std::swap(dropgold_, other->dropgold_);
    std::swap(pointparentid_, other->pointparentid_);
    std::swap(priority_, other->priority_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SUBTASK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SUBTASK_descriptor_;
  metadata.reflection = SUBTASK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SUBTASK_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

SUBTASK_ARRAY::SUBTASK_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SUBTASK_ARRAY::InitAsDefaultInstance() {
}

SUBTASK_ARRAY::SUBTASK_ARRAY(const SUBTASK_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SUBTASK_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SUBTASK_ARRAY::~SUBTASK_ARRAY() {
  SharedDtor();
}

void SUBTASK_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SUBTASK_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SUBTASK_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUBTASK_ARRAY_descriptor_;
}

const SUBTASK_ARRAY& SUBTASK_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

SUBTASK_ARRAY* SUBTASK_ARRAY::default_instance_ = NULL;

SUBTASK_ARRAY* SUBTASK_ARRAY::New() const {
  return new SUBTASK_ARRAY;
}

void SUBTASK_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SUBTASK_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SUBTASK items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SUBTASK_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SUBTASK items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SUBTASK_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SUBTASK items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SUBTASK_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .SUBTASK items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SUBTASK_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SUBTASK_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SUBTASK_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SUBTASK_ARRAY::MergeFrom(const SUBTASK_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SUBTASK_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SUBTASK_ARRAY::CopyFrom(const SUBTASK_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SUBTASK_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void SUBTASK_ARRAY::Swap(SUBTASK_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SUBTASK_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SUBTASK_ARRAY_descriptor_;
  metadata.reflection = SUBTASK_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TASK::kIdFieldNumber;
const int TASK::kSeriesTypeFieldNumber;
const int TASK::kSeriesNameChFieldNumber;
const int TASK::kRewardIdFieldNumber;
const int TASK::kOpenTimeTypeFieldNumber;
const int TASK::kOpenTimeFieldNumber;
const int TASK::kTotalEnterNumFieldNumber;
const int TASK::kEnterLimitFieldNumber;
const int TASK::kPointParentIdFieldNumber;
const int TASK::kNextPointFieldNumber;
const int TASK::kPriorityFieldNumber;
#endif  // !_MSC_VER

TASK::TASK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TASK::InitAsDefaultInstance() {
}

TASK::TASK(const TASK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TASK::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriestype_ = 0;
  seriesname_ch_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rewardid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opentimetype_ = 0;
  opentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totalenternum_ = 0;
  enterlimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pointparentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nextpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TASK::~TASK() {
  SharedDtor();
}

void TASK::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (seriesname_ch_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesname_ch_;
  }
  if (rewardid_ != &::google::protobuf::internal::kEmptyString) {
    delete rewardid_;
  }
  if (opentime_ != &::google::protobuf::internal::kEmptyString) {
    delete opentime_;
  }
  if (enterlimit_ != &::google::protobuf::internal::kEmptyString) {
    delete enterlimit_;
  }
  if (pointparentid_ != &::google::protobuf::internal::kEmptyString) {
    delete pointparentid_;
  }
  if (nextpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete nextpoint_;
  }
  if (this != default_instance_) {
  }
}

void TASK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TASK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TASK_descriptor_;
}

const TASK& TASK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

TASK* TASK::default_instance_ = NULL;

TASK* TASK::New() const {
  return new TASK;
}

void TASK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    seriestype_ = 0;
    if (has_seriesname_ch()) {
      if (seriesname_ch_ != &::google::protobuf::internal::kEmptyString) {
        seriesname_ch_->clear();
      }
    }
    if (has_rewardid()) {
      if (rewardid_ != &::google::protobuf::internal::kEmptyString) {
        rewardid_->clear();
      }
    }
    opentimetype_ = 0;
    if (has_opentime()) {
      if (opentime_ != &::google::protobuf::internal::kEmptyString) {
        opentime_->clear();
      }
    }
    totalenternum_ = 0;
    if (has_enterlimit()) {
      if (enterlimit_ != &::google::protobuf::internal::kEmptyString) {
        enterlimit_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pointparentid()) {
      if (pointparentid_ != &::google::protobuf::internal::kEmptyString) {
        pointparentid_->clear();
      }
    }
    if (has_nextpoint()) {
      if (nextpoint_ != &::google::protobuf::internal::kEmptyString) {
        nextpoint_->clear();
      }
    }
    priority_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TASK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seriesType;
        break;
      }

      // required int32 seriesType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seriestype_)));
          set_has_seriestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seriesName_ch;
        break;
      }

      // required string seriesName_ch = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesName_ch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesname_ch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesname_ch().data(), this->seriesname_ch().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rewardId;
        break;
      }

      // required string rewardId = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewardid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rewardid().data(), this->rewardid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_openTimeType;
        break;
      }

      // required int32 openTimeType = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTimeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opentimetype_)));
          set_has_opentimetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_openTime;
        break;
      }

      // required string openTime = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opentime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opentime().data(), this->opentime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalEnterNum;
        break;
      }

      // required int32 totalEnterNum = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalEnterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalenternum_)));
          set_has_totalenternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_enterLimit;
        break;
      }

      // required string enterLimit = 8 [default = ""];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enterLimit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enterlimit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enterlimit().data(), this->enterlimit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pointParentId;
        break;
      }

      // required string pointParentId = 9 [default = ""];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointParentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pointparentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pointparentid().data(), this->pointparentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_nextPoint;
        break;
      }

      // required string nextPoint = 10 [default = ""];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nextPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nextpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nextpoint().data(), this->nextpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_priority;
        break;
      }

      // required float priority = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TASK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 seriesType = 2 [default = 0];
  if (has_seriestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seriestype(), output);
  }

  // required string seriesName_ch = 3 [default = ""];
  if (has_seriesname_ch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesname_ch().data(), this->seriesname_ch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->seriesname_ch(), output);
  }

  // required string rewardId = 4 [default = ""];
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rewardid().data(), this->rewardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rewardid(), output);
  }

  // required int32 openTimeType = 5 [default = 0];
  if (has_opentimetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->opentimetype(), output);
  }

  // required string openTime = 6 [default = ""];
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opentime().data(), this->opentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->opentime(), output);
  }

  // required int32 totalEnterNum = 7 [default = 0];
  if (has_totalenternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->totalenternum(), output);
  }

  // required string enterLimit = 8 [default = ""];
  if (has_enterlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enterlimit().data(), this->enterlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->enterlimit(), output);
  }

  // required string pointParentId = 9 [default = ""];
  if (has_pointparentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pointparentid().data(), this->pointparentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->pointparentid(), output);
  }

  // required string nextPoint = 10 [default = ""];
  if (has_nextpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nextpoint().data(), this->nextpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->nextpoint(), output);
  }

  // required float priority = 11 [default = 0];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TASK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 seriesType = 2 [default = 0];
  if (has_seriestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seriestype(), target);
  }

  // required string seriesName_ch = 3 [default = ""];
  if (has_seriesname_ch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesname_ch().data(), this->seriesname_ch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->seriesname_ch(), target);
  }

  // required string rewardId = 4 [default = ""];
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rewardid().data(), this->rewardid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rewardid(), target);
  }

  // required int32 openTimeType = 5 [default = 0];
  if (has_opentimetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->opentimetype(), target);
  }

  // required string openTime = 6 [default = ""];
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opentime().data(), this->opentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->opentime(), target);
  }

  // required int32 totalEnterNum = 7 [default = 0];
  if (has_totalenternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->totalenternum(), target);
  }

  // required string enterLimit = 8 [default = ""];
  if (has_enterlimit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enterlimit().data(), this->enterlimit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->enterlimit(), target);
  }

  // required string pointParentId = 9 [default = ""];
  if (has_pointparentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pointparentid().data(), this->pointparentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->pointparentid(), target);
  }

  // required string nextPoint = 10 [default = ""];
  if (has_nextpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nextpoint().data(), this->nextpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->nextpoint(), target);
  }

  // required float priority = 11 [default = 0];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TASK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 seriesType = 2 [default = 0];
    if (has_seriestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seriestype());
    }

    // required string seriesName_ch = 3 [default = ""];
    if (has_seriesname_ch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesname_ch());
    }

    // required string rewardId = 4 [default = ""];
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewardid());
    }

    // required int32 openTimeType = 5 [default = 0];
    if (has_opentimetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opentimetype());
    }

    // required string openTime = 6 [default = ""];
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opentime());
    }

    // required int32 totalEnterNum = 7 [default = 0];
    if (has_totalenternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalenternum());
    }

    // required string enterLimit = 8 [default = ""];
    if (has_enterlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enterlimit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string pointParentId = 9 [default = ""];
    if (has_pointparentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pointparentid());
    }

    // required string nextPoint = 10 [default = ""];
    if (has_nextpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nextpoint());
    }

    // required float priority = 11 [default = 0];
    if (has_priority()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TASK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TASK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TASK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TASK::MergeFrom(const TASK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_seriestype()) {
      set_seriestype(from.seriestype());
    }
    if (from.has_seriesname_ch()) {
      set_seriesname_ch(from.seriesname_ch());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
    if (from.has_opentimetype()) {
      set_opentimetype(from.opentimetype());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_totalenternum()) {
      set_totalenternum(from.totalenternum());
    }
    if (from.has_enterlimit()) {
      set_enterlimit(from.enterlimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pointparentid()) {
      set_pointparentid(from.pointparentid());
    }
    if (from.has_nextpoint()) {
      set_nextpoint(from.nextpoint());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TASK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TASK::CopyFrom(const TASK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TASK::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void TASK::Swap(TASK* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(seriestype_, other->seriestype_);
    std::swap(seriesname_ch_, other->seriesname_ch_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(opentimetype_, other->opentimetype_);
    std::swap(opentime_, other->opentime_);
    std::swap(totalenternum_, other->totalenternum_);
    std::swap(enterlimit_, other->enterlimit_);
    std::swap(pointparentid_, other->pointparentid_);
    std::swap(nextpoint_, other->nextpoint_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TASK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TASK_descriptor_;
  metadata.reflection = TASK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TASK_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

TASK_ARRAY::TASK_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TASK_ARRAY::InitAsDefaultInstance() {
}

TASK_ARRAY::TASK_ARRAY(const TASK_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TASK_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TASK_ARRAY::~TASK_ARRAY() {
  SharedDtor();
}

void TASK_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TASK_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TASK_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TASK_ARRAY_descriptor_;
}

const TASK_ARRAY& TASK_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

TASK_ARRAY* TASK_ARRAY::default_instance_ = NULL;

TASK_ARRAY* TASK_ARRAY::New() const {
  return new TASK_ARRAY;
}

void TASK_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TASK_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TASK items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TASK_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TASK items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TASK_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TASK items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TASK_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .TASK items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TASK_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TASK_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TASK_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TASK_ARRAY::MergeFrom(const TASK_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TASK_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TASK_ARRAY::CopyFrom(const TASK_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TASK_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void TASK_ARRAY::Swap(TASK_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TASK_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TASK_ARRAY_descriptor_;
  metadata.reflection = TASK_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRIGGERATTACK::kIdFieldNumber;
const int TRIGGERATTACK::kTypeFieldNumber;
const int TRIGGERATTACK::kCdFieldNumber;
#endif  // !_MSC_VER

TRIGGERATTACK::TRIGGERATTACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TRIGGERATTACK::InitAsDefaultInstance() {
}

TRIGGERATTACK::TRIGGERATTACK(const TRIGGERATTACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TRIGGERATTACK::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  cd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRIGGERATTACK::~TRIGGERATTACK() {
  SharedDtor();
}

void TRIGGERATTACK::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void TRIGGERATTACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRIGGERATTACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRIGGERATTACK_descriptor_;
}

const TRIGGERATTACK& TRIGGERATTACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

TRIGGERATTACK* TRIGGERATTACK::default_instance_ = NULL;

TRIGGERATTACK* TRIGGERATTACK::New() const {
  return new TRIGGERATTACK;
}

void TRIGGERATTACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    type_ = 0;
    cd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRIGGERATTACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_cd;
        break;
      }

      // required float cd = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TRIGGERATTACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 type = 2 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required float cd = 3 [default = 0];
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TRIGGERATTACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 type = 2 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required float cd = 3 [default = 0];
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TRIGGERATTACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 type = 2 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required float cd = 3 [default = 0];
    if (has_cd()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRIGGERATTACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRIGGERATTACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRIGGERATTACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRIGGERATTACK::MergeFrom(const TRIGGERATTACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRIGGERATTACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRIGGERATTACK::CopyFrom(const TRIGGERATTACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRIGGERATTACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TRIGGERATTACK::Swap(TRIGGERATTACK* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRIGGERATTACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRIGGERATTACK_descriptor_;
  metadata.reflection = TRIGGERATTACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRIGGERATTACK_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

TRIGGERATTACK_ARRAY::TRIGGERATTACK_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TRIGGERATTACK_ARRAY::InitAsDefaultInstance() {
}

TRIGGERATTACK_ARRAY::TRIGGERATTACK_ARRAY(const TRIGGERATTACK_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TRIGGERATTACK_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRIGGERATTACK_ARRAY::~TRIGGERATTACK_ARRAY() {
  SharedDtor();
}

void TRIGGERATTACK_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRIGGERATTACK_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRIGGERATTACK_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRIGGERATTACK_ARRAY_descriptor_;
}

const TRIGGERATTACK_ARRAY& TRIGGERATTACK_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

TRIGGERATTACK_ARRAY* TRIGGERATTACK_ARRAY::default_instance_ = NULL;

TRIGGERATTACK_ARRAY* TRIGGERATTACK_ARRAY::New() const {
  return new TRIGGERATTACK_ARRAY;
}

void TRIGGERATTACK_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRIGGERATTACK_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TRIGGERATTACK items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TRIGGERATTACK_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TRIGGERATTACK items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TRIGGERATTACK_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TRIGGERATTACK items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TRIGGERATTACK_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .TRIGGERATTACK items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRIGGERATTACK_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRIGGERATTACK_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRIGGERATTACK_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRIGGERATTACK_ARRAY::MergeFrom(const TRIGGERATTACK_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRIGGERATTACK_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRIGGERATTACK_ARRAY::CopyFrom(const TRIGGERATTACK_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRIGGERATTACK_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void TRIGGERATTACK_ARRAY::Swap(TRIGGERATTACK_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRIGGERATTACK_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRIGGERATTACK_ARRAY_descriptor_;
  metadata.reflection = TRIGGERATTACK_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRIGGERSTARTCONDITION::kIdFieldNumber;
const int TRIGGERSTARTCONDITION::kTriggerTimeFieldNumber;
const int TRIGGERSTARTCONDITION::kTriggerTeamFieldNumber;
const int TRIGGERSTARTCONDITION::kTriggerStateFieldNumber;
const int TRIGGERSTARTCONDITION::kTriggerOccupationFieldNumber;
const int TRIGGERSTARTCONDITION::kTriggerMarkFieldNumber;
const int TRIGGERSTARTCONDITION::kTriggerCountFieldNumber;
#endif  // !_MSC_VER

TRIGGERSTARTCONDITION::TRIGGERSTARTCONDITION()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TRIGGERSTARTCONDITION::InitAsDefaultInstance() {
}

TRIGGERSTARTCONDITION::TRIGGERSTARTCONDITION(const TRIGGERSTARTCONDITION& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TRIGGERSTARTCONDITION::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trigger_time_ = 0;
  trigger_team_ = 0;
  trigger_state_ = 0;
  trigger_occupation_ = 0;
  trigger_mark_ = 0;
  trigger_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRIGGERSTARTCONDITION::~TRIGGERSTARTCONDITION() {
  SharedDtor();
}

void TRIGGERSTARTCONDITION::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void TRIGGERSTARTCONDITION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRIGGERSTARTCONDITION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRIGGERSTARTCONDITION_descriptor_;
}

const TRIGGERSTARTCONDITION& TRIGGERSTARTCONDITION::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

TRIGGERSTARTCONDITION* TRIGGERSTARTCONDITION::default_instance_ = NULL;

TRIGGERSTARTCONDITION* TRIGGERSTARTCONDITION::New() const {
  return new TRIGGERSTARTCONDITION;
}

void TRIGGERSTARTCONDITION::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    trigger_time_ = 0;
    trigger_team_ = 0;
    trigger_state_ = 0;
    trigger_occupation_ = 0;
    trigger_mark_ = 0;
    trigger_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRIGGERSTARTCONDITION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trigger_Time;
        break;
      }

      // required int32 trigger_Time = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_time_)));
          set_has_trigger_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trigger_Team;
        break;
      }

      // required int32 trigger_Team = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_Team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_team_)));
          set_has_trigger_team();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_trigger_State;
        break;
      }

      // required int32 trigger_State = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_state_)));
          set_has_trigger_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_trigger_Occupation;
        break;
      }

      // required int32 trigger_Occupation = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_Occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_occupation_)));
          set_has_trigger_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_trigger_Mark;
        break;
      }

      // required int32 trigger_Mark = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_Mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_mark_)));
          set_has_trigger_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_trigger_Count;
        break;
      }

      // required int32 trigger_Count = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_count_)));
          set_has_trigger_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TRIGGERSTARTCONDITION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 trigger_Time = 2 [default = 0];
  if (has_trigger_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trigger_time(), output);
  }

  // required int32 trigger_Team = 3 [default = 0];
  if (has_trigger_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trigger_team(), output);
  }

  // required int32 trigger_State = 4 [default = 0];
  if (has_trigger_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->trigger_state(), output);
  }

  // required int32 trigger_Occupation = 5 [default = 0];
  if (has_trigger_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->trigger_occupation(), output);
  }

  // required int32 trigger_Mark = 6 [default = 0];
  if (has_trigger_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->trigger_mark(), output);
  }

  // required int32 trigger_Count = 7 [default = 0];
  if (has_trigger_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->trigger_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TRIGGERSTARTCONDITION::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 trigger_Time = 2 [default = 0];
  if (has_trigger_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trigger_time(), target);
  }

  // required int32 trigger_Team = 3 [default = 0];
  if (has_trigger_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trigger_team(), target);
  }

  // required int32 trigger_State = 4 [default = 0];
  if (has_trigger_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->trigger_state(), target);
  }

  // required int32 trigger_Occupation = 5 [default = 0];
  if (has_trigger_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->trigger_occupation(), target);
  }

  // required int32 trigger_Mark = 6 [default = 0];
  if (has_trigger_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->trigger_mark(), target);
  }

  // required int32 trigger_Count = 7 [default = 0];
  if (has_trigger_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->trigger_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TRIGGERSTARTCONDITION::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 trigger_Time = 2 [default = 0];
    if (has_trigger_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_time());
    }

    // required int32 trigger_Team = 3 [default = 0];
    if (has_trigger_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_team());
    }

    // required int32 trigger_State = 4 [default = 0];
    if (has_trigger_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_state());
    }

    // required int32 trigger_Occupation = 5 [default = 0];
    if (has_trigger_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_occupation());
    }

    // required int32 trigger_Mark = 6 [default = 0];
    if (has_trigger_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_mark());
    }

    // required int32 trigger_Count = 7 [default = 0];
    if (has_trigger_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRIGGERSTARTCONDITION::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRIGGERSTARTCONDITION* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRIGGERSTARTCONDITION*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRIGGERSTARTCONDITION::MergeFrom(const TRIGGERSTARTCONDITION& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_trigger_time()) {
      set_trigger_time(from.trigger_time());
    }
    if (from.has_trigger_team()) {
      set_trigger_team(from.trigger_team());
    }
    if (from.has_trigger_state()) {
      set_trigger_state(from.trigger_state());
    }
    if (from.has_trigger_occupation()) {
      set_trigger_occupation(from.trigger_occupation());
    }
    if (from.has_trigger_mark()) {
      set_trigger_mark(from.trigger_mark());
    }
    if (from.has_trigger_count()) {
      set_trigger_count(from.trigger_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRIGGERSTARTCONDITION::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRIGGERSTARTCONDITION::CopyFrom(const TRIGGERSTARTCONDITION& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRIGGERSTARTCONDITION::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void TRIGGERSTARTCONDITION::Swap(TRIGGERSTARTCONDITION* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(trigger_time_, other->trigger_time_);
    std::swap(trigger_team_, other->trigger_team_);
    std::swap(trigger_state_, other->trigger_state_);
    std::swap(trigger_occupation_, other->trigger_occupation_);
    std::swap(trigger_mark_, other->trigger_mark_);
    std::swap(trigger_count_, other->trigger_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRIGGERSTARTCONDITION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRIGGERSTARTCONDITION_descriptor_;
  metadata.reflection = TRIGGERSTARTCONDITION_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRIGGERSTARTCONDITION_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

TRIGGERSTARTCONDITION_ARRAY::TRIGGERSTARTCONDITION_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TRIGGERSTARTCONDITION_ARRAY::InitAsDefaultInstance() {
}

TRIGGERSTARTCONDITION_ARRAY::TRIGGERSTARTCONDITION_ARRAY(const TRIGGERSTARTCONDITION_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TRIGGERSTARTCONDITION_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRIGGERSTARTCONDITION_ARRAY::~TRIGGERSTARTCONDITION_ARRAY() {
  SharedDtor();
}

void TRIGGERSTARTCONDITION_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRIGGERSTARTCONDITION_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRIGGERSTARTCONDITION_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRIGGERSTARTCONDITION_ARRAY_descriptor_;
}

const TRIGGERSTARTCONDITION_ARRAY& TRIGGERSTARTCONDITION_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

TRIGGERSTARTCONDITION_ARRAY* TRIGGERSTARTCONDITION_ARRAY::default_instance_ = NULL;

TRIGGERSTARTCONDITION_ARRAY* TRIGGERSTARTCONDITION_ARRAY::New() const {
  return new TRIGGERSTARTCONDITION_ARRAY;
}

void TRIGGERSTARTCONDITION_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRIGGERSTARTCONDITION_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TRIGGERSTARTCONDITION items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TRIGGERSTARTCONDITION_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TRIGGERSTARTCONDITION items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TRIGGERSTARTCONDITION_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TRIGGERSTARTCONDITION items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TRIGGERSTARTCONDITION_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .TRIGGERSTARTCONDITION items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRIGGERSTARTCONDITION_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRIGGERSTARTCONDITION_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRIGGERSTARTCONDITION_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRIGGERSTARTCONDITION_ARRAY::MergeFrom(const TRIGGERSTARTCONDITION_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRIGGERSTARTCONDITION_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRIGGERSTARTCONDITION_ARRAY::CopyFrom(const TRIGGERSTARTCONDITION_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRIGGERSTARTCONDITION_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void TRIGGERSTARTCONDITION_ARRAY::Swap(TRIGGERSTARTCONDITION_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRIGGERSTARTCONDITION_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRIGGERSTARTCONDITION_ARRAY_descriptor_;
  metadata.reflection = TRIGGERSTARTCONDITION_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIP::kIdFieldNumber;
const int VIP::kNeedRMBFieldNumber;
const int VIP::kFreeItemCountFieldNumber;
const int VIP::kBuyPowerCountFieldNumber;
const int VIP::kBuyFBCountFieldNumber;
const int VIP::kBuyArenaCountFieldNumber;
const int VIP::kBuyGoldsCountFieldNumber;
const int VIP::kMaxSkillPointFieldNumber;
const int VIP::kExpBattleNumFieldNumber;
const int VIP::kGoldBattleNumFieldNumber;
const int VIP::kTowerNumFieldNumber;
const int VIP::kCrusadeNumFieldNumber;
const int VIP::kBuySkillPointFieldNumber;
#endif  // !_MSC_VER

VIP::VIP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VIP::InitAsDefaultInstance() {
}

VIP::VIP(const VIP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VIP::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needrmb_ = 0;
  freeitemcount_ = 0;
  buypowercount_ = 0;
  buyfbcount_ = 0;
  buyarenacount_ = 0;
  buygoldscount_ = 0;
  maxskillpoint_ = 0;
  expbattlenum_ = 0;
  goldbattlenum_ = 0;
  towernum_ = 0;
  crusadenum_ = 0;
  buyskillpoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIP::~VIP() {
  SharedDtor();
}

void VIP::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void VIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIP_descriptor_;
}

const VIP& VIP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

VIP* VIP::default_instance_ = NULL;

VIP* VIP::New() const {
  return new VIP;
}

void VIP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    needrmb_ = 0;
    freeitemcount_ = 0;
    buypowercount_ = 0;
    buyfbcount_ = 0;
    buyarenacount_ = 0;
    buygoldscount_ = 0;
    maxskillpoint_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    expbattlenum_ = 0;
    goldbattlenum_ = 0;
    towernum_ = 0;
    crusadenum_ = 0;
    buyskillpoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needRMB;
        break;
      }

      // required int32 needRMB = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needRMB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needrmb_)));
          set_has_needrmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freeItemCount;
        break;
      }

      // required int32 freeItemCount = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeItemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeitemcount_)));
          set_has_freeitemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buyPowerCount;
        break;
      }

      // required int32 buyPowerCount = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyPowerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buypowercount_)));
          set_has_buypowercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buyFBCount;
        break;
      }

      // required int32 buyFBCount = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyFBCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyfbcount_)));
          set_has_buyfbcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_buyArenaCount;
        break;
      }

      // required int32 buyArenaCount = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyArenaCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyarenacount_)));
          set_has_buyarenacount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buyGoldsCount;
        break;
      }

      // required int32 buyGoldsCount = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyGoldsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buygoldscount_)));
          set_has_buygoldscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxSkillPoint;
        break;
      }

      // required int32 maxSkillPoint = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxSkillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxskillpoint_)));
          set_has_maxskillpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_expBattleNum;
        break;
      }

      // required int32 expBattleNum = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expBattleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expbattlenum_)));
          set_has_expbattlenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_goldBattleNum;
        break;
      }

      // required int32 goldBattleNum = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldBattleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldbattlenum_)));
          set_has_goldbattlenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_towerNum;
        break;
      }

      // required int32 towerNum = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_towerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &towernum_)));
          set_has_towernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_crusadeNum;
        break;
      }

      // required int32 crusadeNum = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crusadeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crusadenum_)));
          set_has_crusadenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_buySkillPoint;
        break;
      }

      // required int32 buySkillPoint = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buySkillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyskillpoint_)));
          set_has_buyskillpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 needRMB = 2 [default = 0];
  if (has_needrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->needrmb(), output);
  }

  // required int32 freeItemCount = 3 [default = 0];
  if (has_freeitemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->freeitemcount(), output);
  }

  // required int32 buyPowerCount = 4 [default = 0];
  if (has_buypowercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buypowercount(), output);
  }

  // required int32 buyFBCount = 5 [default = 0];
  if (has_buyfbcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buyfbcount(), output);
  }

  // required int32 buyArenaCount = 6 [default = 0];
  if (has_buyarenacount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->buyarenacount(), output);
  }

  // required int32 buyGoldsCount = 7 [default = 0];
  if (has_buygoldscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buygoldscount(), output);
  }

  // required int32 maxSkillPoint = 8 [default = 0];
  if (has_maxskillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maxskillpoint(), output);
  }

  // required int32 expBattleNum = 9 [default = 0];
  if (has_expbattlenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->expbattlenum(), output);
  }

  // required int32 goldBattleNum = 10 [default = 0];
  if (has_goldbattlenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->goldbattlenum(), output);
  }

  // required int32 towerNum = 11 [default = 0];
  if (has_towernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->towernum(), output);
  }

  // required int32 crusadeNum = 12 [default = 0];
  if (has_crusadenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->crusadenum(), output);
  }

  // required int32 buySkillPoint = 13 [default = 0];
  if (has_buyskillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->buyskillpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VIP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 needRMB = 2 [default = 0];
  if (has_needrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->needrmb(), target);
  }

  // required int32 freeItemCount = 3 [default = 0];
  if (has_freeitemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->freeitemcount(), target);
  }

  // required int32 buyPowerCount = 4 [default = 0];
  if (has_buypowercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buypowercount(), target);
  }

  // required int32 buyFBCount = 5 [default = 0];
  if (has_buyfbcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buyfbcount(), target);
  }

  // required int32 buyArenaCount = 6 [default = 0];
  if (has_buyarenacount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->buyarenacount(), target);
  }

  // required int32 buyGoldsCount = 7 [default = 0];
  if (has_buygoldscount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buygoldscount(), target);
  }

  // required int32 maxSkillPoint = 8 [default = 0];
  if (has_maxskillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maxskillpoint(), target);
  }

  // required int32 expBattleNum = 9 [default = 0];
  if (has_expbattlenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->expbattlenum(), target);
  }

  // required int32 goldBattleNum = 10 [default = 0];
  if (has_goldbattlenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->goldbattlenum(), target);
  }

  // required int32 towerNum = 11 [default = 0];
  if (has_towernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->towernum(), target);
  }

  // required int32 crusadeNum = 12 [default = 0];
  if (has_crusadenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->crusadenum(), target);
  }

  // required int32 buySkillPoint = 13 [default = 0];
  if (has_buyskillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->buyskillpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VIP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 needRMB = 2 [default = 0];
    if (has_needrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needrmb());
    }

    // required int32 freeItemCount = 3 [default = 0];
    if (has_freeitemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeitemcount());
    }

    // required int32 buyPowerCount = 4 [default = 0];
    if (has_buypowercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buypowercount());
    }

    // required int32 buyFBCount = 5 [default = 0];
    if (has_buyfbcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyfbcount());
    }

    // required int32 buyArenaCount = 6 [default = 0];
    if (has_buyarenacount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyarenacount());
    }

    // required int32 buyGoldsCount = 7 [default = 0];
    if (has_buygoldscount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buygoldscount());
    }

    // required int32 maxSkillPoint = 8 [default = 0];
    if (has_maxskillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxskillpoint());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 expBattleNum = 9 [default = 0];
    if (has_expbattlenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expbattlenum());
    }

    // required int32 goldBattleNum = 10 [default = 0];
    if (has_goldbattlenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldbattlenum());
    }

    // required int32 towerNum = 11 [default = 0];
    if (has_towernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->towernum());
    }

    // required int32 crusadeNum = 12 [default = 0];
    if (has_crusadenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crusadenum());
    }

    // required int32 buySkillPoint = 13 [default = 0];
    if (has_buyskillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyskillpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIP::MergeFrom(const VIP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_needrmb()) {
      set_needrmb(from.needrmb());
    }
    if (from.has_freeitemcount()) {
      set_freeitemcount(from.freeitemcount());
    }
    if (from.has_buypowercount()) {
      set_buypowercount(from.buypowercount());
    }
    if (from.has_buyfbcount()) {
      set_buyfbcount(from.buyfbcount());
    }
    if (from.has_buyarenacount()) {
      set_buyarenacount(from.buyarenacount());
    }
    if (from.has_buygoldscount()) {
      set_buygoldscount(from.buygoldscount());
    }
    if (from.has_maxskillpoint()) {
      set_maxskillpoint(from.maxskillpoint());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_expbattlenum()) {
      set_expbattlenum(from.expbattlenum());
    }
    if (from.has_goldbattlenum()) {
      set_goldbattlenum(from.goldbattlenum());
    }
    if (from.has_towernum()) {
      set_towernum(from.towernum());
    }
    if (from.has_crusadenum()) {
      set_crusadenum(from.crusadenum());
    }
    if (from.has_buyskillpoint()) {
      set_buyskillpoint(from.buyskillpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIP::CopyFrom(const VIP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void VIP::Swap(VIP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(needrmb_, other->needrmb_);
    std::swap(freeitemcount_, other->freeitemcount_);
    std::swap(buypowercount_, other->buypowercount_);
    std::swap(buyfbcount_, other->buyfbcount_);
    std::swap(buyarenacount_, other->buyarenacount_);
    std::swap(buygoldscount_, other->buygoldscount_);
    std::swap(maxskillpoint_, other->maxskillpoint_);
    std::swap(expbattlenum_, other->expbattlenum_);
    std::swap(goldbattlenum_, other->goldbattlenum_);
    std::swap(towernum_, other->towernum_);
    std::swap(crusadenum_, other->crusadenum_);
    std::swap(buyskillpoint_, other->buyskillpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIP_descriptor_;
  metadata.reflection = VIP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIP_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

VIP_ARRAY::VIP_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VIP_ARRAY::InitAsDefaultInstance() {
}

VIP_ARRAY::VIP_ARRAY(const VIP_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VIP_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIP_ARRAY::~VIP_ARRAY() {
  SharedDtor();
}

void VIP_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIP_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIP_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIP_ARRAY_descriptor_;
}

const VIP_ARRAY& VIP_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

VIP_ARRAY* VIP_ARRAY::default_instance_ = NULL;

VIP_ARRAY* VIP_ARRAY::New() const {
  return new VIP_ARRAY;
}

void VIP_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIP_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VIP items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VIP_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .VIP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VIP_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .VIP items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VIP_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .VIP items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIP_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIP_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIP_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIP_ARRAY::MergeFrom(const VIP_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIP_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIP_ARRAY::CopyFrom(const VIP_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIP_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void VIP_ARRAY::Swap(VIP_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIP_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIP_ARRAY_descriptor_;
  metadata.reflection = VIP_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIPFUNCTION::kIdFieldNumber;
const int VIPFUNCTION::kOpenVipFieldNumber;
#endif  // !_MSC_VER

VIPFUNCTION::VIPFUNCTION()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VIPFUNCTION::InitAsDefaultInstance() {
}

VIPFUNCTION::VIPFUNCTION(const VIPFUNCTION& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VIPFUNCTION::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openvip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPFUNCTION::~VIPFUNCTION() {
  SharedDtor();
}

void VIPFUNCTION::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void VIPFUNCTION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPFUNCTION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPFUNCTION_descriptor_;
}

const VIPFUNCTION& VIPFUNCTION::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

VIPFUNCTION* VIPFUNCTION::default_instance_ = NULL;

VIPFUNCTION* VIPFUNCTION::New() const {
  return new VIPFUNCTION;
}

void VIPFUNCTION::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    openvip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPFUNCTION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_openVip;
        break;
      }

      // required int32 openVip = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openVip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openvip_)));
          set_has_openvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VIPFUNCTION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required int32 openVip = 2 [default = 0];
  if (has_openvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->openvip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VIPFUNCTION::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1 [default = ""];
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 openVip = 2 [default = 0];
  if (has_openvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->openvip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VIPFUNCTION::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1 [default = ""];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 openVip = 2 [default = 0];
    if (has_openvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openvip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPFUNCTION::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPFUNCTION* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPFUNCTION*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPFUNCTION::MergeFrom(const VIPFUNCTION& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_openvip()) {
      set_openvip(from.openvip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPFUNCTION::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPFUNCTION::CopyFrom(const VIPFUNCTION& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPFUNCTION::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VIPFUNCTION::Swap(VIPFUNCTION* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(openvip_, other->openvip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPFUNCTION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPFUNCTION_descriptor_;
  metadata.reflection = VIPFUNCTION_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIPFUNCTION_ARRAY::kItemsFieldNumber;
#endif  // !_MSC_VER

VIPFUNCTION_ARRAY::VIPFUNCTION_ARRAY()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VIPFUNCTION_ARRAY::InitAsDefaultInstance() {
}

VIPFUNCTION_ARRAY::VIPFUNCTION_ARRAY(const VIPFUNCTION_ARRAY& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VIPFUNCTION_ARRAY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPFUNCTION_ARRAY::~VIPFUNCTION_ARRAY() {
  SharedDtor();
}

void VIPFUNCTION_ARRAY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VIPFUNCTION_ARRAY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPFUNCTION_ARRAY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPFUNCTION_ARRAY_descriptor_;
}

const VIPFUNCTION_ARRAY& VIPFUNCTION_ARRAY::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

VIPFUNCTION_ARRAY* VIPFUNCTION_ARRAY::default_instance_ = NULL;

VIPFUNCTION_ARRAY* VIPFUNCTION_ARRAY::New() const {
  return new VIPFUNCTION_ARRAY;
}

void VIPFUNCTION_ARRAY::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPFUNCTION_ARRAY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VIPFUNCTION items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VIPFUNCTION_ARRAY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .VIPFUNCTION items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VIPFUNCTION_ARRAY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .VIPFUNCTION items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VIPFUNCTION_ARRAY::ByteSize() const {
  int total_size = 0;

  // repeated .VIPFUNCTION items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPFUNCTION_ARRAY::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPFUNCTION_ARRAY* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPFUNCTION_ARRAY*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPFUNCTION_ARRAY::MergeFrom(const VIPFUNCTION_ARRAY& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPFUNCTION_ARRAY::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPFUNCTION_ARRAY::CopyFrom(const VIPFUNCTION_ARRAY& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPFUNCTION_ARRAY::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void VIPFUNCTION_ARRAY::Swap(VIPFUNCTION_ARRAY* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPFUNCTION_ARRAY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPFUNCTION_ARRAY_descriptor_;
  metadata.reflection = VIPFUNCTION_ARRAY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_enter_gs_req::kTokenFieldNumber;
#endif  // !_MSC_VER

c_gs_enter_gs_req::c_gs_enter_gs_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_enter_gs_req::InitAsDefaultInstance() {
}

c_gs_enter_gs_req::c_gs_enter_gs_req(const c_gs_enter_gs_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_enter_gs_req::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_enter_gs_req::~c_gs_enter_gs_req() {
  SharedDtor();
}

void c_gs_enter_gs_req::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void c_gs_enter_gs_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_enter_gs_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_enter_gs_req_descriptor_;
}

const c_gs_enter_gs_req& c_gs_enter_gs_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_enter_gs_req* c_gs_enter_gs_req::default_instance_ = NULL;

c_gs_enter_gs_req* c_gs_enter_gs_req::New() const {
  return new c_gs_enter_gs_req;
}

void c_gs_enter_gs_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_enter_gs_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_enter_gs_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_enter_gs_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes token = 1;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_enter_gs_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_enter_gs_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_enter_gs_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_enter_gs_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_enter_gs_req::MergeFrom(const c_gs_enter_gs_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_enter_gs_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_enter_gs_req::CopyFrom(const c_gs_enter_gs_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_enter_gs_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_enter_gs_req::Swap(c_gs_enter_gs_req* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_enter_gs_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_enter_gs_req_descriptor_;
  metadata.reflection = c_gs_enter_gs_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_enter_gs_res::kErrorCodeFieldNumber;
const int gs_c_enter_gs_res::kProtoVersionFieldNumber;
const int gs_c_enter_gs_res::kServerTimestampFieldNumber;
#endif  // !_MSC_VER

gs_c_enter_gs_res::gs_c_enter_gs_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_enter_gs_res::InitAsDefaultInstance() {
}

gs_c_enter_gs_res::gs_c_enter_gs_res(const gs_c_enter_gs_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_enter_gs_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  proto_version_ = 0u;
  server_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_enter_gs_res::~gs_c_enter_gs_res() {
  SharedDtor();
}

void gs_c_enter_gs_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_enter_gs_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_enter_gs_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_enter_gs_res_descriptor_;
}

const gs_c_enter_gs_res& gs_c_enter_gs_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_enter_gs_res* gs_c_enter_gs_res::default_instance_ = NULL;

gs_c_enter_gs_res* gs_c_enter_gs_res::New() const {
  return new gs_c_enter_gs_res;
}

void gs_c_enter_gs_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    proto_version_ = 0u;
    server_timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_enter_gs_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proto_version;
        break;
      }

      // optional uint32 proto_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proto_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proto_version_)));
          set_has_proto_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_server_timestamp;
        break;
      }

      // optional uint32 server_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_timestamp_)));
          set_has_server_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_enter_gs_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 proto_version = 2;
  if (has_proto_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proto_version(), output);
  }

  // optional uint32 server_timestamp = 3;
  if (has_server_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_enter_gs_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 proto_version = 2;
  if (has_proto_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proto_version(), target);
  }

  // optional uint32 server_timestamp = 3;
  if (has_server_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_enter_gs_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 proto_version = 2;
    if (has_proto_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proto_version());
    }

    // optional uint32 server_timestamp = 3;
    if (has_server_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_enter_gs_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_enter_gs_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_enter_gs_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_enter_gs_res::MergeFrom(const gs_c_enter_gs_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_proto_version()) {
      set_proto_version(from.proto_version());
    }
    if (from.has_server_timestamp()) {
      set_server_timestamp(from.server_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_enter_gs_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_enter_gs_res::CopyFrom(const gs_c_enter_gs_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_enter_gs_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_enter_gs_res::Swap(gs_c_enter_gs_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(proto_version_, other->proto_version_);
    std::swap(server_timestamp_, other->server_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_enter_gs_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_enter_gs_res_descriptor_;
  metadata.reflection = gs_c_enter_gs_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_leave_gs_req::c_gs_leave_gs_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_leave_gs_req::InitAsDefaultInstance() {
}

c_gs_leave_gs_req::c_gs_leave_gs_req(const c_gs_leave_gs_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_leave_gs_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_leave_gs_req::~c_gs_leave_gs_req() {
  SharedDtor();
}

void c_gs_leave_gs_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_leave_gs_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_leave_gs_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_leave_gs_req_descriptor_;
}

const c_gs_leave_gs_req& c_gs_leave_gs_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_leave_gs_req* c_gs_leave_gs_req::default_instance_ = NULL;

c_gs_leave_gs_req* c_gs_leave_gs_req::New() const {
  return new c_gs_leave_gs_req;
}

void c_gs_leave_gs_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_leave_gs_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_leave_gs_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_leave_gs_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_leave_gs_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_leave_gs_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_leave_gs_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_leave_gs_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_leave_gs_req::MergeFrom(const c_gs_leave_gs_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_leave_gs_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_leave_gs_req::CopyFrom(const c_gs_leave_gs_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_leave_gs_req::IsInitialized() const {

  return true;
}

void c_gs_leave_gs_req::Swap(c_gs_leave_gs_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_leave_gs_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_leave_gs_req_descriptor_;
  metadata.reflection = c_gs_leave_gs_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_leave_gs_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_c_leave_gs_res::gs_c_leave_gs_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_leave_gs_res::InitAsDefaultInstance() {
}

gs_c_leave_gs_res::gs_c_leave_gs_res(const gs_c_leave_gs_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_leave_gs_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_leave_gs_res::~gs_c_leave_gs_res() {
  SharedDtor();
}

void gs_c_leave_gs_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_leave_gs_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_leave_gs_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_leave_gs_res_descriptor_;
}

const gs_c_leave_gs_res& gs_c_leave_gs_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_leave_gs_res* gs_c_leave_gs_res::default_instance_ = NULL;

gs_c_leave_gs_res* gs_c_leave_gs_res::New() const {
  return new gs_c_leave_gs_res;
}

void gs_c_leave_gs_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_leave_gs_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_leave_gs_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_leave_gs_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_leave_gs_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_leave_gs_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_leave_gs_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_leave_gs_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_leave_gs_res::MergeFrom(const gs_c_leave_gs_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_leave_gs_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_leave_gs_res::CopyFrom(const gs_c_leave_gs_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_leave_gs_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_leave_gs_res::Swap(gs_c_leave_gs_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_leave_gs_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_leave_gs_res_descriptor_;
  metadata.reflection = gs_c_leave_gs_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_json_config_version_req::c_gs_json_config_version_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_json_config_version_req::InitAsDefaultInstance() {
}

c_gs_json_config_version_req::c_gs_json_config_version_req(const c_gs_json_config_version_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_json_config_version_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_json_config_version_req::~c_gs_json_config_version_req() {
  SharedDtor();
}

void c_gs_json_config_version_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_json_config_version_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_json_config_version_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_json_config_version_req_descriptor_;
}

const c_gs_json_config_version_req& c_gs_json_config_version_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_json_config_version_req* c_gs_json_config_version_req::default_instance_ = NULL;

c_gs_json_config_version_req* c_gs_json_config_version_req::New() const {
  return new c_gs_json_config_version_req;
}

void c_gs_json_config_version_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_json_config_version_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_json_config_version_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_json_config_version_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_json_config_version_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_json_config_version_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_json_config_version_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_json_config_version_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_json_config_version_req::MergeFrom(const c_gs_json_config_version_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_json_config_version_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_json_config_version_req::CopyFrom(const c_gs_json_config_version_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_json_config_version_req::IsInitialized() const {

  return true;
}

void c_gs_json_config_version_req::Swap(c_gs_json_config_version_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_json_config_version_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_json_config_version_req_descriptor_;
  metadata.reflection = c_gs_json_config_version_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_json_config_version_res_config_version::kNameFieldNumber;
const int gs_c_json_config_version_res_config_version::kMd5FieldNumber;
#endif  // !_MSC_VER

gs_c_json_config_version_res_config_version::gs_c_json_config_version_res_config_version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_json_config_version_res_config_version::InitAsDefaultInstance() {
}

gs_c_json_config_version_res_config_version::gs_c_json_config_version_res_config_version(const gs_c_json_config_version_res_config_version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_json_config_version_res_config_version::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_json_config_version_res_config_version::~gs_c_json_config_version_res_config_version() {
  SharedDtor();
}

void gs_c_json_config_version_res_config_version::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void gs_c_json_config_version_res_config_version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_json_config_version_res_config_version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_json_config_version_res_config_version_descriptor_;
}

const gs_c_json_config_version_res_config_version& gs_c_json_config_version_res_config_version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_json_config_version_res_config_version* gs_c_json_config_version_res_config_version::default_instance_ = NULL;

gs_c_json_config_version_res_config_version* gs_c_json_config_version_res_config_version::New() const {
  return new gs_c_json_config_version_res_config_version;
}

void gs_c_json_config_version_res_config_version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_json_config_version_res_config_version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_md5;
        break;
      }

      // required string md5 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_json_config_version_res_config_version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string md5 = 2;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->md5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_json_config_version_res_config_version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string md5 = 2;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->md5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_json_config_version_res_config_version::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string md5 = 2;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_json_config_version_res_config_version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_json_config_version_res_config_version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_json_config_version_res_config_version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_json_config_version_res_config_version::MergeFrom(const gs_c_json_config_version_res_config_version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_json_config_version_res_config_version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_json_config_version_res_config_version::CopyFrom(const gs_c_json_config_version_res_config_version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_json_config_version_res_config_version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gs_c_json_config_version_res_config_version::Swap(gs_c_json_config_version_res_config_version* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(md5_, other->md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_json_config_version_res_config_version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_json_config_version_res_config_version_descriptor_;
  metadata.reflection = gs_c_json_config_version_res_config_version_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_c_json_config_version_res::kErrorCodeFieldNumber;
const int gs_c_json_config_version_res::kVersionsFieldNumber;
#endif  // !_MSC_VER

gs_c_json_config_version_res::gs_c_json_config_version_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_json_config_version_res::InitAsDefaultInstance() {
}

gs_c_json_config_version_res::gs_c_json_config_version_res(const gs_c_json_config_version_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_json_config_version_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_json_config_version_res::~gs_c_json_config_version_res() {
  SharedDtor();
}

void gs_c_json_config_version_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_json_config_version_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_json_config_version_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_json_config_version_res_descriptor_;
}

const gs_c_json_config_version_res& gs_c_json_config_version_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_json_config_version_res* gs_c_json_config_version_res::default_instance_ = NULL;

gs_c_json_config_version_res* gs_c_json_config_version_res::New() const {
  return new gs_c_json_config_version_res;
}

void gs_c_json_config_version_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_json_config_version_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_versions;
        break;
      }

      // repeated .gs_c_json_config_version_res.config_version versions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_versions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_versions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_json_config_version_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .gs_c_json_config_version_res.config_version versions = 2;
  for (int i = 0; i < this->versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->versions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_json_config_version_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .gs_c_json_config_version_res.config_version versions = 2;
  for (int i = 0; i < this->versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->versions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_json_config_version_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .gs_c_json_config_version_res.config_version versions = 2;
  total_size += 1 * this->versions_size();
  for (int i = 0; i < this->versions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->versions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_json_config_version_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_json_config_version_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_json_config_version_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_json_config_version_res::MergeFrom(const gs_c_json_config_version_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  versions_.MergeFrom(from.versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_json_config_version_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_json_config_version_res::CopyFrom(const gs_c_json_config_version_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_json_config_version_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < versions_size(); i++) {
    if (!this->versions(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_json_config_version_res::Swap(gs_c_json_config_version_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    versions_.Swap(&other->versions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_json_config_version_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_json_config_version_res_descriptor_;
  metadata.reflection = gs_c_json_config_version_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_json_config_req::kNamesFieldNumber;
#endif  // !_MSC_VER

c_gs_json_config_req::c_gs_json_config_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_json_config_req::InitAsDefaultInstance() {
}

c_gs_json_config_req::c_gs_json_config_req(const c_gs_json_config_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_json_config_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_json_config_req::~c_gs_json_config_req() {
  SharedDtor();
}

void c_gs_json_config_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_json_config_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_json_config_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_json_config_req_descriptor_;
}

const c_gs_json_config_req& c_gs_json_config_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_json_config_req* c_gs_json_config_req::default_instance_ = NULL;

c_gs_json_config_req* c_gs_json_config_req::New() const {
  return new c_gs_json_config_req;
}

void c_gs_json_config_req::Clear() {
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_json_config_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_json_config_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_json_config_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_json_config_req::ByteSize() const {
  int total_size = 0;

  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_json_config_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_json_config_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_json_config_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_json_config_req::MergeFrom(const c_gs_json_config_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_json_config_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_json_config_req::CopyFrom(const c_gs_json_config_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_json_config_req::IsInitialized() const {

  return true;
}

void c_gs_json_config_req::Swap(c_gs_json_config_req* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_json_config_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_json_config_req_descriptor_;
  metadata.reflection = c_gs_json_config_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_json_config_res_config::kNameFieldNumber;
const int gs_c_json_config_res_config::kMd5FieldNumber;
const int gs_c_json_config_res_config::kContentFieldNumber;
#endif  // !_MSC_VER

gs_c_json_config_res_config::gs_c_json_config_res_config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_json_config_res_config::InitAsDefaultInstance() {
}

gs_c_json_config_res_config::gs_c_json_config_res_config(const gs_c_json_config_res_config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_json_config_res_config::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_json_config_res_config::~gs_c_json_config_res_config() {
  SharedDtor();
}

void gs_c_json_config_res_config::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void gs_c_json_config_res_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_json_config_res_config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_json_config_res_config_descriptor_;
}

const gs_c_json_config_res_config& gs_c_json_config_res_config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_json_config_res_config* gs_c_json_config_res_config::default_instance_ = NULL;

gs_c_json_config_res_config* gs_c_json_config_res_config::New() const {
  return new gs_c_json_config_res_config;
}

void gs_c_json_config_res_config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_json_config_res_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_md5;
        break;
      }

      // required string md5 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_json_config_res_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string md5 = 2;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->md5(), output);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_json_config_res_config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string md5 = 2;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->md5(), target);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_json_config_res_config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string md5 = 2;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_json_config_res_config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_json_config_res_config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_json_config_res_config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_json_config_res_config::MergeFrom(const gs_c_json_config_res_config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_json_config_res_config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_json_config_res_config::CopyFrom(const gs_c_json_config_res_config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_json_config_res_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void gs_c_json_config_res_config::Swap(gs_c_json_config_res_config* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(md5_, other->md5_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_json_config_res_config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_json_config_res_config_descriptor_;
  metadata.reflection = gs_c_json_config_res_config_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_c_json_config_res::kErrorCodeFieldNumber;
const int gs_c_json_config_res::kConfigsFieldNumber;
#endif  // !_MSC_VER

gs_c_json_config_res::gs_c_json_config_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_json_config_res::InitAsDefaultInstance() {
}

gs_c_json_config_res::gs_c_json_config_res(const gs_c_json_config_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_json_config_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_json_config_res::~gs_c_json_config_res() {
  SharedDtor();
}

void gs_c_json_config_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_json_config_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_json_config_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_json_config_res_descriptor_;
}

const gs_c_json_config_res& gs_c_json_config_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_json_config_res* gs_c_json_config_res::default_instance_ = NULL;

gs_c_json_config_res* gs_c_json_config_res::New() const {
  return new gs_c_json_config_res;
}

void gs_c_json_config_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  configs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_json_config_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configs;
        break;
      }

      // repeated .gs_c_json_config_res.config configs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_json_config_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .gs_c_json_config_res.config configs = 2;
  for (int i = 0; i < this->configs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->configs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_json_config_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .gs_c_json_config_res.config configs = 2;
  for (int i = 0; i < this->configs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->configs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_json_config_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .gs_c_json_config_res.config configs = 2;
  total_size += 1 * this->configs_size();
  for (int i = 0; i < this->configs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_json_config_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_json_config_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_json_config_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_json_config_res::MergeFrom(const gs_c_json_config_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  configs_.MergeFrom(from.configs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_json_config_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_json_config_res::CopyFrom(const gs_c_json_config_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_json_config_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < configs_size(); i++) {
    if (!this->configs(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_json_config_res::Swap(gs_c_json_config_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    configs_.Swap(&other->configs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_json_config_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_json_config_res_descriptor_;
  metadata.reflection = gs_c_json_config_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_config_req::c_gs_config_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_config_req::InitAsDefaultInstance() {
}

c_gs_config_req::c_gs_config_req(const c_gs_config_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_config_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_config_req::~c_gs_config_req() {
  SharedDtor();
}

void c_gs_config_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_config_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_config_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_config_req_descriptor_;
}

const c_gs_config_req& c_gs_config_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_config_req* c_gs_config_req::default_instance_ = NULL;

c_gs_config_req* c_gs_config_req::New() const {
  return new c_gs_config_req;
}

void c_gs_config_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_config_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_config_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_config_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_config_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_config_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_config_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_config_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_config_req::MergeFrom(const c_gs_config_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_config_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_config_req::CopyFrom(const c_gs_config_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_config_req::IsInitialized() const {

  return true;
}

void c_gs_config_req::Swap(c_gs_config_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_config_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_config_req_descriptor_;
  metadata.reflection = c_gs_config_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_config_res::kErrorCodeFieldNumber;
const int gs_c_config_res::kChapterMapFieldNumber;
const int gs_c_config_res::kTaskFieldNumber;
const int gs_c_config_res::kSubTaskFieldNumber;
const int gs_c_config_res::kBattleFieldNumber;
const int gs_c_config_res::kHeroPropFieldNumber;
const int gs_c_config_res::kBossPropFieldNumber;
const int gs_c_config_res::kMonsterPropFieldNumber;
const int gs_c_config_res::kEquipFieldNumber;
const int gs_c_config_res::kAoyiFieldNumber;
const int gs_c_config_res::kBagFieldNumber;
const int gs_c_config_res::kPassiveFieldNumber;
const int gs_c_config_res::kTriggerStartConditionFieldNumber;
const int gs_c_config_res::kRealtimeCheckFieldNumber;
const int gs_c_config_res::kTriggerAttackFieldNumber;
const int gs_c_config_res::kBuffFieldNumber;
const int gs_c_config_res::kHeroSkillFieldNumber;
const int gs_c_config_res::kBossSkillFieldNumber;
const int gs_c_config_res::kCoinPriceFieldNumber;
const int gs_c_config_res::kResetPriceFieldNumber;
const int gs_c_config_res::kSppriceFieldNumber;
const int gs_c_config_res::kStapriceFieldNumber;
const int gs_c_config_res::kVipFieldNumber;
const int gs_c_config_res::kVipFunctionFieldNumber;
const int gs_c_config_res::kShopResetpriceFieldNumber;
const int gs_c_config_res::kPrizeShowFieldNumber;
const int gs_c_config_res::kHeroStarFieldNumber;
const int gs_c_config_res::kEvolutionCoinFieldNumber;
const int gs_c_config_res::kQualityRuleFieldNumber;
const int gs_c_config_res::kRuleFieldNumber;
#endif  // !_MSC_VER

gs_c_config_res::gs_c_config_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_config_res::InitAsDefaultInstance() {
  chapter_map_ = const_cast< ::CHAPTERMAP_ARRAY*>(&::CHAPTERMAP_ARRAY::default_instance());
  task_ = const_cast< ::TASK_ARRAY*>(&::TASK_ARRAY::default_instance());
  sub_task_ = const_cast< ::SUBTASK_ARRAY*>(&::SUBTASK_ARRAY::default_instance());
  battle_ = const_cast< ::BATTLE_ARRAY*>(&::BATTLE_ARRAY::default_instance());
  hero_prop_ = const_cast< ::HEROPROP_ARRAY*>(&::HEROPROP_ARRAY::default_instance());
  boss_prop_ = const_cast< ::BOSSPROP_ARRAY*>(&::BOSSPROP_ARRAY::default_instance());
  monster_prop_ = const_cast< ::MONSTERPROP_ARRAY*>(&::MONSTERPROP_ARRAY::default_instance());
  equip_ = const_cast< ::EQUIP_ARRAY*>(&::EQUIP_ARRAY::default_instance());
  aoyi_ = const_cast< ::AOYI_ARRAY*>(&::AOYI_ARRAY::default_instance());
  bag_ = const_cast< ::BAG_ARRAY*>(&::BAG_ARRAY::default_instance());
  passive_ = const_cast< ::PASSIVE_ARRAY*>(&::PASSIVE_ARRAY::default_instance());
  trigger_start_condition_ = const_cast< ::TRIGGERSTARTCONDITION_ARRAY*>(&::TRIGGERSTARTCONDITION_ARRAY::default_instance());
  realtime_check_ = const_cast< ::REALTIMECHECK_ARRAY*>(&::REALTIMECHECK_ARRAY::default_instance());
  trigger_attack_ = const_cast< ::TRIGGERATTACK_ARRAY*>(&::TRIGGERATTACK_ARRAY::default_instance());
  buff_ = const_cast< ::BUFF_ARRAY*>(&::BUFF_ARRAY::default_instance());
  hero_skill_ = const_cast< ::HEROSKILL_ARRAY*>(&::HEROSKILL_ARRAY::default_instance());
  boss_skill_ = const_cast< ::BOSSSKILL_ARRAY*>(&::BOSSSKILL_ARRAY::default_instance());
  coin_price_ = const_cast< ::COINPRICE_ARRAY*>(&::COINPRICE_ARRAY::default_instance());
  reset_price_ = const_cast< ::RESETPRICE_ARRAY*>(&::RESETPRICE_ARRAY::default_instance());
  spprice_ = const_cast< ::SPPRICE_ARRAY*>(&::SPPRICE_ARRAY::default_instance());
  staprice_ = const_cast< ::STAPRICE_ARRAY*>(&::STAPRICE_ARRAY::default_instance());
  vip_ = const_cast< ::VIP_ARRAY*>(&::VIP_ARRAY::default_instance());
  vip_function_ = const_cast< ::VIPFUNCTION_ARRAY*>(&::VIPFUNCTION_ARRAY::default_instance());
  shop_resetprice_ = const_cast< ::SHOPRESETPRICE_ARRAY*>(&::SHOPRESETPRICE_ARRAY::default_instance());
  prize_show_ = const_cast< ::PRIZESHOW_ARRAY*>(&::PRIZESHOW_ARRAY::default_instance());
  hero_star_ = const_cast< ::HEROSTAR_ARRAY*>(&::HEROSTAR_ARRAY::default_instance());
  evolution_coin_ = const_cast< ::EVOLUTIONCOIN_ARRAY*>(&::EVOLUTIONCOIN_ARRAY::default_instance());
  quality_rule_ = const_cast< ::QUALITYRULE_ARRAY*>(&::QUALITYRULE_ARRAY::default_instance());
  rule_ = const_cast< ::RULE_ARRAY*>(&::RULE_ARRAY::default_instance());
}

gs_c_config_res::gs_c_config_res(const gs_c_config_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_config_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  chapter_map_ = NULL;
  task_ = NULL;
  sub_task_ = NULL;
  battle_ = NULL;
  hero_prop_ = NULL;
  boss_prop_ = NULL;
  monster_prop_ = NULL;
  equip_ = NULL;
  aoyi_ = NULL;
  bag_ = NULL;
  passive_ = NULL;
  trigger_start_condition_ = NULL;
  realtime_check_ = NULL;
  trigger_attack_ = NULL;
  buff_ = NULL;
  hero_skill_ = NULL;
  boss_skill_ = NULL;
  coin_price_ = NULL;
  reset_price_ = NULL;
  spprice_ = NULL;
  staprice_ = NULL;
  vip_ = NULL;
  vip_function_ = NULL;
  shop_resetprice_ = NULL;
  prize_show_ = NULL;
  hero_star_ = NULL;
  evolution_coin_ = NULL;
  quality_rule_ = NULL;
  rule_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_config_res::~gs_c_config_res() {
  SharedDtor();
}

void gs_c_config_res::SharedDtor() {
  if (this != default_instance_) {
    delete chapter_map_;
    delete task_;
    delete sub_task_;
    delete battle_;
    delete hero_prop_;
    delete boss_prop_;
    delete monster_prop_;
    delete equip_;
    delete aoyi_;
    delete bag_;
    delete passive_;
    delete trigger_start_condition_;
    delete realtime_check_;
    delete trigger_attack_;
    delete buff_;
    delete hero_skill_;
    delete boss_skill_;
    delete coin_price_;
    delete reset_price_;
    delete spprice_;
    delete staprice_;
    delete vip_;
    delete vip_function_;
    delete shop_resetprice_;
    delete prize_show_;
    delete hero_star_;
    delete evolution_coin_;
    delete quality_rule_;
    delete rule_;
  }
}

void gs_c_config_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_config_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_config_res_descriptor_;
}

const gs_c_config_res& gs_c_config_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_config_res* gs_c_config_res::default_instance_ = NULL;

gs_c_config_res* gs_c_config_res::New() const {
  return new gs_c_config_res;
}

void gs_c_config_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_chapter_map()) {
      if (chapter_map_ != NULL) chapter_map_->::CHAPTERMAP_ARRAY::Clear();
    }
    if (has_task()) {
      if (task_ != NULL) task_->::TASK_ARRAY::Clear();
    }
    if (has_sub_task()) {
      if (sub_task_ != NULL) sub_task_->::SUBTASK_ARRAY::Clear();
    }
    if (has_battle()) {
      if (battle_ != NULL) battle_->::BATTLE_ARRAY::Clear();
    }
    if (has_hero_prop()) {
      if (hero_prop_ != NULL) hero_prop_->::HEROPROP_ARRAY::Clear();
    }
    if (has_boss_prop()) {
      if (boss_prop_ != NULL) boss_prop_->::BOSSPROP_ARRAY::Clear();
    }
    if (has_monster_prop()) {
      if (monster_prop_ != NULL) monster_prop_->::MONSTERPROP_ARRAY::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_equip()) {
      if (equip_ != NULL) equip_->::EQUIP_ARRAY::Clear();
    }
    if (has_aoyi()) {
      if (aoyi_ != NULL) aoyi_->::AOYI_ARRAY::Clear();
    }
    if (has_bag()) {
      if (bag_ != NULL) bag_->::BAG_ARRAY::Clear();
    }
    if (has_passive()) {
      if (passive_ != NULL) passive_->::PASSIVE_ARRAY::Clear();
    }
    if (has_trigger_start_condition()) {
      if (trigger_start_condition_ != NULL) trigger_start_condition_->::TRIGGERSTARTCONDITION_ARRAY::Clear();
    }
    if (has_realtime_check()) {
      if (realtime_check_ != NULL) realtime_check_->::REALTIMECHECK_ARRAY::Clear();
    }
    if (has_trigger_attack()) {
      if (trigger_attack_ != NULL) trigger_attack_->::TRIGGERATTACK_ARRAY::Clear();
    }
    if (has_buff()) {
      if (buff_ != NULL) buff_->::BUFF_ARRAY::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_hero_skill()) {
      if (hero_skill_ != NULL) hero_skill_->::HEROSKILL_ARRAY::Clear();
    }
    if (has_boss_skill()) {
      if (boss_skill_ != NULL) boss_skill_->::BOSSSKILL_ARRAY::Clear();
    }
    if (has_coin_price()) {
      if (coin_price_ != NULL) coin_price_->::COINPRICE_ARRAY::Clear();
    }
    if (has_reset_price()) {
      if (reset_price_ != NULL) reset_price_->::RESETPRICE_ARRAY::Clear();
    }
    if (has_spprice()) {
      if (spprice_ != NULL) spprice_->::SPPRICE_ARRAY::Clear();
    }
    if (has_staprice()) {
      if (staprice_ != NULL) staprice_->::STAPRICE_ARRAY::Clear();
    }
    if (has_vip()) {
      if (vip_ != NULL) vip_->::VIP_ARRAY::Clear();
    }
    if (has_vip_function()) {
      if (vip_function_ != NULL) vip_function_->::VIPFUNCTION_ARRAY::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_shop_resetprice()) {
      if (shop_resetprice_ != NULL) shop_resetprice_->::SHOPRESETPRICE_ARRAY::Clear();
    }
    if (has_prize_show()) {
      if (prize_show_ != NULL) prize_show_->::PRIZESHOW_ARRAY::Clear();
    }
    if (has_hero_star()) {
      if (hero_star_ != NULL) hero_star_->::HEROSTAR_ARRAY::Clear();
    }
    if (has_evolution_coin()) {
      if (evolution_coin_ != NULL) evolution_coin_->::EVOLUTIONCOIN_ARRAY::Clear();
    }
    if (has_quality_rule()) {
      if (quality_rule_ != NULL) quality_rule_->::QUALITYRULE_ARRAY::Clear();
    }
    if (has_rule()) {
      if (rule_ != NULL) rule_->::RULE_ARRAY::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_config_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chapter_map;
        break;
      }

      // optional .CHAPTERMAP_ARRAY chapter_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapter_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chapter_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task;
        break;
      }

      // optional .TASK_ARRAY task = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sub_task;
        break;
      }

      // optional .SUBTASK_ARRAY sub_task = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_battle;
        break;
      }

      // optional .BATTLE_ARRAY battle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hero_prop;
        break;
      }

      // optional .HEROPROP_ARRAY hero_prop = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_prop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_prop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boss_prop;
        break;
      }

      // optional .BOSSPROP_ARRAY boss_prop = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_prop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss_prop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_monster_prop;
        break;
      }

      // optional .MONSTERPROP_ARRAY monster_prop = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_prop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monster_prop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_equip;
        break;
      }

      // optional .EQUIP_ARRAY equip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_aoyi;
        break;
      }

      // optional .AOYI_ARRAY aoyi = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aoyi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aoyi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_bag;
        break;
      }

      // optional .BAG_ARRAY bag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_passive;
        break;
      }

      // optional .PASSIVE_ARRAY passive = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_passive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_trigger_start_condition;
        break;
      }

      // optional .TRIGGERSTARTCONDITION_ARRAY trigger_start_condition = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_start_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trigger_start_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_realtime_check;
        break;
      }

      // optional .REALTIMECHECK_ARRAY realtime_check = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realtime_check:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_realtime_check()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_trigger_attack;
        break;
      }

      // optional .TRIGGERATTACK_ARRAY trigger_attack = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_attack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trigger_attack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_buff;
        break;
      }

      // optional .BUFF_ARRAY buff = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_hero_skill;
        break;
      }

      // optional .HEROSKILL_ARRAY hero_skill = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_boss_skill;
        break;
      }

      // optional .BOSSSKILL_ARRAY boss_skill = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_coin_price;
        break;
      }

      // optional .COINPRICE_ARRAY coin_price = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coin_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coin_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_reset_price;
        break;
      }

      // optional .RESETPRICE_ARRAY reset_price = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reset_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reset_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_spprice;
        break;
      }

      // optional .SPPRICE_ARRAY spprice = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spprice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_staprice;
        break;
      }

      // optional .STAPRICE_ARRAY staprice = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_staprice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_vip;
        break;
      }

      // optional .VIP_ARRAY vip = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_vip_function;
        break;
      }

      // optional .VIPFUNCTION_ARRAY vip_function = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vip_function()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_shop_resetprice;
        break;
      }

      // optional .SHOPRESETPRICE_ARRAY shop_resetprice = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_resetprice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop_resetprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_prize_show;
        break;
      }

      // optional .PRIZESHOW_ARRAY prize_show = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prize_show()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_hero_star;
        break;
      }

      // optional .HEROSTAR_ARRAY hero_star = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_star:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_star()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_evolution_coin;
        break;
      }

      // optional .EVOLUTIONCOIN_ARRAY evolution_coin = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_evolution_coin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_evolution_coin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_quality_rule;
        break;
      }

      // optional .QUALITYRULE_ARRAY quality_rule = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quality_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quality_rule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_rule;
        break;
      }

      // optional .RULE_ARRAY rule = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_config_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional .CHAPTERMAP_ARRAY chapter_map = 2;
  if (has_chapter_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chapter_map(), output);
  }

  // optional .TASK_ARRAY task = 3;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->task(), output);
  }

  // optional .SUBTASK_ARRAY sub_task = 4;
  if (has_sub_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sub_task(), output);
  }

  // optional .BATTLE_ARRAY battle = 5;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->battle(), output);
  }

  // optional .HEROPROP_ARRAY hero_prop = 6;
  if (has_hero_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->hero_prop(), output);
  }

  // optional .BOSSPROP_ARRAY boss_prop = 7;
  if (has_boss_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->boss_prop(), output);
  }

  // optional .MONSTERPROP_ARRAY monster_prop = 8;
  if (has_monster_prop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->monster_prop(), output);
  }

  // optional .EQUIP_ARRAY equip = 9;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->equip(), output);
  }

  // optional .AOYI_ARRAY aoyi = 10;
  if (has_aoyi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->aoyi(), output);
  }

  // optional .BAG_ARRAY bag = 11;
  if (has_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->bag(), output);
  }

  // optional .PASSIVE_ARRAY passive = 12;
  if (has_passive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->passive(), output);
  }

  // optional .TRIGGERSTARTCONDITION_ARRAY trigger_start_condition = 13;
  if (has_trigger_start_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->trigger_start_condition(), output);
  }

  // optional .REALTIMECHECK_ARRAY realtime_check = 14;
  if (has_realtime_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->realtime_check(), output);
  }

  // optional .TRIGGERATTACK_ARRAY trigger_attack = 15;
  if (has_trigger_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->trigger_attack(), output);
  }

  // optional .BUFF_ARRAY buff = 16;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->buff(), output);
  }

  // optional .HEROSKILL_ARRAY hero_skill = 17;
  if (has_hero_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->hero_skill(), output);
  }

  // optional .BOSSSKILL_ARRAY boss_skill = 18;
  if (has_boss_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->boss_skill(), output);
  }

  // optional .COINPRICE_ARRAY coin_price = 19;
  if (has_coin_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->coin_price(), output);
  }

  // optional .RESETPRICE_ARRAY reset_price = 20;
  if (has_reset_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->reset_price(), output);
  }

  // optional .SPPRICE_ARRAY spprice = 21;
  if (has_spprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->spprice(), output);
  }

  // optional .STAPRICE_ARRAY staprice = 22;
  if (has_staprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->staprice(), output);
  }

  // optional .VIP_ARRAY vip = 23;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->vip(), output);
  }

  // optional .VIPFUNCTION_ARRAY vip_function = 24;
  if (has_vip_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->vip_function(), output);
  }

  // optional .SHOPRESETPRICE_ARRAY shop_resetprice = 25;
  if (has_shop_resetprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->shop_resetprice(), output);
  }

  // optional .PRIZESHOW_ARRAY prize_show = 26;
  if (has_prize_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->prize_show(), output);
  }

  // optional .HEROSTAR_ARRAY hero_star = 27;
  if (has_hero_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->hero_star(), output);
  }

  // optional .EVOLUTIONCOIN_ARRAY evolution_coin = 28;
  if (has_evolution_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->evolution_coin(), output);
  }

  // optional .QUALITYRULE_ARRAY quality_rule = 29;
  if (has_quality_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->quality_rule(), output);
  }

  // optional .RULE_ARRAY rule = 30;
  if (has_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->rule(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_config_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional .CHAPTERMAP_ARRAY chapter_map = 2;
  if (has_chapter_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chapter_map(), target);
  }

  // optional .TASK_ARRAY task = 3;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->task(), target);
  }

  // optional .SUBTASK_ARRAY sub_task = 4;
  if (has_sub_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sub_task(), target);
  }

  // optional .BATTLE_ARRAY battle = 5;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->battle(), target);
  }

  // optional .HEROPROP_ARRAY hero_prop = 6;
  if (has_hero_prop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->hero_prop(), target);
  }

  // optional .BOSSPROP_ARRAY boss_prop = 7;
  if (has_boss_prop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->boss_prop(), target);
  }

  // optional .MONSTERPROP_ARRAY monster_prop = 8;
  if (has_monster_prop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->monster_prop(), target);
  }

  // optional .EQUIP_ARRAY equip = 9;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->equip(), target);
  }

  // optional .AOYI_ARRAY aoyi = 10;
  if (has_aoyi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->aoyi(), target);
  }

  // optional .BAG_ARRAY bag = 11;
  if (has_bag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->bag(), target);
  }

  // optional .PASSIVE_ARRAY passive = 12;
  if (has_passive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->passive(), target);
  }

  // optional .TRIGGERSTARTCONDITION_ARRAY trigger_start_condition = 13;
  if (has_trigger_start_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->trigger_start_condition(), target);
  }

  // optional .REALTIMECHECK_ARRAY realtime_check = 14;
  if (has_realtime_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->realtime_check(), target);
  }

  // optional .TRIGGERATTACK_ARRAY trigger_attack = 15;
  if (has_trigger_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->trigger_attack(), target);
  }

  // optional .BUFF_ARRAY buff = 16;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->buff(), target);
  }

  // optional .HEROSKILL_ARRAY hero_skill = 17;
  if (has_hero_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->hero_skill(), target);
  }

  // optional .BOSSSKILL_ARRAY boss_skill = 18;
  if (has_boss_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->boss_skill(), target);
  }

  // optional .COINPRICE_ARRAY coin_price = 19;
  if (has_coin_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->coin_price(), target);
  }

  // optional .RESETPRICE_ARRAY reset_price = 20;
  if (has_reset_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->reset_price(), target);
  }

  // optional .SPPRICE_ARRAY spprice = 21;
  if (has_spprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->spprice(), target);
  }

  // optional .STAPRICE_ARRAY staprice = 22;
  if (has_staprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->staprice(), target);
  }

  // optional .VIP_ARRAY vip = 23;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->vip(), target);
  }

  // optional .VIPFUNCTION_ARRAY vip_function = 24;
  if (has_vip_function()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->vip_function(), target);
  }

  // optional .SHOPRESETPRICE_ARRAY shop_resetprice = 25;
  if (has_shop_resetprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->shop_resetprice(), target);
  }

  // optional .PRIZESHOW_ARRAY prize_show = 26;
  if (has_prize_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->prize_show(), target);
  }

  // optional .HEROSTAR_ARRAY hero_star = 27;
  if (has_hero_star()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->hero_star(), target);
  }

  // optional .EVOLUTIONCOIN_ARRAY evolution_coin = 28;
  if (has_evolution_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->evolution_coin(), target);
  }

  // optional .QUALITYRULE_ARRAY quality_rule = 29;
  if (has_quality_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->quality_rule(), target);
  }

  // optional .RULE_ARRAY rule = 30;
  if (has_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->rule(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_config_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .CHAPTERMAP_ARRAY chapter_map = 2;
    if (has_chapter_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chapter_map());
    }

    // optional .TASK_ARRAY task = 3;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

    // optional .SUBTASK_ARRAY sub_task = 4;
    if (has_sub_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sub_task());
    }

    // optional .BATTLE_ARRAY battle = 5;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle());
    }

    // optional .HEROPROP_ARRAY hero_prop = 6;
    if (has_hero_prop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_prop());
    }

    // optional .BOSSPROP_ARRAY boss_prop = 7;
    if (has_boss_prop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss_prop());
    }

    // optional .MONSTERPROP_ARRAY monster_prop = 8;
    if (has_monster_prop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monster_prop());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .EQUIP_ARRAY equip = 9;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // optional .AOYI_ARRAY aoyi = 10;
    if (has_aoyi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aoyi());
    }

    // optional .BAG_ARRAY bag = 11;
    if (has_bag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bag());
    }

    // optional .PASSIVE_ARRAY passive = 12;
    if (has_passive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->passive());
    }

    // optional .TRIGGERSTARTCONDITION_ARRAY trigger_start_condition = 13;
    if (has_trigger_start_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trigger_start_condition());
    }

    // optional .REALTIMECHECK_ARRAY realtime_check = 14;
    if (has_realtime_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->realtime_check());
    }

    // optional .TRIGGERATTACK_ARRAY trigger_attack = 15;
    if (has_trigger_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trigger_attack());
    }

    // optional .BUFF_ARRAY buff = 16;
    if (has_buff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .HEROSKILL_ARRAY hero_skill = 17;
    if (has_hero_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_skill());
    }

    // optional .BOSSSKILL_ARRAY boss_skill = 18;
    if (has_boss_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss_skill());
    }

    // optional .COINPRICE_ARRAY coin_price = 19;
    if (has_coin_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coin_price());
    }

    // optional .RESETPRICE_ARRAY reset_price = 20;
    if (has_reset_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reset_price());
    }

    // optional .SPPRICE_ARRAY spprice = 21;
    if (has_spprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spprice());
    }

    // optional .STAPRICE_ARRAY staprice = 22;
    if (has_staprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staprice());
    }

    // optional .VIP_ARRAY vip = 23;
    if (has_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vip());
    }

    // optional .VIPFUNCTION_ARRAY vip_function = 24;
    if (has_vip_function()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vip_function());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .SHOPRESETPRICE_ARRAY shop_resetprice = 25;
    if (has_shop_resetprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop_resetprice());
    }

    // optional .PRIZESHOW_ARRAY prize_show = 26;
    if (has_prize_show()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prize_show());
    }

    // optional .HEROSTAR_ARRAY hero_star = 27;
    if (has_hero_star()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_star());
    }

    // optional .EVOLUTIONCOIN_ARRAY evolution_coin = 28;
    if (has_evolution_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->evolution_coin());
    }

    // optional .QUALITYRULE_ARRAY quality_rule = 29;
    if (has_quality_rule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quality_rule());
    }

    // optional .RULE_ARRAY rule = 30;
    if (has_rule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rule());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_config_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_config_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_config_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_config_res::MergeFrom(const gs_c_config_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_chapter_map()) {
      mutable_chapter_map()->::CHAPTERMAP_ARRAY::MergeFrom(from.chapter_map());
    }
    if (from.has_task()) {
      mutable_task()->::TASK_ARRAY::MergeFrom(from.task());
    }
    if (from.has_sub_task()) {
      mutable_sub_task()->::SUBTASK_ARRAY::MergeFrom(from.sub_task());
    }
    if (from.has_battle()) {
      mutable_battle()->::BATTLE_ARRAY::MergeFrom(from.battle());
    }
    if (from.has_hero_prop()) {
      mutable_hero_prop()->::HEROPROP_ARRAY::MergeFrom(from.hero_prop());
    }
    if (from.has_boss_prop()) {
      mutable_boss_prop()->::BOSSPROP_ARRAY::MergeFrom(from.boss_prop());
    }
    if (from.has_monster_prop()) {
      mutable_monster_prop()->::MONSTERPROP_ARRAY::MergeFrom(from.monster_prop());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_equip()) {
      mutable_equip()->::EQUIP_ARRAY::MergeFrom(from.equip());
    }
    if (from.has_aoyi()) {
      mutable_aoyi()->::AOYI_ARRAY::MergeFrom(from.aoyi());
    }
    if (from.has_bag()) {
      mutable_bag()->::BAG_ARRAY::MergeFrom(from.bag());
    }
    if (from.has_passive()) {
      mutable_passive()->::PASSIVE_ARRAY::MergeFrom(from.passive());
    }
    if (from.has_trigger_start_condition()) {
      mutable_trigger_start_condition()->::TRIGGERSTARTCONDITION_ARRAY::MergeFrom(from.trigger_start_condition());
    }
    if (from.has_realtime_check()) {
      mutable_realtime_check()->::REALTIMECHECK_ARRAY::MergeFrom(from.realtime_check());
    }
    if (from.has_trigger_attack()) {
      mutable_trigger_attack()->::TRIGGERATTACK_ARRAY::MergeFrom(from.trigger_attack());
    }
    if (from.has_buff()) {
      mutable_buff()->::BUFF_ARRAY::MergeFrom(from.buff());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hero_skill()) {
      mutable_hero_skill()->::HEROSKILL_ARRAY::MergeFrom(from.hero_skill());
    }
    if (from.has_boss_skill()) {
      mutable_boss_skill()->::BOSSSKILL_ARRAY::MergeFrom(from.boss_skill());
    }
    if (from.has_coin_price()) {
      mutable_coin_price()->::COINPRICE_ARRAY::MergeFrom(from.coin_price());
    }
    if (from.has_reset_price()) {
      mutable_reset_price()->::RESETPRICE_ARRAY::MergeFrom(from.reset_price());
    }
    if (from.has_spprice()) {
      mutable_spprice()->::SPPRICE_ARRAY::MergeFrom(from.spprice());
    }
    if (from.has_staprice()) {
      mutable_staprice()->::STAPRICE_ARRAY::MergeFrom(from.staprice());
    }
    if (from.has_vip()) {
      mutable_vip()->::VIP_ARRAY::MergeFrom(from.vip());
    }
    if (from.has_vip_function()) {
      mutable_vip_function()->::VIPFUNCTION_ARRAY::MergeFrom(from.vip_function());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_shop_resetprice()) {
      mutable_shop_resetprice()->::SHOPRESETPRICE_ARRAY::MergeFrom(from.shop_resetprice());
    }
    if (from.has_prize_show()) {
      mutable_prize_show()->::PRIZESHOW_ARRAY::MergeFrom(from.prize_show());
    }
    if (from.has_hero_star()) {
      mutable_hero_star()->::HEROSTAR_ARRAY::MergeFrom(from.hero_star());
    }
    if (from.has_evolution_coin()) {
      mutable_evolution_coin()->::EVOLUTIONCOIN_ARRAY::MergeFrom(from.evolution_coin());
    }
    if (from.has_quality_rule()) {
      mutable_quality_rule()->::QUALITYRULE_ARRAY::MergeFrom(from.quality_rule());
    }
    if (from.has_rule()) {
      mutable_rule()->::RULE_ARRAY::MergeFrom(from.rule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_config_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_config_res::CopyFrom(const gs_c_config_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_config_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_chapter_map()) {
    if (!this->chapter_map().IsInitialized()) return false;
  }
  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  if (has_sub_task()) {
    if (!this->sub_task().IsInitialized()) return false;
  }
  if (has_battle()) {
    if (!this->battle().IsInitialized()) return false;
  }
  if (has_hero_prop()) {
    if (!this->hero_prop().IsInitialized()) return false;
  }
  if (has_boss_prop()) {
    if (!this->boss_prop().IsInitialized()) return false;
  }
  if (has_monster_prop()) {
    if (!this->monster_prop().IsInitialized()) return false;
  }
  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  if (has_aoyi()) {
    if (!this->aoyi().IsInitialized()) return false;
  }
  if (has_bag()) {
    if (!this->bag().IsInitialized()) return false;
  }
  if (has_passive()) {
    if (!this->passive().IsInitialized()) return false;
  }
  if (has_trigger_start_condition()) {
    if (!this->trigger_start_condition().IsInitialized()) return false;
  }
  if (has_realtime_check()) {
    if (!this->realtime_check().IsInitialized()) return false;
  }
  if (has_trigger_attack()) {
    if (!this->trigger_attack().IsInitialized()) return false;
  }
  if (has_buff()) {
    if (!this->buff().IsInitialized()) return false;
  }
  if (has_hero_skill()) {
    if (!this->hero_skill().IsInitialized()) return false;
  }
  if (has_boss_skill()) {
    if (!this->boss_skill().IsInitialized()) return false;
  }
  if (has_coin_price()) {
    if (!this->coin_price().IsInitialized()) return false;
  }
  if (has_reset_price()) {
    if (!this->reset_price().IsInitialized()) return false;
  }
  if (has_spprice()) {
    if (!this->spprice().IsInitialized()) return false;
  }
  if (has_staprice()) {
    if (!this->staprice().IsInitialized()) return false;
  }
  if (has_vip()) {
    if (!this->vip().IsInitialized()) return false;
  }
  if (has_vip_function()) {
    if (!this->vip_function().IsInitialized()) return false;
  }
  if (has_shop_resetprice()) {
    if (!this->shop_resetprice().IsInitialized()) return false;
  }
  if (has_prize_show()) {
    if (!this->prize_show().IsInitialized()) return false;
  }
  if (has_hero_star()) {
    if (!this->hero_star().IsInitialized()) return false;
  }
  if (has_evolution_coin()) {
    if (!this->evolution_coin().IsInitialized()) return false;
  }
  if (has_quality_rule()) {
    if (!this->quality_rule().IsInitialized()) return false;
  }
  if (has_rule()) {
    if (!this->rule().IsInitialized()) return false;
  }
  return true;
}

void gs_c_config_res::Swap(gs_c_config_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(chapter_map_, other->chapter_map_);
    std::swap(task_, other->task_);
    std::swap(sub_task_, other->sub_task_);
    std::swap(battle_, other->battle_);
    std::swap(hero_prop_, other->hero_prop_);
    std::swap(boss_prop_, other->boss_prop_);
    std::swap(monster_prop_, other->monster_prop_);
    std::swap(equip_, other->equip_);
    std::swap(aoyi_, other->aoyi_);
    std::swap(bag_, other->bag_);
    std::swap(passive_, other->passive_);
    std::swap(trigger_start_condition_, other->trigger_start_condition_);
    std::swap(realtime_check_, other->realtime_check_);
    std::swap(trigger_attack_, other->trigger_attack_);
    std::swap(buff_, other->buff_);
    std::swap(hero_skill_, other->hero_skill_);
    std::swap(boss_skill_, other->boss_skill_);
    std::swap(coin_price_, other->coin_price_);
    std::swap(reset_price_, other->reset_price_);
    std::swap(spprice_, other->spprice_);
    std::swap(staprice_, other->staprice_);
    std::swap(vip_, other->vip_);
    std::swap(vip_function_, other->vip_function_);
    std::swap(shop_resetprice_, other->shop_resetprice_);
    std::swap(prize_show_, other->prize_show_);
    std::swap(hero_star_, other->hero_star_);
    std::swap(evolution_coin_, other->evolution_coin_);
    std::swap(quality_rule_, other->quality_rule_);
    std::swap(rule_, other->rule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_config_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_config_res_descriptor_;
  metadata.reflection = gs_c_config_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_user_info_req::c_gs_user_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_user_info_req::InitAsDefaultInstance() {
}

c_gs_user_info_req::c_gs_user_info_req(const c_gs_user_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_user_info_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_user_info_req::~c_gs_user_info_req() {
  SharedDtor();
}

void c_gs_user_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_user_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_user_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_user_info_req_descriptor_;
}

const c_gs_user_info_req& c_gs_user_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_user_info_req* c_gs_user_info_req::default_instance_ = NULL;

c_gs_user_info_req* c_gs_user_info_req::New() const {
  return new c_gs_user_info_req;
}

void c_gs_user_info_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_user_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_user_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_user_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_user_info_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_user_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_user_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_user_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_user_info_req::MergeFrom(const c_gs_user_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_user_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_user_info_req::CopyFrom(const c_gs_user_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_user_info_req::IsInitialized() const {

  return true;
}

void c_gs_user_info_req::Swap(c_gs_user_info_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_user_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_user_info_req_descriptor_;
  metadata.reflection = c_gs_user_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_sub_task::kSubTaskIdFieldNumber;
const int user_sub_task::kStarFieldNumber;
const int user_sub_task::kLastEnterTimeFieldNumber;
const int user_sub_task::kLastDayEnterNumFieldNumber;
const int user_sub_task::kTotalEnterNumFieldNumber;
const int user_sub_task::kLastResetTimeFieldNumber;
const int user_sub_task::kLastDayResetNumFieldNumber;
#endif  // !_MSC_VER

user_sub_task::user_sub_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_sub_task::InitAsDefaultInstance() {
}

user_sub_task::user_sub_task(const user_sub_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_sub_task::SharedCtor() {
  _cached_size_ = 0;
  sub_task_id_ = 0u;
  star_ = 0u;
  last_enter_time_ = 0u;
  last_day_enter_num_ = 0u;
  total_enter_num_ = 0u;
  last_reset_time_ = 0u;
  last_day_reset_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_sub_task::~user_sub_task() {
  SharedDtor();
}

void user_sub_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_sub_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_sub_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_sub_task_descriptor_;
}

const user_sub_task& user_sub_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_sub_task* user_sub_task::default_instance_ = NULL;

user_sub_task* user_sub_task::New() const {
  return new user_sub_task;
}

void user_sub_task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sub_task_id_ = 0u;
    star_ = 0u;
    last_enter_time_ = 0u;
    last_day_enter_num_ = 0u;
    total_enter_num_ = 0u;
    last_reset_time_ = 0u;
    last_day_reset_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_sub_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sub_task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_task_id_)));
          set_has_sub_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_enter_time;
        break;
      }

      // required uint32 last_enter_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_enter_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_enter_time_)));
          set_has_last_enter_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_day_enter_num;
        break;
      }

      // required uint32 last_day_enter_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_enter_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_enter_num_)));
          set_has_last_day_enter_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_enter_num;
        break;
      }

      // required uint32 total_enter_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_enter_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_enter_num_)));
          set_has_total_enter_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_reset_time;
        break;
      }

      // required uint32 last_reset_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_reset_time_)));
          set_has_last_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_day_reset_num;
        break;
      }

      // required uint32 last_day_reset_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_reset_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_reset_num_)));
          set_has_last_day_reset_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_sub_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sub_task_id = 1;
  if (has_sub_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sub_task_id(), output);
  }

  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // required uint32 last_enter_time = 3;
  if (has_last_enter_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_enter_time(), output);
  }

  // required uint32 last_day_enter_num = 4;
  if (has_last_day_enter_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_day_enter_num(), output);
  }

  // required uint32 total_enter_num = 5;
  if (has_total_enter_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_enter_num(), output);
  }

  // required uint32 last_reset_time = 6;
  if (has_last_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_reset_time(), output);
  }

  // required uint32 last_day_reset_num = 7;
  if (has_last_day_reset_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_day_reset_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_sub_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sub_task_id = 1;
  if (has_sub_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sub_task_id(), target);
  }

  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // required uint32 last_enter_time = 3;
  if (has_last_enter_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_enter_time(), target);
  }

  // required uint32 last_day_enter_num = 4;
  if (has_last_day_enter_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_day_enter_num(), target);
  }

  // required uint32 total_enter_num = 5;
  if (has_total_enter_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_enter_num(), target);
  }

  // required uint32 last_reset_time = 6;
  if (has_last_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_reset_time(), target);
  }

  // required uint32 last_day_reset_num = 7;
  if (has_last_day_reset_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_day_reset_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_sub_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sub_task_id = 1;
    if (has_sub_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_task_id());
    }

    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 last_enter_time = 3;
    if (has_last_enter_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_enter_time());
    }

    // required uint32 last_day_enter_num = 4;
    if (has_last_day_enter_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_enter_num());
    }

    // required uint32 total_enter_num = 5;
    if (has_total_enter_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_enter_num());
    }

    // required uint32 last_reset_time = 6;
    if (has_last_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_reset_time());
    }

    // required uint32 last_day_reset_num = 7;
    if (has_last_day_reset_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_reset_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_sub_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_sub_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_sub_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_sub_task::MergeFrom(const user_sub_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sub_task_id()) {
      set_sub_task_id(from.sub_task_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_last_enter_time()) {
      set_last_enter_time(from.last_enter_time());
    }
    if (from.has_last_day_enter_num()) {
      set_last_day_enter_num(from.last_day_enter_num());
    }
    if (from.has_total_enter_num()) {
      set_total_enter_num(from.total_enter_num());
    }
    if (from.has_last_reset_time()) {
      set_last_reset_time(from.last_reset_time());
    }
    if (from.has_last_day_reset_num()) {
      set_last_day_reset_num(from.last_day_reset_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_sub_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_sub_task::CopyFrom(const user_sub_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_sub_task::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void user_sub_task::Swap(user_sub_task* other) {
  if (other != this) {
    std::swap(sub_task_id_, other->sub_task_id_);
    std::swap(star_, other->star_);
    std::swap(last_enter_time_, other->last_enter_time_);
    std::swap(last_day_enter_num_, other->last_day_enter_num_);
    std::swap(total_enter_num_, other->total_enter_num_);
    std::swap(last_reset_time_, other->last_reset_time_);
    std::swap(last_day_reset_num_, other->last_day_reset_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_sub_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_sub_task_descriptor_;
  metadata.reflection = user_sub_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_sub_task_array::kItemsFieldNumber;
#endif  // !_MSC_VER

user_sub_task_array::user_sub_task_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_sub_task_array::InitAsDefaultInstance() {
}

user_sub_task_array::user_sub_task_array(const user_sub_task_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_sub_task_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_sub_task_array::~user_sub_task_array() {
  SharedDtor();
}

void user_sub_task_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_sub_task_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_sub_task_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_sub_task_array_descriptor_;
}

const user_sub_task_array& user_sub_task_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_sub_task_array* user_sub_task_array::default_instance_ = NULL;

user_sub_task_array* user_sub_task_array::New() const {
  return new user_sub_task_array;
}

void user_sub_task_array::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_sub_task_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .user_sub_task items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_sub_task_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .user_sub_task items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_sub_task_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .user_sub_task items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_sub_task_array::ByteSize() const {
  int total_size = 0;

  // repeated .user_sub_task items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_sub_task_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_sub_task_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_sub_task_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_sub_task_array::MergeFrom(const user_sub_task_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_sub_task_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_sub_task_array::CopyFrom(const user_sub_task_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_sub_task_array::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void user_sub_task_array::Swap(user_sub_task_array* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_sub_task_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_sub_task_array_descriptor_;
  metadata.reflection = user_sub_task_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_hero_equip::kEquipIdFieldNumber;
const int user_hero_equip::kLevelFieldNumber;
#endif  // !_MSC_VER

user_hero_equip::user_hero_equip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_hero_equip::InitAsDefaultInstance() {
}

user_hero_equip::user_hero_equip(const user_hero_equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_hero_equip::SharedCtor() {
  _cached_size_ = 0;
  equip_id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_hero_equip::~user_hero_equip() {
  SharedDtor();
}

void user_hero_equip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_hero_equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_hero_equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_hero_equip_descriptor_;
}

const user_hero_equip& user_hero_equip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_hero_equip* user_hero_equip::default_instance_ = NULL;

user_hero_equip* user_hero_equip::New() const {
  return new user_hero_equip;
}

void user_hero_equip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_hero_equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equip_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_hero_equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 equip_id = 1 [default = 0];
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equip_id(), output);
  }

  // required uint32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_hero_equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 equip_id = 1 [default = 0];
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equip_id(), target);
  }

  // required uint32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_hero_equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equip_id = 1 [default = 0];
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_id());
    }

    // required uint32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_hero_equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_hero_equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_hero_equip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_hero_equip::MergeFrom(const user_hero_equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_hero_equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_hero_equip::CopyFrom(const user_hero_equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_hero_equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void user_hero_equip::Swap(user_hero_equip* other) {
  if (other != this) {
    std::swap(equip_id_, other->equip_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_hero_equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_hero_equip_descriptor_;
  metadata.reflection = user_hero_equip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* user_hero_skill_e_skill_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_hero_skill_e_skill_type_descriptor_;
}
bool user_hero_skill_e_skill_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const user_hero_skill_e_skill_type user_hero_skill::BISHA;
const user_hero_skill_e_skill_type user_hero_skill::AOYI;
const user_hero_skill_e_skill_type user_hero_skill::PASSIVE1;
const user_hero_skill_e_skill_type user_hero_skill::PASSIVE2;
const user_hero_skill_e_skill_type user_hero_skill::PASSIVE3;
const user_hero_skill_e_skill_type user_hero_skill::e_skill_type_MIN;
const user_hero_skill_e_skill_type user_hero_skill::e_skill_type_MAX;
const int user_hero_skill::e_skill_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int user_hero_skill::kTypeFieldNumber;
const int user_hero_skill::kLevelFieldNumber;
#endif  // !_MSC_VER

user_hero_skill::user_hero_skill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_hero_skill::InitAsDefaultInstance() {
}

user_hero_skill::user_hero_skill(const user_hero_skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_hero_skill::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_hero_skill::~user_hero_skill() {
  SharedDtor();
}

void user_hero_skill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_hero_skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_hero_skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_hero_skill_descriptor_;
}

const user_hero_skill& user_hero_skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_hero_skill* user_hero_skill::default_instance_ = NULL;

user_hero_skill* user_hero_skill::New() const {
  return new user_hero_skill;
}

void user_hero_skill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_hero_skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .user_hero_skill.e_skill_type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_hero_skill_e_skill_type_IsValid(value)) {
            set_type(static_cast< ::user_hero_skill_e_skill_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_hero_skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .user_hero_skill.e_skill_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_hero_skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .user_hero_skill.e_skill_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_hero_skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .user_hero_skill.e_skill_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_hero_skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_hero_skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_hero_skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_hero_skill::MergeFrom(const user_hero_skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_hero_skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_hero_skill::CopyFrom(const user_hero_skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_hero_skill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void user_hero_skill::Swap(user_hero_skill* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_hero_skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_hero_skill_descriptor_;
  metadata.reflection = user_hero_skill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_hero::kHeroIdFieldNumber;
const int user_hero::kStarFieldNumber;
const int user_hero::kQualityFieldNumber;
const int user_hero::kLevelFieldNumber;
const int user_hero::kCurExpFieldNumber;
const int user_hero::kGotTimestampFieldNumber;
const int user_hero::kEquipsFieldNumber;
const int user_hero::kSkillsFieldNumber;
#endif  // !_MSC_VER

user_hero::user_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_hero::InitAsDefaultInstance() {
}

user_hero::user_hero(const user_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_hero::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  star_ = 0u;
  quality_ = 0u;
  level_ = 0u;
  cur_exp_ = 0u;
  got_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_hero::~user_hero() {
  SharedDtor();
}

void user_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_hero_descriptor_;
}

const user_hero& user_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_hero* user_hero::default_instance_ = NULL;

user_hero* user_hero::New() const {
  return new user_hero;
}

void user_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    star_ = 0u;
    quality_ = 0u;
    level_ = 0u;
    cur_exp_ = 0u;
    got_timestamp_ = 0u;
  }
  equips_.Clear();
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // required uint32 quality = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_exp;
        break;
      }

      // required uint32 cur_exp = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_exp_)));
          set_has_cur_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_got_timestamp;
        break;
      }

      // required uint32 got_timestamp = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_got_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &got_timestamp_)));
          set_has_got_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equips;
        break;
      }

      // repeated .user_hero_equip equips = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equips;
        if (input->ExpectTag(66)) goto parse_skills;
        break;
      }

      // repeated .user_hero_skill skills = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1 [default = 0];
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 star = 2 [default = 0];
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // required uint32 quality = 3 [default = 0];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  // required uint32 level = 4 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint32 cur_exp = 5 [default = 0];
  if (has_cur_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cur_exp(), output);
  }

  // required uint32 got_timestamp = 6 [default = 0];
  if (has_got_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->got_timestamp(), output);
  }

  // repeated .user_hero_equip equips = 7;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->equips(i), output);
  }

  // repeated .user_hero_skill skills = 8;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1 [default = 0];
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 star = 2 [default = 0];
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // required uint32 quality = 3 [default = 0];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quality(), target);
  }

  // required uint32 level = 4 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required uint32 cur_exp = 5 [default = 0];
  if (has_cur_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cur_exp(), target);
  }

  // required uint32 got_timestamp = 6 [default = 0];
  if (has_got_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->got_timestamp(), target);
  }

  // repeated .user_hero_equip equips = 7;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->equips(i), target);
  }

  // repeated .user_hero_skill skills = 8;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1 [default = 0];
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 star = 2 [default = 0];
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 quality = 3 [default = 0];
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 level = 4 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 cur_exp = 5 [default = 0];
    if (has_cur_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_exp());
    }

    // required uint32 got_timestamp = 6 [default = 0];
    if (has_got_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->got_timestamp());
    }

  }
  // repeated .user_hero_equip equips = 7;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .user_hero_skill skills = 8;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_hero::MergeFrom(const user_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cur_exp()) {
      set_cur_exp(from.cur_exp());
    }
    if (from.has_got_timestamp()) {
      set_got_timestamp(from.got_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_hero::CopyFrom(const user_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void user_hero::Swap(user_hero* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(star_, other->star_);
    std::swap(quality_, other->quality_);
    std::swap(level_, other->level_);
    std::swap(cur_exp_, other->cur_exp_);
    std::swap(got_timestamp_, other->got_timestamp_);
    equips_.Swap(&other->equips_);
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_hero_descriptor_;
  metadata.reflection = user_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_hero_array::kItemsFieldNumber;
#endif  // !_MSC_VER

user_hero_array::user_hero_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_hero_array::InitAsDefaultInstance() {
}

user_hero_array::user_hero_array(const user_hero_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_hero_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_hero_array::~user_hero_array() {
  SharedDtor();
}

void user_hero_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_hero_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_hero_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_hero_array_descriptor_;
}

const user_hero_array& user_hero_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_hero_array* user_hero_array::default_instance_ = NULL;

user_hero_array* user_hero_array::New() const {
  return new user_hero_array;
}

void user_hero_array::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_hero_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .user_hero items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_hero_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .user_hero items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_hero_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .user_hero items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_hero_array::ByteSize() const {
  int total_size = 0;

  // repeated .user_hero items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_hero_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_hero_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_hero_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_hero_array::MergeFrom(const user_hero_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_hero_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_hero_array::CopyFrom(const user_hero_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_hero_array::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void user_hero_array::Swap(user_hero_array* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_hero_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_hero_array_descriptor_;
  metadata.reflection = user_hero_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_base_info::kUserIdFieldNumber;
const int user_base_info::kNameFieldNumber;
const int user_base_info::kLevelFieldNumber;
const int user_base_info::kExpFieldNumber;
const int user_base_info::kVipFieldNumber;
const int user_base_info::kDiamondFieldNumber;
const int user_base_info::kGoldFieldNumber;
const int user_base_info::kHealthCurFieldNumber;
const int user_base_info::kHealthLastUpdateTimestampFieldNumber;
const int user_base_info::kSkillPointFieldNumber;
const int user_base_info::kSkillPointLastUpdateTimestampFieldNumber;
const int user_base_info::kInvokeGoldFreeLeftNumFieldNumber;
const int user_base_info::kInvokeGoldFreeUpdateTimestampFieldNumber;
const int user_base_info::kInvokeDiamondFreeLeftNumFieldNumber;
const int user_base_info::kInvokeDiamondFreeUpdateTimestampFieldNumber;
const int user_base_info::kBuyUsedTimesGoldFieldNumber;
const int user_base_info::kBuyUsedTimesHealthFieldNumber;
const int user_base_info::kBuyUsedTimesSkillPointFieldNumber;
const int user_base_info::kHeadIdFieldNumber;
const int user_base_info::kHeadFrameIdFieldNumber;
const int user_base_info::kFriendPointFieldNumber;
const int user_base_info::kSignatureFieldNumber;
const int user_base_info::kFightPowerFieldNumber;
const int user_base_info::kCrusadePointFieldNumber;
#endif  // !_MSC_VER

user_base_info::user_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_base_info::InitAsDefaultInstance() {
}

user_base_info::user_base_info(const user_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_base_info::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  exp_ = 0u;
  vip_ = 0u;
  diamond_ = 0u;
  gold_ = 0u;
  health_cur_ = 0u;
  health_last_update_timestamp_ = 0u;
  skill_point_ = 0u;
  skill_point_last_update_timestamp_ = 0u;
  invoke_gold_free_left_num_ = 0u;
  invoke_gold_free_update_timestamp_ = 0u;
  invoke_diamond_free_left_num_ = 0u;
  invoke_diamond_free_update_timestamp_ = 0u;
  buy_used_times_gold_ = 0u;
  buy_used_times_health_ = 0u;
  buy_used_times_skill_point_ = 0u;
  head_id_ = 0u;
  head_frame_id_ = 0u;
  friend_point_ = 0u;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_power_ = 0u;
  crusade_point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_base_info::~user_base_info() {
  SharedDtor();
}

void user_base_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void user_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_base_info_descriptor_;
}

const user_base_info& user_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_base_info* user_base_info::default_instance_ = NULL;

user_base_info* user_base_info::New() const {
  return new user_base_info;
}

void user_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    exp_ = 0u;
    vip_ = 0u;
    diamond_ = 0u;
    gold_ = 0u;
    health_cur_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    health_last_update_timestamp_ = 0u;
    skill_point_ = 0u;
    skill_point_last_update_timestamp_ = 0u;
    invoke_gold_free_left_num_ = 0u;
    invoke_gold_free_update_timestamp_ = 0u;
    invoke_diamond_free_left_num_ = 0u;
    invoke_diamond_free_update_timestamp_ = 0u;
    buy_used_times_gold_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    buy_used_times_health_ = 0u;
    buy_used_times_skill_point_ = 0u;
    head_id_ = 0u;
    head_frame_id_ = 0u;
    friend_point_ = 0u;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    fight_power_ = 0u;
    crusade_point_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip;
        break;
      }

      // required uint32 vip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diamond;
        break;
      }

      // required uint32 diamond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gold;
        break;
      }

      // required uint32 gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_health_cur;
        break;
      }

      // required uint32 health_cur = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_cur_)));
          set_has_health_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_health_last_update_timestamp;
        break;
      }

      // required uint32 health_last_update_timestamp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_last_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_last_update_timestamp_)));
          set_has_health_last_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_skill_point;
        break;
      }

      // required uint32 skill_point = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_skill_point_last_update_timestamp;
        break;
      }

      // required uint32 skill_point_last_update_timestamp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point_last_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_last_update_timestamp_)));
          set_has_skill_point_last_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_invoke_gold_free_left_num;
        break;
      }

      // required uint32 invoke_gold_free_left_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_gold_free_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_gold_free_left_num_)));
          set_has_invoke_gold_free_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_invoke_gold_free_update_timestamp;
        break;
      }

      // required uint32 invoke_gold_free_update_timestamp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_gold_free_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_gold_free_update_timestamp_)));
          set_has_invoke_gold_free_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_invoke_diamond_free_left_num;
        break;
      }

      // required uint32 invoke_diamond_free_left_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_diamond_free_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_diamond_free_left_num_)));
          set_has_invoke_diamond_free_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_invoke_diamond_free_update_timestamp;
        break;
      }

      // required uint32 invoke_diamond_free_update_timestamp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_diamond_free_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_diamond_free_update_timestamp_)));
          set_has_invoke_diamond_free_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_buy_used_times_gold;
        break;
      }

      // required uint32 buy_used_times_gold = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_used_times_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_used_times_gold_)));
          set_has_buy_used_times_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_buy_used_times_health;
        break;
      }

      // required uint32 buy_used_times_health = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_used_times_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_used_times_health_)));
          set_has_buy_used_times_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_buy_used_times_skill_point;
        break;
      }

      // required uint32 buy_used_times_skill_point = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_used_times_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_used_times_skill_point_)));
          set_has_buy_used_times_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_head_id;
        break;
      }

      // required uint32 head_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_head_frame_id;
        break;
      }

      // required uint32 head_frame_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_frame_id_)));
          set_has_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_friend_point;
        break;
      }

      // required uint32 friend_point = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_point_)));
          set_has_friend_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_signature;
        break;
      }

      // required string signature = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_fight_power;
        break;
      }

      // required uint32 fight_power = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_crusade_point;
        break;
      }

      // required uint32 crusade_point = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crusade_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crusade_point_)));
          set_has_crusade_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // required uint32 vip = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip(), output);
  }

  // required uint32 diamond = 6;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->diamond(), output);
  }

  // required uint32 gold = 7;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gold(), output);
  }

  // required uint32 health_cur = 8;
  if (has_health_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->health_cur(), output);
  }

  // required uint32 health_last_update_timestamp = 9;
  if (has_health_last_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->health_last_update_timestamp(), output);
  }

  // required uint32 skill_point = 10;
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->skill_point(), output);
  }

  // required uint32 skill_point_last_update_timestamp = 11;
  if (has_skill_point_last_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->skill_point_last_update_timestamp(), output);
  }

  // required uint32 invoke_gold_free_left_num = 12;
  if (has_invoke_gold_free_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->invoke_gold_free_left_num(), output);
  }

  // required uint32 invoke_gold_free_update_timestamp = 13;
  if (has_invoke_gold_free_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->invoke_gold_free_update_timestamp(), output);
  }

  // required uint32 invoke_diamond_free_left_num = 14;
  if (has_invoke_diamond_free_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->invoke_diamond_free_left_num(), output);
  }

  // required uint32 invoke_diamond_free_update_timestamp = 15;
  if (has_invoke_diamond_free_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->invoke_diamond_free_update_timestamp(), output);
  }

  // required uint32 buy_used_times_gold = 16;
  if (has_buy_used_times_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->buy_used_times_gold(), output);
  }

  // required uint32 buy_used_times_health = 17;
  if (has_buy_used_times_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->buy_used_times_health(), output);
  }

  // required uint32 buy_used_times_skill_point = 18;
  if (has_buy_used_times_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->buy_used_times_skill_point(), output);
  }

  // required uint32 head_id = 19;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->head_id(), output);
  }

  // required uint32 head_frame_id = 20;
  if (has_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->head_frame_id(), output);
  }

  // required uint32 friend_point = 21;
  if (has_friend_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->friend_point(), output);
  }

  // required string signature = 22;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->signature(), output);
  }

  // required uint32 fight_power = 23;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->fight_power(), output);
  }

  // required uint32 crusade_point = 24;
  if (has_crusade_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->crusade_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // required uint32 vip = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip(), target);
  }

  // required uint32 diamond = 6;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->diamond(), target);
  }

  // required uint32 gold = 7;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gold(), target);
  }

  // required uint32 health_cur = 8;
  if (has_health_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->health_cur(), target);
  }

  // required uint32 health_last_update_timestamp = 9;
  if (has_health_last_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->health_last_update_timestamp(), target);
  }

  // required uint32 skill_point = 10;
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->skill_point(), target);
  }

  // required uint32 skill_point_last_update_timestamp = 11;
  if (has_skill_point_last_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->skill_point_last_update_timestamp(), target);
  }

  // required uint32 invoke_gold_free_left_num = 12;
  if (has_invoke_gold_free_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->invoke_gold_free_left_num(), target);
  }

  // required uint32 invoke_gold_free_update_timestamp = 13;
  if (has_invoke_gold_free_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->invoke_gold_free_update_timestamp(), target);
  }

  // required uint32 invoke_diamond_free_left_num = 14;
  if (has_invoke_diamond_free_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->invoke_diamond_free_left_num(), target);
  }

  // required uint32 invoke_diamond_free_update_timestamp = 15;
  if (has_invoke_diamond_free_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->invoke_diamond_free_update_timestamp(), target);
  }

  // required uint32 buy_used_times_gold = 16;
  if (has_buy_used_times_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->buy_used_times_gold(), target);
  }

  // required uint32 buy_used_times_health = 17;
  if (has_buy_used_times_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->buy_used_times_health(), target);
  }

  // required uint32 buy_used_times_skill_point = 18;
  if (has_buy_used_times_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->buy_used_times_skill_point(), target);
  }

  // required uint32 head_id = 19;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->head_id(), target);
  }

  // required uint32 head_frame_id = 20;
  if (has_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->head_frame_id(), target);
  }

  // required uint32 friend_point = 21;
  if (has_friend_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->friend_point(), target);
  }

  // required string signature = 22;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->signature(), target);
  }

  // required uint32 fight_power = 23;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->fight_power(), target);
  }

  // required uint32 crusade_point = 24;
  if (has_crusade_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->crusade_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 vip = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // required uint32 diamond = 6;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // required uint32 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // required uint32 health_cur = 8;
    if (has_health_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_cur());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 health_last_update_timestamp = 9;
    if (has_health_last_update_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_last_update_timestamp());
    }

    // required uint32 skill_point = 10;
    if (has_skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point());
    }

    // required uint32 skill_point_last_update_timestamp = 11;
    if (has_skill_point_last_update_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point_last_update_timestamp());
    }

    // required uint32 invoke_gold_free_left_num = 12;
    if (has_invoke_gold_free_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_gold_free_left_num());
    }

    // required uint32 invoke_gold_free_update_timestamp = 13;
    if (has_invoke_gold_free_update_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_gold_free_update_timestamp());
    }

    // required uint32 invoke_diamond_free_left_num = 14;
    if (has_invoke_diamond_free_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_diamond_free_left_num());
    }

    // required uint32 invoke_diamond_free_update_timestamp = 15;
    if (has_invoke_diamond_free_update_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_diamond_free_update_timestamp());
    }

    // required uint32 buy_used_times_gold = 16;
    if (has_buy_used_times_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_used_times_gold());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 buy_used_times_health = 17;
    if (has_buy_used_times_health()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_used_times_health());
    }

    // required uint32 buy_used_times_skill_point = 18;
    if (has_buy_used_times_skill_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_used_times_skill_point());
    }

    // required uint32 head_id = 19;
    if (has_head_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // required uint32 head_frame_id = 20;
    if (has_head_frame_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_frame_id());
    }

    // required uint32 friend_point = 21;
    if (has_friend_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_point());
    }

    // required string signature = 22;
    if (has_signature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // required uint32 fight_power = 23;
    if (has_fight_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

    // required uint32 crusade_point = 24;
    if (has_crusade_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crusade_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_base_info::MergeFrom(const user_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_health_cur()) {
      set_health_cur(from.health_cur());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_health_last_update_timestamp()) {
      set_health_last_update_timestamp(from.health_last_update_timestamp());
    }
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
    if (from.has_skill_point_last_update_timestamp()) {
      set_skill_point_last_update_timestamp(from.skill_point_last_update_timestamp());
    }
    if (from.has_invoke_gold_free_left_num()) {
      set_invoke_gold_free_left_num(from.invoke_gold_free_left_num());
    }
    if (from.has_invoke_gold_free_update_timestamp()) {
      set_invoke_gold_free_update_timestamp(from.invoke_gold_free_update_timestamp());
    }
    if (from.has_invoke_diamond_free_left_num()) {
      set_invoke_diamond_free_left_num(from.invoke_diamond_free_left_num());
    }
    if (from.has_invoke_diamond_free_update_timestamp()) {
      set_invoke_diamond_free_update_timestamp(from.invoke_diamond_free_update_timestamp());
    }
    if (from.has_buy_used_times_gold()) {
      set_buy_used_times_gold(from.buy_used_times_gold());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_buy_used_times_health()) {
      set_buy_used_times_health(from.buy_used_times_health());
    }
    if (from.has_buy_used_times_skill_point()) {
      set_buy_used_times_skill_point(from.buy_used_times_skill_point());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_head_frame_id()) {
      set_head_frame_id(from.head_frame_id());
    }
    if (from.has_friend_point()) {
      set_friend_point(from.friend_point());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_crusade_point()) {
      set_crusade_point(from.crusade_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_base_info::CopyFrom(const user_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_base_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00ffffff) != 0x00ffffff) return false;

  return true;
}

void user_base_info::Swap(user_base_info* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(vip_, other->vip_);
    std::swap(diamond_, other->diamond_);
    std::swap(gold_, other->gold_);
    std::swap(health_cur_, other->health_cur_);
    std::swap(health_last_update_timestamp_, other->health_last_update_timestamp_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(skill_point_last_update_timestamp_, other->skill_point_last_update_timestamp_);
    std::swap(invoke_gold_free_left_num_, other->invoke_gold_free_left_num_);
    std::swap(invoke_gold_free_update_timestamp_, other->invoke_gold_free_update_timestamp_);
    std::swap(invoke_diamond_free_left_num_, other->invoke_diamond_free_left_num_);
    std::swap(invoke_diamond_free_update_timestamp_, other->invoke_diamond_free_update_timestamp_);
    std::swap(buy_used_times_gold_, other->buy_used_times_gold_);
    std::swap(buy_used_times_health_, other->buy_used_times_health_);
    std::swap(buy_used_times_skill_point_, other->buy_used_times_skill_point_);
    std::swap(head_id_, other->head_id_);
    std::swap(head_frame_id_, other->head_frame_id_);
    std::swap(friend_point_, other->friend_point_);
    std::swap(signature_, other->signature_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(crusade_point_, other->crusade_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_base_info_descriptor_;
  metadata.reflection = user_base_info_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* struct_game_element_EELEMENTTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_game_element_EELEMENTTYPE_descriptor_;
}
bool struct_game_element_EELEMENTTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_min;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_SKILL;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_TASK;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_SUB_TASK;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_BATTLE;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_HERO;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_BOSS;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_MONSTER;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_ITEM;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_EQUIP;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_EXP;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_GOLD;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_DIAMOND;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_HEALTH;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_SKILL_POINT;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_ARENA_POINT;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_PACKET;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_INVOKE_GOLD_FREE;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_INVOKE_DIAMOND_FREE;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_PLAYER_LEVEL;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_PLAYER_EXP;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_HERO_LEVEL;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_HERO_EXP;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_SUB_TASK_ENTER_NUM;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_SUB_TASK_RESET_NUM;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_FRIEND_POINT;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_GUILD_CONTRIBUTION_POINT;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_GUILD_COIN;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_GUILD_MEMBER_CONTRIBUTION_POINT;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_GUILD_MEMBER_COIN;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_CRUSADE_POINT;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_max;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_MIN;
const struct_game_element_EELEMENTTYPE struct_game_element::EELEMENTTYPE_MAX;
const int struct_game_element::EELEMENTTYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* struct_game_element_EELEMENT_NUM_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_game_element_EELEMENT_NUM_TYPE_descriptor_;
}
bool struct_game_element_EELEMENT_NUM_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const struct_game_element_EELEMENT_NUM_TYPE struct_game_element::min;
const struct_game_element_EELEMENT_NUM_TYPE struct_game_element::INCREASE;
const struct_game_element_EELEMENT_NUM_TYPE struct_game_element::DECREASE;
const struct_game_element_EELEMENT_NUM_TYPE struct_game_element::TOTAL;
const struct_game_element_EELEMENT_NUM_TYPE struct_game_element::max;
const struct_game_element_EELEMENT_NUM_TYPE struct_game_element::EELEMENT_NUM_TYPE_MIN;
const struct_game_element_EELEMENT_NUM_TYPE struct_game_element::EELEMENT_NUM_TYPE_MAX;
const int struct_game_element::EELEMENT_NUM_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int struct_game_element::kTypeFieldNumber;
const int struct_game_element::kIdFieldNumber;
const int struct_game_element::kSubIdFieldNumber;
const int struct_game_element::kNumTypeFieldNumber;
const int struct_game_element::kNumFieldNumber;
#endif  // !_MSC_VER

struct_game_element::struct_game_element()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void struct_game_element::InitAsDefaultInstance() {
}

struct_game_element::struct_game_element(const struct_game_element& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void struct_game_element::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0u;
  sub_id_ = 0u;
  num_type_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

struct_game_element::~struct_game_element() {
  SharedDtor();
}

void struct_game_element::SharedDtor() {
  if (this != default_instance_) {
  }
}

void struct_game_element::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_game_element::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_game_element_descriptor_;
}

const struct_game_element& struct_game_element::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

struct_game_element* struct_game_element::default_instance_ = NULL;

struct_game_element* struct_game_element::New() const {
  return new struct_game_element;
}

void struct_game_element::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0u;
    sub_id_ = 0u;
    num_type_ = 0;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool struct_game_element::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .struct_game_element.EELEMENTTYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::struct_game_element_EELEMENTTYPE_IsValid(value)) {
            set_type(static_cast< ::struct_game_element_EELEMENTTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sub_id;
        break;
      }

      // optional uint32 sub_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_id_)));
          set_has_sub_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_type;
        break;
      }

      // required .struct_game_element.EELEMENT_NUM_TYPE num_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::struct_game_element_EELEMENT_NUM_TYPE_IsValid(value)) {
            set_num_type(static_cast< ::struct_game_element_EELEMENT_NUM_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // required uint32 num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void struct_game_element::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .struct_game_element.EELEMENTTYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 sub_id = 3;
  if (has_sub_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sub_id(), output);
  }

  // required .struct_game_element.EELEMENT_NUM_TYPE num_type = 4;
  if (has_num_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->num_type(), output);
  }

  // required uint32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* struct_game_element::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .struct_game_element.EELEMENTTYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 sub_id = 3;
  if (has_sub_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sub_id(), target);
  }

  // required .struct_game_element.EELEMENT_NUM_TYPE num_type = 4;
  if (has_num_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->num_type(), target);
  }

  // required uint32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int struct_game_element::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .struct_game_element.EELEMENTTYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 sub_id = 3;
    if (has_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_id());
    }

    // required .struct_game_element.EELEMENT_NUM_TYPE num_type = 4;
    if (has_num_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->num_type());
    }

    // required uint32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_game_element::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const struct_game_element* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const struct_game_element*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void struct_game_element::MergeFrom(const struct_game_element& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sub_id()) {
      set_sub_id(from.sub_id());
    }
    if (from.has_num_type()) {
      set_num_type(from.num_type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void struct_game_element::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_game_element::CopyFrom(const struct_game_element& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool struct_game_element::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void struct_game_element::Swap(struct_game_element* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(sub_id_, other->sub_id_);
    std::swap(num_type_, other->num_type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata struct_game_element::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_game_element_descriptor_;
  metadata.reflection = struct_game_element_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* user_shop_item_ESHOPITEMFLAG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_shop_item_ESHOPITEMFLAG_descriptor_;
}
bool user_shop_item_ESHOPITEMFLAG_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const user_shop_item_ESHOPITEMFLAG user_shop_item::NONE;
const user_shop_item_ESHOPITEMFLAG user_shop_item::HOT;
const user_shop_item_ESHOPITEMFLAG user_shop_item::DISCOUNT;
const user_shop_item_ESHOPITEMFLAG user_shop_item::FLASHSALE;
const user_shop_item_ESHOPITEMFLAG user_shop_item::MAX;
const user_shop_item_ESHOPITEMFLAG user_shop_item::ESHOPITEMFLAG_MIN;
const user_shop_item_ESHOPITEMFLAG user_shop_item::ESHOPITEMFLAG_MAX;
const int user_shop_item::ESHOPITEMFLAG_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int user_shop_item::kPosFieldNumber;
const int user_shop_item::kElementTypeFieldNumber;
const int user_shop_item::kElementIdFieldNumber;
const int user_shop_item::kElementNumFieldNumber;
const int user_shop_item::kConsumeTypeFieldNumber;
const int user_shop_item::kConsumeIdFieldNumber;
const int user_shop_item::kConsumeNumFieldNumber;
const int user_shop_item::kFlagFieldNumber;
const int user_shop_item::kIsSoldFieldNumber;
#endif  // !_MSC_VER

user_shop_item::user_shop_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_shop_item::InitAsDefaultInstance() {
}

user_shop_item::user_shop_item(const user_shop_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_shop_item::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  element_type_ = 0;
  element_id_ = 0u;
  element_num_ = 0u;
  consume_type_ = 0;
  consume_id_ = 0u;
  consume_num_ = 0u;
  flag_ = 0;
  is_sold_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_shop_item::~user_shop_item() {
  SharedDtor();
}

void user_shop_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_shop_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_shop_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_shop_item_descriptor_;
}

const user_shop_item& user_shop_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_shop_item* user_shop_item::default_instance_ = NULL;

user_shop_item* user_shop_item::New() const {
  return new user_shop_item;
}

void user_shop_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    element_type_ = 0;
    element_id_ = 0u;
    element_num_ = 0u;
    consume_type_ = 0;
    consume_id_ = 0u;
    consume_num_ = 0u;
    flag_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_sold_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_shop_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_element_type;
        break;
      }

      // required .struct_game_element.EELEMENTTYPE element_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::struct_game_element_EELEMENTTYPE_IsValid(value)) {
            set_element_type(static_cast< ::struct_game_element_EELEMENTTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_element_id;
        break;
      }

      // required uint32 element_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_id_)));
          set_has_element_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_element_num;
        break;
      }

      // required uint32 element_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_num_)));
          set_has_element_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume_type;
        break;
      }

      // required .struct_game_element.EELEMENTTYPE consume_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::struct_game_element_EELEMENTTYPE_IsValid(value)) {
            set_consume_type(static_cast< ::struct_game_element_EELEMENTTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_consume_id;
        break;
      }

      // required uint32 consume_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_id_)));
          set_has_consume_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_consume_num;
        break;
      }

      // required uint32 consume_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_num_)));
          set_has_consume_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flag;
        break;
      }

      // required .user_shop_item.ESHOPITEMFLAG flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_shop_item_ESHOPITEMFLAG_IsValid(value)) {
            set_flag(static_cast< ::user_shop_item_ESHOPITEMFLAG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_sold;
        break;
      }

      // required bool is_sold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sold_)));
          set_has_is_sold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_shop_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required .struct_game_element.EELEMENTTYPE element_type = 2;
  if (has_element_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->element_type(), output);
  }

  // required uint32 element_id = 3;
  if (has_element_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->element_id(), output);
  }

  // required uint32 element_num = 4;
  if (has_element_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->element_num(), output);
  }

  // required .struct_game_element.EELEMENTTYPE consume_type = 5;
  if (has_consume_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->consume_type(), output);
  }

  // required uint32 consume_id = 6;
  if (has_consume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consume_id(), output);
  }

  // required uint32 consume_num = 7;
  if (has_consume_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->consume_num(), output);
  }

  // required .user_shop_item.ESHOPITEMFLAG flag = 8;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->flag(), output);
  }

  // required bool is_sold = 9;
  if (has_is_sold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_sold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_shop_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required .struct_game_element.EELEMENTTYPE element_type = 2;
  if (has_element_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->element_type(), target);
  }

  // required uint32 element_id = 3;
  if (has_element_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->element_id(), target);
  }

  // required uint32 element_num = 4;
  if (has_element_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->element_num(), target);
  }

  // required .struct_game_element.EELEMENTTYPE consume_type = 5;
  if (has_consume_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->consume_type(), target);
  }

  // required uint32 consume_id = 6;
  if (has_consume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->consume_id(), target);
  }

  // required uint32 consume_num = 7;
  if (has_consume_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->consume_num(), target);
  }

  // required .user_shop_item.ESHOPITEMFLAG flag = 8;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->flag(), target);
  }

  // required bool is_sold = 9;
  if (has_is_sold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_sold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_shop_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required .struct_game_element.EELEMENTTYPE element_type = 2;
    if (has_element_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->element_type());
    }

    // required uint32 element_id = 3;
    if (has_element_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->element_id());
    }

    // required uint32 element_num = 4;
    if (has_element_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->element_num());
    }

    // required .struct_game_element.EELEMENTTYPE consume_type = 5;
    if (has_consume_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->consume_type());
    }

    // required uint32 consume_id = 6;
    if (has_consume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_id());
    }

    // required uint32 consume_num = 7;
    if (has_consume_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_num());
    }

    // required .user_shop_item.ESHOPITEMFLAG flag = 8;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool is_sold = 9;
    if (has_is_sold()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_shop_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_shop_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_shop_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_shop_item::MergeFrom(const user_shop_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_element_type()) {
      set_element_type(from.element_type());
    }
    if (from.has_element_id()) {
      set_element_id(from.element_id());
    }
    if (from.has_element_num()) {
      set_element_num(from.element_num());
    }
    if (from.has_consume_type()) {
      set_consume_type(from.consume_type());
    }
    if (from.has_consume_id()) {
      set_consume_id(from.consume_id());
    }
    if (from.has_consume_num()) {
      set_consume_num(from.consume_num());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_sold()) {
      set_is_sold(from.is_sold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_shop_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_shop_item::CopyFrom(const user_shop_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_shop_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void user_shop_item::Swap(user_shop_item* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(element_type_, other->element_type_);
    std::swap(element_id_, other->element_id_);
    std::swap(element_num_, other->element_num_);
    std::swap(consume_type_, other->consume_type_);
    std::swap(consume_id_, other->consume_id_);
    std::swap(consume_num_, other->consume_num_);
    std::swap(flag_, other->flag_);
    std::swap(is_sold_, other->is_sold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_shop_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_shop_item_descriptor_;
  metadata.reflection = user_shop_item_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* user_shop_ESHOPTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_shop_ESHOPTYPE_descriptor_;
}
bool user_shop_ESHOPTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const user_shop_ESHOPTYPE user_shop::min;
const user_shop_ESHOPTYPE user_shop::COMMON;
const user_shop_ESHOPTYPE user_shop::QIWUGE;
const user_shop_ESHOPTYPE user_shop::YIJIEBAOKU;
const user_shop_ESHOPTYPE user_shop::ARENA;
const user_shop_ESHOPTYPE user_shop::EXPEDITION;
const user_shop_ESHOPTYPE user_shop::max;
const user_shop_ESHOPTYPE user_shop::ESHOPTYPE_MIN;
const user_shop_ESHOPTYPE user_shop::ESHOPTYPE_MAX;
const int user_shop::ESHOPTYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int user_shop::kShopTypeFieldNumber;
const int user_shop::kLastAutoRefreshTimeFieldNumber;
const int user_shop::kLastManualRefreshTimeFieldNumber;
const int user_shop::kLastDayManualRefreshNumFieldNumber;
const int user_shop::kRandomOpenStartTimestampFieldNumber;
const int user_shop::kRandomOpenEndTimestampFieldNumber;
const int user_shop::kItemsFieldNumber;
#endif  // !_MSC_VER

user_shop::user_shop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_shop::InitAsDefaultInstance() {
}

user_shop::user_shop(const user_shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_shop::SharedCtor() {
  _cached_size_ = 0;
  shop_type_ = 0;
  last_auto_refresh_time_ = 0u;
  last_manual_refresh_time_ = 0u;
  last_day_manual_refresh_num_ = 0u;
  random_open_start_timestamp_ = 0u;
  random_open_end_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_shop::~user_shop() {
  SharedDtor();
}

void user_shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_shop_descriptor_;
}

const user_shop& user_shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_shop* user_shop::default_instance_ = NULL;

user_shop* user_shop::New() const {
  return new user_shop;
}

void user_shop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_type_ = 0;
    last_auto_refresh_time_ = 0u;
    last_manual_refresh_time_ = 0u;
    last_day_manual_refresh_num_ = 0u;
    random_open_start_timestamp_ = 0u;
    random_open_end_timestamp_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .user_shop.ESHOPTYPE shop_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_shop_ESHOPTYPE_IsValid(value)) {
            set_shop_type(static_cast< ::user_shop_ESHOPTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_auto_refresh_time;
        break;
      }

      // required uint32 last_auto_refresh_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_auto_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_auto_refresh_time_)));
          set_has_last_auto_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_manual_refresh_time;
        break;
      }

      // required uint32 last_manual_refresh_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_manual_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_manual_refresh_time_)));
          set_has_last_manual_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_day_manual_refresh_num;
        break;
      }

      // required uint32 last_day_manual_refresh_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_manual_refresh_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_manual_refresh_num_)));
          set_has_last_day_manual_refresh_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_random_open_start_timestamp;
        break;
      }

      // required uint32 random_open_start_timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_open_start_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_open_start_timestamp_)));
          set_has_random_open_start_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_random_open_end_timestamp;
        break;
      }

      // required uint32 random_open_end_timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_open_end_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_open_end_timestamp_)));
          set_has_random_open_end_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_items;
        break;
      }

      // repeated .user_shop_item items = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .user_shop.ESHOPTYPE shop_type = 1;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shop_type(), output);
  }

  // required uint32 last_auto_refresh_time = 2;
  if (has_last_auto_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_auto_refresh_time(), output);
  }

  // required uint32 last_manual_refresh_time = 3;
  if (has_last_manual_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_manual_refresh_time(), output);
  }

  // required uint32 last_day_manual_refresh_num = 4;
  if (has_last_day_manual_refresh_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_day_manual_refresh_num(), output);
  }

  // required uint32 random_open_start_timestamp = 5;
  if (has_random_open_start_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->random_open_start_timestamp(), output);
  }

  // required uint32 random_open_end_timestamp = 6;
  if (has_random_open_end_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->random_open_end_timestamp(), output);
  }

  // repeated .user_shop_item items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .user_shop.ESHOPTYPE shop_type = 1;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shop_type(), target);
  }

  // required uint32 last_auto_refresh_time = 2;
  if (has_last_auto_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_auto_refresh_time(), target);
  }

  // required uint32 last_manual_refresh_time = 3;
  if (has_last_manual_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_manual_refresh_time(), target);
  }

  // required uint32 last_day_manual_refresh_num = 4;
  if (has_last_day_manual_refresh_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_day_manual_refresh_num(), target);
  }

  // required uint32 random_open_start_timestamp = 5;
  if (has_random_open_start_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->random_open_start_timestamp(), target);
  }

  // required uint32 random_open_end_timestamp = 6;
  if (has_random_open_end_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->random_open_end_timestamp(), target);
  }

  // repeated .user_shop_item items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_shop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .user_shop.ESHOPTYPE shop_type = 1;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shop_type());
    }

    // required uint32 last_auto_refresh_time = 2;
    if (has_last_auto_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_auto_refresh_time());
    }

    // required uint32 last_manual_refresh_time = 3;
    if (has_last_manual_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_manual_refresh_time());
    }

    // required uint32 last_day_manual_refresh_num = 4;
    if (has_last_day_manual_refresh_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_manual_refresh_num());
    }

    // required uint32 random_open_start_timestamp = 5;
    if (has_random_open_start_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_open_start_timestamp());
    }

    // required uint32 random_open_end_timestamp = 6;
    if (has_random_open_end_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_open_end_timestamp());
    }

  }
  // repeated .user_shop_item items = 7;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_shop::MergeFrom(const user_shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
    if (from.has_last_auto_refresh_time()) {
      set_last_auto_refresh_time(from.last_auto_refresh_time());
    }
    if (from.has_last_manual_refresh_time()) {
      set_last_manual_refresh_time(from.last_manual_refresh_time());
    }
    if (from.has_last_day_manual_refresh_num()) {
      set_last_day_manual_refresh_num(from.last_day_manual_refresh_num());
    }
    if (from.has_random_open_start_timestamp()) {
      set_random_open_start_timestamp(from.random_open_start_timestamp());
    }
    if (from.has_random_open_end_timestamp()) {
      set_random_open_end_timestamp(from.random_open_end_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_shop::CopyFrom(const user_shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_shop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void user_shop::Swap(user_shop* other) {
  if (other != this) {
    std::swap(shop_type_, other->shop_type_);
    std::swap(last_auto_refresh_time_, other->last_auto_refresh_time_);
    std::swap(last_manual_refresh_time_, other->last_manual_refresh_time_);
    std::swap(last_day_manual_refresh_num_, other->last_day_manual_refresh_num_);
    std::swap(random_open_start_timestamp_, other->random_open_start_timestamp_);
    std::swap(random_open_end_timestamp_, other->random_open_end_timestamp_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_shop_descriptor_;
  metadata.reflection = user_shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_arena_log_user_arena_log_hero::kHeroIdFieldNumber;
const int user_arena_log_user_arena_log_hero::kQualityFieldNumber;
const int user_arena_log_user_arena_log_hero::kLevelFieldNumber;
const int user_arena_log_user_arena_log_hero::kStarFieldNumber;
#endif  // !_MSC_VER

user_arena_log_user_arena_log_hero::user_arena_log_user_arena_log_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_arena_log_user_arena_log_hero::InitAsDefaultInstance() {
}

user_arena_log_user_arena_log_hero::user_arena_log_user_arena_log_hero(const user_arena_log_user_arena_log_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_arena_log_user_arena_log_hero::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  quality_ = 0u;
  level_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_arena_log_user_arena_log_hero::~user_arena_log_user_arena_log_hero() {
  SharedDtor();
}

void user_arena_log_user_arena_log_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_arena_log_user_arena_log_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_arena_log_user_arena_log_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_arena_log_user_arena_log_hero_descriptor_;
}

const user_arena_log_user_arena_log_hero& user_arena_log_user_arena_log_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_arena_log_user_arena_log_hero* user_arena_log_user_arena_log_hero::default_instance_ = NULL;

user_arena_log_user_arena_log_hero* user_arena_log_user_arena_log_hero::New() const {
  return new user_arena_log_user_arena_log_hero;
}

void user_arena_log_user_arena_log_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    quality_ = 0u;
    level_ = 0u;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_arena_log_user_arena_log_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // required uint32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // required uint32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_arena_log_user_arena_log_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quality(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_arena_log_user_arena_log_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quality(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_arena_log_user_arena_log_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_arena_log_user_arena_log_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_arena_log_user_arena_log_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_arena_log_user_arena_log_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_arena_log_user_arena_log_hero::MergeFrom(const user_arena_log_user_arena_log_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_arena_log_user_arena_log_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_arena_log_user_arena_log_hero::CopyFrom(const user_arena_log_user_arena_log_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_arena_log_user_arena_log_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void user_arena_log_user_arena_log_hero::Swap(user_arena_log_user_arena_log_hero* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(quality_, other->quality_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_arena_log_user_arena_log_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_arena_log_user_arena_log_hero_descriptor_;
  metadata.reflection = user_arena_log_user_arena_log_hero_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int user_arena_log::kIsAttackerWinFieldNumber;
const int user_arena_log::kTimeFieldNumber;
const int user_arena_log::kIsMeAttackerFieldNumber;
const int user_arena_log::kMeRankFieldNumber;
const int user_arena_log::kMatchUserIdFieldNumber;
const int user_arena_log::kMatchRankFieldNumber;
const int user_arena_log::kMatchPowerFieldNumber;
const int user_arena_log::kMatchNameFieldNumber;
const int user_arena_log::kMatchLevelFieldNumber;
const int user_arena_log::kMatchHerosFieldNumber;
#endif  // !_MSC_VER

user_arena_log::user_arena_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_arena_log::InitAsDefaultInstance() {
}

user_arena_log::user_arena_log(const user_arena_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_arena_log::SharedCtor() {
  _cached_size_ = 0;
  is_attacker_win_ = false;
  time_ = 0u;
  is_me_attacker_ = false;
  me_rank_ = 0u;
  match_user_id_ = 0u;
  match_rank_ = 0u;
  match_power_ = 0u;
  match_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  match_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_arena_log::~user_arena_log() {
  SharedDtor();
}

void user_arena_log::SharedDtor() {
  if (match_name_ != &::google::protobuf::internal::kEmptyString) {
    delete match_name_;
  }
  if (this != default_instance_) {
  }
}

void user_arena_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_arena_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_arena_log_descriptor_;
}

const user_arena_log& user_arena_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_arena_log* user_arena_log::default_instance_ = NULL;

user_arena_log* user_arena_log::New() const {
  return new user_arena_log;
}

void user_arena_log::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_attacker_win_ = false;
    time_ = 0u;
    is_me_attacker_ = false;
    me_rank_ = 0u;
    match_user_id_ = 0u;
    match_rank_ = 0u;
    match_power_ = 0u;
    if (has_match_name()) {
      if (match_name_ != &::google::protobuf::internal::kEmptyString) {
        match_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    match_level_ = 0u;
  }
  match_heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_arena_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_attacker_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_win_)));
          set_has_is_attacker_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_me_attacker;
        break;
      }

      // required bool is_me_attacker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_me_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_me_attacker_)));
          set_has_is_me_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_me_rank;
        break;
      }

      // required uint32 me_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_me_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &me_rank_)));
          set_has_me_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_match_user_id;
        break;
      }

      // required uint32 match_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_user_id_)));
          set_has_match_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_match_rank;
        break;
      }

      // required uint32 match_rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_rank_)));
          set_has_match_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_match_power;
        break;
      }

      // required uint32 match_power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_power_)));
          set_has_match_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_match_name;
        break;
      }

      // required string match_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->match_name().data(), this->match_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_match_level;
        break;
      }

      // required uint32 match_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_level_)));
          set_has_match_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_match_heros;
        break;
      }

      // repeated .user_arena_log.user_arena_log_hero match_heros = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_match_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_match_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_arena_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_attacker_win = 1;
  if (has_is_attacker_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_attacker_win(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required bool is_me_attacker = 3;
  if (has_is_me_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_me_attacker(), output);
  }

  // required uint32 me_rank = 4;
  if (has_me_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->me_rank(), output);
  }

  // required uint32 match_user_id = 5;
  if (has_match_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->match_user_id(), output);
  }

  // required uint32 match_rank = 6;
  if (has_match_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->match_rank(), output);
  }

  // required uint32 match_power = 7;
  if (has_match_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->match_power(), output);
  }

  // required string match_name = 8;
  if (has_match_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_name().data(), this->match_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->match_name(), output);
  }

  // required uint32 match_level = 9;
  if (has_match_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->match_level(), output);
  }

  // repeated .user_arena_log.user_arena_log_hero match_heros = 10;
  for (int i = 0; i < this->match_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->match_heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_arena_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_attacker_win = 1;
  if (has_is_attacker_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_attacker_win(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // required bool is_me_attacker = 3;
  if (has_is_me_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_me_attacker(), target);
  }

  // required uint32 me_rank = 4;
  if (has_me_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->me_rank(), target);
  }

  // required uint32 match_user_id = 5;
  if (has_match_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->match_user_id(), target);
  }

  // required uint32 match_rank = 6;
  if (has_match_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->match_rank(), target);
  }

  // required uint32 match_power = 7;
  if (has_match_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->match_power(), target);
  }

  // required string match_name = 8;
  if (has_match_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_name().data(), this->match_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->match_name(), target);
  }

  // required uint32 match_level = 9;
  if (has_match_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->match_level(), target);
  }

  // repeated .user_arena_log.user_arena_log_hero match_heros = 10;
  for (int i = 0; i < this->match_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->match_heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_arena_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_attacker_win = 1;
    if (has_is_attacker_win()) {
      total_size += 1 + 1;
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required bool is_me_attacker = 3;
    if (has_is_me_attacker()) {
      total_size += 1 + 1;
    }

    // required uint32 me_rank = 4;
    if (has_me_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->me_rank());
    }

    // required uint32 match_user_id = 5;
    if (has_match_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_user_id());
    }

    // required uint32 match_rank = 6;
    if (has_match_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_rank());
    }

    // required uint32 match_power = 7;
    if (has_match_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_power());
    }

    // required string match_name = 8;
    if (has_match_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 match_level = 9;
    if (has_match_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_level());
    }

  }
  // repeated .user_arena_log.user_arena_log_hero match_heros = 10;
  total_size += 1 * this->match_heros_size();
  for (int i = 0; i < this->match_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->match_heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_arena_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_arena_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_arena_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_arena_log::MergeFrom(const user_arena_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  match_heros_.MergeFrom(from.match_heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_attacker_win()) {
      set_is_attacker_win(from.is_attacker_win());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_is_me_attacker()) {
      set_is_me_attacker(from.is_me_attacker());
    }
    if (from.has_me_rank()) {
      set_me_rank(from.me_rank());
    }
    if (from.has_match_user_id()) {
      set_match_user_id(from.match_user_id());
    }
    if (from.has_match_rank()) {
      set_match_rank(from.match_rank());
    }
    if (from.has_match_power()) {
      set_match_power(from.match_power());
    }
    if (from.has_match_name()) {
      set_match_name(from.match_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_match_level()) {
      set_match_level(from.match_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_arena_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_arena_log::CopyFrom(const user_arena_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_arena_log::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  for (int i = 0; i < match_heros_size(); i++) {
    if (!this->match_heros(i).IsInitialized()) return false;
  }
  return true;
}

void user_arena_log::Swap(user_arena_log* other) {
  if (other != this) {
    std::swap(is_attacker_win_, other->is_attacker_win_);
    std::swap(time_, other->time_);
    std::swap(is_me_attacker_, other->is_me_attacker_);
    std::swap(me_rank_, other->me_rank_);
    std::swap(match_user_id_, other->match_user_id_);
    std::swap(match_rank_, other->match_rank_);
    std::swap(match_power_, other->match_power_);
    std::swap(match_name_, other->match_name_);
    std::swap(match_level_, other->match_level_);
    match_heros_.Swap(&other->match_heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_arena_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_arena_log_descriptor_;
  metadata.reflection = user_arena_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_arena_contestant::kRankFieldNumber;
const int user_arena_contestant::kUserIdFieldNumber;
const int user_arena_contestant::kNameFieldNumber;
const int user_arena_contestant::kLevelFieldNumber;
const int user_arena_contestant::kHeadIdFieldNumber;
const int user_arena_contestant::kHeadFrameIdFieldNumber;
const int user_arena_contestant::kHerosFieldNumber;
#endif  // !_MSC_VER

user_arena_contestant::user_arena_contestant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_arena_contestant::InitAsDefaultInstance() {
}

user_arena_contestant::user_arena_contestant(const user_arena_contestant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_arena_contestant::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  user_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  head_id_ = 0u;
  head_frame_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_arena_contestant::~user_arena_contestant() {
  SharedDtor();
}

void user_arena_contestant::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void user_arena_contestant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_arena_contestant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_arena_contestant_descriptor_;
}

const user_arena_contestant& user_arena_contestant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_arena_contestant* user_arena_contestant::default_instance_ = NULL;

user_arena_contestant* user_arena_contestant::New() const {
  return new user_arena_contestant;
}

void user_arena_contestant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    user_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    head_id_ = 0u;
    head_frame_id_ = 0u;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_arena_contestant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_head_id;
        break;
      }

      // required uint32 head_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_head_frame_id;
        break;
      }

      // required uint32 head_frame_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_frame_id_)));
          set_has_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_heros;
        break;
      }

      // repeated .user_hero heros = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_arena_contestant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint32 head_id = 5;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->head_id(), output);
  }

  // required uint32 head_frame_id = 6;
  if (has_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->head_frame_id(), output);
  }

  // repeated .user_hero heros = 7;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_arena_contestant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required uint32 head_id = 5;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->head_id(), target);
  }

  // required uint32 head_frame_id = 6;
  if (has_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->head_frame_id(), target);
  }

  // repeated .user_hero heros = 7;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_arena_contestant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 head_id = 5;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // required uint32 head_frame_id = 6;
    if (has_head_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_frame_id());
    }

  }
  // repeated .user_hero heros = 7;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_arena_contestant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_arena_contestant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_arena_contestant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_arena_contestant::MergeFrom(const user_arena_contestant& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_head_frame_id()) {
      set_head_frame_id(from.head_frame_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_arena_contestant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_arena_contestant::CopyFrom(const user_arena_contestant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_arena_contestant::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  return true;
}

void user_arena_contestant::Swap(user_arena_contestant* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(head_id_, other->head_id_);
    std::swap(head_frame_id_, other->head_frame_id_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_arena_contestant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_arena_contestant_descriptor_;
  metadata.reflection = user_arena_contestant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_arena::kRankFieldNumber;
const int user_arena::kScoreFieldNumber;
const int user_arena::kLastChallengeTimeFieldNumber;
const int user_arena::kLastDayChallengeNumFieldNumber;
const int user_arena::kHistoryHighestRankFieldNumber;
const int user_arena::kHerosFieldNumber;
const int user_arena::kLastTimeBuyArenaChallengeFieldNumber;
const int user_arena::kLastDayBuyArenaChallengeNumFieldNumber;
const int user_arena::kLogFieldNumber;
const int user_arena::kMatchsFieldNumber;
#endif  // !_MSC_VER

user_arena::user_arena()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_arena::InitAsDefaultInstance() {
}

user_arena::user_arena(const user_arena& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_arena::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  score_ = 0u;
  last_challenge_time_ = 0u;
  last_day_challenge_num_ = 0u;
  history_highest_rank_ = 0u;
  last_time_buy_arena_challenge_ = 0u;
  last_day_buy_arena_challenge_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_arena::~user_arena() {
  SharedDtor();
}

void user_arena::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_arena::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_arena::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_arena_descriptor_;
}

const user_arena& user_arena::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_arena* user_arena::default_instance_ = NULL;

user_arena* user_arena::New() const {
  return new user_arena;
}

void user_arena::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    score_ = 0u;
    last_challenge_time_ = 0u;
    last_day_challenge_num_ = 0u;
    history_highest_rank_ = 0u;
    last_time_buy_arena_challenge_ = 0u;
    last_day_buy_arena_challenge_num_ = 0u;
  }
  heros_.Clear();
  log_.Clear();
  matchs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_arena::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_challenge_time;
        break;
      }

      // required uint32 last_challenge_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_challenge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_challenge_time_)));
          set_has_last_challenge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_day_challenge_num;
        break;
      }

      // required uint32 last_day_challenge_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_challenge_num_)));
          set_has_last_day_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_history_highest_rank;
        break;
      }

      // required uint32 history_highest_rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_highest_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_highest_rank_)));
          set_has_history_highest_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heros;
        break;
      }

      // repeated uint32 heros = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heros;
        if (input->ExpectTag(56)) goto parse_last_time_buy_arena_challenge;
        break;
      }

      // required uint32 last_time_buy_arena_challenge = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time_buy_arena_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_buy_arena_challenge_)));
          set_has_last_time_buy_arena_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_day_buy_arena_challenge_num;
        break;
      }

      // required uint32 last_day_buy_arena_challenge_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_buy_arena_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_buy_arena_challenge_num_)));
          set_has_last_day_buy_arena_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_log;
        break;
      }

      // repeated .user_arena_log log = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_log;
        if (input->ExpectTag(82)) goto parse_matchs;
        break;
      }

      // repeated .user_arena_contestant matchs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_matchs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_arena::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // required uint32 last_challenge_time = 3;
  if (has_last_challenge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_challenge_time(), output);
  }

  // required uint32 last_day_challenge_num = 4;
  if (has_last_day_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_day_challenge_num(), output);
  }

  // required uint32 history_highest_rank = 5;
  if (has_history_highest_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->history_highest_rank(), output);
  }

  // repeated uint32 heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->heros(i), output);
  }

  // required uint32 last_time_buy_arena_challenge = 7;
  if (has_last_time_buy_arena_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_time_buy_arena_challenge(), output);
  }

  // required uint32 last_day_buy_arena_challenge_num = 8;
  if (has_last_day_buy_arena_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_day_buy_arena_challenge_num(), output);
  }

  // repeated .user_arena_log log = 9;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->log(i), output);
  }

  // repeated .user_arena_contestant matchs = 10;
  for (int i = 0; i < this->matchs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->matchs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_arena::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // required uint32 last_challenge_time = 3;
  if (has_last_challenge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_challenge_time(), target);
  }

  // required uint32 last_day_challenge_num = 4;
  if (has_last_day_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_day_challenge_num(), target);
  }

  // required uint32 history_highest_rank = 5;
  if (has_history_highest_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->history_highest_rank(), target);
  }

  // repeated uint32 heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->heros(i), target);
  }

  // required uint32 last_time_buy_arena_challenge = 7;
  if (has_last_time_buy_arena_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_time_buy_arena_challenge(), target);
  }

  // required uint32 last_day_buy_arena_challenge_num = 8;
  if (has_last_day_buy_arena_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_day_buy_arena_challenge_num(), target);
  }

  // repeated .user_arena_log log = 9;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->log(i), target);
  }

  // repeated .user_arena_contestant matchs = 10;
  for (int i = 0; i < this->matchs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->matchs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_arena::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 last_challenge_time = 3;
    if (has_last_challenge_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_challenge_time());
    }

    // required uint32 last_day_challenge_num = 4;
    if (has_last_day_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_challenge_num());
    }

    // required uint32 history_highest_rank = 5;
    if (has_history_highest_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_highest_rank());
    }

    // required uint32 last_time_buy_arena_challenge = 7;
    if (has_last_time_buy_arena_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time_buy_arena_challenge());
    }

    // required uint32 last_day_buy_arena_challenge_num = 8;
    if (has_last_day_buy_arena_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_buy_arena_challenge_num());
    }

  }
  // repeated uint32 heros = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  // repeated .user_arena_log log = 9;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  // repeated .user_arena_contestant matchs = 10;
  total_size += 1 * this->matchs_size();
  for (int i = 0; i < this->matchs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_arena::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_arena* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_arena*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_arena::MergeFrom(const user_arena& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  log_.MergeFrom(from.log_);
  matchs_.MergeFrom(from.matchs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_last_challenge_time()) {
      set_last_challenge_time(from.last_challenge_time());
    }
    if (from.has_last_day_challenge_num()) {
      set_last_day_challenge_num(from.last_day_challenge_num());
    }
    if (from.has_history_highest_rank()) {
      set_history_highest_rank(from.history_highest_rank());
    }
    if (from.has_last_time_buy_arena_challenge()) {
      set_last_time_buy_arena_challenge(from.last_time_buy_arena_challenge());
    }
    if (from.has_last_day_buy_arena_challenge_num()) {
      set_last_day_buy_arena_challenge_num(from.last_day_buy_arena_challenge_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_arena::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_arena::CopyFrom(const user_arena& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_arena::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000df) != 0x000000df) return false;

  for (int i = 0; i < log_size(); i++) {
    if (!this->log(i).IsInitialized()) return false;
  }
  for (int i = 0; i < matchs_size(); i++) {
    if (!this->matchs(i).IsInitialized()) return false;
  }
  return true;
}

void user_arena::Swap(user_arena* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(last_challenge_time_, other->last_challenge_time_);
    std::swap(last_day_challenge_num_, other->last_day_challenge_num_);
    std::swap(history_highest_rank_, other->history_highest_rank_);
    heros_.Swap(&other->heros_);
    std::swap(last_time_buy_arena_challenge_, other->last_time_buy_arena_challenge_);
    std::swap(last_day_buy_arena_challenge_num_, other->last_day_buy_arena_challenge_num_);
    log_.Swap(&other->log_);
    matchs_.Swap(&other->matchs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_arena::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_arena_descriptor_;
  metadata.reflection = user_arena_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_crusade_crusade_hero::kHeroIdFieldNumber;
const int user_crusade_crusade_hero::kHpFieldNumber;
const int user_crusade_crusade_hero::kAoYiFieldNumber;
const int user_crusade_crusade_hero::kBiShaFieldNumber;
#endif  // !_MSC_VER

user_crusade_crusade_hero::user_crusade_crusade_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_crusade_crusade_hero::InitAsDefaultInstance() {
}

user_crusade_crusade_hero::user_crusade_crusade_hero(const user_crusade_crusade_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_crusade_crusade_hero::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  hp_ = 0u;
  ao_yi_ = 0u;
  bi_sha_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_crusade_crusade_hero::~user_crusade_crusade_hero() {
  SharedDtor();
}

void user_crusade_crusade_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_crusade_crusade_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_crusade_crusade_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_crusade_crusade_hero_descriptor_;
}

const user_crusade_crusade_hero& user_crusade_crusade_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_crusade_crusade_hero* user_crusade_crusade_hero::default_instance_ = NULL;

user_crusade_crusade_hero* user_crusade_crusade_hero::New() const {
  return new user_crusade_crusade_hero;
}

void user_crusade_crusade_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    hp_ = 0u;
    ao_yi_ = 0u;
    bi_sha_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_crusade_crusade_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // required uint32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ao_yi;
        break;
      }

      // required uint32 ao_yi = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ao_yi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ao_yi_)));
          set_has_ao_yi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bi_sha;
        break;
      }

      // required uint32 bi_sha = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bi_sha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bi_sha_)));
          set_has_bi_sha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_crusade_crusade_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }

  // required uint32 ao_yi = 3;
  if (has_ao_yi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ao_yi(), output);
  }

  // required uint32 bi_sha = 4;
  if (has_bi_sha()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bi_sha(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_crusade_crusade_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hp(), target);
  }

  // required uint32 ao_yi = 3;
  if (has_ao_yi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ao_yi(), target);
  }

  // required uint32 bi_sha = 4;
  if (has_bi_sha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bi_sha(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_crusade_crusade_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required uint32 ao_yi = 3;
    if (has_ao_yi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ao_yi());
    }

    // required uint32 bi_sha = 4;
    if (has_bi_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bi_sha());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_crusade_crusade_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_crusade_crusade_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_crusade_crusade_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_crusade_crusade_hero::MergeFrom(const user_crusade_crusade_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_ao_yi()) {
      set_ao_yi(from.ao_yi());
    }
    if (from.has_bi_sha()) {
      set_bi_sha(from.bi_sha());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_crusade_crusade_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_crusade_crusade_hero::CopyFrom(const user_crusade_crusade_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_crusade_crusade_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void user_crusade_crusade_hero::Swap(user_crusade_crusade_hero* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hp_, other->hp_);
    std::swap(ao_yi_, other->ao_yi_);
    std::swap(bi_sha_, other->bi_sha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_crusade_crusade_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_crusade_crusade_hero_descriptor_;
  metadata.reflection = user_crusade_crusade_hero_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int user_crusade::kIsAllThroughFieldNumber;
const int user_crusade::kMeHerosFieldNumber;
const int user_crusade::kEnemyHerosFieldNumber;
const int user_crusade::kWaveFieldNumber;
const int user_crusade::kLeftResetTimesFieldNumber;
const int user_crusade::kLeftPromoteAwardTimesFieldNumber;
#endif  // !_MSC_VER

user_crusade::user_crusade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_crusade::InitAsDefaultInstance() {
}

user_crusade::user_crusade(const user_crusade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_crusade::SharedCtor() {
  _cached_size_ = 0;
  is_all_through_ = false;
  wave_ = 0u;
  left_reset_times_ = 0u;
  left_promote_award_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_crusade::~user_crusade() {
  SharedDtor();
}

void user_crusade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_crusade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_crusade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_crusade_descriptor_;
}

const user_crusade& user_crusade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_crusade* user_crusade::default_instance_ = NULL;

user_crusade* user_crusade::New() const {
  return new user_crusade;
}

void user_crusade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_all_through_ = false;
    wave_ = 0u;
    left_reset_times_ = 0u;
    left_promote_award_times_ = 0u;
  }
  me_heros_.Clear();
  enemy_heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_crusade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_all_through = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_all_through_)));
          set_has_is_all_through();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_me_heros;
        break;
      }

      // repeated .user_crusade.crusade_hero me_heros = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_me_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_me_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_me_heros;
        if (input->ExpectTag(26)) goto parse_enemy_heros;
        break;
      }

      // repeated .user_crusade.crusade_hero enemy_heros = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemy_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_enemy_heros;
        if (input->ExpectTag(32)) goto parse_wave;
        break;
      }

      // optional uint32 wave = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_left_reset_times;
        break;
      }

      // optional uint32 left_reset_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_reset_times_)));
          set_has_left_reset_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_left_promote_award_times;
        break;
      }

      // optional uint32 left_promote_award_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_promote_award_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_promote_award_times_)));
          set_has_left_promote_award_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_crusade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_all_through = 1;
  if (has_is_all_through()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_all_through(), output);
  }

  // repeated .user_crusade.crusade_hero me_heros = 2;
  for (int i = 0; i < this->me_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->me_heros(i), output);
  }

  // repeated .user_crusade.crusade_hero enemy_heros = 3;
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enemy_heros(i), output);
  }

  // optional uint32 wave = 4;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wave(), output);
  }

  // optional uint32 left_reset_times = 5;
  if (has_left_reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->left_reset_times(), output);
  }

  // optional uint32 left_promote_award_times = 6;
  if (has_left_promote_award_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->left_promote_award_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_crusade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_all_through = 1;
  if (has_is_all_through()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_all_through(), target);
  }

  // repeated .user_crusade.crusade_hero me_heros = 2;
  for (int i = 0; i < this->me_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->me_heros(i), target);
  }

  // repeated .user_crusade.crusade_hero enemy_heros = 3;
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enemy_heros(i), target);
  }

  // optional uint32 wave = 4;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wave(), target);
  }

  // optional uint32 left_reset_times = 5;
  if (has_left_reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->left_reset_times(), target);
  }

  // optional uint32 left_promote_award_times = 6;
  if (has_left_promote_award_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->left_promote_award_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_crusade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_all_through = 1;
    if (has_is_all_through()) {
      total_size += 1 + 1;
    }

    // optional uint32 wave = 4;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave());
    }

    // optional uint32 left_reset_times = 5;
    if (has_left_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_reset_times());
    }

    // optional uint32 left_promote_award_times = 6;
    if (has_left_promote_award_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_promote_award_times());
    }

  }
  // repeated .user_crusade.crusade_hero me_heros = 2;
  total_size += 1 * this->me_heros_size();
  for (int i = 0; i < this->me_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->me_heros(i));
  }

  // repeated .user_crusade.crusade_hero enemy_heros = 3;
  total_size += 1 * this->enemy_heros_size();
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemy_heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_crusade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_crusade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_crusade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_crusade::MergeFrom(const user_crusade& from) {
  GOOGLE_CHECK_NE(&from, this);
  me_heros_.MergeFrom(from.me_heros_);
  enemy_heros_.MergeFrom(from.enemy_heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_all_through()) {
      set_is_all_through(from.is_all_through());
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_left_reset_times()) {
      set_left_reset_times(from.left_reset_times());
    }
    if (from.has_left_promote_award_times()) {
      set_left_promote_award_times(from.left_promote_award_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_crusade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_crusade::CopyFrom(const user_crusade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_crusade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < me_heros_size(); i++) {
    if (!this->me_heros(i).IsInitialized()) return false;
  }
  for (int i = 0; i < enemy_heros_size(); i++) {
    if (!this->enemy_heros(i).IsInitialized()) return false;
  }
  return true;
}

void user_crusade::Swap(user_crusade* other) {
  if (other != this) {
    std::swap(is_all_through_, other->is_all_through_);
    me_heros_.Swap(&other->me_heros_);
    enemy_heros_.Swap(&other->enemy_heros_);
    std::swap(wave_, other->wave_);
    std::swap(left_reset_times_, other->left_reset_times_);
    std::swap(left_promote_award_times_, other->left_promote_award_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_crusade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_crusade_descriptor_;
  metadata.reflection = user_crusade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_user_info_res::kErrorCodeFieldNumber;
const int gs_c_user_info_res::kBaseInfoFieldNumber;
const int gs_c_user_info_res::kSubTasksFieldNumber;
const int gs_c_user_info_res::kHerosFieldNumber;
const int gs_c_user_info_res::kItemElementsFieldNumber;
const int gs_c_user_info_res::kMailElementsFieldNumber;
const int gs_c_user_info_res::kShopsFieldNumber;
const int gs_c_user_info_res::kMissionsFieldNumber;
const int gs_c_user_info_res::kArenaFieldNumber;
const int gs_c_user_info_res::kSignFieldNumber;
const int gs_c_user_info_res::kGuideIdsFieldNumber;
const int gs_c_user_info_res::kFriendInfoFieldNumber;
const int gs_c_user_info_res::kCrusadeFieldNumber;
#endif  // !_MSC_VER

gs_c_user_info_res::gs_c_user_info_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_user_info_res::InitAsDefaultInstance() {
  base_info_ = const_cast< ::user_base_info*>(&::user_base_info::default_instance());
  sub_tasks_ = const_cast< ::user_sub_task_array*>(&::user_sub_task_array::default_instance());
  heros_ = const_cast< ::user_hero_array*>(&::user_hero_array::default_instance());
  arena_ = const_cast< ::user_arena*>(&::user_arena::default_instance());
  sign_ = const_cast< ::user_sign*>(&::user_sign::default_instance());
  friend_info_ = const_cast< ::user_friend*>(&::user_friend::default_instance());
  crusade_ = const_cast< ::user_crusade*>(&::user_crusade::default_instance());
}

gs_c_user_info_res::gs_c_user_info_res(const gs_c_user_info_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_user_info_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  base_info_ = NULL;
  sub_tasks_ = NULL;
  heros_ = NULL;
  arena_ = NULL;
  sign_ = NULL;
  friend_info_ = NULL;
  crusade_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_user_info_res::~gs_c_user_info_res() {
  SharedDtor();
}

void gs_c_user_info_res::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
    delete sub_tasks_;
    delete heros_;
    delete arena_;
    delete sign_;
    delete friend_info_;
    delete crusade_;
  }
}

void gs_c_user_info_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_user_info_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_user_info_res_descriptor_;
}

const gs_c_user_info_res& gs_c_user_info_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_user_info_res* gs_c_user_info_res::default_instance_ = NULL;

gs_c_user_info_res* gs_c_user_info_res::New() const {
  return new gs_c_user_info_res;
}

void gs_c_user_info_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::user_base_info::Clear();
    }
    if (has_sub_tasks()) {
      if (sub_tasks_ != NULL) sub_tasks_->::user_sub_task_array::Clear();
    }
    if (has_heros()) {
      if (heros_ != NULL) heros_->::user_hero_array::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_arena()) {
      if (arena_ != NULL) arena_->::user_arena::Clear();
    }
    if (has_sign()) {
      if (sign_ != NULL) sign_->::user_sign::Clear();
    }
    if (has_friend_info()) {
      if (friend_info_ != NULL) friend_info_->::user_friend::Clear();
    }
    if (has_crusade()) {
      if (crusade_ != NULL) crusade_->::user_crusade::Clear();
    }
  }
  item_elements_.Clear();
  mail_elements_.Clear();
  shops_.Clear();
  missions_.Clear();
  guide_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_user_info_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_info;
        break;
      }

      // optional .user_base_info base_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sub_tasks;
        break;
      }

      // optional .user_sub_task_array sub_tasks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heros;
        break;
      }

      // optional .user_hero_array heros = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_elements;
        break;
      }

      // repeated .struct_game_element item_elements = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_elements;
        if (input->ExpectTag(50)) goto parse_mail_elements;
        break;
      }

      // repeated .user_mail mail_elements = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mail_elements;
        if (input->ExpectTag(58)) goto parse_shops;
        break;
      }

      // repeated .user_shop shops = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_shops;
        if (input->ExpectTag(66)) goto parse_missions;
        break;
      }

      // repeated .user_mission missions = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_missions;
        if (input->ExpectTag(74)) goto parse_arena;
        break;
      }

      // optional .user_arena arena = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_sign;
        break;
      }

      // optional .user_sign sign = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_guide_ids;
        break;
      }

      // repeated uint32 guide_ids = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_guide_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_guide_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_guide_ids;
        if (input->ExpectTag(98)) goto parse_friend_info;
        break;
      }

      // optional .user_friend friend_info = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_crusade;
        break;
      }

      // optional .user_crusade crusade = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crusade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crusade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_user_info_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional .user_base_info base_info = 2;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_info(), output);
  }

  // optional .user_sub_task_array sub_tasks = 3;
  if (has_sub_tasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sub_tasks(), output);
  }

  // optional .user_hero_array heros = 4;
  if (has_heros()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->heros(), output);
  }

  // repeated .struct_game_element item_elements = 5;
  for (int i = 0; i < this->item_elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item_elements(i), output);
  }

  // repeated .user_mail mail_elements = 6;
  for (int i = 0; i < this->mail_elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mail_elements(i), output);
  }

  // repeated .user_shop shops = 7;
  for (int i = 0; i < this->shops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->shops(i), output);
  }

  // repeated .user_mission missions = 8;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->missions(i), output);
  }

  // optional .user_arena arena = 9;
  if (has_arena()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->arena(), output);
  }

  // optional .user_sign sign = 10;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->sign(), output);
  }

  // repeated uint32 guide_ids = 11;
  for (int i = 0; i < this->guide_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->guide_ids(i), output);
  }

  // optional .user_friend friend_info = 12;
  if (has_friend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->friend_info(), output);
  }

  // optional .user_crusade crusade = 13;
  if (has_crusade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->crusade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_user_info_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional .user_base_info base_info = 2;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base_info(), target);
  }

  // optional .user_sub_task_array sub_tasks = 3;
  if (has_sub_tasks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sub_tasks(), target);
  }

  // optional .user_hero_array heros = 4;
  if (has_heros()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->heros(), target);
  }

  // repeated .struct_game_element item_elements = 5;
  for (int i = 0; i < this->item_elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item_elements(i), target);
  }

  // repeated .user_mail mail_elements = 6;
  for (int i = 0; i < this->mail_elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mail_elements(i), target);
  }

  // repeated .user_shop shops = 7;
  for (int i = 0; i < this->shops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->shops(i), target);
  }

  // repeated .user_mission missions = 8;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->missions(i), target);
  }

  // optional .user_arena arena = 9;
  if (has_arena()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->arena(), target);
  }

  // optional .user_sign sign = 10;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->sign(), target);
  }

  // repeated uint32 guide_ids = 11;
  for (int i = 0; i < this->guide_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->guide_ids(i), target);
  }

  // optional .user_friend friend_info = 12;
  if (has_friend_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->friend_info(), target);
  }

  // optional .user_crusade crusade = 13;
  if (has_crusade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->crusade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_user_info_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .user_base_info base_info = 2;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

    // optional .user_sub_task_array sub_tasks = 3;
    if (has_sub_tasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sub_tasks());
    }

    // optional .user_hero_array heros = 4;
    if (has_heros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heros());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .user_arena arena = 9;
    if (has_arena()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena());
    }

    // optional .user_sign sign = 10;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign());
    }

    // optional .user_friend friend_info = 12;
    if (has_friend_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_info());
    }

    // optional .user_crusade crusade = 13;
    if (has_crusade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crusade());
    }

  }
  // repeated .struct_game_element item_elements = 5;
  total_size += 1 * this->item_elements_size();
  for (int i = 0; i < this->item_elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_elements(i));
  }

  // repeated .user_mail mail_elements = 6;
  total_size += 1 * this->mail_elements_size();
  for (int i = 0; i < this->mail_elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_elements(i));
  }

  // repeated .user_shop shops = 7;
  total_size += 1 * this->shops_size();
  for (int i = 0; i < this->shops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shops(i));
  }

  // repeated .user_mission missions = 8;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }

  // repeated uint32 guide_ids = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->guide_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->guide_ids(i));
    }
    total_size += 1 * this->guide_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_user_info_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_user_info_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_user_info_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_user_info_res::MergeFrom(const gs_c_user_info_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_elements_.MergeFrom(from.item_elements_);
  mail_elements_.MergeFrom(from.mail_elements_);
  shops_.MergeFrom(from.shops_);
  missions_.MergeFrom(from.missions_);
  guide_ids_.MergeFrom(from.guide_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_base_info()) {
      mutable_base_info()->::user_base_info::MergeFrom(from.base_info());
    }
    if (from.has_sub_tasks()) {
      mutable_sub_tasks()->::user_sub_task_array::MergeFrom(from.sub_tasks());
    }
    if (from.has_heros()) {
      mutable_heros()->::user_hero_array::MergeFrom(from.heros());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arena()) {
      mutable_arena()->::user_arena::MergeFrom(from.arena());
    }
    if (from.has_sign()) {
      mutable_sign()->::user_sign::MergeFrom(from.sign());
    }
    if (from.has_friend_info()) {
      mutable_friend_info()->::user_friend::MergeFrom(from.friend_info());
    }
    if (from.has_crusade()) {
      mutable_crusade()->::user_crusade::MergeFrom(from.crusade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_user_info_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_user_info_res::CopyFrom(const gs_c_user_info_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_user_info_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  if (has_sub_tasks()) {
    if (!this->sub_tasks().IsInitialized()) return false;
  }
  if (has_heros()) {
    if (!this->heros().IsInitialized()) return false;
  }
  for (int i = 0; i < item_elements_size(); i++) {
    if (!this->item_elements(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mail_elements_size(); i++) {
    if (!this->mail_elements(i).IsInitialized()) return false;
  }
  for (int i = 0; i < shops_size(); i++) {
    if (!this->shops(i).IsInitialized()) return false;
  }
  for (int i = 0; i < missions_size(); i++) {
    if (!this->missions(i).IsInitialized()) return false;
  }
  if (has_arena()) {
    if (!this->arena().IsInitialized()) return false;
  }
  if (has_sign()) {
    if (!this->sign().IsInitialized()) return false;
  }
  if (has_friend_info()) {
    if (!this->friend_info().IsInitialized()) return false;
  }
  if (has_crusade()) {
    if (!this->crusade().IsInitialized()) return false;
  }
  return true;
}

void gs_c_user_info_res::Swap(gs_c_user_info_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(base_info_, other->base_info_);
    std::swap(sub_tasks_, other->sub_tasks_);
    std::swap(heros_, other->heros_);
    item_elements_.Swap(&other->item_elements_);
    mail_elements_.Swap(&other->mail_elements_);
    shops_.Swap(&other->shops_);
    missions_.Swap(&other->missions_);
    std::swap(arena_, other->arena_);
    std::swap(sign_, other->sign_);
    guide_ids_.Swap(&other->guide_ids_);
    std::swap(friend_info_, other->friend_info_);
    std::swap(crusade_, other->crusade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_user_info_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_user_info_res_descriptor_;
  metadata.reflection = gs_c_user_info_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_start_sub_task_req::kSubTaskIdFieldNumber;
const int c_gs_start_sub_task_req::kHerosFieldNumber;
#endif  // !_MSC_VER

c_gs_start_sub_task_req::c_gs_start_sub_task_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_start_sub_task_req::InitAsDefaultInstance() {
}

c_gs_start_sub_task_req::c_gs_start_sub_task_req(const c_gs_start_sub_task_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_start_sub_task_req::SharedCtor() {
  _cached_size_ = 0;
  sub_task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_start_sub_task_req::~c_gs_start_sub_task_req() {
  SharedDtor();
}

void c_gs_start_sub_task_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_start_sub_task_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_start_sub_task_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_start_sub_task_req_descriptor_;
}

const c_gs_start_sub_task_req& c_gs_start_sub_task_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_start_sub_task_req* c_gs_start_sub_task_req::default_instance_ = NULL;

c_gs_start_sub_task_req* c_gs_start_sub_task_req::New() const {
  return new c_gs_start_sub_task_req;
}

void c_gs_start_sub_task_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sub_task_id_ = 0u;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_start_sub_task_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sub_task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_task_id_)));
          set_has_sub_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heros;
        break;
      }

      // repeated uint32 heros = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_start_sub_task_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sub_task_id = 1;
  if (has_sub_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sub_task_id(), output);
  }

  // repeated uint32 heros = 2;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_start_sub_task_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sub_task_id = 1;
  if (has_sub_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sub_task_id(), target);
  }

  // repeated uint32 heros = 2;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_start_sub_task_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sub_task_id = 1;
    if (has_sub_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_task_id());
    }

  }
  // repeated uint32 heros = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_start_sub_task_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_start_sub_task_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_start_sub_task_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_start_sub_task_req::MergeFrom(const c_gs_start_sub_task_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sub_task_id()) {
      set_sub_task_id(from.sub_task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_start_sub_task_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_start_sub_task_req::CopyFrom(const c_gs_start_sub_task_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_start_sub_task_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_start_sub_task_req::Swap(c_gs_start_sub_task_req* other) {
  if (other != this) {
    std::swap(sub_task_id_, other->sub_task_id_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_start_sub_task_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_start_sub_task_req_descriptor_;
  metadata.reflection = c_gs_start_sub_task_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_start_sub_task_res::kErrorCodeFieldNumber;
const int gs_c_start_sub_task_res::kSubTaskIdFieldNumber;
const int gs_c_start_sub_task_res::kOutputFieldNumber;
const int gs_c_start_sub_task_res::kConsumeFieldNumber;
const int gs_c_start_sub_task_res::kEnterTimeFieldNumber;
#endif  // !_MSC_VER

gs_c_start_sub_task_res::gs_c_start_sub_task_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_start_sub_task_res::InitAsDefaultInstance() {
}

gs_c_start_sub_task_res::gs_c_start_sub_task_res(const gs_c_start_sub_task_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_start_sub_task_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  sub_task_id_ = 0u;
  enter_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_start_sub_task_res::~gs_c_start_sub_task_res() {
  SharedDtor();
}

void gs_c_start_sub_task_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_start_sub_task_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_start_sub_task_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_start_sub_task_res_descriptor_;
}

const gs_c_start_sub_task_res& gs_c_start_sub_task_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_start_sub_task_res* gs_c_start_sub_task_res::default_instance_ = NULL;

gs_c_start_sub_task_res* gs_c_start_sub_task_res::New() const {
  return new gs_c_start_sub_task_res;
}

void gs_c_start_sub_task_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    sub_task_id_ = 0u;
    enter_time_ = 0u;
  }
  output_.Clear();
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_start_sub_task_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sub_task_id;
        break;
      }

      // optional uint32 sub_task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_task_id_)));
          set_has_sub_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_output;
        break;
      }

      // repeated .struct_game_element output = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_output;
        if (input->ExpectTag(34)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_consume;
        if (input->ExpectTag(40)) goto parse_enter_time;
        break;
      }

      // optional uint32 enter_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enter_time_)));
          set_has_enter_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_start_sub_task_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 sub_task_id = 2;
  if (has_sub_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sub_task_id(), output);
  }

  // repeated .struct_game_element output = 3;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->output(i), output);
  }

  // repeated .struct_game_element consume = 4;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->consume(i), output);
  }

  // optional uint32 enter_time = 5;
  if (has_enter_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->enter_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_start_sub_task_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 sub_task_id = 2;
  if (has_sub_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sub_task_id(), target);
  }

  // repeated .struct_game_element output = 3;
  for (int i = 0; i < this->output_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->output(i), target);
  }

  // repeated .struct_game_element consume = 4;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->consume(i), target);
  }

  // optional uint32 enter_time = 5;
  if (has_enter_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->enter_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_start_sub_task_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 sub_task_id = 2;
    if (has_sub_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_task_id());
    }

    // optional uint32 enter_time = 5;
    if (has_enter_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enter_time());
    }

  }
  // repeated .struct_game_element output = 3;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output(i));
  }

  // repeated .struct_game_element consume = 4;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_start_sub_task_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_start_sub_task_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_start_sub_task_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_start_sub_task_res::MergeFrom(const gs_c_start_sub_task_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  output_.MergeFrom(from.output_);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_sub_task_id()) {
      set_sub_task_id(from.sub_task_id());
    }
    if (from.has_enter_time()) {
      set_enter_time(from.enter_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_start_sub_task_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_start_sub_task_res::CopyFrom(const gs_c_start_sub_task_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_start_sub_task_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < output_size(); i++) {
    if (!this->output(i).IsInitialized()) return false;
  }
  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_start_sub_task_res::Swap(gs_c_start_sub_task_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(sub_task_id_, other->sub_task_id_);
    output_.Swap(&other->output_);
    consume_.Swap(&other->consume_);
    std::swap(enter_time_, other->enter_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_start_sub_task_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_start_sub_task_res_descriptor_;
  metadata.reflection = gs_c_start_sub_task_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_end_sub_task_req::kIsWinFieldNumber;
const int c_gs_end_sub_task_req::kStarFieldNumber;
#endif  // !_MSC_VER

c_gs_end_sub_task_req::c_gs_end_sub_task_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_end_sub_task_req::InitAsDefaultInstance() {
}

c_gs_end_sub_task_req::c_gs_end_sub_task_req(const c_gs_end_sub_task_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_end_sub_task_req::SharedCtor() {
  _cached_size_ = 0;
  is_win_ = false;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_end_sub_task_req::~c_gs_end_sub_task_req() {
  SharedDtor();
}

void c_gs_end_sub_task_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_end_sub_task_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_end_sub_task_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_end_sub_task_req_descriptor_;
}

const c_gs_end_sub_task_req& c_gs_end_sub_task_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_end_sub_task_req* c_gs_end_sub_task_req::default_instance_ = NULL;

c_gs_end_sub_task_req* c_gs_end_sub_task_req::New() const {
  return new c_gs_end_sub_task_req;
}

void c_gs_end_sub_task_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_win_ = false;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_end_sub_task_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_end_sub_task_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_win = 1;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_win(), output);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_end_sub_task_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_win = 1;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_win(), target);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_end_sub_task_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_win = 1;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

    // optional uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_end_sub_task_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_end_sub_task_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_end_sub_task_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_end_sub_task_req::MergeFrom(const c_gs_end_sub_task_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_end_sub_task_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_end_sub_task_req::CopyFrom(const c_gs_end_sub_task_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_end_sub_task_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_end_sub_task_req::Swap(c_gs_end_sub_task_req* other) {
  if (other != this) {
    std::swap(is_win_, other->is_win_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_end_sub_task_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_end_sub_task_req_descriptor_;
  metadata.reflection = c_gs_end_sub_task_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_end_sub_task_res::kErrorCodeFieldNumber;
const int gs_c_end_sub_task_res::kOutputFieldNumber;
const int gs_c_end_sub_task_res::kTaskCompletePrizeFieldNumber;
const int gs_c_end_sub_task_res::kHerosFieldNumber;
const int gs_c_end_sub_task_res::kShopFieldNumber;
#endif  // !_MSC_VER

gs_c_end_sub_task_res::gs_c_end_sub_task_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_end_sub_task_res::InitAsDefaultInstance() {
  shop_ = const_cast< ::user_shop*>(&::user_shop::default_instance());
}

gs_c_end_sub_task_res::gs_c_end_sub_task_res(const gs_c_end_sub_task_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_end_sub_task_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  shop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_end_sub_task_res::~gs_c_end_sub_task_res() {
  SharedDtor();
}

void gs_c_end_sub_task_res::SharedDtor() {
  if (this != default_instance_) {
    delete shop_;
  }
}

void gs_c_end_sub_task_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_end_sub_task_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_end_sub_task_res_descriptor_;
}

const gs_c_end_sub_task_res& gs_c_end_sub_task_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_end_sub_task_res* gs_c_end_sub_task_res::default_instance_ = NULL;

gs_c_end_sub_task_res* gs_c_end_sub_task_res::New() const {
  return new gs_c_end_sub_task_res;
}

void gs_c_end_sub_task_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_shop()) {
      if (shop_ != NULL) shop_->::user_shop::Clear();
    }
  }
  output_.Clear();
  task_complete_prize_.Clear();
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_end_sub_task_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }

      // repeated .struct_game_element output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_output;
        if (input->ExpectTag(26)) goto parse_task_complete_prize;
        break;
      }

      // repeated .struct_game_element task_complete_prize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_complete_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_complete_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_complete_prize;
        if (input->ExpectTag(34)) goto parse_heros;
        break;
      }

      // repeated .user_hero heros = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heros;
        if (input->ExpectTag(42)) goto parse_shop;
        break;
      }

      // optional .user_shop shop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_end_sub_task_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .struct_game_element output = 2;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->output(i), output);
  }

  // repeated .struct_game_element task_complete_prize = 3;
  for (int i = 0; i < this->task_complete_prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->task_complete_prize(i), output);
  }

  // repeated .user_hero heros = 4;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->heros(i), output);
  }

  // optional .user_shop shop = 5;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_end_sub_task_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_game_element output = 2;
  for (int i = 0; i < this->output_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->output(i), target);
  }

  // repeated .struct_game_element task_complete_prize = 3;
  for (int i = 0; i < this->task_complete_prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->task_complete_prize(i), target);
  }

  // repeated .user_hero heros = 4;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->heros(i), target);
  }

  // optional .user_shop shop = 5;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_end_sub_task_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .user_shop shop = 5;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

  }
  // repeated .struct_game_element output = 2;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output(i));
  }

  // repeated .struct_game_element task_complete_prize = 3;
  total_size += 1 * this->task_complete_prize_size();
  for (int i = 0; i < this->task_complete_prize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_complete_prize(i));
  }

  // repeated .user_hero heros = 4;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_end_sub_task_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_end_sub_task_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_end_sub_task_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_end_sub_task_res::MergeFrom(const gs_c_end_sub_task_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  output_.MergeFrom(from.output_);
  task_complete_prize_.MergeFrom(from.task_complete_prize_);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_shop()) {
      mutable_shop()->::user_shop::MergeFrom(from.shop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_end_sub_task_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_end_sub_task_res::CopyFrom(const gs_c_end_sub_task_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_end_sub_task_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < output_size(); i++) {
    if (!this->output(i).IsInitialized()) return false;
  }
  for (int i = 0; i < task_complete_prize_size(); i++) {
    if (!this->task_complete_prize(i).IsInitialized()) return false;
  }
  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  if (has_shop()) {
    if (!this->shop().IsInitialized()) return false;
  }
  return true;
}

void gs_c_end_sub_task_res::Swap(gs_c_end_sub_task_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    output_.Swap(&other->output_);
    task_complete_prize_.Swap(&other->task_complete_prize_);
    heros_.Swap(&other->heros_);
    std::swap(shop_, other->shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_end_sub_task_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_end_sub_task_res_descriptor_;
  metadata.reflection = gs_c_end_sub_task_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* c_gs_invoke_hero_req_EINVOKE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_invoke_hero_req_EINVOKE_TYPE_descriptor_;
}
bool c_gs_invoke_hero_req_EINVOKE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const c_gs_invoke_hero_req_EINVOKE_TYPE c_gs_invoke_hero_req::FREE;
const c_gs_invoke_hero_req_EINVOKE_TYPE c_gs_invoke_hero_req::GOLD;
const c_gs_invoke_hero_req_EINVOKE_TYPE c_gs_invoke_hero_req::DIAMOND;
const c_gs_invoke_hero_req_EINVOKE_TYPE c_gs_invoke_hero_req::FRAGMENT;
const c_gs_invoke_hero_req_EINVOKE_TYPE c_gs_invoke_hero_req::EINVOKE_TYPE_MIN;
const c_gs_invoke_hero_req_EINVOKE_TYPE c_gs_invoke_hero_req::EINVOKE_TYPE_MAX;
const int c_gs_invoke_hero_req::EINVOKE_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int c_gs_invoke_hero_req::kInvokeTypeFieldNumber;
const int c_gs_invoke_hero_req::kHeroNumFieldNumber;
const int c_gs_invoke_hero_req::kItemIdFieldNumber;
const int c_gs_invoke_hero_req::kHeroIdFieldNumber;
#endif  // !_MSC_VER

c_gs_invoke_hero_req::c_gs_invoke_hero_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_invoke_hero_req::InitAsDefaultInstance() {
}

c_gs_invoke_hero_req::c_gs_invoke_hero_req(const c_gs_invoke_hero_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_invoke_hero_req::SharedCtor() {
  _cached_size_ = 0;
  invoke_type_ = 1;
  hero_num_ = 0u;
  item_id_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_invoke_hero_req::~c_gs_invoke_hero_req() {
  SharedDtor();
}

void c_gs_invoke_hero_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_invoke_hero_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_invoke_hero_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_invoke_hero_req_descriptor_;
}

const c_gs_invoke_hero_req& c_gs_invoke_hero_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_invoke_hero_req* c_gs_invoke_hero_req::default_instance_ = NULL;

c_gs_invoke_hero_req* c_gs_invoke_hero_req::New() const {
  return new c_gs_invoke_hero_req;
}

void c_gs_invoke_hero_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    invoke_type_ = 1;
    hero_num_ = 0u;
    item_id_ = 0u;
    hero_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_invoke_hero_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_invoke_hero_req.EINVOKE_TYPE invoke_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_invoke_hero_req_EINVOKE_TYPE_IsValid(value)) {
            set_invoke_type(static_cast< ::c_gs_invoke_hero_req_EINVOKE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_num;
        break;
      }

      // optional uint32 hero_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_num_)));
          set_has_hero_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_invoke_hero_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_invoke_hero_req.EINVOKE_TYPE invoke_type = 1;
  if (has_invoke_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->invoke_type(), output);
  }

  // optional uint32 hero_num = 2;
  if (has_hero_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_num(), output);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  // optional uint32 hero_id = 4;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_invoke_hero_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_invoke_hero_req.EINVOKE_TYPE invoke_type = 1;
  if (has_invoke_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->invoke_type(), target);
  }

  // optional uint32 hero_num = 2;
  if (has_hero_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_num(), target);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  // optional uint32 hero_id = 4;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_invoke_hero_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_invoke_hero_req.EINVOKE_TYPE invoke_type = 1;
    if (has_invoke_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->invoke_type());
    }

    // optional uint32 hero_num = 2;
    if (has_hero_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_num());
    }

    // optional uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 hero_id = 4;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_invoke_hero_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_invoke_hero_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_invoke_hero_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_invoke_hero_req::MergeFrom(const c_gs_invoke_hero_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invoke_type()) {
      set_invoke_type(from.invoke_type());
    }
    if (from.has_hero_num()) {
      set_hero_num(from.hero_num());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_invoke_hero_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_invoke_hero_req::CopyFrom(const c_gs_invoke_hero_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_invoke_hero_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_invoke_hero_req::Swap(c_gs_invoke_hero_req* other) {
  if (other != this) {
    std::swap(invoke_type_, other->invoke_type_);
    std::swap(hero_num_, other->hero_num_);
    std::swap(item_id_, other->item_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_invoke_hero_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_invoke_hero_req_descriptor_;
  metadata.reflection = c_gs_invoke_hero_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_invoke_hero_res::kErrorCodeFieldNumber;
const int gs_c_invoke_hero_res::kHerosFieldNumber;
const int gs_c_invoke_hero_res::kConsumeFieldNumber;
const int gs_c_invoke_hero_res::kOutputFieldNumber;
#endif  // !_MSC_VER

gs_c_invoke_hero_res::gs_c_invoke_hero_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_invoke_hero_res::InitAsDefaultInstance() {
}

gs_c_invoke_hero_res::gs_c_invoke_hero_res(const gs_c_invoke_hero_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_invoke_hero_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_invoke_hero_res::~gs_c_invoke_hero_res() {
  SharedDtor();
}

void gs_c_invoke_hero_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_invoke_hero_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_invoke_hero_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_invoke_hero_res_descriptor_;
}

const gs_c_invoke_hero_res& gs_c_invoke_hero_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_invoke_hero_res* gs_c_invoke_hero_res::default_instance_ = NULL;

gs_c_invoke_hero_res* gs_c_invoke_hero_res::New() const {
  return new gs_c_invoke_hero_res;
}

void gs_c_invoke_hero_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  heros_.Clear();
  consume_.Clear();
  output_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_invoke_hero_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_heros;
        break;
      }

      // repeated .user_hero heros = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_heros;
        if (input->ExpectTag(26)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consume;
        if (input->ExpectTag(34)) goto parse_output;
        break;
      }

      // repeated .struct_game_element output = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_output;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_invoke_hero_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .user_hero heros = 2;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heros(i), output);
  }

  // repeated .struct_game_element consume = 3;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->consume(i), output);
  }

  // repeated .struct_game_element output = 4;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->output(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_invoke_hero_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .user_hero heros = 2;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heros(i), target);
  }

  // repeated .struct_game_element consume = 3;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->consume(i), target);
  }

  // repeated .struct_game_element output = 4;
  for (int i = 0; i < this->output_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->output(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_invoke_hero_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .user_hero heros = 2;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  // repeated .struct_game_element consume = 3;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  // repeated .struct_game_element output = 4;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_invoke_hero_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_invoke_hero_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_invoke_hero_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_invoke_hero_res::MergeFrom(const gs_c_invoke_hero_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  consume_.MergeFrom(from.consume_);
  output_.MergeFrom(from.output_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_invoke_hero_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_invoke_hero_res::CopyFrom(const gs_c_invoke_hero_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_invoke_hero_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  for (int i = 0; i < output_size(); i++) {
    if (!this->output(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_invoke_hero_res::Swap(gs_c_invoke_hero_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    heros_.Swap(&other->heros_);
    consume_.Swap(&other->consume_);
    output_.Swap(&other->output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_invoke_hero_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_invoke_hero_res_descriptor_;
  metadata.reflection = gs_c_invoke_hero_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* c_gs_equip_level_up_req_OP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_equip_level_up_req_OP_TYPE_descriptor_;
}
bool c_gs_equip_level_up_req_OP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const c_gs_equip_level_up_req_OP_TYPE c_gs_equip_level_up_req::EQUIP1_LEVEL;
const c_gs_equip_level_up_req_OP_TYPE c_gs_equip_level_up_req::EQUIP1_LEVELN;
const c_gs_equip_level_up_req_OP_TYPE c_gs_equip_level_up_req::EQUIPN_LEVELN;
const c_gs_equip_level_up_req_OP_TYPE c_gs_equip_level_up_req::OP_TYPE_MIN;
const c_gs_equip_level_up_req_OP_TYPE c_gs_equip_level_up_req::OP_TYPE_MAX;
const int c_gs_equip_level_up_req::OP_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int c_gs_equip_level_up_req::kOpTypeFieldNumber;
const int c_gs_equip_level_up_req::kHeroIdFieldNumber;
const int c_gs_equip_level_up_req::kEquipIdFieldNumber;
const int c_gs_equip_level_up_req::kLevelUpNumFieldNumber;
#endif  // !_MSC_VER

c_gs_equip_level_up_req::c_gs_equip_level_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_equip_level_up_req::InitAsDefaultInstance() {
}

c_gs_equip_level_up_req::c_gs_equip_level_up_req(const c_gs_equip_level_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_equip_level_up_req::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  hero_id_ = 0u;
  equip_id_ = 0u;
  level_up_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_equip_level_up_req::~c_gs_equip_level_up_req() {
  SharedDtor();
}

void c_gs_equip_level_up_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_equip_level_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_equip_level_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_equip_level_up_req_descriptor_;
}

const c_gs_equip_level_up_req& c_gs_equip_level_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_equip_level_up_req* c_gs_equip_level_up_req::default_instance_ = NULL;

c_gs_equip_level_up_req* c_gs_equip_level_up_req::New() const {
  return new c_gs_equip_level_up_req;
}

void c_gs_equip_level_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    hero_id_ = 0u;
    equip_id_ = 0u;
    level_up_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_equip_level_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_equip_level_up_req.OP_TYPE op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_equip_level_up_req_OP_TYPE_IsValid(value)) {
            set_op_type(static_cast< ::c_gs_equip_level_up_req_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_id;
        break;
      }

      // optional uint32 equip_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level_up_num;
        break;
      }

      // optional uint32 level_up_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_up_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_up_num_)));
          set_has_level_up_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_equip_level_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_equip_level_up_req.OP_TYPE op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional uint32 equip_id = 3;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equip_id(), output);
  }

  // optional uint32 level_up_num = 4;
  if (has_level_up_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level_up_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_equip_level_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_equip_level_up_req.OP_TYPE op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional uint32 equip_id = 3;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->equip_id(), target);
  }

  // optional uint32 level_up_num = 4;
  if (has_level_up_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level_up_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_equip_level_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_equip_level_up_req.OP_TYPE op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // required uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 equip_id = 3;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_id());
    }

    // optional uint32 level_up_num = 4;
    if (has_level_up_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_up_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_equip_level_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_equip_level_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_equip_level_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_equip_level_up_req::MergeFrom(const c_gs_equip_level_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_level_up_num()) {
      set_level_up_num(from.level_up_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_equip_level_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_equip_level_up_req::CopyFrom(const c_gs_equip_level_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_equip_level_up_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void c_gs_equip_level_up_req::Swap(c_gs_equip_level_up_req* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(equip_id_, other->equip_id_);
    std::swap(level_up_num_, other->level_up_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_equip_level_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_equip_level_up_req_descriptor_;
  metadata.reflection = c_gs_equip_level_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_equip_level_up_res::kErrorCodeFieldNumber;
const int gs_c_equip_level_up_res::kHeroIdFieldNumber;
const int gs_c_equip_level_up_res::kEquipsFieldNumber;
const int gs_c_equip_level_up_res::kConsumeFieldNumber;
#endif  // !_MSC_VER

gs_c_equip_level_up_res::gs_c_equip_level_up_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_equip_level_up_res::InitAsDefaultInstance() {
}

gs_c_equip_level_up_res::gs_c_equip_level_up_res(const gs_c_equip_level_up_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_equip_level_up_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_equip_level_up_res::~gs_c_equip_level_up_res() {
  SharedDtor();
}

void gs_c_equip_level_up_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_equip_level_up_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_equip_level_up_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_equip_level_up_res_descriptor_;
}

const gs_c_equip_level_up_res& gs_c_equip_level_up_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_equip_level_up_res* gs_c_equip_level_up_res::default_instance_ = NULL;

gs_c_equip_level_up_res* gs_c_equip_level_up_res::New() const {
  return new gs_c_equip_level_up_res;
}

void gs_c_equip_level_up_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    hero_id_ = 0u;
  }
  equips_.Clear();
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_equip_level_up_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equips;
        break;
      }

      // repeated .user_hero_equip equips = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equips;
        if (input->ExpectTag(34)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_consume;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_equip_level_up_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // repeated .user_hero_equip equips = 3;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equips(i), output);
  }

  // repeated .struct_game_element consume = 4;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->consume(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_equip_level_up_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // repeated .user_hero_equip equips = 3;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equips(i), target);
  }

  // repeated .struct_game_element consume = 4;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->consume(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_equip_level_up_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  // repeated .user_hero_equip equips = 3;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .struct_game_element consume = 4;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_equip_level_up_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_equip_level_up_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_equip_level_up_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_equip_level_up_res::MergeFrom(const gs_c_equip_level_up_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_equip_level_up_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_equip_level_up_res::CopyFrom(const gs_c_equip_level_up_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_equip_level_up_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_equip_level_up_res::Swap(gs_c_equip_level_up_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(hero_id_, other->hero_id_);
    equips_.Swap(&other->equips_);
    consume_.Swap(&other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_equip_level_up_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_equip_level_up_res_descriptor_;
  metadata.reflection = gs_c_equip_level_up_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_equip_evolution_req::kHeroIdFieldNumber;
const int c_gs_equip_evolution_req::kEquipIdFieldNumber;
#endif  // !_MSC_VER

c_gs_equip_evolution_req::c_gs_equip_evolution_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_equip_evolution_req::InitAsDefaultInstance() {
}

c_gs_equip_evolution_req::c_gs_equip_evolution_req(const c_gs_equip_evolution_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_equip_evolution_req::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  equip_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_equip_evolution_req::~c_gs_equip_evolution_req() {
  SharedDtor();
}

void c_gs_equip_evolution_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_equip_evolution_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_equip_evolution_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_equip_evolution_req_descriptor_;
}

const c_gs_equip_evolution_req& c_gs_equip_evolution_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_equip_evolution_req* c_gs_equip_evolution_req::default_instance_ = NULL;

c_gs_equip_evolution_req* c_gs_equip_evolution_req::New() const {
  return new c_gs_equip_evolution_req;
}

void c_gs_equip_evolution_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    equip_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_equip_evolution_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_id;
        break;
      }

      // required uint32 equip_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_equip_evolution_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 equip_id = 2;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equip_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_equip_evolution_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 equip_id = 2;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equip_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_equip_evolution_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 equip_id = 2;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_equip_evolution_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_equip_evolution_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_equip_evolution_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_equip_evolution_req::MergeFrom(const c_gs_equip_evolution_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_equip_evolution_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_equip_evolution_req::CopyFrom(const c_gs_equip_evolution_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_equip_evolution_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void c_gs_equip_evolution_req::Swap(c_gs_equip_evolution_req* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(equip_id_, other->equip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_equip_evolution_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_equip_evolution_req_descriptor_;
  metadata.reflection = c_gs_equip_evolution_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_equip_evolution_res::kErrorCodeFieldNumber;
const int gs_c_equip_evolution_res::kHeroIdFieldNumber;
const int gs_c_equip_evolution_res::kEquipIdFieldNumber;
const int gs_c_equip_evolution_res::kEvolutionEquipIdFieldNumber;
const int gs_c_equip_evolution_res::kConsumeFieldNumber;
#endif  // !_MSC_VER

gs_c_equip_evolution_res::gs_c_equip_evolution_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_equip_evolution_res::InitAsDefaultInstance() {
}

gs_c_equip_evolution_res::gs_c_equip_evolution_res(const gs_c_equip_evolution_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_equip_evolution_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  hero_id_ = 0u;
  equip_id_ = 0u;
  evolution_equip_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_equip_evolution_res::~gs_c_equip_evolution_res() {
  SharedDtor();
}

void gs_c_equip_evolution_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_equip_evolution_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_equip_evolution_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_equip_evolution_res_descriptor_;
}

const gs_c_equip_evolution_res& gs_c_equip_evolution_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_equip_evolution_res* gs_c_equip_evolution_res::default_instance_ = NULL;

gs_c_equip_evolution_res* gs_c_equip_evolution_res::New() const {
  return new gs_c_equip_evolution_res;
}

void gs_c_equip_evolution_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    hero_id_ = 0u;
    equip_id_ = 0u;
    evolution_equip_id_ = 0u;
  }
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_equip_evolution_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_id;
        break;
      }

      // optional uint32 equip_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_evolution_equip_id;
        break;
      }

      // optional uint32 evolution_equip_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evolution_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolution_equip_id_)));
          set_has_evolution_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_consume;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_equip_evolution_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional uint32 equip_id = 3;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equip_id(), output);
  }

  // optional uint32 evolution_equip_id = 4;
  if (has_evolution_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->evolution_equip_id(), output);
  }

  // repeated .struct_game_element consume = 5;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->consume(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_equip_evolution_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional uint32 equip_id = 3;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->equip_id(), target);
  }

  // optional uint32 evolution_equip_id = 4;
  if (has_evolution_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->evolution_equip_id(), target);
  }

  // repeated .struct_game_element consume = 5;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->consume(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_equip_evolution_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 equip_id = 3;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_id());
    }

    // optional uint32 evolution_equip_id = 4;
    if (has_evolution_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolution_equip_id());
    }

  }
  // repeated .struct_game_element consume = 5;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_equip_evolution_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_equip_evolution_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_equip_evolution_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_equip_evolution_res::MergeFrom(const gs_c_equip_evolution_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_evolution_equip_id()) {
      set_evolution_equip_id(from.evolution_equip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_equip_evolution_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_equip_evolution_res::CopyFrom(const gs_c_equip_evolution_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_equip_evolution_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_equip_evolution_res::Swap(gs_c_equip_evolution_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(equip_id_, other->equip_id_);
    std::swap(evolution_equip_id_, other->evolution_equip_id_);
    consume_.Swap(&other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_equip_evolution_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_equip_evolution_res_descriptor_;
  metadata.reflection = gs_c_equip_evolution_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_hero_evolution_req::kHeroIdFieldNumber;
#endif  // !_MSC_VER

c_gs_hero_evolution_req::c_gs_hero_evolution_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_hero_evolution_req::InitAsDefaultInstance() {
}

c_gs_hero_evolution_req::c_gs_hero_evolution_req(const c_gs_hero_evolution_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_hero_evolution_req::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_hero_evolution_req::~c_gs_hero_evolution_req() {
  SharedDtor();
}

void c_gs_hero_evolution_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_hero_evolution_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_hero_evolution_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_hero_evolution_req_descriptor_;
}

const c_gs_hero_evolution_req& c_gs_hero_evolution_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_hero_evolution_req* c_gs_hero_evolution_req::default_instance_ = NULL;

c_gs_hero_evolution_req* c_gs_hero_evolution_req::New() const {
  return new c_gs_hero_evolution_req;
}

void c_gs_hero_evolution_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_hero_evolution_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_hero_evolution_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_hero_evolution_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_hero_evolution_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_hero_evolution_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_hero_evolution_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_hero_evolution_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_hero_evolution_req::MergeFrom(const c_gs_hero_evolution_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_hero_evolution_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_hero_evolution_req::CopyFrom(const c_gs_hero_evolution_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_hero_evolution_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_hero_evolution_req::Swap(c_gs_hero_evolution_req* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_hero_evolution_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_hero_evolution_req_descriptor_;
  metadata.reflection = c_gs_hero_evolution_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_hero_evolution_res::kErrorCodeFieldNumber;
const int gs_c_hero_evolution_res::kHeroIdFieldNumber;
const int gs_c_hero_evolution_res::kConsumeFieldNumber;
const int gs_c_hero_evolution_res::kNewSkillsFieldNumber;
#endif  // !_MSC_VER

gs_c_hero_evolution_res::gs_c_hero_evolution_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_hero_evolution_res::InitAsDefaultInstance() {
}

gs_c_hero_evolution_res::gs_c_hero_evolution_res(const gs_c_hero_evolution_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_hero_evolution_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_hero_evolution_res::~gs_c_hero_evolution_res() {
  SharedDtor();
}

void gs_c_hero_evolution_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_hero_evolution_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_hero_evolution_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_hero_evolution_res_descriptor_;
}

const gs_c_hero_evolution_res& gs_c_hero_evolution_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_hero_evolution_res* gs_c_hero_evolution_res::default_instance_ = NULL;

gs_c_hero_evolution_res* gs_c_hero_evolution_res::New() const {
  return new gs_c_hero_evolution_res;
}

void gs_c_hero_evolution_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    hero_id_ = 0u;
  }
  consume_.Clear();
  new_skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_hero_evolution_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consume;
        if (input->ExpectTag(34)) goto parse_new_skills;
        break;
      }

      // repeated .user_hero_skill new_skills = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_hero_evolution_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // repeated .struct_game_element consume = 3;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->consume(i), output);
  }

  // repeated .user_hero_skill new_skills = 4;
  for (int i = 0; i < this->new_skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_hero_evolution_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // repeated .struct_game_element consume = 3;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->consume(i), target);
  }

  // repeated .user_hero_skill new_skills = 4;
  for (int i = 0; i < this->new_skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_hero_evolution_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  // repeated .struct_game_element consume = 3;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  // repeated .user_hero_skill new_skills = 4;
  total_size += 1 * this->new_skills_size();
  for (int i = 0; i < this->new_skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_hero_evolution_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_hero_evolution_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_hero_evolution_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_hero_evolution_res::MergeFrom(const gs_c_hero_evolution_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  new_skills_.MergeFrom(from.new_skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_hero_evolution_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_hero_evolution_res::CopyFrom(const gs_c_hero_evolution_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_hero_evolution_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  for (int i = 0; i < new_skills_size(); i++) {
    if (!this->new_skills(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_hero_evolution_res::Swap(gs_c_hero_evolution_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(hero_id_, other->hero_id_);
    consume_.Swap(&other->consume_);
    new_skills_.Swap(&other->new_skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_hero_evolution_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_hero_evolution_res_descriptor_;
  metadata.reflection = gs_c_hero_evolution_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_hero_star_up_req::kHeroIdFieldNumber;
#endif  // !_MSC_VER

c_gs_hero_star_up_req::c_gs_hero_star_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_hero_star_up_req::InitAsDefaultInstance() {
}

c_gs_hero_star_up_req::c_gs_hero_star_up_req(const c_gs_hero_star_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_hero_star_up_req::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_hero_star_up_req::~c_gs_hero_star_up_req() {
  SharedDtor();
}

void c_gs_hero_star_up_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_hero_star_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_hero_star_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_hero_star_up_req_descriptor_;
}

const c_gs_hero_star_up_req& c_gs_hero_star_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_hero_star_up_req* c_gs_hero_star_up_req::default_instance_ = NULL;

c_gs_hero_star_up_req* c_gs_hero_star_up_req::New() const {
  return new c_gs_hero_star_up_req;
}

void c_gs_hero_star_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_hero_star_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_hero_star_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_hero_star_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_hero_star_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_hero_star_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_hero_star_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_hero_star_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_hero_star_up_req::MergeFrom(const c_gs_hero_star_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_hero_star_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_hero_star_up_req::CopyFrom(const c_gs_hero_star_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_hero_star_up_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_hero_star_up_req::Swap(c_gs_hero_star_up_req* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_hero_star_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_hero_star_up_req_descriptor_;
  metadata.reflection = c_gs_hero_star_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_hero_star_up_res::kErrorCodeFieldNumber;
const int gs_c_hero_star_up_res::kHeroIdFieldNumber;
const int gs_c_hero_star_up_res::kConsumeFieldNumber;
#endif  // !_MSC_VER

gs_c_hero_star_up_res::gs_c_hero_star_up_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_hero_star_up_res::InitAsDefaultInstance() {
}

gs_c_hero_star_up_res::gs_c_hero_star_up_res(const gs_c_hero_star_up_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_hero_star_up_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_hero_star_up_res::~gs_c_hero_star_up_res() {
  SharedDtor();
}

void gs_c_hero_star_up_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_hero_star_up_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_hero_star_up_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_hero_star_up_res_descriptor_;
}

const gs_c_hero_star_up_res& gs_c_hero_star_up_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_hero_star_up_res* gs_c_hero_star_up_res::default_instance_ = NULL;

gs_c_hero_star_up_res* gs_c_hero_star_up_res::New() const {
  return new gs_c_hero_star_up_res;
}

void gs_c_hero_star_up_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    hero_id_ = 0u;
  }
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_hero_star_up_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consume;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_hero_star_up_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // repeated .struct_game_element consume = 3;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->consume(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_hero_star_up_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // repeated .struct_game_element consume = 3;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->consume(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_hero_star_up_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  // repeated .struct_game_element consume = 3;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_hero_star_up_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_hero_star_up_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_hero_star_up_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_hero_star_up_res::MergeFrom(const gs_c_hero_star_up_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_hero_star_up_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_hero_star_up_res::CopyFrom(const gs_c_hero_star_up_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_hero_star_up_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_hero_star_up_res::Swap(gs_c_hero_star_up_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(hero_id_, other->hero_id_);
    consume_.Swap(&other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_hero_star_up_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_hero_star_up_res_descriptor_;
  metadata.reflection = gs_c_hero_star_up_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_skill_level_up_req::kHeroIdFieldNumber;
const int c_gs_skill_level_up_req::kSkillTypeFieldNumber;
const int c_gs_skill_level_up_req::kLevelFieldNumber;
#endif  // !_MSC_VER

c_gs_skill_level_up_req::c_gs_skill_level_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_skill_level_up_req::InitAsDefaultInstance() {
}

c_gs_skill_level_up_req::c_gs_skill_level_up_req(const c_gs_skill_level_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_skill_level_up_req::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  skill_type_ = 1;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_skill_level_up_req::~c_gs_skill_level_up_req() {
  SharedDtor();
}

void c_gs_skill_level_up_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_skill_level_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_skill_level_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_skill_level_up_req_descriptor_;
}

const c_gs_skill_level_up_req& c_gs_skill_level_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_skill_level_up_req* c_gs_skill_level_up_req::default_instance_ = NULL;

c_gs_skill_level_up_req* c_gs_skill_level_up_req::New() const {
  return new c_gs_skill_level_up_req;
}

void c_gs_skill_level_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    skill_type_ = 1;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_skill_level_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_type;
        break;
      }

      // required .user_hero_skill.e_skill_type skill_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_hero_skill_e_skill_type_IsValid(value)) {
            set_skill_type(static_cast< ::user_hero_skill_e_skill_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_skill_level_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required .user_hero_skill.e_skill_type skill_type = 2;
  if (has_skill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->skill_type(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_skill_level_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required .user_hero_skill.e_skill_type skill_type = 2;
  if (has_skill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->skill_type(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_skill_level_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required .user_hero_skill.e_skill_type skill_type = 2;
    if (has_skill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->skill_type());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_skill_level_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_skill_level_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_skill_level_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_skill_level_up_req::MergeFrom(const c_gs_skill_level_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_skill_type()) {
      set_skill_type(from.skill_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_skill_level_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_skill_level_up_req::CopyFrom(const c_gs_skill_level_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_skill_level_up_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void c_gs_skill_level_up_req::Swap(c_gs_skill_level_up_req* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(skill_type_, other->skill_type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_skill_level_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_skill_level_up_req_descriptor_;
  metadata.reflection = c_gs_skill_level_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_skill_level_up_res::kErrorCodeFieldNumber;
const int gs_c_skill_level_up_res::kHeroIdFieldNumber;
const int gs_c_skill_level_up_res::kSkillTypeFieldNumber;
const int gs_c_skill_level_up_res::kLevelFieldNumber;
const int gs_c_skill_level_up_res::kConsumeFieldNumber;
#endif  // !_MSC_VER

gs_c_skill_level_up_res::gs_c_skill_level_up_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_skill_level_up_res::InitAsDefaultInstance() {
}

gs_c_skill_level_up_res::gs_c_skill_level_up_res(const gs_c_skill_level_up_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_skill_level_up_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  hero_id_ = 0u;
  skill_type_ = 1;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_skill_level_up_res::~gs_c_skill_level_up_res() {
  SharedDtor();
}

void gs_c_skill_level_up_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_skill_level_up_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_skill_level_up_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_skill_level_up_res_descriptor_;
}

const gs_c_skill_level_up_res& gs_c_skill_level_up_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_skill_level_up_res* gs_c_skill_level_up_res::default_instance_ = NULL;

gs_c_skill_level_up_res* gs_c_skill_level_up_res::New() const {
  return new gs_c_skill_level_up_res;
}

void gs_c_skill_level_up_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    hero_id_ = 0u;
    skill_type_ = 1;
    level_ = 0u;
  }
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_skill_level_up_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_type;
        break;
      }

      // optional .user_hero_skill.e_skill_type skill_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_hero_skill_e_skill_type_IsValid(value)) {
            set_skill_type(static_cast< ::user_hero_skill_e_skill_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_consume;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_skill_level_up_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional .user_hero_skill.e_skill_type skill_type = 3;
  if (has_skill_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->skill_type(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // repeated .struct_game_element consume = 5;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->consume(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_skill_level_up_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional .user_hero_skill.e_skill_type skill_type = 3;
  if (has_skill_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->skill_type(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // repeated .struct_game_element consume = 5;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->consume(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_skill_level_up_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional .user_hero_skill.e_skill_type skill_type = 3;
    if (has_skill_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->skill_type());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated .struct_game_element consume = 5;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_skill_level_up_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_skill_level_up_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_skill_level_up_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_skill_level_up_res::MergeFrom(const gs_c_skill_level_up_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_skill_type()) {
      set_skill_type(from.skill_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_skill_level_up_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_skill_level_up_res::CopyFrom(const gs_c_skill_level_up_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_skill_level_up_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_skill_level_up_res::Swap(gs_c_skill_level_up_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(skill_type_, other->skill_type_);
    std::swap(level_, other->level_);
    consume_.Swap(&other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_skill_level_up_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_skill_level_up_res_descriptor_;
  metadata.reflection = gs_c_skill_level_up_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* c_gs_invoke_req_EINVOKE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_invoke_req_EINVOKE_TYPE_descriptor_;
}
bool c_gs_invoke_req_EINVOKE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req::GOLD_FREE;
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req::GOLD_1;
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req::GOLD_N;
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req::DIAMOND_FREE;
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req::DIAMOND_1;
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req::DIAMOND_N;
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req::VIP_DIAMOND_1;
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req::VIP_DIAMOND_N;
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req::FRIEND_POINT;
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req::EINVOKE_TYPE_MIN;
const c_gs_invoke_req_EINVOKE_TYPE c_gs_invoke_req::EINVOKE_TYPE_MAX;
const int c_gs_invoke_req::EINVOKE_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int c_gs_invoke_req::kInvokeTypeFieldNumber;
const int c_gs_invoke_req::kInvokeNumFieldNumber;
#endif  // !_MSC_VER

c_gs_invoke_req::c_gs_invoke_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_invoke_req::InitAsDefaultInstance() {
}

c_gs_invoke_req::c_gs_invoke_req(const c_gs_invoke_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_invoke_req::SharedCtor() {
  _cached_size_ = 0;
  invoke_type_ = 1;
  invoke_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_invoke_req::~c_gs_invoke_req() {
  SharedDtor();
}

void c_gs_invoke_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_invoke_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_invoke_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_invoke_req_descriptor_;
}

const c_gs_invoke_req& c_gs_invoke_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_invoke_req* c_gs_invoke_req::default_instance_ = NULL;

c_gs_invoke_req* c_gs_invoke_req::New() const {
  return new c_gs_invoke_req;
}

void c_gs_invoke_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    invoke_type_ = 1;
    invoke_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_invoke_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_invoke_req.EINVOKE_TYPE invoke_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_invoke_req_EINVOKE_TYPE_IsValid(value)) {
            set_invoke_type(static_cast< ::c_gs_invoke_req_EINVOKE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_invoke_num;
        break;
      }

      // optional uint32 invoke_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_num_)));
          set_has_invoke_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_invoke_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_invoke_req.EINVOKE_TYPE invoke_type = 1;
  if (has_invoke_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->invoke_type(), output);
  }

  // optional uint32 invoke_num = 2;
  if (has_invoke_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->invoke_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_invoke_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_invoke_req.EINVOKE_TYPE invoke_type = 1;
  if (has_invoke_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->invoke_type(), target);
  }

  // optional uint32 invoke_num = 2;
  if (has_invoke_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->invoke_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_invoke_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_invoke_req.EINVOKE_TYPE invoke_type = 1;
    if (has_invoke_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->invoke_type());
    }

    // optional uint32 invoke_num = 2;
    if (has_invoke_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_invoke_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_invoke_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_invoke_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_invoke_req::MergeFrom(const c_gs_invoke_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invoke_type()) {
      set_invoke_type(from.invoke_type());
    }
    if (from.has_invoke_num()) {
      set_invoke_num(from.invoke_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_invoke_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_invoke_req::CopyFrom(const c_gs_invoke_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_invoke_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_invoke_req::Swap(c_gs_invoke_req* other) {
  if (other != this) {
    std::swap(invoke_type_, other->invoke_type_);
    std::swap(invoke_num_, other->invoke_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_invoke_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_invoke_req_descriptor_;
  metadata.reflection = c_gs_invoke_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_invoke_res::kErrorCodeFieldNumber;
const int gs_c_invoke_res::kConsumeFieldNumber;
const int gs_c_invoke_res::kOuputFieldNumber;
const int gs_c_invoke_res::kHerosFieldNumber;
#endif  // !_MSC_VER

gs_c_invoke_res::gs_c_invoke_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_invoke_res::InitAsDefaultInstance() {
}

gs_c_invoke_res::gs_c_invoke_res(const gs_c_invoke_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_invoke_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_invoke_res::~gs_c_invoke_res() {
  SharedDtor();
}

void gs_c_invoke_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_invoke_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_invoke_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_invoke_res_descriptor_;
}

const gs_c_invoke_res& gs_c_invoke_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_invoke_res* gs_c_invoke_res::default_instance_ = NULL;

gs_c_invoke_res* gs_c_invoke_res::New() const {
  return new gs_c_invoke_res;
}

void gs_c_invoke_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  consume_.Clear();
  ouput_.Clear();
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_invoke_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        if (input->ExpectTag(26)) goto parse_ouput;
        break;
      }

      // repeated .struct_game_element ouput = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ouput:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ouput()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ouput;
        if (input->ExpectTag(34)) goto parse_heros;
        break;
      }

      // repeated .user_hero heros = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_invoke_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .struct_game_element consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consume(i), output);
  }

  // repeated .struct_game_element ouput = 3;
  for (int i = 0; i < this->ouput_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ouput(i), output);
  }

  // repeated .user_hero heros = 4;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_invoke_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_game_element consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consume(i), target);
  }

  // repeated .struct_game_element ouput = 3;
  for (int i = 0; i < this->ouput_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ouput(i), target);
  }

  // repeated .user_hero heros = 4;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_invoke_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .struct_game_element consume = 2;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  // repeated .struct_game_element ouput = 3;
  total_size += 1 * this->ouput_size();
  for (int i = 0; i < this->ouput_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ouput(i));
  }

  // repeated .user_hero heros = 4;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_invoke_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_invoke_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_invoke_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_invoke_res::MergeFrom(const gs_c_invoke_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  ouput_.MergeFrom(from.ouput_);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_invoke_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_invoke_res::CopyFrom(const gs_c_invoke_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_invoke_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ouput_size(); i++) {
    if (!this->ouput(i).IsInitialized()) return false;
  }
  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_invoke_res::Swap(gs_c_invoke_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    consume_.Swap(&other->consume_);
    ouput_.Swap(&other->ouput_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_invoke_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_invoke_res_descriptor_;
  metadata.reflection = gs_c_invoke_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int struct_game_element_array::kItemsFieldNumber;
#endif  // !_MSC_VER

struct_game_element_array::struct_game_element_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void struct_game_element_array::InitAsDefaultInstance() {
}

struct_game_element_array::struct_game_element_array(const struct_game_element_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void struct_game_element_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

struct_game_element_array::~struct_game_element_array() {
  SharedDtor();
}

void struct_game_element_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void struct_game_element_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_game_element_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_game_element_array_descriptor_;
}

const struct_game_element_array& struct_game_element_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

struct_game_element_array* struct_game_element_array::default_instance_ = NULL;

struct_game_element_array* struct_game_element_array::New() const {
  return new struct_game_element_array;
}

void struct_game_element_array::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool struct_game_element_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .struct_game_element items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void struct_game_element_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .struct_game_element items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* struct_game_element_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .struct_game_element items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int struct_game_element_array::ByteSize() const {
  int total_size = 0;

  // repeated .struct_game_element items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_game_element_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const struct_game_element_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const struct_game_element_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void struct_game_element_array::MergeFrom(const struct_game_element_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void struct_game_element_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_game_element_array::CopyFrom(const struct_game_element_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool struct_game_element_array::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void struct_game_element_array::Swap(struct_game_element_array* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata struct_game_element_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_game_element_array_descriptor_;
  metadata.reflection = struct_game_element_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_diamond_speed_kill_req::kNumFieldNumber;
const int c_gs_diamond_speed_kill_req::kSubTaskIdFieldNumber;
#endif  // !_MSC_VER

c_gs_diamond_speed_kill_req::c_gs_diamond_speed_kill_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_diamond_speed_kill_req::InitAsDefaultInstance() {
}

c_gs_diamond_speed_kill_req::c_gs_diamond_speed_kill_req(const c_gs_diamond_speed_kill_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_diamond_speed_kill_req::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  sub_task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_diamond_speed_kill_req::~c_gs_diamond_speed_kill_req() {
  SharedDtor();
}

void c_gs_diamond_speed_kill_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_diamond_speed_kill_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_diamond_speed_kill_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_diamond_speed_kill_req_descriptor_;
}

const c_gs_diamond_speed_kill_req& c_gs_diamond_speed_kill_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_diamond_speed_kill_req* c_gs_diamond_speed_kill_req::default_instance_ = NULL;

c_gs_diamond_speed_kill_req* c_gs_diamond_speed_kill_req::New() const {
  return new c_gs_diamond_speed_kill_req;
}

void c_gs_diamond_speed_kill_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
    sub_task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_diamond_speed_kill_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sub_task_id;
        break;
      }

      // required uint32 sub_task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_task_id_)));
          set_has_sub_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_diamond_speed_kill_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // required uint32 sub_task_id = 2;
  if (has_sub_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sub_task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_diamond_speed_kill_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // required uint32 sub_task_id = 2;
  if (has_sub_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sub_task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_diamond_speed_kill_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required uint32 sub_task_id = 2;
    if (has_sub_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_diamond_speed_kill_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_diamond_speed_kill_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_diamond_speed_kill_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_diamond_speed_kill_req::MergeFrom(const c_gs_diamond_speed_kill_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_sub_task_id()) {
      set_sub_task_id(from.sub_task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_diamond_speed_kill_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_diamond_speed_kill_req::CopyFrom(const c_gs_diamond_speed_kill_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_diamond_speed_kill_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void c_gs_diamond_speed_kill_req::Swap(c_gs_diamond_speed_kill_req* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(sub_task_id_, other->sub_task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_diamond_speed_kill_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_diamond_speed_kill_req_descriptor_;
  metadata.reflection = c_gs_diamond_speed_kill_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_diamond_speed_kill_res::kErrorCodeFieldNumber;
const int gs_c_diamond_speed_kill_res::kConsumeFieldNumber;
const int gs_c_diamond_speed_kill_res::kItemsArrFieldNumber;
const int gs_c_diamond_speed_kill_res::kShopFieldNumber;
#endif  // !_MSC_VER

gs_c_diamond_speed_kill_res::gs_c_diamond_speed_kill_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_diamond_speed_kill_res::InitAsDefaultInstance() {
  shop_ = const_cast< ::user_shop*>(&::user_shop::default_instance());
}

gs_c_diamond_speed_kill_res::gs_c_diamond_speed_kill_res(const gs_c_diamond_speed_kill_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_diamond_speed_kill_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  shop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_diamond_speed_kill_res::~gs_c_diamond_speed_kill_res() {
  SharedDtor();
}

void gs_c_diamond_speed_kill_res::SharedDtor() {
  if (this != default_instance_) {
    delete shop_;
  }
}

void gs_c_diamond_speed_kill_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_diamond_speed_kill_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_diamond_speed_kill_res_descriptor_;
}

const gs_c_diamond_speed_kill_res& gs_c_diamond_speed_kill_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_diamond_speed_kill_res* gs_c_diamond_speed_kill_res::default_instance_ = NULL;

gs_c_diamond_speed_kill_res* gs_c_diamond_speed_kill_res::New() const {
  return new gs_c_diamond_speed_kill_res;
}

void gs_c_diamond_speed_kill_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_shop()) {
      if (shop_ != NULL) shop_->::user_shop::Clear();
    }
  }
  consume_.Clear();
  items_arr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_diamond_speed_kill_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        if (input->ExpectTag(26)) goto parse_items_arr;
        break;
      }

      // repeated .struct_game_element_array items_arr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items_arr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items_arr;
        if (input->ExpectTag(42)) goto parse_shop;
        break;
      }

      // optional .user_shop shop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_diamond_speed_kill_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .struct_game_element consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consume(i), output);
  }

  // repeated .struct_game_element_array items_arr = 3;
  for (int i = 0; i < this->items_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items_arr(i), output);
  }

  // optional .user_shop shop = 5;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_diamond_speed_kill_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_game_element consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consume(i), target);
  }

  // repeated .struct_game_element_array items_arr = 3;
  for (int i = 0; i < this->items_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items_arr(i), target);
  }

  // optional .user_shop shop = 5;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_diamond_speed_kill_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .user_shop shop = 5;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

  }
  // repeated .struct_game_element consume = 2;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  // repeated .struct_game_element_array items_arr = 3;
  total_size += 1 * this->items_arr_size();
  for (int i = 0; i < this->items_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items_arr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_diamond_speed_kill_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_diamond_speed_kill_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_diamond_speed_kill_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_diamond_speed_kill_res::MergeFrom(const gs_c_diamond_speed_kill_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  items_arr_.MergeFrom(from.items_arr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_shop()) {
      mutable_shop()->::user_shop::MergeFrom(from.shop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_diamond_speed_kill_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_diamond_speed_kill_res::CopyFrom(const gs_c_diamond_speed_kill_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_diamond_speed_kill_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  for (int i = 0; i < items_arr_size(); i++) {
    if (!this->items_arr(i).IsInitialized()) return false;
  }
  if (has_shop()) {
    if (!this->shop().IsInitialized()) return false;
  }
  return true;
}

void gs_c_diamond_speed_kill_res::Swap(gs_c_diamond_speed_kill_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    consume_.Swap(&other->consume_);
    items_arr_.Swap(&other->items_arr_);
    std::swap(shop_, other->shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_diamond_speed_kill_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_diamond_speed_kill_res_descriptor_;
  metadata.reflection = gs_c_diamond_speed_kill_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_use_item_req::kItemIdFieldNumber;
const int c_gs_use_item_req::kNumFieldNumber;
const int c_gs_use_item_req::kTargetIdFieldNumber;
#endif  // !_MSC_VER

c_gs_use_item_req::c_gs_use_item_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_use_item_req::InitAsDefaultInstance() {
}

c_gs_use_item_req::c_gs_use_item_req(const c_gs_use_item_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_use_item_req::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  num_ = 0u;
  target_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_use_item_req::~c_gs_use_item_req() {
  SharedDtor();
}

void c_gs_use_item_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_use_item_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_use_item_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_use_item_req_descriptor_;
}

const c_gs_use_item_req& c_gs_use_item_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_use_item_req* c_gs_use_item_req::default_instance_ = NULL;

c_gs_use_item_req* c_gs_use_item_req::New() const {
  return new c_gs_use_item_req;
}

void c_gs_use_item_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    num_ = 0u;
    target_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_use_item_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_id;
        break;
      }

      // optional uint32 target_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_use_item_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint32 target_id = 3;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_use_item_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint32 target_id = 3;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_use_item_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 target_id = 3;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_use_item_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_use_item_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_use_item_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_use_item_req::MergeFrom(const c_gs_use_item_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_use_item_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_use_item_req::CopyFrom(const c_gs_use_item_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_use_item_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void c_gs_use_item_req::Swap(c_gs_use_item_req* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(num_, other->num_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_use_item_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_use_item_req_descriptor_;
  metadata.reflection = c_gs_use_item_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_use_item_res::kErrorCodeFieldNumber;
const int gs_c_use_item_res::kConsumeFieldNumber;
const int gs_c_use_item_res::kItemsArrFieldNumber;
const int gs_c_use_item_res::kShopFieldNumber;
#endif  // !_MSC_VER

gs_c_use_item_res::gs_c_use_item_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_use_item_res::InitAsDefaultInstance() {
  shop_ = const_cast< ::user_shop*>(&::user_shop::default_instance());
}

gs_c_use_item_res::gs_c_use_item_res(const gs_c_use_item_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_use_item_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  shop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_use_item_res::~gs_c_use_item_res() {
  SharedDtor();
}

void gs_c_use_item_res::SharedDtor() {
  if (this != default_instance_) {
    delete shop_;
  }
}

void gs_c_use_item_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_use_item_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_use_item_res_descriptor_;
}

const gs_c_use_item_res& gs_c_use_item_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_use_item_res* gs_c_use_item_res::default_instance_ = NULL;

gs_c_use_item_res* gs_c_use_item_res::New() const {
  return new gs_c_use_item_res;
}

void gs_c_use_item_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_shop()) {
      if (shop_ != NULL) shop_->::user_shop::Clear();
    }
  }
  consume_.Clear();
  items_arr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_use_item_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        if (input->ExpectTag(26)) goto parse_items_arr;
        break;
      }

      // repeated .struct_game_element_array items_arr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items_arr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items_arr;
        if (input->ExpectTag(42)) goto parse_shop;
        break;
      }

      // optional .user_shop shop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_use_item_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .struct_game_element consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consume(i), output);
  }

  // repeated .struct_game_element_array items_arr = 3;
  for (int i = 0; i < this->items_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items_arr(i), output);
  }

  // optional .user_shop shop = 5;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_use_item_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_game_element consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consume(i), target);
  }

  // repeated .struct_game_element_array items_arr = 3;
  for (int i = 0; i < this->items_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items_arr(i), target);
  }

  // optional .user_shop shop = 5;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->shop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_use_item_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .user_shop shop = 5;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

  }
  // repeated .struct_game_element consume = 2;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  // repeated .struct_game_element_array items_arr = 3;
  total_size += 1 * this->items_arr_size();
  for (int i = 0; i < this->items_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items_arr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_use_item_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_use_item_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_use_item_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_use_item_res::MergeFrom(const gs_c_use_item_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  items_arr_.MergeFrom(from.items_arr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_shop()) {
      mutable_shop()->::user_shop::MergeFrom(from.shop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_use_item_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_use_item_res::CopyFrom(const gs_c_use_item_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_use_item_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  for (int i = 0; i < items_arr_size(); i++) {
    if (!this->items_arr(i).IsInitialized()) return false;
  }
  if (has_shop()) {
    if (!this->shop().IsInitialized()) return false;
  }
  return true;
}

void gs_c_use_item_res::Swap(gs_c_use_item_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    consume_.Swap(&other->consume_);
    items_arr_.Swap(&other->items_arr_);
    std::swap(shop_, other->shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_use_item_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_use_item_res_descriptor_;
  metadata.reflection = gs_c_use_item_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* c_gs_shop_info_req_PULLTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_shop_info_req_PULLTYPE_descriptor_;
}
bool c_gs_shop_info_req_PULLTYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const c_gs_shop_info_req_PULLTYPE c_gs_shop_info_req::ONE;
const c_gs_shop_info_req_PULLTYPE c_gs_shop_info_req::ALL;
const c_gs_shop_info_req_PULLTYPE c_gs_shop_info_req::PULLTYPE_MIN;
const c_gs_shop_info_req_PULLTYPE c_gs_shop_info_req::PULLTYPE_MAX;
const int c_gs_shop_info_req::PULLTYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int c_gs_shop_info_req::kPullTypeFieldNumber;
const int c_gs_shop_info_req::kShopTypeFieldNumber;
#endif  // !_MSC_VER

c_gs_shop_info_req::c_gs_shop_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_shop_info_req::InitAsDefaultInstance() {
}

c_gs_shop_info_req::c_gs_shop_info_req(const c_gs_shop_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_shop_info_req::SharedCtor() {
  _cached_size_ = 0;
  pull_type_ = 1;
  shop_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_shop_info_req::~c_gs_shop_info_req() {
  SharedDtor();
}

void c_gs_shop_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_shop_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_shop_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_shop_info_req_descriptor_;
}

const c_gs_shop_info_req& c_gs_shop_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_shop_info_req* c_gs_shop_info_req::default_instance_ = NULL;

c_gs_shop_info_req* c_gs_shop_info_req::New() const {
  return new c_gs_shop_info_req;
}

void c_gs_shop_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pull_type_ = 1;
    shop_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_shop_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_shop_info_req.PULLTYPE pull_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_shop_info_req_PULLTYPE_IsValid(value)) {
            set_pull_type(static_cast< ::c_gs_shop_info_req_PULLTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shop_type;
        break;
      }

      // optional .user_shop.ESHOPTYPE shop_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_shop_ESHOPTYPE_IsValid(value)) {
            set_shop_type(static_cast< ::user_shop_ESHOPTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_shop_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_shop_info_req.PULLTYPE pull_type = 1;
  if (has_pull_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pull_type(), output);
  }

  // optional .user_shop.ESHOPTYPE shop_type = 2;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->shop_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_shop_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_shop_info_req.PULLTYPE pull_type = 1;
  if (has_pull_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pull_type(), target);
  }

  // optional .user_shop.ESHOPTYPE shop_type = 2;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->shop_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_shop_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_shop_info_req.PULLTYPE pull_type = 1;
    if (has_pull_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pull_type());
    }

    // optional .user_shop.ESHOPTYPE shop_type = 2;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shop_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_shop_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_shop_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_shop_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_shop_info_req::MergeFrom(const c_gs_shop_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pull_type()) {
      set_pull_type(from.pull_type());
    }
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_shop_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_shop_info_req::CopyFrom(const c_gs_shop_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_shop_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_shop_info_req::Swap(c_gs_shop_info_req* other) {
  if (other != this) {
    std::swap(pull_type_, other->pull_type_);
    std::swap(shop_type_, other->shop_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_shop_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_shop_info_req_descriptor_;
  metadata.reflection = c_gs_shop_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_shop_info_res::kErrorCodeFieldNumber;
const int gs_c_shop_info_res::kShopsFieldNumber;
#endif  // !_MSC_VER

gs_c_shop_info_res::gs_c_shop_info_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_shop_info_res::InitAsDefaultInstance() {
}

gs_c_shop_info_res::gs_c_shop_info_res(const gs_c_shop_info_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_shop_info_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_shop_info_res::~gs_c_shop_info_res() {
  SharedDtor();
}

void gs_c_shop_info_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_shop_info_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_shop_info_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_shop_info_res_descriptor_;
}

const gs_c_shop_info_res& gs_c_shop_info_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_shop_info_res* gs_c_shop_info_res::default_instance_ = NULL;

gs_c_shop_info_res* gs_c_shop_info_res::New() const {
  return new gs_c_shop_info_res;
}

void gs_c_shop_info_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  shops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_shop_info_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shops;
        break;
      }

      // repeated .user_shop shops = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shops;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_shop_info_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .user_shop shops = 2;
  for (int i = 0; i < this->shops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shops(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_shop_info_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .user_shop shops = 2;
  for (int i = 0; i < this->shops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shops(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_shop_info_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .user_shop shops = 2;
  total_size += 1 * this->shops_size();
  for (int i = 0; i < this->shops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_shop_info_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_shop_info_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_shop_info_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_shop_info_res::MergeFrom(const gs_c_shop_info_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  shops_.MergeFrom(from.shops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_shop_info_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_shop_info_res::CopyFrom(const gs_c_shop_info_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_shop_info_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < shops_size(); i++) {
    if (!this->shops(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_shop_info_res::Swap(gs_c_shop_info_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    shops_.Swap(&other->shops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_shop_info_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_shop_info_res_descriptor_;
  metadata.reflection = gs_c_shop_info_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_shop_buy_item_req::kShopTypeFieldNumber;
const int c_gs_shop_buy_item_req::kPosFieldNumber;
#endif  // !_MSC_VER

c_gs_shop_buy_item_req::c_gs_shop_buy_item_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_shop_buy_item_req::InitAsDefaultInstance() {
}

c_gs_shop_buy_item_req::c_gs_shop_buy_item_req(const c_gs_shop_buy_item_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_shop_buy_item_req::SharedCtor() {
  _cached_size_ = 0;
  shop_type_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_shop_buy_item_req::~c_gs_shop_buy_item_req() {
  SharedDtor();
}

void c_gs_shop_buy_item_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_shop_buy_item_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_shop_buy_item_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_shop_buy_item_req_descriptor_;
}

const c_gs_shop_buy_item_req& c_gs_shop_buy_item_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_shop_buy_item_req* c_gs_shop_buy_item_req::default_instance_ = NULL;

c_gs_shop_buy_item_req* c_gs_shop_buy_item_req::New() const {
  return new c_gs_shop_buy_item_req;
}

void c_gs_shop_buy_item_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_type_ = 0;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_shop_buy_item_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .user_shop.ESHOPTYPE shop_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_shop_ESHOPTYPE_IsValid(value)) {
            set_shop_type(static_cast< ::user_shop_ESHOPTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // required uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_shop_buy_item_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .user_shop.ESHOPTYPE shop_type = 1;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shop_type(), output);
  }

  // required uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_shop_buy_item_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .user_shop.ESHOPTYPE shop_type = 1;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shop_type(), target);
  }

  // required uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_shop_buy_item_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .user_shop.ESHOPTYPE shop_type = 1;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shop_type());
    }

    // required uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_shop_buy_item_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_shop_buy_item_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_shop_buy_item_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_shop_buy_item_req::MergeFrom(const c_gs_shop_buy_item_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_shop_buy_item_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_shop_buy_item_req::CopyFrom(const c_gs_shop_buy_item_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_shop_buy_item_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void c_gs_shop_buy_item_req::Swap(c_gs_shop_buy_item_req* other) {
  if (other != this) {
    std::swap(shop_type_, other->shop_type_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_shop_buy_item_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_shop_buy_item_req_descriptor_;
  metadata.reflection = c_gs_shop_buy_item_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_shop_buy_item_res::kErrorCodeFieldNumber;
const int gs_c_shop_buy_item_res::kRefreshedShopFieldNumber;
const int gs_c_shop_buy_item_res::kShopTypeFieldNumber;
const int gs_c_shop_buy_item_res::kPosFieldNumber;
const int gs_c_shop_buy_item_res::kOutputFieldNumber;
const int gs_c_shop_buy_item_res::kConsumeFieldNumber;
#endif  // !_MSC_VER

gs_c_shop_buy_item_res::gs_c_shop_buy_item_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_shop_buy_item_res::InitAsDefaultInstance() {
  refreshed_shop_ = const_cast< ::user_shop*>(&::user_shop::default_instance());
}

gs_c_shop_buy_item_res::gs_c_shop_buy_item_res(const gs_c_shop_buy_item_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_shop_buy_item_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  refreshed_shop_ = NULL;
  shop_type_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_shop_buy_item_res::~gs_c_shop_buy_item_res() {
  SharedDtor();
}

void gs_c_shop_buy_item_res::SharedDtor() {
  if (this != default_instance_) {
    delete refreshed_shop_;
  }
}

void gs_c_shop_buy_item_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_shop_buy_item_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_shop_buy_item_res_descriptor_;
}

const gs_c_shop_buy_item_res& gs_c_shop_buy_item_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_shop_buy_item_res* gs_c_shop_buy_item_res::default_instance_ = NULL;

gs_c_shop_buy_item_res* gs_c_shop_buy_item_res::New() const {
  return new gs_c_shop_buy_item_res;
}

void gs_c_shop_buy_item_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_refreshed_shop()) {
      if (refreshed_shop_ != NULL) refreshed_shop_->::user_shop::Clear();
    }
    shop_type_ = 0;
    pos_ = 0u;
  }
  output_.Clear();
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_shop_buy_item_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_refreshed_shop;
        break;
      }

      // optional .user_shop refreshed_shop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refreshed_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_refreshed_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shop_type;
        break;
      }

      // optional .user_shop.ESHOPTYPE shop_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shop_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_shop_ESHOPTYPE_IsValid(value)) {
            set_shop_type(static_cast< ::user_shop_ESHOPTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_output;
        break;
      }

      // repeated .struct_game_element output = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_output;
        if (input->ExpectTag(50)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_consume;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_shop_buy_item_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional .user_shop refreshed_shop = 2;
  if (has_refreshed_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->refreshed_shop(), output);
  }

  // optional .user_shop.ESHOPTYPE shop_type = 3;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->shop_type(), output);
  }

  // optional uint32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pos(), output);
  }

  // repeated .struct_game_element output = 5;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->output(i), output);
  }

  // repeated .struct_game_element consume = 6;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->consume(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_shop_buy_item_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional .user_shop refreshed_shop = 2;
  if (has_refreshed_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->refreshed_shop(), target);
  }

  // optional .user_shop.ESHOPTYPE shop_type = 3;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->shop_type(), target);
  }

  // optional uint32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pos(), target);
  }

  // repeated .struct_game_element output = 5;
  for (int i = 0; i < this->output_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->output(i), target);
  }

  // repeated .struct_game_element consume = 6;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->consume(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_shop_buy_item_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .user_shop refreshed_shop = 2;
    if (has_refreshed_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refreshed_shop());
    }

    // optional .user_shop.ESHOPTYPE shop_type = 3;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shop_type());
    }

    // optional uint32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  // repeated .struct_game_element output = 5;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output(i));
  }

  // repeated .struct_game_element consume = 6;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_shop_buy_item_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_shop_buy_item_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_shop_buy_item_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_shop_buy_item_res::MergeFrom(const gs_c_shop_buy_item_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  output_.MergeFrom(from.output_);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_refreshed_shop()) {
      mutable_refreshed_shop()->::user_shop::MergeFrom(from.refreshed_shop());
    }
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_shop_buy_item_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_shop_buy_item_res::CopyFrom(const gs_c_shop_buy_item_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_shop_buy_item_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_refreshed_shop()) {
    if (!this->refreshed_shop().IsInitialized()) return false;
  }
  for (int i = 0; i < output_size(); i++) {
    if (!this->output(i).IsInitialized()) return false;
  }
  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_shop_buy_item_res::Swap(gs_c_shop_buy_item_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(refreshed_shop_, other->refreshed_shop_);
    std::swap(shop_type_, other->shop_type_);
    std::swap(pos_, other->pos_);
    output_.Swap(&other->output_);
    consume_.Swap(&other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_shop_buy_item_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_shop_buy_item_res_descriptor_;
  metadata.reflection = gs_c_shop_buy_item_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_shop_refresh_req::kShopTypeFieldNumber;
#endif  // !_MSC_VER

c_gs_shop_refresh_req::c_gs_shop_refresh_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_shop_refresh_req::InitAsDefaultInstance() {
}

c_gs_shop_refresh_req::c_gs_shop_refresh_req(const c_gs_shop_refresh_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_shop_refresh_req::SharedCtor() {
  _cached_size_ = 0;
  shop_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_shop_refresh_req::~c_gs_shop_refresh_req() {
  SharedDtor();
}

void c_gs_shop_refresh_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_shop_refresh_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_shop_refresh_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_shop_refresh_req_descriptor_;
}

const c_gs_shop_refresh_req& c_gs_shop_refresh_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_shop_refresh_req* c_gs_shop_refresh_req::default_instance_ = NULL;

c_gs_shop_refresh_req* c_gs_shop_refresh_req::New() const {
  return new c_gs_shop_refresh_req;
}

void c_gs_shop_refresh_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_shop_refresh_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .user_shop.ESHOPTYPE shop_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_shop_ESHOPTYPE_IsValid(value)) {
            set_shop_type(static_cast< ::user_shop_ESHOPTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_shop_refresh_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .user_shop.ESHOPTYPE shop_type = 1;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shop_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_shop_refresh_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .user_shop.ESHOPTYPE shop_type = 1;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shop_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_shop_refresh_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .user_shop.ESHOPTYPE shop_type = 1;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shop_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_shop_refresh_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_shop_refresh_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_shop_refresh_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_shop_refresh_req::MergeFrom(const c_gs_shop_refresh_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_shop_refresh_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_shop_refresh_req::CopyFrom(const c_gs_shop_refresh_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_shop_refresh_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_shop_refresh_req::Swap(c_gs_shop_refresh_req* other) {
  if (other != this) {
    std::swap(shop_type_, other->shop_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_shop_refresh_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_shop_refresh_req_descriptor_;
  metadata.reflection = c_gs_shop_refresh_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_shop_refresh_res::kErrorCodeFieldNumber;
const int gs_c_shop_refresh_res::kShopFieldNumber;
const int gs_c_shop_refresh_res::kConsumeFieldNumber;
#endif  // !_MSC_VER

gs_c_shop_refresh_res::gs_c_shop_refresh_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_shop_refresh_res::InitAsDefaultInstance() {
  shop_ = const_cast< ::user_shop*>(&::user_shop::default_instance());
}

gs_c_shop_refresh_res::gs_c_shop_refresh_res(const gs_c_shop_refresh_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_shop_refresh_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  shop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_shop_refresh_res::~gs_c_shop_refresh_res() {
  SharedDtor();
}

void gs_c_shop_refresh_res::SharedDtor() {
  if (this != default_instance_) {
    delete shop_;
  }
}

void gs_c_shop_refresh_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_shop_refresh_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_shop_refresh_res_descriptor_;
}

const gs_c_shop_refresh_res& gs_c_shop_refresh_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_shop_refresh_res* gs_c_shop_refresh_res::default_instance_ = NULL;

gs_c_shop_refresh_res* gs_c_shop_refresh_res::New() const {
  return new gs_c_shop_refresh_res;
}

void gs_c_shop_refresh_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_shop()) {
      if (shop_ != NULL) shop_->::user_shop::Clear();
    }
  }
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_shop_refresh_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shop;
        break;
      }

      // optional .user_shop shop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consume;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_shop_refresh_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional .user_shop shop = 2;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shop(), output);
  }

  // repeated .struct_game_element consume = 3;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->consume(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_shop_refresh_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional .user_shop shop = 2;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shop(), target);
  }

  // repeated .struct_game_element consume = 3;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->consume(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_shop_refresh_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .user_shop shop = 2;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

  }
  // repeated .struct_game_element consume = 3;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_shop_refresh_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_shop_refresh_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_shop_refresh_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_shop_refresh_res::MergeFrom(const gs_c_shop_refresh_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_shop()) {
      mutable_shop()->::user_shop::MergeFrom(from.shop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_shop_refresh_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_shop_refresh_res::CopyFrom(const gs_c_shop_refresh_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_shop_refresh_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_shop()) {
    if (!this->shop().IsInitialized()) return false;
  }
  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_shop_refresh_res::Swap(gs_c_shop_refresh_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(shop_, other->shop_);
    consume_.Swap(&other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_shop_refresh_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_shop_refresh_res_descriptor_;
  metadata.reflection = gs_c_shop_refresh_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_sell_req::kItemsFieldNumber;
#endif  // !_MSC_VER

c_gs_sell_req::c_gs_sell_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_sell_req::InitAsDefaultInstance() {
}

c_gs_sell_req::c_gs_sell_req(const c_gs_sell_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_sell_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_sell_req::~c_gs_sell_req() {
  SharedDtor();
}

void c_gs_sell_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_sell_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_sell_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_sell_req_descriptor_;
}

const c_gs_sell_req& c_gs_sell_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_sell_req* c_gs_sell_req::default_instance_ = NULL;

c_gs_sell_req* c_gs_sell_req::New() const {
  return new c_gs_sell_req;
}

void c_gs_sell_req::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_sell_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .struct_game_element items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_sell_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .struct_game_element items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_sell_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .struct_game_element items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_sell_req::ByteSize() const {
  int total_size = 0;

  // repeated .struct_game_element items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_sell_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_sell_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_sell_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_sell_req::MergeFrom(const c_gs_sell_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_sell_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_sell_req::CopyFrom(const c_gs_sell_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_sell_req::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void c_gs_sell_req::Swap(c_gs_sell_req* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_sell_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_sell_req_descriptor_;
  metadata.reflection = c_gs_sell_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_sell_res::kErrorCodeFieldNumber;
const int gs_c_sell_res::kElesFieldNumber;
#endif  // !_MSC_VER

gs_c_sell_res::gs_c_sell_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_sell_res::InitAsDefaultInstance() {
}

gs_c_sell_res::gs_c_sell_res(const gs_c_sell_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_sell_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_sell_res::~gs_c_sell_res() {
  SharedDtor();
}

void gs_c_sell_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_sell_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_sell_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_sell_res_descriptor_;
}

const gs_c_sell_res& gs_c_sell_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_sell_res* gs_c_sell_res::default_instance_ = NULL;

gs_c_sell_res* gs_c_sell_res::New() const {
  return new gs_c_sell_res;
}

void gs_c_sell_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  eles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_sell_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eles;
        break;
      }

      // repeated .struct_game_element eles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_sell_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .struct_game_element eles = 2;
  for (int i = 0; i < this->eles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_sell_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_game_element eles = 2;
  for (int i = 0; i < this->eles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_sell_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .struct_game_element eles = 2;
  total_size += 1 * this->eles_size();
  for (int i = 0; i < this->eles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_sell_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_sell_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_sell_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_sell_res::MergeFrom(const gs_c_sell_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  eles_.MergeFrom(from.eles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_sell_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_sell_res::CopyFrom(const gs_c_sell_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_sell_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < eles_size(); i++) {
    if (!this->eles(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_sell_res::Swap(gs_c_sell_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    eles_.Swap(&other->eles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_sell_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_sell_res_descriptor_;
  metadata.reflection = gs_c_sell_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_arena_refresh_match_req::c_gs_arena_refresh_match_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_arena_refresh_match_req::InitAsDefaultInstance() {
}

c_gs_arena_refresh_match_req::c_gs_arena_refresh_match_req(const c_gs_arena_refresh_match_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_arena_refresh_match_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_arena_refresh_match_req::~c_gs_arena_refresh_match_req() {
  SharedDtor();
}

void c_gs_arena_refresh_match_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_arena_refresh_match_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_arena_refresh_match_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_arena_refresh_match_req_descriptor_;
}

const c_gs_arena_refresh_match_req& c_gs_arena_refresh_match_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_arena_refresh_match_req* c_gs_arena_refresh_match_req::default_instance_ = NULL;

c_gs_arena_refresh_match_req* c_gs_arena_refresh_match_req::New() const {
  return new c_gs_arena_refresh_match_req;
}

void c_gs_arena_refresh_match_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_arena_refresh_match_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_arena_refresh_match_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_arena_refresh_match_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_arena_refresh_match_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_arena_refresh_match_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_arena_refresh_match_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_arena_refresh_match_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_arena_refresh_match_req::MergeFrom(const c_gs_arena_refresh_match_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_arena_refresh_match_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_arena_refresh_match_req::CopyFrom(const c_gs_arena_refresh_match_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_arena_refresh_match_req::IsInitialized() const {

  return true;
}

void c_gs_arena_refresh_match_req::Swap(c_gs_arena_refresh_match_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_arena_refresh_match_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_arena_refresh_match_req_descriptor_;
  metadata.reflection = c_gs_arena_refresh_match_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_arena_refresh_match_res::kErrorCodeFieldNumber;
const int gs_c_arena_refresh_match_res::kMatchsFieldNumber;
#endif  // !_MSC_VER

gs_c_arena_refresh_match_res::gs_c_arena_refresh_match_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_arena_refresh_match_res::InitAsDefaultInstance() {
}

gs_c_arena_refresh_match_res::gs_c_arena_refresh_match_res(const gs_c_arena_refresh_match_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_arena_refresh_match_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_arena_refresh_match_res::~gs_c_arena_refresh_match_res() {
  SharedDtor();
}

void gs_c_arena_refresh_match_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_arena_refresh_match_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_arena_refresh_match_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_arena_refresh_match_res_descriptor_;
}

const gs_c_arena_refresh_match_res& gs_c_arena_refresh_match_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_arena_refresh_match_res* gs_c_arena_refresh_match_res::default_instance_ = NULL;

gs_c_arena_refresh_match_res* gs_c_arena_refresh_match_res::New() const {
  return new gs_c_arena_refresh_match_res;
}

void gs_c_arena_refresh_match_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  matchs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_arena_refresh_match_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_matchs;
        break;
      }

      // repeated .user_arena_contestant matchs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_matchs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_arena_refresh_match_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .user_arena_contestant matchs = 2;
  for (int i = 0; i < this->matchs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matchs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_arena_refresh_match_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .user_arena_contestant matchs = 2;
  for (int i = 0; i < this->matchs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matchs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_arena_refresh_match_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .user_arena_contestant matchs = 2;
  total_size += 1 * this->matchs_size();
  for (int i = 0; i < this->matchs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_arena_refresh_match_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_arena_refresh_match_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_arena_refresh_match_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_arena_refresh_match_res::MergeFrom(const gs_c_arena_refresh_match_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  matchs_.MergeFrom(from.matchs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_arena_refresh_match_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_arena_refresh_match_res::CopyFrom(const gs_c_arena_refresh_match_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_arena_refresh_match_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < matchs_size(); i++) {
    if (!this->matchs(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_arena_refresh_match_res::Swap(gs_c_arena_refresh_match_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    matchs_.Swap(&other->matchs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_arena_refresh_match_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_arena_refresh_match_res_descriptor_;
  metadata.reflection = gs_c_arena_refresh_match_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_arena_update_team_req::kHerosFieldNumber;
#endif  // !_MSC_VER

c_gs_arena_update_team_req::c_gs_arena_update_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_arena_update_team_req::InitAsDefaultInstance() {
}

c_gs_arena_update_team_req::c_gs_arena_update_team_req(const c_gs_arena_update_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_arena_update_team_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_arena_update_team_req::~c_gs_arena_update_team_req() {
  SharedDtor();
}

void c_gs_arena_update_team_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_arena_update_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_arena_update_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_arena_update_team_req_descriptor_;
}

const c_gs_arena_update_team_req& c_gs_arena_update_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_arena_update_team_req* c_gs_arena_update_team_req::default_instance_ = NULL;

c_gs_arena_update_team_req* c_gs_arena_update_team_req::New() const {
  return new c_gs_arena_update_team_req;
}

void c_gs_arena_update_team_req::Clear() {
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_arena_update_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 heros = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_arena_update_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_arena_update_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_arena_update_team_req::ByteSize() const {
  int total_size = 0;

  // repeated uint32 heros = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_arena_update_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_arena_update_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_arena_update_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_arena_update_team_req::MergeFrom(const c_gs_arena_update_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_arena_update_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_arena_update_team_req::CopyFrom(const c_gs_arena_update_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_arena_update_team_req::IsInitialized() const {

  return true;
}

void c_gs_arena_update_team_req::Swap(c_gs_arena_update_team_req* other) {
  if (other != this) {
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_arena_update_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_arena_update_team_req_descriptor_;
  metadata.reflection = c_gs_arena_update_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_arena_update_team_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_c_arena_update_team_res::gs_c_arena_update_team_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_arena_update_team_res::InitAsDefaultInstance() {
}

gs_c_arena_update_team_res::gs_c_arena_update_team_res(const gs_c_arena_update_team_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_arena_update_team_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_arena_update_team_res::~gs_c_arena_update_team_res() {
  SharedDtor();
}

void gs_c_arena_update_team_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_arena_update_team_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_arena_update_team_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_arena_update_team_res_descriptor_;
}

const gs_c_arena_update_team_res& gs_c_arena_update_team_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_arena_update_team_res* gs_c_arena_update_team_res::default_instance_ = NULL;

gs_c_arena_update_team_res* gs_c_arena_update_team_res::New() const {
  return new gs_c_arena_update_team_res;
}

void gs_c_arena_update_team_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_arena_update_team_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_arena_update_team_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_arena_update_team_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_arena_update_team_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_arena_update_team_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_arena_update_team_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_arena_update_team_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_arena_update_team_res::MergeFrom(const gs_c_arena_update_team_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_arena_update_team_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_arena_update_team_res::CopyFrom(const gs_c_arena_update_team_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_arena_update_team_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_arena_update_team_res::Swap(gs_c_arena_update_team_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_arena_update_team_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_arena_update_team_res_descriptor_;
  metadata.reflection = gs_c_arena_update_team_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_arena_start_challenge_req::kHerosFieldNumber;
const int c_gs_arena_start_challenge_req::kDefenderUserIdFieldNumber;
const int c_gs_arena_start_challenge_req::kPowerFieldNumber;
const int c_gs_arena_start_challenge_req::kDefenderPowerFieldNumber;
#endif  // !_MSC_VER

c_gs_arena_start_challenge_req::c_gs_arena_start_challenge_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_arena_start_challenge_req::InitAsDefaultInstance() {
}

c_gs_arena_start_challenge_req::c_gs_arena_start_challenge_req(const c_gs_arena_start_challenge_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_arena_start_challenge_req::SharedCtor() {
  _cached_size_ = 0;
  defender_user_id_ = 0u;
  power_ = 0u;
  defender_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_arena_start_challenge_req::~c_gs_arena_start_challenge_req() {
  SharedDtor();
}

void c_gs_arena_start_challenge_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_arena_start_challenge_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_arena_start_challenge_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_arena_start_challenge_req_descriptor_;
}

const c_gs_arena_start_challenge_req& c_gs_arena_start_challenge_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_arena_start_challenge_req* c_gs_arena_start_challenge_req::default_instance_ = NULL;

c_gs_arena_start_challenge_req* c_gs_arena_start_challenge_req::New() const {
  return new c_gs_arena_start_challenge_req;
}

void c_gs_arena_start_challenge_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    defender_user_id_ = 0u;
    power_ = 0u;
    defender_power_ = 0u;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_arena_start_challenge_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 heros = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_heros;
        if (input->ExpectTag(16)) goto parse_defender_user_id;
        break;
      }

      // required uint32 defender_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defender_user_id_)));
          set_has_defender_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }

      // required uint32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_defender_power;
        break;
      }

      // required uint32 defender_power = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defender_power_)));
          set_has_defender_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_arena_start_challenge_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->heros(i), output);
  }

  // required uint32 defender_user_id = 2;
  if (has_defender_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defender_user_id(), output);
  }

  // required uint32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->power(), output);
  }

  // required uint32 defender_power = 4;
  if (has_defender_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->defender_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_arena_start_challenge_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->heros(i), target);
  }

  // required uint32 defender_user_id = 2;
  if (has_defender_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defender_user_id(), target);
  }

  // required uint32 power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->power(), target);
  }

  // required uint32 defender_power = 4;
  if (has_defender_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->defender_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_arena_start_challenge_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 defender_user_id = 2;
    if (has_defender_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defender_user_id());
    }

    // required uint32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // required uint32 defender_power = 4;
    if (has_defender_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defender_power());
    }

  }
  // repeated uint32 heros = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_arena_start_challenge_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_arena_start_challenge_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_arena_start_challenge_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_arena_start_challenge_req::MergeFrom(const c_gs_arena_start_challenge_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_defender_user_id()) {
      set_defender_user_id(from.defender_user_id());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_defender_power()) {
      set_defender_power(from.defender_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_arena_start_challenge_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_arena_start_challenge_req::CopyFrom(const c_gs_arena_start_challenge_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_arena_start_challenge_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void c_gs_arena_start_challenge_req::Swap(c_gs_arena_start_challenge_req* other) {
  if (other != this) {
    heros_.Swap(&other->heros_);
    std::swap(defender_user_id_, other->defender_user_id_);
    std::swap(power_, other->power_);
    std::swap(defender_power_, other->defender_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_arena_start_challenge_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_arena_start_challenge_req_descriptor_;
  metadata.reflection = c_gs_arena_start_challenge_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_arena_start_challenge_res::kErrorCodeFieldNumber;
const int gs_c_arena_start_challenge_res::kLastChallengeTimeFieldNumber;
const int gs_c_arena_start_challenge_res::kLastDayChallengeNumFieldNumber;
const int gs_c_arena_start_challenge_res::kMatchsFieldNumber;
#endif  // !_MSC_VER

gs_c_arena_start_challenge_res::gs_c_arena_start_challenge_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_arena_start_challenge_res::InitAsDefaultInstance() {
}

gs_c_arena_start_challenge_res::gs_c_arena_start_challenge_res(const gs_c_arena_start_challenge_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_arena_start_challenge_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  last_challenge_time_ = 0u;
  last_day_challenge_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_arena_start_challenge_res::~gs_c_arena_start_challenge_res() {
  SharedDtor();
}

void gs_c_arena_start_challenge_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_arena_start_challenge_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_arena_start_challenge_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_arena_start_challenge_res_descriptor_;
}

const gs_c_arena_start_challenge_res& gs_c_arena_start_challenge_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_arena_start_challenge_res* gs_c_arena_start_challenge_res::default_instance_ = NULL;

gs_c_arena_start_challenge_res* gs_c_arena_start_challenge_res::New() const {
  return new gs_c_arena_start_challenge_res;
}

void gs_c_arena_start_challenge_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    last_challenge_time_ = 0u;
    last_day_challenge_num_ = 0u;
  }
  matchs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_arena_start_challenge_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_challenge_time;
        break;
      }

      // optional uint32 last_challenge_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_challenge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_challenge_time_)));
          set_has_last_challenge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_day_challenge_num;
        break;
      }

      // optional uint32 last_day_challenge_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_challenge_num_)));
          set_has_last_day_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_matchs;
        break;
      }

      // repeated .user_arena_contestant matchs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matchs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_matchs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_arena_start_challenge_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 last_challenge_time = 2;
  if (has_last_challenge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_challenge_time(), output);
  }

  // optional uint32 last_day_challenge_num = 3;
  if (has_last_day_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_day_challenge_num(), output);
  }

  // repeated .user_arena_contestant matchs = 4;
  for (int i = 0; i < this->matchs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->matchs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_arena_start_challenge_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 last_challenge_time = 2;
  if (has_last_challenge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_challenge_time(), target);
  }

  // optional uint32 last_day_challenge_num = 3;
  if (has_last_day_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_day_challenge_num(), target);
  }

  // repeated .user_arena_contestant matchs = 4;
  for (int i = 0; i < this->matchs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->matchs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_arena_start_challenge_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 last_challenge_time = 2;
    if (has_last_challenge_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_challenge_time());
    }

    // optional uint32 last_day_challenge_num = 3;
    if (has_last_day_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_challenge_num());
    }

  }
  // repeated .user_arena_contestant matchs = 4;
  total_size += 1 * this->matchs_size();
  for (int i = 0; i < this->matchs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->matchs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_arena_start_challenge_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_arena_start_challenge_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_arena_start_challenge_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_arena_start_challenge_res::MergeFrom(const gs_c_arena_start_challenge_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  matchs_.MergeFrom(from.matchs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_last_challenge_time()) {
      set_last_challenge_time(from.last_challenge_time());
    }
    if (from.has_last_day_challenge_num()) {
      set_last_day_challenge_num(from.last_day_challenge_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_arena_start_challenge_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_arena_start_challenge_res::CopyFrom(const gs_c_arena_start_challenge_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_arena_start_challenge_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < matchs_size(); i++) {
    if (!this->matchs(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_arena_start_challenge_res::Swap(gs_c_arena_start_challenge_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(last_challenge_time_, other->last_challenge_time_);
    std::swap(last_day_challenge_num_, other->last_day_challenge_num_);
    matchs_.Swap(&other->matchs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_arena_start_challenge_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_arena_start_challenge_res_descriptor_;
  metadata.reflection = gs_c_arena_start_challenge_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_arena_end_challenge_req::kIsWinFieldNumber;
#endif  // !_MSC_VER

c_gs_arena_end_challenge_req::c_gs_arena_end_challenge_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_arena_end_challenge_req::InitAsDefaultInstance() {
}

c_gs_arena_end_challenge_req::c_gs_arena_end_challenge_req(const c_gs_arena_end_challenge_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_arena_end_challenge_req::SharedCtor() {
  _cached_size_ = 0;
  is_win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_arena_end_challenge_req::~c_gs_arena_end_challenge_req() {
  SharedDtor();
}

void c_gs_arena_end_challenge_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_arena_end_challenge_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_arena_end_challenge_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_arena_end_challenge_req_descriptor_;
}

const c_gs_arena_end_challenge_req& c_gs_arena_end_challenge_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_arena_end_challenge_req* c_gs_arena_end_challenge_req::default_instance_ = NULL;

c_gs_arena_end_challenge_req* c_gs_arena_end_challenge_req::New() const {
  return new c_gs_arena_end_challenge_req;
}

void c_gs_arena_end_challenge_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_win_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_arena_end_challenge_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_arena_end_challenge_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_win = 1;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_arena_end_challenge_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_win = 1;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_arena_end_challenge_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_win = 1;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_arena_end_challenge_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_arena_end_challenge_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_arena_end_challenge_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_arena_end_challenge_req::MergeFrom(const c_gs_arena_end_challenge_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_arena_end_challenge_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_arena_end_challenge_req::CopyFrom(const c_gs_arena_end_challenge_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_arena_end_challenge_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_arena_end_challenge_req::Swap(c_gs_arena_end_challenge_req* other) {
  if (other != this) {
    std::swap(is_win_, other->is_win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_arena_end_challenge_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_arena_end_challenge_req_descriptor_;
  metadata.reflection = c_gs_arena_end_challenge_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_arena_end_challenge_res::kErrorCodeFieldNumber;
const int gs_c_arena_end_challenge_res::kRankFieldNumber;
const int gs_c_arena_end_challenge_res::kOutputFieldNumber;
#endif  // !_MSC_VER

gs_c_arena_end_challenge_res::gs_c_arena_end_challenge_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_arena_end_challenge_res::InitAsDefaultInstance() {
}

gs_c_arena_end_challenge_res::gs_c_arena_end_challenge_res(const gs_c_arena_end_challenge_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_arena_end_challenge_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_arena_end_challenge_res::~gs_c_arena_end_challenge_res() {
  SharedDtor();
}

void gs_c_arena_end_challenge_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_arena_end_challenge_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_arena_end_challenge_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_arena_end_challenge_res_descriptor_;
}

const gs_c_arena_end_challenge_res& gs_c_arena_end_challenge_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_arena_end_challenge_res* gs_c_arena_end_challenge_res::default_instance_ = NULL;

gs_c_arena_end_challenge_res* gs_c_arena_end_challenge_res::New() const {
  return new gs_c_arena_end_challenge_res;
}

void gs_c_arena_end_challenge_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    rank_ = 0u;
  }
  output_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_arena_end_challenge_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_output;
        break;
      }

      // repeated .struct_game_element output = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_output;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_arena_end_challenge_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // repeated .struct_game_element output = 3;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->output(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_arena_end_challenge_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // repeated .struct_game_element output = 3;
  for (int i = 0; i < this->output_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->output(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_arena_end_challenge_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  // repeated .struct_game_element output = 3;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_arena_end_challenge_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_arena_end_challenge_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_arena_end_challenge_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_arena_end_challenge_res::MergeFrom(const gs_c_arena_end_challenge_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  output_.MergeFrom(from.output_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_arena_end_challenge_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_arena_end_challenge_res::CopyFrom(const gs_c_arena_end_challenge_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_arena_end_challenge_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < output_size(); i++) {
    if (!this->output(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_arena_end_challenge_res::Swap(gs_c_arena_end_challenge_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(rank_, other->rank_);
    output_.Swap(&other->output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_arena_end_challenge_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_arena_end_challenge_res_descriptor_;
  metadata.reflection = gs_c_arena_end_challenge_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_arena_challenge_ntf::kEleFieldNumber;
#endif  // !_MSC_VER

gs_c_arena_challenge_ntf::gs_c_arena_challenge_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_arena_challenge_ntf::InitAsDefaultInstance() {
  ele_ = const_cast< ::user_arena_log*>(&::user_arena_log::default_instance());
}

gs_c_arena_challenge_ntf::gs_c_arena_challenge_ntf(const gs_c_arena_challenge_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_arena_challenge_ntf::SharedCtor() {
  _cached_size_ = 0;
  ele_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_arena_challenge_ntf::~gs_c_arena_challenge_ntf() {
  SharedDtor();
}

void gs_c_arena_challenge_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete ele_;
  }
}

void gs_c_arena_challenge_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_arena_challenge_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_arena_challenge_ntf_descriptor_;
}

const gs_c_arena_challenge_ntf& gs_c_arena_challenge_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_arena_challenge_ntf* gs_c_arena_challenge_ntf::default_instance_ = NULL;

gs_c_arena_challenge_ntf* gs_c_arena_challenge_ntf::New() const {
  return new gs_c_arena_challenge_ntf;
}

void gs_c_arena_challenge_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ele()) {
      if (ele_ != NULL) ele_->::user_arena_log::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_arena_challenge_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .user_arena_log ele = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ele()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_arena_challenge_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .user_arena_log ele = 1;
  if (has_ele()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ele(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_arena_challenge_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .user_arena_log ele = 1;
  if (has_ele()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ele(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_arena_challenge_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .user_arena_log ele = 1;
    if (has_ele()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ele());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_arena_challenge_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_arena_challenge_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_arena_challenge_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_arena_challenge_ntf::MergeFrom(const gs_c_arena_challenge_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ele()) {
      mutable_ele()->::user_arena_log::MergeFrom(from.ele());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_arena_challenge_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_arena_challenge_ntf::CopyFrom(const gs_c_arena_challenge_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_arena_challenge_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ele()) {
    if (!this->ele().IsInitialized()) return false;
  }
  return true;
}

void gs_c_arena_challenge_ntf::Swap(gs_c_arena_challenge_ntf* other) {
  if (other != this) {
    std::swap(ele_, other->ele_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_arena_challenge_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_arena_challenge_ntf_descriptor_;
  metadata.reflection = gs_c_arena_challenge_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_arena_challenge_reset_cd_req::c_gs_arena_challenge_reset_cd_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_arena_challenge_reset_cd_req::InitAsDefaultInstance() {
}

c_gs_arena_challenge_reset_cd_req::c_gs_arena_challenge_reset_cd_req(const c_gs_arena_challenge_reset_cd_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_arena_challenge_reset_cd_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_arena_challenge_reset_cd_req::~c_gs_arena_challenge_reset_cd_req() {
  SharedDtor();
}

void c_gs_arena_challenge_reset_cd_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_arena_challenge_reset_cd_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_arena_challenge_reset_cd_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_arena_challenge_reset_cd_req_descriptor_;
}

const c_gs_arena_challenge_reset_cd_req& c_gs_arena_challenge_reset_cd_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_arena_challenge_reset_cd_req* c_gs_arena_challenge_reset_cd_req::default_instance_ = NULL;

c_gs_arena_challenge_reset_cd_req* c_gs_arena_challenge_reset_cd_req::New() const {
  return new c_gs_arena_challenge_reset_cd_req;
}

void c_gs_arena_challenge_reset_cd_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_arena_challenge_reset_cd_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_arena_challenge_reset_cd_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_arena_challenge_reset_cd_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_arena_challenge_reset_cd_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_arena_challenge_reset_cd_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_arena_challenge_reset_cd_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_arena_challenge_reset_cd_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_arena_challenge_reset_cd_req::MergeFrom(const c_gs_arena_challenge_reset_cd_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_arena_challenge_reset_cd_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_arena_challenge_reset_cd_req::CopyFrom(const c_gs_arena_challenge_reset_cd_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_arena_challenge_reset_cd_req::IsInitialized() const {

  return true;
}

void c_gs_arena_challenge_reset_cd_req::Swap(c_gs_arena_challenge_reset_cd_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_arena_challenge_reset_cd_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_arena_challenge_reset_cd_req_descriptor_;
  metadata.reflection = c_gs_arena_challenge_reset_cd_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_arena_challenge_reset_cd_res::kErrorCodeFieldNumber;
const int gs_c_arena_challenge_reset_cd_res::kLastChallengeTimeFieldNumber;
const int gs_c_arena_challenge_reset_cd_res::kConsumeFieldNumber;
#endif  // !_MSC_VER

gs_c_arena_challenge_reset_cd_res::gs_c_arena_challenge_reset_cd_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_arena_challenge_reset_cd_res::InitAsDefaultInstance() {
}

gs_c_arena_challenge_reset_cd_res::gs_c_arena_challenge_reset_cd_res(const gs_c_arena_challenge_reset_cd_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_arena_challenge_reset_cd_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  last_challenge_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_arena_challenge_reset_cd_res::~gs_c_arena_challenge_reset_cd_res() {
  SharedDtor();
}

void gs_c_arena_challenge_reset_cd_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_arena_challenge_reset_cd_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_arena_challenge_reset_cd_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_arena_challenge_reset_cd_res_descriptor_;
}

const gs_c_arena_challenge_reset_cd_res& gs_c_arena_challenge_reset_cd_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_arena_challenge_reset_cd_res* gs_c_arena_challenge_reset_cd_res::default_instance_ = NULL;

gs_c_arena_challenge_reset_cd_res* gs_c_arena_challenge_reset_cd_res::New() const {
  return new gs_c_arena_challenge_reset_cd_res;
}

void gs_c_arena_challenge_reset_cd_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    last_challenge_time_ = 0u;
  }
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_arena_challenge_reset_cd_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_challenge_time;
        break;
      }

      // optional uint32 last_challenge_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_challenge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_challenge_time_)));
          set_has_last_challenge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consume;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_arena_challenge_reset_cd_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 last_challenge_time = 2;
  if (has_last_challenge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_challenge_time(), output);
  }

  // repeated .struct_game_element consume = 3;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->consume(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_arena_challenge_reset_cd_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 last_challenge_time = 2;
  if (has_last_challenge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_challenge_time(), target);
  }

  // repeated .struct_game_element consume = 3;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->consume(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_arena_challenge_reset_cd_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 last_challenge_time = 2;
    if (has_last_challenge_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_challenge_time());
    }

  }
  // repeated .struct_game_element consume = 3;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_arena_challenge_reset_cd_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_arena_challenge_reset_cd_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_arena_challenge_reset_cd_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_arena_challenge_reset_cd_res::MergeFrom(const gs_c_arena_challenge_reset_cd_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_last_challenge_time()) {
      set_last_challenge_time(from.last_challenge_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_arena_challenge_reset_cd_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_arena_challenge_reset_cd_res::CopyFrom(const gs_c_arena_challenge_reset_cd_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_arena_challenge_reset_cd_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_arena_challenge_reset_cd_res::Swap(gs_c_arena_challenge_reset_cd_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(last_challenge_time_, other->last_challenge_time_);
    consume_.Swap(&other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_arena_challenge_reset_cd_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_arena_challenge_reset_cd_res_descriptor_;
  metadata.reflection = gs_c_arena_challenge_reset_cd_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_arena_challenge_reset_num_req::c_gs_arena_challenge_reset_num_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_arena_challenge_reset_num_req::InitAsDefaultInstance() {
}

c_gs_arena_challenge_reset_num_req::c_gs_arena_challenge_reset_num_req(const c_gs_arena_challenge_reset_num_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_arena_challenge_reset_num_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_arena_challenge_reset_num_req::~c_gs_arena_challenge_reset_num_req() {
  SharedDtor();
}

void c_gs_arena_challenge_reset_num_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_arena_challenge_reset_num_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_arena_challenge_reset_num_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_arena_challenge_reset_num_req_descriptor_;
}

const c_gs_arena_challenge_reset_num_req& c_gs_arena_challenge_reset_num_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_arena_challenge_reset_num_req* c_gs_arena_challenge_reset_num_req::default_instance_ = NULL;

c_gs_arena_challenge_reset_num_req* c_gs_arena_challenge_reset_num_req::New() const {
  return new c_gs_arena_challenge_reset_num_req;
}

void c_gs_arena_challenge_reset_num_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_arena_challenge_reset_num_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_arena_challenge_reset_num_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_arena_challenge_reset_num_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_arena_challenge_reset_num_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_arena_challenge_reset_num_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_arena_challenge_reset_num_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_arena_challenge_reset_num_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_arena_challenge_reset_num_req::MergeFrom(const c_gs_arena_challenge_reset_num_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_arena_challenge_reset_num_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_arena_challenge_reset_num_req::CopyFrom(const c_gs_arena_challenge_reset_num_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_arena_challenge_reset_num_req::IsInitialized() const {

  return true;
}

void c_gs_arena_challenge_reset_num_req::Swap(c_gs_arena_challenge_reset_num_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_arena_challenge_reset_num_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_arena_challenge_reset_num_req_descriptor_;
  metadata.reflection = c_gs_arena_challenge_reset_num_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_arena_challenge_reset_num_res::kErrorCodeFieldNumber;
const int gs_c_arena_challenge_reset_num_res::kLastChallengeTimeFieldNumber;
const int gs_c_arena_challenge_reset_num_res::kLastDayChallengeNumFieldNumber;
const int gs_c_arena_challenge_reset_num_res::kLastTimeBuyArenaChallengeFieldNumber;
const int gs_c_arena_challenge_reset_num_res::kLastDayBuyArenaChallengeNumFieldNumber;
const int gs_c_arena_challenge_reset_num_res::kConsumeFieldNumber;
#endif  // !_MSC_VER

gs_c_arena_challenge_reset_num_res::gs_c_arena_challenge_reset_num_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_arena_challenge_reset_num_res::InitAsDefaultInstance() {
}

gs_c_arena_challenge_reset_num_res::gs_c_arena_challenge_reset_num_res(const gs_c_arena_challenge_reset_num_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_arena_challenge_reset_num_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  last_challenge_time_ = 0u;
  last_day_challenge_num_ = 0u;
  last_time_buy_arena_challenge_ = 0u;
  last_day_buy_arena_challenge_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_arena_challenge_reset_num_res::~gs_c_arena_challenge_reset_num_res() {
  SharedDtor();
}

void gs_c_arena_challenge_reset_num_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_arena_challenge_reset_num_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_arena_challenge_reset_num_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_arena_challenge_reset_num_res_descriptor_;
}

const gs_c_arena_challenge_reset_num_res& gs_c_arena_challenge_reset_num_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_arena_challenge_reset_num_res* gs_c_arena_challenge_reset_num_res::default_instance_ = NULL;

gs_c_arena_challenge_reset_num_res* gs_c_arena_challenge_reset_num_res::New() const {
  return new gs_c_arena_challenge_reset_num_res;
}

void gs_c_arena_challenge_reset_num_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    last_challenge_time_ = 0u;
    last_day_challenge_num_ = 0u;
    last_time_buy_arena_challenge_ = 0u;
    last_day_buy_arena_challenge_num_ = 0u;
  }
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_arena_challenge_reset_num_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_challenge_time;
        break;
      }

      // optional uint32 last_challenge_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_challenge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_challenge_time_)));
          set_has_last_challenge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_day_challenge_num;
        break;
      }

      // optional uint32 last_day_challenge_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_challenge_num_)));
          set_has_last_day_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_time_buy_arena_challenge;
        break;
      }

      // optional uint32 last_time_buy_arena_challenge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time_buy_arena_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_buy_arena_challenge_)));
          set_has_last_time_buy_arena_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_day_buy_arena_challenge_num;
        break;
      }

      // optional uint32 last_day_buy_arena_challenge_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_buy_arena_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_buy_arena_challenge_num_)));
          set_has_last_day_buy_arena_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_consume;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_arena_challenge_reset_num_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 last_challenge_time = 2;
  if (has_last_challenge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_challenge_time(), output);
  }

  // optional uint32 last_day_challenge_num = 3;
  if (has_last_day_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_day_challenge_num(), output);
  }

  // optional uint32 last_time_buy_arena_challenge = 4;
  if (has_last_time_buy_arena_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_time_buy_arena_challenge(), output);
  }

  // optional uint32 last_day_buy_arena_challenge_num = 5;
  if (has_last_day_buy_arena_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_day_buy_arena_challenge_num(), output);
  }

  // repeated .struct_game_element consume = 6;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->consume(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_arena_challenge_reset_num_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 last_challenge_time = 2;
  if (has_last_challenge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_challenge_time(), target);
  }

  // optional uint32 last_day_challenge_num = 3;
  if (has_last_day_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_day_challenge_num(), target);
  }

  // optional uint32 last_time_buy_arena_challenge = 4;
  if (has_last_time_buy_arena_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_time_buy_arena_challenge(), target);
  }

  // optional uint32 last_day_buy_arena_challenge_num = 5;
  if (has_last_day_buy_arena_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_day_buy_arena_challenge_num(), target);
  }

  // repeated .struct_game_element consume = 6;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->consume(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_arena_challenge_reset_num_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 last_challenge_time = 2;
    if (has_last_challenge_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_challenge_time());
    }

    // optional uint32 last_day_challenge_num = 3;
    if (has_last_day_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_challenge_num());
    }

    // optional uint32 last_time_buy_arena_challenge = 4;
    if (has_last_time_buy_arena_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time_buy_arena_challenge());
    }

    // optional uint32 last_day_buy_arena_challenge_num = 5;
    if (has_last_day_buy_arena_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_buy_arena_challenge_num());
    }

  }
  // repeated .struct_game_element consume = 6;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_arena_challenge_reset_num_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_arena_challenge_reset_num_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_arena_challenge_reset_num_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_arena_challenge_reset_num_res::MergeFrom(const gs_c_arena_challenge_reset_num_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_last_challenge_time()) {
      set_last_challenge_time(from.last_challenge_time());
    }
    if (from.has_last_day_challenge_num()) {
      set_last_day_challenge_num(from.last_day_challenge_num());
    }
    if (from.has_last_time_buy_arena_challenge()) {
      set_last_time_buy_arena_challenge(from.last_time_buy_arena_challenge());
    }
    if (from.has_last_day_buy_arena_challenge_num()) {
      set_last_day_buy_arena_challenge_num(from.last_day_buy_arena_challenge_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_arena_challenge_reset_num_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_arena_challenge_reset_num_res::CopyFrom(const gs_c_arena_challenge_reset_num_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_arena_challenge_reset_num_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_arena_challenge_reset_num_res::Swap(gs_c_arena_challenge_reset_num_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(last_challenge_time_, other->last_challenge_time_);
    std::swap(last_day_challenge_num_, other->last_day_challenge_num_);
    std::swap(last_time_buy_arena_challenge_, other->last_time_buy_arena_challenge_);
    std::swap(last_day_buy_arena_challenge_num_, other->last_day_buy_arena_challenge_num_);
    consume_.Swap(&other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_arena_challenge_reset_num_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_arena_challenge_reset_num_res_descriptor_;
  metadata.reflection = gs_c_arena_challenge_reset_num_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_arena_ranks_req::kPageNumFieldNumber;
#endif  // !_MSC_VER

c_gs_arena_ranks_req::c_gs_arena_ranks_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_arena_ranks_req::InitAsDefaultInstance() {
}

c_gs_arena_ranks_req::c_gs_arena_ranks_req(const c_gs_arena_ranks_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_arena_ranks_req::SharedCtor() {
  _cached_size_ = 0;
  page_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_arena_ranks_req::~c_gs_arena_ranks_req() {
  SharedDtor();
}

void c_gs_arena_ranks_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_arena_ranks_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_arena_ranks_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_arena_ranks_req_descriptor_;
}

const c_gs_arena_ranks_req& c_gs_arena_ranks_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_arena_ranks_req* c_gs_arena_ranks_req::default_instance_ = NULL;

c_gs_arena_ranks_req* c_gs_arena_ranks_req::New() const {
  return new c_gs_arena_ranks_req;
}

void c_gs_arena_ranks_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_arena_ranks_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 page_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_num_)));
          set_has_page_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_arena_ranks_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 page_num = 1;
  if (has_page_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_arena_ranks_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 page_num = 1;
  if (has_page_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_arena_ranks_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 page_num = 1;
    if (has_page_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_arena_ranks_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_arena_ranks_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_arena_ranks_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_arena_ranks_req::MergeFrom(const c_gs_arena_ranks_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_num()) {
      set_page_num(from.page_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_arena_ranks_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_arena_ranks_req::CopyFrom(const c_gs_arena_ranks_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_arena_ranks_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_arena_ranks_req::Swap(c_gs_arena_ranks_req* other) {
  if (other != this) {
    std::swap(page_num_, other->page_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_arena_ranks_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_arena_ranks_req_descriptor_;
  metadata.reflection = c_gs_arena_ranks_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_arena_ranks_res::kErrorCodeFieldNumber;
const int gs_c_arena_ranks_res::kRanksFieldNumber;
#endif  // !_MSC_VER

gs_c_arena_ranks_res::gs_c_arena_ranks_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_arena_ranks_res::InitAsDefaultInstance() {
}

gs_c_arena_ranks_res::gs_c_arena_ranks_res(const gs_c_arena_ranks_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_arena_ranks_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_arena_ranks_res::~gs_c_arena_ranks_res() {
  SharedDtor();
}

void gs_c_arena_ranks_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_arena_ranks_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_arena_ranks_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_arena_ranks_res_descriptor_;
}

const gs_c_arena_ranks_res& gs_c_arena_ranks_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_arena_ranks_res* gs_c_arena_ranks_res::default_instance_ = NULL;

gs_c_arena_ranks_res* gs_c_arena_ranks_res::New() const {
  return new gs_c_arena_ranks_res;
}

void gs_c_arena_ranks_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_arena_ranks_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ranks;
        break;
      }

      // repeated .user_arena_contestant ranks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ranks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_arena_ranks_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .user_arena_contestant ranks = 2;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_arena_ranks_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .user_arena_contestant ranks = 2;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_arena_ranks_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .user_arena_contestant ranks = 2;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_arena_ranks_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_arena_ranks_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_arena_ranks_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_arena_ranks_res::MergeFrom(const gs_c_arena_ranks_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_arena_ranks_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_arena_ranks_res::CopyFrom(const gs_c_arena_ranks_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_arena_ranks_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ranks_size(); i++) {
    if (!this->ranks(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_arena_ranks_res::Swap(gs_c_arena_ranks_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_arena_ranks_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_arena_ranks_res_descriptor_;
  metadata.reflection = gs_c_arena_ranks_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_arena_log_req::c_gs_arena_log_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_arena_log_req::InitAsDefaultInstance() {
}

c_gs_arena_log_req::c_gs_arena_log_req(const c_gs_arena_log_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_arena_log_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_arena_log_req::~c_gs_arena_log_req() {
  SharedDtor();
}

void c_gs_arena_log_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_arena_log_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_arena_log_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_arena_log_req_descriptor_;
}

const c_gs_arena_log_req& c_gs_arena_log_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_arena_log_req* c_gs_arena_log_req::default_instance_ = NULL;

c_gs_arena_log_req* c_gs_arena_log_req::New() const {
  return new c_gs_arena_log_req;
}

void c_gs_arena_log_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_arena_log_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_arena_log_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_arena_log_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_arena_log_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_arena_log_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_arena_log_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_arena_log_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_arena_log_req::MergeFrom(const c_gs_arena_log_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_arena_log_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_arena_log_req::CopyFrom(const c_gs_arena_log_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_arena_log_req::IsInitialized() const {

  return true;
}

void c_gs_arena_log_req::Swap(c_gs_arena_log_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_arena_log_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_arena_log_req_descriptor_;
  metadata.reflection = c_gs_arena_log_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_arena_log_res::kLogFieldNumber;
#endif  // !_MSC_VER

gs_c_arena_log_res::gs_c_arena_log_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_arena_log_res::InitAsDefaultInstance() {
}

gs_c_arena_log_res::gs_c_arena_log_res(const gs_c_arena_log_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_arena_log_res::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_arena_log_res::~gs_c_arena_log_res() {
  SharedDtor();
}

void gs_c_arena_log_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_arena_log_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_arena_log_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_arena_log_res_descriptor_;
}

const gs_c_arena_log_res& gs_c_arena_log_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_arena_log_res* gs_c_arena_log_res::default_instance_ = NULL;

gs_c_arena_log_res* gs_c_arena_log_res::New() const {
  return new gs_c_arena_log_res;
}

void gs_c_arena_log_res::Clear() {
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_arena_log_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .user_arena_log log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_arena_log_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .user_arena_log log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_arena_log_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .user_arena_log log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_arena_log_res::ByteSize() const {
  int total_size = 0;

  // repeated .user_arena_log log = 1;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_arena_log_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_arena_log_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_arena_log_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_arena_log_res::MergeFrom(const gs_c_arena_log_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_arena_log_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_arena_log_res::CopyFrom(const gs_c_arena_log_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_arena_log_res::IsInitialized() const {

  for (int i = 0; i < log_size(); i++) {
    if (!this->log(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_arena_log_res::Swap(gs_c_arena_log_res* other) {
  if (other != this) {
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_arena_log_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_arena_log_res_descriptor_;
  metadata.reflection = gs_c_arena_log_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_arena_search_req::kUserIdFieldNumber;
const int c_gs_arena_search_req::kUserNameFieldNumber;
#endif  // !_MSC_VER

c_gs_arena_search_req::c_gs_arena_search_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_arena_search_req::InitAsDefaultInstance() {
}

c_gs_arena_search_req::c_gs_arena_search_req(const c_gs_arena_search_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_arena_search_req::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_arena_search_req::~c_gs_arena_search_req() {
  SharedDtor();
}

void c_gs_arena_search_req::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void c_gs_arena_search_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_arena_search_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_arena_search_req_descriptor_;
}

const c_gs_arena_search_req& c_gs_arena_search_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_arena_search_req* c_gs_arena_search_req::default_instance_ = NULL;

c_gs_arena_search_req* c_gs_arena_search_req::New() const {
  return new c_gs_arena_search_req;
}

void c_gs_arena_search_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_arena_search_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_arena_search_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_arena_search_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_arena_search_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_arena_search_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_arena_search_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_arena_search_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_arena_search_req::MergeFrom(const c_gs_arena_search_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_arena_search_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_arena_search_req::CopyFrom(const c_gs_arena_search_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_arena_search_req::IsInitialized() const {

  return true;
}

void c_gs_arena_search_req::Swap(c_gs_arena_search_req* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_arena_search_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_arena_search_req_descriptor_;
  metadata.reflection = c_gs_arena_search_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_arena_search_res::kErrorCodeFieldNumber;
const int gs_c_arena_search_res::kContestantFieldNumber;
#endif  // !_MSC_VER

gs_c_arena_search_res::gs_c_arena_search_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_arena_search_res::InitAsDefaultInstance() {
  contestant_ = const_cast< ::user_arena_contestant*>(&::user_arena_contestant::default_instance());
}

gs_c_arena_search_res::gs_c_arena_search_res(const gs_c_arena_search_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_arena_search_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  contestant_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_arena_search_res::~gs_c_arena_search_res() {
  SharedDtor();
}

void gs_c_arena_search_res::SharedDtor() {
  if (this != default_instance_) {
    delete contestant_;
  }
}

void gs_c_arena_search_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_arena_search_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_arena_search_res_descriptor_;
}

const gs_c_arena_search_res& gs_c_arena_search_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_arena_search_res* gs_c_arena_search_res::default_instance_ = NULL;

gs_c_arena_search_res* gs_c_arena_search_res::New() const {
  return new gs_c_arena_search_res;
}

void gs_c_arena_search_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_contestant()) {
      if (contestant_ != NULL) contestant_->::user_arena_contestant::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_arena_search_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contestant;
        break;
      }

      // optional .user_arena_contestant contestant = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contestant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contestant()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_arena_search_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional .user_arena_contestant contestant = 2;
  if (has_contestant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contestant(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_arena_search_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional .user_arena_contestant contestant = 2;
  if (has_contestant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contestant(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_arena_search_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .user_arena_contestant contestant = 2;
    if (has_contestant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contestant());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_arena_search_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_arena_search_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_arena_search_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_arena_search_res::MergeFrom(const gs_c_arena_search_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_contestant()) {
      mutable_contestant()->::user_arena_contestant::MergeFrom(from.contestant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_arena_search_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_arena_search_res::CopyFrom(const gs_c_arena_search_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_arena_search_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_contestant()) {
    if (!this->contestant().IsInitialized()) return false;
  }
  return true;
}

void gs_c_arena_search_res::Swap(gs_c_arena_search_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(contestant_, other->contestant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_arena_search_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_arena_search_res_descriptor_;
  metadata.reflection = gs_c_arena_search_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_fragment_compound_req::kCompoundIdFieldNumber;
#endif  // !_MSC_VER

c_gs_fragment_compound_req::c_gs_fragment_compound_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_fragment_compound_req::InitAsDefaultInstance() {
}

c_gs_fragment_compound_req::c_gs_fragment_compound_req(const c_gs_fragment_compound_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_fragment_compound_req::SharedCtor() {
  _cached_size_ = 0;
  compound_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_fragment_compound_req::~c_gs_fragment_compound_req() {
  SharedDtor();
}

void c_gs_fragment_compound_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_fragment_compound_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_fragment_compound_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_fragment_compound_req_descriptor_;
}

const c_gs_fragment_compound_req& c_gs_fragment_compound_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_fragment_compound_req* c_gs_fragment_compound_req::default_instance_ = NULL;

c_gs_fragment_compound_req* c_gs_fragment_compound_req::New() const {
  return new c_gs_fragment_compound_req;
}

void c_gs_fragment_compound_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    compound_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_fragment_compound_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 compound_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compound_id_)));
          set_has_compound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_fragment_compound_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 compound_id = 1;
  if (has_compound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->compound_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_fragment_compound_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 compound_id = 1;
  if (has_compound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->compound_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_fragment_compound_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 compound_id = 1;
    if (has_compound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compound_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_fragment_compound_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_fragment_compound_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_fragment_compound_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_fragment_compound_req::MergeFrom(const c_gs_fragment_compound_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compound_id()) {
      set_compound_id(from.compound_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_fragment_compound_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_fragment_compound_req::CopyFrom(const c_gs_fragment_compound_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_fragment_compound_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_fragment_compound_req::Swap(c_gs_fragment_compound_req* other) {
  if (other != this) {
    std::swap(compound_id_, other->compound_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_fragment_compound_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_fragment_compound_req_descriptor_;
  metadata.reflection = c_gs_fragment_compound_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_fragment_compound_res::kErrorCodeFieldNumber;
const int gs_c_fragment_compound_res::kElesFieldNumber;
#endif  // !_MSC_VER

gs_c_fragment_compound_res::gs_c_fragment_compound_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_fragment_compound_res::InitAsDefaultInstance() {
}

gs_c_fragment_compound_res::gs_c_fragment_compound_res(const gs_c_fragment_compound_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_fragment_compound_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_fragment_compound_res::~gs_c_fragment_compound_res() {
  SharedDtor();
}

void gs_c_fragment_compound_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_fragment_compound_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_fragment_compound_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_fragment_compound_res_descriptor_;
}

const gs_c_fragment_compound_res& gs_c_fragment_compound_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_fragment_compound_res* gs_c_fragment_compound_res::default_instance_ = NULL;

gs_c_fragment_compound_res* gs_c_fragment_compound_res::New() const {
  return new gs_c_fragment_compound_res;
}

void gs_c_fragment_compound_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  eles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_fragment_compound_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eles;
        break;
      }

      // repeated .struct_game_element eles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_fragment_compound_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .struct_game_element eles = 2;
  for (int i = 0; i < this->eles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_fragment_compound_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_game_element eles = 2;
  for (int i = 0; i < this->eles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_fragment_compound_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .struct_game_element eles = 2;
  total_size += 1 * this->eles_size();
  for (int i = 0; i < this->eles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_fragment_compound_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_fragment_compound_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_fragment_compound_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_fragment_compound_res::MergeFrom(const gs_c_fragment_compound_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  eles_.MergeFrom(from.eles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_fragment_compound_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_fragment_compound_res::CopyFrom(const gs_c_fragment_compound_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_fragment_compound_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < eles_size(); i++) {
    if (!this->eles(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_fragment_compound_res::Swap(gs_c_fragment_compound_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    eles_.Swap(&other->eles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_fragment_compound_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_fragment_compound_res_descriptor_;
  metadata.reflection = gs_c_fragment_compound_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_mail::kMailIdFieldNumber;
const int user_mail::kSendTimeFieldNumber;
const int user_mail::kTypeFieldNumber;
const int user_mail::kContentFieldNumber;
const int user_mail::kStatusFieldNumber;
const int user_mail::kElementsFieldNumber;
#endif  // !_MSC_VER

user_mail::user_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_mail::InitAsDefaultInstance() {
}

user_mail::user_mail(const user_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_mail::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  send_time_ = 0u;
  type_ = 1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_mail::~user_mail() {
  SharedDtor();
}

void user_mail::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void user_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_mail_descriptor_;
}

const user_mail& user_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_mail* user_mail::default_instance_ = NULL;

user_mail* user_mail::New() const {
  return new user_mail;
}

void user_mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0u;
    send_time_ = 0u;
    type_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    status_ = 1;
  }
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_send_time;
        break;
      }

      // required uint32 send_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .MAIL_TYPE type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MAIL_TYPE_IsValid(value)) {
            set_type(static_cast< ::MAIL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // required .MAIL_STATUS status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MAIL_STATUS_IsValid(value)) {
            set_status(static_cast< ::MAIL_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_elements;
        break;
      }

      // repeated .struct_game_element elements = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_elements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // required uint32 send_time = 2;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->send_time(), output);
  }

  // required .MAIL_TYPE type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // required .MAIL_STATUS status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->status(), output);
  }

  // repeated .struct_game_element elements = 8;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->elements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // required uint32 send_time = 2;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->send_time(), target);
  }

  // required .MAIL_TYPE type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // required .MAIL_STATUS status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->status(), target);
  }

  // repeated .struct_game_element elements = 8;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->elements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

    // required uint32 send_time = 2;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_time());
    }

    // required .MAIL_TYPE type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required .MAIL_STATUS status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .struct_game_element elements = 8;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_mail::MergeFrom(const user_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_mail::CopyFrom(const user_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  return true;
}

void user_mail::Swap(user_mail* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(send_time_, other->send_time_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(status_, other->status_);
    elements_.Swap(&other->elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_mail_descriptor_;
  metadata.reflection = user_mail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* c_gs_mail_opt_req_OPT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_mail_opt_req_OPT_descriptor_;
}
bool c_gs_mail_opt_req_OPT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const c_gs_mail_opt_req_OPT c_gs_mail_opt_req::DEL;
const c_gs_mail_opt_req_OPT c_gs_mail_opt_req::READ1;
const c_gs_mail_opt_req_OPT c_gs_mail_opt_req::GET_ATTACH_AND_DEL1;
const c_gs_mail_opt_req_OPT c_gs_mail_opt_req::GET_ATTACH_AND_DEL_ALL;
const c_gs_mail_opt_req_OPT c_gs_mail_opt_req::OPT_MIN;
const c_gs_mail_opt_req_OPT c_gs_mail_opt_req::OPT_MAX;
const int c_gs_mail_opt_req::OPT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int c_gs_mail_opt_req::kMailOptFieldNumber;
const int c_gs_mail_opt_req::kMailIdArrFieldNumber;
#endif  // !_MSC_VER

c_gs_mail_opt_req::c_gs_mail_opt_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_mail_opt_req::InitAsDefaultInstance() {
}

c_gs_mail_opt_req::c_gs_mail_opt_req(const c_gs_mail_opt_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_mail_opt_req::SharedCtor() {
  _cached_size_ = 0;
  mail_opt_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_mail_opt_req::~c_gs_mail_opt_req() {
  SharedDtor();
}

void c_gs_mail_opt_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_mail_opt_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_mail_opt_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_mail_opt_req_descriptor_;
}

const c_gs_mail_opt_req& c_gs_mail_opt_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_mail_opt_req* c_gs_mail_opt_req::default_instance_ = NULL;

c_gs_mail_opt_req* c_gs_mail_opt_req::New() const {
  return new c_gs_mail_opt_req;
}

void c_gs_mail_opt_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_opt_ = 1;
  }
  mail_id_arr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_mail_opt_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_mail_opt_req.OPT mail_opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_mail_opt_req_OPT_IsValid(value)) {
            set_mail_opt(static_cast< ::c_gs_mail_opt_req_OPT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_arr;
        break;
      }

      // repeated uint32 mail_id_arr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id_arr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_mail_id_arr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mail_id_arr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_arr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_mail_opt_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_mail_opt_req.OPT mail_opt = 1;
  if (has_mail_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mail_opt(), output);
  }

  // repeated uint32 mail_id_arr = 2;
  for (int i = 0; i < this->mail_id_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->mail_id_arr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_mail_opt_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_mail_opt_req.OPT mail_opt = 1;
  if (has_mail_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mail_opt(), target);
  }

  // repeated uint32 mail_id_arr = 2;
  for (int i = 0; i < this->mail_id_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->mail_id_arr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_mail_opt_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_mail_opt_req.OPT mail_opt = 1;
    if (has_mail_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mail_opt());
    }

  }
  // repeated uint32 mail_id_arr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_id_arr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mail_id_arr(i));
    }
    total_size += 1 * this->mail_id_arr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_mail_opt_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_mail_opt_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_mail_opt_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_mail_opt_req::MergeFrom(const c_gs_mail_opt_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_id_arr_.MergeFrom(from.mail_id_arr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_opt()) {
      set_mail_opt(from.mail_opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_mail_opt_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_mail_opt_req::CopyFrom(const c_gs_mail_opt_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_mail_opt_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_mail_opt_req::Swap(c_gs_mail_opt_req* other) {
  if (other != this) {
    std::swap(mail_opt_, other->mail_opt_);
    mail_id_arr_.Swap(&other->mail_id_arr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_mail_opt_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_mail_opt_req_descriptor_;
  metadata.reflection = c_gs_mail_opt_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_mail_opt_res_mail_update::kMailIdFieldNumber;
const int gs_c_mail_opt_res_mail_update::kMailStatusFieldNumber;
#endif  // !_MSC_VER

gs_c_mail_opt_res_mail_update::gs_c_mail_opt_res_mail_update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_mail_opt_res_mail_update::InitAsDefaultInstance() {
}

gs_c_mail_opt_res_mail_update::gs_c_mail_opt_res_mail_update(const gs_c_mail_opt_res_mail_update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_mail_opt_res_mail_update::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  mail_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_mail_opt_res_mail_update::~gs_c_mail_opt_res_mail_update() {
  SharedDtor();
}

void gs_c_mail_opt_res_mail_update::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_mail_opt_res_mail_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_mail_opt_res_mail_update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_mail_opt_res_mail_update_descriptor_;
}

const gs_c_mail_opt_res_mail_update& gs_c_mail_opt_res_mail_update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_mail_opt_res_mail_update* gs_c_mail_opt_res_mail_update::default_instance_ = NULL;

gs_c_mail_opt_res_mail_update* gs_c_mail_opt_res_mail_update::New() const {
  return new gs_c_mail_opt_res_mail_update;
}

void gs_c_mail_opt_res_mail_update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0u;
    mail_status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_mail_opt_res_mail_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_status;
        break;
      }

      // required .MAIL_STATUS mail_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MAIL_STATUS_IsValid(value)) {
            set_mail_status(static_cast< ::MAIL_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_mail_opt_res_mail_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // required .MAIL_STATUS mail_status = 2;
  if (has_mail_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mail_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_mail_opt_res_mail_update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // required .MAIL_STATUS mail_status = 2;
  if (has_mail_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mail_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_mail_opt_res_mail_update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

    // required .MAIL_STATUS mail_status = 2;
    if (has_mail_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mail_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_mail_opt_res_mail_update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_mail_opt_res_mail_update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_mail_opt_res_mail_update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_mail_opt_res_mail_update::MergeFrom(const gs_c_mail_opt_res_mail_update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_mail_status()) {
      set_mail_status(from.mail_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_mail_opt_res_mail_update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_mail_opt_res_mail_update::CopyFrom(const gs_c_mail_opt_res_mail_update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_mail_opt_res_mail_update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gs_c_mail_opt_res_mail_update::Swap(gs_c_mail_opt_res_mail_update* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(mail_status_, other->mail_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_mail_opt_res_mail_update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_mail_opt_res_mail_update_descriptor_;
  metadata.reflection = gs_c_mail_opt_res_mail_update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_c_mail_opt_res::kErrorCodeFieldNumber;
const int gs_c_mail_opt_res::kMailUpdateArrFieldNumber;
const int gs_c_mail_opt_res::kOutputArrFieldNumber;
#endif  // !_MSC_VER

gs_c_mail_opt_res::gs_c_mail_opt_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_mail_opt_res::InitAsDefaultInstance() {
}

gs_c_mail_opt_res::gs_c_mail_opt_res(const gs_c_mail_opt_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_mail_opt_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_mail_opt_res::~gs_c_mail_opt_res() {
  SharedDtor();
}

void gs_c_mail_opt_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_mail_opt_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_mail_opt_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_mail_opt_res_descriptor_;
}

const gs_c_mail_opt_res& gs_c_mail_opt_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_mail_opt_res* gs_c_mail_opt_res::default_instance_ = NULL;

gs_c_mail_opt_res* gs_c_mail_opt_res::New() const {
  return new gs_c_mail_opt_res;
}

void gs_c_mail_opt_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  mail_update_arr_.Clear();
  output_arr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_mail_opt_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail_update_arr;
        break;
      }

      // repeated .gs_c_mail_opt_res.mail_update mail_update_arr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail_update_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail_update_arr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail_update_arr;
        if (input->ExpectTag(26)) goto parse_output_arr;
        break;
      }

      // repeated .struct_game_element output_arr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output_arr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_output_arr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_mail_opt_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .gs_c_mail_opt_res.mail_update mail_update_arr = 2;
  for (int i = 0; i < this->mail_update_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail_update_arr(i), output);
  }

  // repeated .struct_game_element output_arr = 3;
  for (int i = 0; i < this->output_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->output_arr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_mail_opt_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .gs_c_mail_opt_res.mail_update mail_update_arr = 2;
  for (int i = 0; i < this->mail_update_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail_update_arr(i), target);
  }

  // repeated .struct_game_element output_arr = 3;
  for (int i = 0; i < this->output_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->output_arr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_mail_opt_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .gs_c_mail_opt_res.mail_update mail_update_arr = 2;
  total_size += 1 * this->mail_update_arr_size();
  for (int i = 0; i < this->mail_update_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail_update_arr(i));
  }

  // repeated .struct_game_element output_arr = 3;
  total_size += 1 * this->output_arr_size();
  for (int i = 0; i < this->output_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output_arr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_mail_opt_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_mail_opt_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_mail_opt_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_mail_opt_res::MergeFrom(const gs_c_mail_opt_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_update_arr_.MergeFrom(from.mail_update_arr_);
  output_arr_.MergeFrom(from.output_arr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_mail_opt_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_mail_opt_res::CopyFrom(const gs_c_mail_opt_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_mail_opt_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mail_update_arr_size(); i++) {
    if (!this->mail_update_arr(i).IsInitialized()) return false;
  }
  for (int i = 0; i < output_arr_size(); i++) {
    if (!this->output_arr(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_mail_opt_res::Swap(gs_c_mail_opt_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    mail_update_arr_.Swap(&other->mail_update_arr_);
    output_arr_.Swap(&other->output_arr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_mail_opt_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_mail_opt_res_descriptor_;
  metadata.reflection = gs_c_mail_opt_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* gs_c_mail_ntf_OP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_mail_ntf_OP_TYPE_descriptor_;
}
bool gs_c_mail_ntf_OP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_c_mail_ntf_OP_TYPE gs_c_mail_ntf::ADD;
const gs_c_mail_ntf_OP_TYPE gs_c_mail_ntf::DEL;
const gs_c_mail_ntf_OP_TYPE gs_c_mail_ntf::OP_TYPE_MIN;
const gs_c_mail_ntf_OP_TYPE gs_c_mail_ntf::OP_TYPE_MAX;
const int gs_c_mail_ntf::OP_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_c_mail_ntf::kTypeFieldNumber;
const int gs_c_mail_ntf::kEleFieldNumber;
const int gs_c_mail_ntf::kMailIdFieldNumber;
#endif  // !_MSC_VER

gs_c_mail_ntf::gs_c_mail_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_mail_ntf::InitAsDefaultInstance() {
  ele_ = const_cast< ::user_mail*>(&::user_mail::default_instance());
}

gs_c_mail_ntf::gs_c_mail_ntf(const gs_c_mail_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_mail_ntf::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ele_ = NULL;
  mail_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_mail_ntf::~gs_c_mail_ntf() {
  SharedDtor();
}

void gs_c_mail_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete ele_;
  }
}

void gs_c_mail_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_mail_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_mail_ntf_descriptor_;
}

const gs_c_mail_ntf& gs_c_mail_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_mail_ntf* gs_c_mail_ntf::default_instance_ = NULL;

gs_c_mail_ntf* gs_c_mail_ntf::New() const {
  return new gs_c_mail_ntf;
}

void gs_c_mail_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_ele()) {
      if (ele_ != NULL) ele_->::user_mail::Clear();
    }
    mail_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_mail_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_c_mail_ntf.OP_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_c_mail_ntf_OP_TYPE_IsValid(value)) {
            set_type(static_cast< ::gs_c_mail_ntf_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ele;
        break;
      }

      // optional .user_mail ele = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ele:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ele()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_id;
        break;
      }

      // optional uint32 mail_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_mail_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_c_mail_ntf.OP_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .user_mail ele = 2;
  if (has_ele()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ele(), output);
  }

  // optional uint32 mail_id = 3;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mail_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_mail_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_c_mail_ntf.OP_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .user_mail ele = 2;
  if (has_ele()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ele(), target);
  }

  // optional uint32 mail_id = 3;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mail_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_mail_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_c_mail_ntf.OP_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .user_mail ele = 2;
    if (has_ele()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ele());
    }

    // optional uint32 mail_id = 3;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_mail_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_mail_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_mail_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_mail_ntf::MergeFrom(const gs_c_mail_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ele()) {
      mutable_ele()->::user_mail::MergeFrom(from.ele());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_mail_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_mail_ntf::CopyFrom(const gs_c_mail_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_mail_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ele()) {
    if (!this->ele().IsInitialized()) return false;
  }
  return true;
}

void gs_c_mail_ntf::Swap(gs_c_mail_ntf* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ele_, other->ele_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_mail_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_mail_ntf_descriptor_;
  metadata.reflection = gs_c_mail_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_mail_ntf_array::kMailsFieldNumber;
const int gs_c_mail_ntf_array::kElesFieldNumber;
#endif  // !_MSC_VER

gs_c_mail_ntf_array::gs_c_mail_ntf_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_mail_ntf_array::InitAsDefaultInstance() {
}

gs_c_mail_ntf_array::gs_c_mail_ntf_array(const gs_c_mail_ntf_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_mail_ntf_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_mail_ntf_array::~gs_c_mail_ntf_array() {
  SharedDtor();
}

void gs_c_mail_ntf_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_mail_ntf_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_mail_ntf_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_mail_ntf_array_descriptor_;
}

const gs_c_mail_ntf_array& gs_c_mail_ntf_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_mail_ntf_array* gs_c_mail_ntf_array::default_instance_ = NULL;

gs_c_mail_ntf_array* gs_c_mail_ntf_array::New() const {
  return new gs_c_mail_ntf_array;
}

void gs_c_mail_ntf_array::Clear() {
  mails_.Clear();
  eles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_mail_ntf_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gs_c_mail_ntf mails = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mails;
        if (input->ExpectTag(18)) goto parse_eles;
        break;
      }

      // repeated .struct_game_element eles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_mail_ntf_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gs_c_mail_ntf mails = 1;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mails(i), output);
  }

  // repeated .struct_game_element eles = 2;
  for (int i = 0; i < this->eles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_mail_ntf_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gs_c_mail_ntf mails = 1;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mails(i), target);
  }

  // repeated .struct_game_element eles = 2;
  for (int i = 0; i < this->eles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_mail_ntf_array::ByteSize() const {
  int total_size = 0;

  // repeated .gs_c_mail_ntf mails = 1;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  // repeated .struct_game_element eles = 2;
  total_size += 1 * this->eles_size();
  for (int i = 0; i < this->eles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_mail_ntf_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_mail_ntf_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_mail_ntf_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_mail_ntf_array::MergeFrom(const gs_c_mail_ntf_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  eles_.MergeFrom(from.eles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_mail_ntf_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_mail_ntf_array::CopyFrom(const gs_c_mail_ntf_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_mail_ntf_array::IsInitialized() const {

  for (int i = 0; i < mails_size(); i++) {
    if (!this->mails(i).IsInitialized()) return false;
  }
  for (int i = 0; i < eles_size(); i++) {
    if (!this->eles(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_mail_ntf_array::Swap(gs_c_mail_ntf_array* other) {
  if (other != this) {
    mails_.Swap(&other->mails_);
    eles_.Swap(&other->eles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_mail_ntf_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_mail_ntf_array_descriptor_;
  metadata.reflection = gs_c_mail_ntf_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_buy_req::kBuyTypeFieldNumber;
const int c_gs_buy_req::kElementIdFieldNumber;
#endif  // !_MSC_VER

c_gs_buy_req::c_gs_buy_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_buy_req::InitAsDefaultInstance() {
}

c_gs_buy_req::c_gs_buy_req(const c_gs_buy_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_buy_req::SharedCtor() {
  _cached_size_ = 0;
  buy_type_ = 0;
  element_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_buy_req::~c_gs_buy_req() {
  SharedDtor();
}

void c_gs_buy_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_buy_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_buy_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_buy_req_descriptor_;
}

const c_gs_buy_req& c_gs_buy_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_buy_req* c_gs_buy_req::default_instance_ = NULL;

c_gs_buy_req* c_gs_buy_req::New() const {
  return new c_gs_buy_req;
}

void c_gs_buy_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buy_type_ = 0;
    element_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_buy_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .struct_game_element.EELEMENTTYPE buy_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::struct_game_element_EELEMENTTYPE_IsValid(value)) {
            set_buy_type(static_cast< ::struct_game_element_EELEMENTTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_element_id;
        break;
      }

      // optional uint32 element_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_id_)));
          set_has_element_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_buy_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .struct_game_element.EELEMENTTYPE buy_type = 1;
  if (has_buy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->buy_type(), output);
  }

  // optional uint32 element_id = 2;
  if (has_element_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->element_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_buy_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .struct_game_element.EELEMENTTYPE buy_type = 1;
  if (has_buy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->buy_type(), target);
  }

  // optional uint32 element_id = 2;
  if (has_element_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->element_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_buy_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .struct_game_element.EELEMENTTYPE buy_type = 1;
    if (has_buy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buy_type());
    }

    // optional uint32 element_id = 2;
    if (has_element_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->element_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_buy_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_buy_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_buy_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_buy_req::MergeFrom(const c_gs_buy_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buy_type()) {
      set_buy_type(from.buy_type());
    }
    if (from.has_element_id()) {
      set_element_id(from.element_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_buy_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_buy_req::CopyFrom(const c_gs_buy_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_buy_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_buy_req::Swap(c_gs_buy_req* other) {
  if (other != this) {
    std::swap(buy_type_, other->buy_type_);
    std::swap(element_id_, other->element_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_buy_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_buy_req_descriptor_;
  metadata.reflection = c_gs_buy_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_buy_res::kErrorCodeFieldNumber;
const int gs_c_buy_res::kBuyTypeFieldNumber;
const int gs_c_buy_res::kConsumeFieldNumber;
const int gs_c_buy_res::kOutputFieldNumber;
const int gs_c_buy_res::kBuyUsedTimesFieldNumber;
#endif  // !_MSC_VER

gs_c_buy_res::gs_c_buy_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_buy_res::InitAsDefaultInstance() {
  output_ = const_cast< ::struct_game_element*>(&::struct_game_element::default_instance());
}

gs_c_buy_res::gs_c_buy_res(const gs_c_buy_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_buy_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  buy_type_ = 0;
  output_ = NULL;
  buy_used_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_buy_res::~gs_c_buy_res() {
  SharedDtor();
}

void gs_c_buy_res::SharedDtor() {
  if (this != default_instance_) {
    delete output_;
  }
}

void gs_c_buy_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_buy_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_buy_res_descriptor_;
}

const gs_c_buy_res& gs_c_buy_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_buy_res* gs_c_buy_res::default_instance_ = NULL;

gs_c_buy_res* gs_c_buy_res::New() const {
  return new gs_c_buy_res;
}

void gs_c_buy_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    buy_type_ = 0;
    if (has_output()) {
      if (output_ != NULL) output_->::struct_game_element::Clear();
    }
    buy_used_times_ = 0u;
  }
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_buy_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_type;
        break;
      }

      // optional .struct_game_element.EELEMENTTYPE buy_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::struct_game_element_EELEMENTTYPE_IsValid(value)) {
            set_buy_type(static_cast< ::struct_game_element_EELEMENTTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consume;
        if (input->ExpectTag(34)) goto parse_output;
        break;
      }

      // optional .struct_game_element output = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_used_times;
        break;
      }

      // optional uint32 buy_used_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_used_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_used_times_)));
          set_has_buy_used_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_buy_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional .struct_game_element.EELEMENTTYPE buy_type = 2;
  if (has_buy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->buy_type(), output);
  }

  // repeated .struct_game_element consume = 3;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->consume(i), output);
  }

  // optional .struct_game_element output = 4;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->output(), output);
  }

  // optional uint32 buy_used_times = 5;
  if (has_buy_used_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buy_used_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_buy_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional .struct_game_element.EELEMENTTYPE buy_type = 2;
  if (has_buy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->buy_type(), target);
  }

  // repeated .struct_game_element consume = 3;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->consume(i), target);
  }

  // optional .struct_game_element output = 4;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->output(), target);
  }

  // optional uint32 buy_used_times = 5;
  if (has_buy_used_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buy_used_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_buy_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .struct_game_element.EELEMENTTYPE buy_type = 2;
    if (has_buy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buy_type());
    }

    // optional .struct_game_element output = 4;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output());
    }

    // optional uint32 buy_used_times = 5;
    if (has_buy_used_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_used_times());
    }

  }
  // repeated .struct_game_element consume = 3;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_buy_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_buy_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_buy_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_buy_res::MergeFrom(const gs_c_buy_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_buy_type()) {
      set_buy_type(from.buy_type());
    }
    if (from.has_output()) {
      mutable_output()->::struct_game_element::MergeFrom(from.output());
    }
    if (from.has_buy_used_times()) {
      set_buy_used_times(from.buy_used_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_buy_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_buy_res::CopyFrom(const gs_c_buy_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_buy_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  if (has_output()) {
    if (!this->output().IsInitialized()) return false;
  }
  return true;
}

void gs_c_buy_res::Swap(gs_c_buy_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(buy_type_, other->buy_type_);
    consume_.Swap(&other->consume_);
    std::swap(output_, other->output_);
    std::swap(buy_used_times_, other->buy_used_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_buy_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_buy_res_descriptor_;
  metadata.reflection = gs_c_buy_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* user_mission_MISSION_EVENT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_mission_MISSION_EVENT_TYPE_descriptor_;
}
bool user_mission_MISSION_EVENT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const user_mission_MISSION_EVENT_TYPE user_mission::min;
const user_mission_MISSION_EVENT_TYPE user_mission::SKILL_LEVEL_UP;
const user_mission_MISSION_EVENT_TYPE user_mission::RECHARGE;
const user_mission_MISSION_EVENT_TYPE user_mission::COMMON_FB_COMPLETE;
const user_mission_MISSION_EVENT_TYPE user_mission::COMMON_FB_ALL_THROUGH;
const user_mission_MISSION_EVENT_TYPE user_mission::COMMON_FB_ALL_THROUGH_THREE_STAR;
const user_mission_MISSION_EVENT_TYPE user_mission::EQUIP_LEVEL_UP;
const user_mission_MISSION_EVENT_TYPE user_mission::RECHARGE_MISSION_MONTH_CARD1;
const user_mission_MISSION_EVENT_TYPE user_mission::GIVE_FRIEND_HEALTH;
const user_mission_MISSION_EVENT_TYPE user_mission::HERO_COLLECT;
const user_mission_MISSION_EVENT_TYPE user_mission::HEALTH_MEAL;
const user_mission_MISSION_EVENT_TYPE user_mission::GET_REWARD;
const user_mission_MISSION_EVENT_TYPE user_mission::RECHARGE_MISSION_MONTH_CARD2;
const user_mission_MISSION_EVENT_TYPE user_mission::MISSION_MAIN;
const user_mission_MISSION_EVENT_TYPE user_mission::MISSION_FREE;
const user_mission_MISSION_EVENT_TYPE user_mission::ACTIVITY;
const user_mission_MISSION_EVENT_TYPE user_mission::JI_TAN;
const user_mission_MISSION_EVENT_TYPE user_mission::ARENA_CHALLENGE;
const user_mission_MISSION_EVENT_TYPE user_mission::SHI_LIAN_TA;
const user_mission_MISSION_EVENT_TYPE user_mission::CRUSADE;
const user_mission_MISSION_EVENT_TYPE user_mission::LEVEL_UP;
const user_mission_MISSION_EVENT_TYPE user_mission::BUY_GOLD;
const user_mission_MISSION_EVENT_TYPE user_mission::FB_FAIL;
const user_mission_MISSION_EVENT_TYPE user_mission::COMPLETE_CHAPTER_ALL_FB_THREE_STAR;
const user_mission_MISSION_EVENT_TYPE user_mission::ARENA_RANK_TOP;
const user_mission_MISSION_EVENT_TYPE user_mission::COMPLETE_CHAPTER_FB;
const user_mission_MISSION_EVENT_TYPE user_mission::max;
const user_mission_MISSION_EVENT_TYPE user_mission::MISSION_EVENT_TYPE_MIN;
const user_mission_MISSION_EVENT_TYPE user_mission::MISSION_EVENT_TYPE_MAX;
const int user_mission::MISSION_EVENT_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* user_mission_MISSION_EVENT_SUB_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_mission_MISSION_EVENT_SUB_TYPE_descriptor_;
}
bool user_mission_MISSION_EVENT_SUB_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const user_mission_MISSION_EVENT_SUB_TYPE user_mission::MIN;
const user_mission_MISSION_EVENT_SUB_TYPE user_mission::NONE;
const user_mission_MISSION_EVENT_SUB_TYPE user_mission::HERO_QUALITY_GREEN;
const user_mission_MISSION_EVENT_SUB_TYPE user_mission::HERO_QUALITY_BLUE;
const user_mission_MISSION_EVENT_SUB_TYPE user_mission::HERO_STAR_FOUR;
const user_mission_MISSION_EVENT_SUB_TYPE user_mission::HERO_STAR_THREE;
const user_mission_MISSION_EVENT_SUB_TYPE user_mission::PLAYER_LEVEL;
const user_mission_MISSION_EVENT_SUB_TYPE user_mission::VIP_LEVEL;
const user_mission_MISSION_EVENT_SUB_TYPE user_mission::HUAXIA;
const user_mission_MISSION_EVENT_SUB_TYPE user_mission::MAX;
const user_mission_MISSION_EVENT_SUB_TYPE user_mission::MISSION_EVENT_SUB_TYPE_MIN;
const user_mission_MISSION_EVENT_SUB_TYPE user_mission::MISSION_EVENT_SUB_TYPE_MAX;
const int user_mission::MISSION_EVENT_SUB_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* user_mission_MISSION_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_mission_MISSION_STATUS_descriptor_;
}
bool user_mission_MISSION_STATUS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const user_mission_MISSION_STATUS user_mission::STATUS_CAN_ATTACH;
const user_mission_MISSION_STATUS user_mission::STATUS_IN;
const user_mission_MISSION_STATUS user_mission::STATUS_NOT_TO_TIME;
const user_mission_MISSION_STATUS user_mission::STATUS_CAN_NOT_SEE;
const user_mission_MISSION_STATUS user_mission::STATUS_DELED;
const user_mission_MISSION_STATUS user_mission::STATUS_ALREADY_ATTACH;
const user_mission_MISSION_STATUS user_mission::MISSION_STATUS_MIN;
const user_mission_MISSION_STATUS user_mission::MISSION_STATUS_MAX;
const int user_mission::MISSION_STATUS_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int user_mission_mission_event_need::kEventTypeFieldNumber;
const int user_mission_mission_event_need::kEventSubTypeFieldNumber;
const int user_mission_mission_event_need::kCurValFieldNumber;
const int user_mission_mission_event_need::kNeedValFieldNumber;
#endif  // !_MSC_VER

user_mission_mission_event_need::user_mission_mission_event_need()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_mission_mission_event_need::InitAsDefaultInstance() {
}

user_mission_mission_event_need::user_mission_mission_event_need(const user_mission_mission_event_need& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_mission_mission_event_need::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0;
  event_sub_type_ = 0u;
  cur_val_ = 0u;
  need_val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_mission_mission_event_need::~user_mission_mission_event_need() {
  SharedDtor();
}

void user_mission_mission_event_need::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_mission_mission_event_need::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_mission_mission_event_need::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_mission_mission_event_need_descriptor_;
}

const user_mission_mission_event_need& user_mission_mission_event_need::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_mission_mission_event_need* user_mission_mission_event_need::default_instance_ = NULL;

user_mission_mission_event_need* user_mission_mission_event_need::New() const {
  return new user_mission_mission_event_need;
}

void user_mission_mission_event_need::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 0;
    event_sub_type_ = 0u;
    cur_val_ = 0u;
    need_val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_mission_mission_event_need::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .user_mission.MISSION_EVENT_TYPE event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_mission_MISSION_EVENT_TYPE_IsValid(value)) {
            set_event_type(static_cast< ::user_mission_MISSION_EVENT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_sub_type;
        break;
      }

      // optional uint32 event_sub_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_sub_type_)));
          set_has_event_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_val;
        break;
      }

      // optional uint32 cur_val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_val_)));
          set_has_cur_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_need_val;
        break;
      }

      // optional uint32 need_val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_val_)));
          set_has_need_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_mission_mission_event_need::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .user_mission.MISSION_EVENT_TYPE event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  // optional uint32 event_sub_type = 2;
  if (has_event_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_sub_type(), output);
  }

  // optional uint32 cur_val = 3;
  if (has_cur_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_val(), output);
  }

  // optional uint32 need_val = 4;
  if (has_need_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->need_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_mission_mission_event_need::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .user_mission.MISSION_EVENT_TYPE event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  // optional uint32 event_sub_type = 2;
  if (has_event_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_sub_type(), target);
  }

  // optional uint32 cur_val = 3;
  if (has_cur_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_val(), target);
  }

  // optional uint32 need_val = 4;
  if (has_need_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->need_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_mission_mission_event_need::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .user_mission.MISSION_EVENT_TYPE event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional uint32 event_sub_type = 2;
    if (has_event_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_sub_type());
    }

    // optional uint32 cur_val = 3;
    if (has_cur_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_val());
    }

    // optional uint32 need_val = 4;
    if (has_need_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_mission_mission_event_need::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_mission_mission_event_need* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_mission_mission_event_need*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_mission_mission_event_need::MergeFrom(const user_mission_mission_event_need& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_event_sub_type()) {
      set_event_sub_type(from.event_sub_type());
    }
    if (from.has_cur_val()) {
      set_cur_val(from.cur_val());
    }
    if (from.has_need_val()) {
      set_need_val(from.need_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_mission_mission_event_need::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_mission_mission_event_need::CopyFrom(const user_mission_mission_event_need& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_mission_mission_event_need::IsInitialized() const {

  return true;
}

void user_mission_mission_event_need::Swap(user_mission_mission_event_need* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(event_sub_type_, other->event_sub_type_);
    std::swap(cur_val_, other->cur_val_);
    std::swap(need_val_, other->need_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_mission_mission_event_need::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_mission_mission_event_need_descriptor_;
  metadata.reflection = user_mission_mission_event_need_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int user_mission::kMissionIdFieldNumber;
const int user_mission::kMissionStatusFieldNumber;
const int user_mission::kEventNeedsFieldNumber;
#endif  // !_MSC_VER

user_mission::user_mission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_mission::InitAsDefaultInstance() {
}

user_mission::user_mission(const user_mission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_mission::SharedCtor() {
  _cached_size_ = 0;
  mission_id_ = 0u;
  mission_status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_mission::~user_mission() {
  SharedDtor();
}

void user_mission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_mission_descriptor_;
}

const user_mission& user_mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_mission* user_mission::default_instance_ = NULL;

user_mission* user_mission::New() const {
  return new user_mission;
}

void user_mission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_id_ = 0u;
    mission_status_ = 1;
  }
  event_needs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mission_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mission_status;
        break;
      }

      // required .user_mission.MISSION_STATUS mission_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_mission_MISSION_STATUS_IsValid(value)) {
            set_mission_status(static_cast< ::user_mission_MISSION_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_needs;
        break;
      }

      // repeated .user_mission.mission_event_need event_needs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_needs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_needs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_needs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mission_id = 1;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mission_id(), output);
  }

  // required .user_mission.MISSION_STATUS mission_status = 2;
  if (has_mission_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mission_status(), output);
  }

  // repeated .user_mission.mission_event_need event_needs = 3;
  for (int i = 0; i < this->event_needs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->event_needs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_mission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mission_id = 1;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mission_id(), target);
  }

  // required .user_mission.MISSION_STATUS mission_status = 2;
  if (has_mission_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mission_status(), target);
  }

  // repeated .user_mission.mission_event_need event_needs = 3;
  for (int i = 0; i < this->event_needs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->event_needs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_mission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mission_id = 1;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_id());
    }

    // required .user_mission.MISSION_STATUS mission_status = 2;
    if (has_mission_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mission_status());
    }

  }
  // repeated .user_mission.mission_event_need event_needs = 3;
  total_size += 1 * this->event_needs_size();
  for (int i = 0; i < this->event_needs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_needs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_mission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_mission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_mission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_mission::MergeFrom(const user_mission& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_needs_.MergeFrom(from.event_needs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_mission_status()) {
      set_mission_status(from.mission_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_mission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_mission::CopyFrom(const user_mission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_mission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void user_mission::Swap(user_mission* other) {
  if (other != this) {
    std::swap(mission_id_, other->mission_id_);
    std::swap(mission_status_, other->mission_status_);
    event_needs_.Swap(&other->event_needs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_mission_descriptor_;
  metadata.reflection = user_mission_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* gs_c_mission_ntf_array_mission_opt_OPT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_mission_ntf_array_mission_opt_OPT_descriptor_;
}
bool gs_c_mission_ntf_array_mission_opt_OPT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_c_mission_ntf_array_mission_opt_OPT gs_c_mission_ntf_array_mission_opt::ADD;
const gs_c_mission_ntf_array_mission_opt_OPT gs_c_mission_ntf_array_mission_opt::DEL;
const gs_c_mission_ntf_array_mission_opt_OPT gs_c_mission_ntf_array_mission_opt::UPDATE;
const gs_c_mission_ntf_array_mission_opt_OPT gs_c_mission_ntf_array_mission_opt::OPT_MIN;
const gs_c_mission_ntf_array_mission_opt_OPT gs_c_mission_ntf_array_mission_opt::OPT_MAX;
const int gs_c_mission_ntf_array_mission_opt::OPT_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_c_mission_ntf_array_mission_opt::kOptFieldNumber;
const int gs_c_mission_ntf_array_mission_opt::kMisFieldNumber;
#endif  // !_MSC_VER

gs_c_mission_ntf_array_mission_opt::gs_c_mission_ntf_array_mission_opt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_mission_ntf_array_mission_opt::InitAsDefaultInstance() {
  mis_ = const_cast< ::user_mission*>(&::user_mission::default_instance());
}

gs_c_mission_ntf_array_mission_opt::gs_c_mission_ntf_array_mission_opt(const gs_c_mission_ntf_array_mission_opt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_mission_ntf_array_mission_opt::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 1;
  mis_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_mission_ntf_array_mission_opt::~gs_c_mission_ntf_array_mission_opt() {
  SharedDtor();
}

void gs_c_mission_ntf_array_mission_opt::SharedDtor() {
  if (this != default_instance_) {
    delete mis_;
  }
}

void gs_c_mission_ntf_array_mission_opt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_mission_ntf_array_mission_opt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_mission_ntf_array_mission_opt_descriptor_;
}

const gs_c_mission_ntf_array_mission_opt& gs_c_mission_ntf_array_mission_opt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_mission_ntf_array_mission_opt* gs_c_mission_ntf_array_mission_opt::default_instance_ = NULL;

gs_c_mission_ntf_array_mission_opt* gs_c_mission_ntf_array_mission_opt::New() const {
  return new gs_c_mission_ntf_array_mission_opt;
}

void gs_c_mission_ntf_array_mission_opt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 1;
    if (has_mis()) {
      if (mis_ != NULL) mis_->::user_mission::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_mission_ntf_array_mission_opt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_c_mission_ntf_array.mission_opt.OPT opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_c_mission_ntf_array_mission_opt_OPT_IsValid(value)) {
            set_opt(static_cast< ::gs_c_mission_ntf_array_mission_opt_OPT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mis;
        break;
      }

      // required .user_mission mis = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_mission_ntf_array_mission_opt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_c_mission_ntf_array.mission_opt.OPT opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opt(), output);
  }

  // required .user_mission mis = 2;
  if (has_mis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_mission_ntf_array_mission_opt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_c_mission_ntf_array.mission_opt.OPT opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opt(), target);
  }

  // required .user_mission mis = 2;
  if (has_mis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_mission_ntf_array_mission_opt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_c_mission_ntf_array.mission_opt.OPT opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
    }

    // required .user_mission mis = 2;
    if (has_mis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_mission_ntf_array_mission_opt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_mission_ntf_array_mission_opt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_mission_ntf_array_mission_opt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_mission_ntf_array_mission_opt::MergeFrom(const gs_c_mission_ntf_array_mission_opt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_mis()) {
      mutable_mis()->::user_mission::MergeFrom(from.mis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_mission_ntf_array_mission_opt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_mission_ntf_array_mission_opt::CopyFrom(const gs_c_mission_ntf_array_mission_opt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_mission_ntf_array_mission_opt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mis()) {
    if (!this->mis().IsInitialized()) return false;
  }
  return true;
}

void gs_c_mission_ntf_array_mission_opt::Swap(gs_c_mission_ntf_array_mission_opt* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(mis_, other->mis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_mission_ntf_array_mission_opt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_mission_ntf_array_mission_opt_descriptor_;
  metadata.reflection = gs_c_mission_ntf_array_mission_opt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_c_mission_ntf_array::kMisOptsFieldNumber;
#endif  // !_MSC_VER

gs_c_mission_ntf_array::gs_c_mission_ntf_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_mission_ntf_array::InitAsDefaultInstance() {
}

gs_c_mission_ntf_array::gs_c_mission_ntf_array(const gs_c_mission_ntf_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_mission_ntf_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_mission_ntf_array::~gs_c_mission_ntf_array() {
  SharedDtor();
}

void gs_c_mission_ntf_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_mission_ntf_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_mission_ntf_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_mission_ntf_array_descriptor_;
}

const gs_c_mission_ntf_array& gs_c_mission_ntf_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_mission_ntf_array* gs_c_mission_ntf_array::default_instance_ = NULL;

gs_c_mission_ntf_array* gs_c_mission_ntf_array::New() const {
  return new gs_c_mission_ntf_array;
}

void gs_c_mission_ntf_array::Clear() {
  mis_opts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_mission_ntf_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gs_c_mission_ntf_array.mission_opt mis_opts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mis_opts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mis_opts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mis_opts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_mission_ntf_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .gs_c_mission_ntf_array.mission_opt mis_opts = 1;
  for (int i = 0; i < this->mis_opts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mis_opts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_mission_ntf_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .gs_c_mission_ntf_array.mission_opt mis_opts = 1;
  for (int i = 0; i < this->mis_opts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mis_opts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_mission_ntf_array::ByteSize() const {
  int total_size = 0;

  // repeated .gs_c_mission_ntf_array.mission_opt mis_opts = 1;
  total_size += 1 * this->mis_opts_size();
  for (int i = 0; i < this->mis_opts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mis_opts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_mission_ntf_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_mission_ntf_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_mission_ntf_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_mission_ntf_array::MergeFrom(const gs_c_mission_ntf_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  mis_opts_.MergeFrom(from.mis_opts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_mission_ntf_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_mission_ntf_array::CopyFrom(const gs_c_mission_ntf_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_mission_ntf_array::IsInitialized() const {

  for (int i = 0; i < mis_opts_size(); i++) {
    if (!this->mis_opts(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_mission_ntf_array::Swap(gs_c_mission_ntf_array* other) {
  if (other != this) {
    mis_opts_.Swap(&other->mis_opts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_mission_ntf_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_mission_ntf_array_descriptor_;
  metadata.reflection = gs_c_mission_ntf_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_get_mission_reward_req::kMissionIdFieldNumber;
#endif  // !_MSC_VER

c_gs_get_mission_reward_req::c_gs_get_mission_reward_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_get_mission_reward_req::InitAsDefaultInstance() {
}

c_gs_get_mission_reward_req::c_gs_get_mission_reward_req(const c_gs_get_mission_reward_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_get_mission_reward_req::SharedCtor() {
  _cached_size_ = 0;
  mission_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_get_mission_reward_req::~c_gs_get_mission_reward_req() {
  SharedDtor();
}

void c_gs_get_mission_reward_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_get_mission_reward_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_get_mission_reward_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_get_mission_reward_req_descriptor_;
}

const c_gs_get_mission_reward_req& c_gs_get_mission_reward_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_get_mission_reward_req* c_gs_get_mission_reward_req::default_instance_ = NULL;

c_gs_get_mission_reward_req* c_gs_get_mission_reward_req::New() const {
  return new c_gs_get_mission_reward_req;
}

void c_gs_get_mission_reward_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_get_mission_reward_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mission_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_get_mission_reward_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mission_id = 1;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mission_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_get_mission_reward_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mission_id = 1;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mission_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_get_mission_reward_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mission_id = 1;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_get_mission_reward_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_get_mission_reward_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_get_mission_reward_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_get_mission_reward_req::MergeFrom(const c_gs_get_mission_reward_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_get_mission_reward_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_get_mission_reward_req::CopyFrom(const c_gs_get_mission_reward_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_get_mission_reward_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_get_mission_reward_req::Swap(c_gs_get_mission_reward_req* other) {
  if (other != this) {
    std::swap(mission_id_, other->mission_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_get_mission_reward_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_get_mission_reward_req_descriptor_;
  metadata.reflection = c_gs_get_mission_reward_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_get_mission_reward_res::kErrorCodeFieldNumber;
const int gs_c_get_mission_reward_res::kMissionIdFieldNumber;
const int gs_c_get_mission_reward_res::kStatusFieldNumber;
const int gs_c_get_mission_reward_res::kElesFieldNumber;
#endif  // !_MSC_VER

gs_c_get_mission_reward_res::gs_c_get_mission_reward_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_get_mission_reward_res::InitAsDefaultInstance() {
}

gs_c_get_mission_reward_res::gs_c_get_mission_reward_res(const gs_c_get_mission_reward_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_get_mission_reward_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  mission_id_ = 0u;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_get_mission_reward_res::~gs_c_get_mission_reward_res() {
  SharedDtor();
}

void gs_c_get_mission_reward_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_get_mission_reward_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_get_mission_reward_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_get_mission_reward_res_descriptor_;
}

const gs_c_get_mission_reward_res& gs_c_get_mission_reward_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_get_mission_reward_res* gs_c_get_mission_reward_res::default_instance_ = NULL;

gs_c_get_mission_reward_res* gs_c_get_mission_reward_res::New() const {
  return new gs_c_get_mission_reward_res;
}

void gs_c_get_mission_reward_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    mission_id_ = 0u;
    status_ = 1;
  }
  eles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_get_mission_reward_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mission_id;
        break;
      }

      // optional uint32 mission_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .user_mission.MISSION_STATUS status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_mission_MISSION_STATUS_IsValid(value)) {
            set_status(static_cast< ::user_mission_MISSION_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eles;
        break;
      }

      // repeated .struct_game_element eles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_get_mission_reward_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 mission_id = 2;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mission_id(), output);
  }

  // optional .user_mission.MISSION_STATUS status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // repeated .struct_game_element eles = 4;
  for (int i = 0; i < this->eles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->eles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_get_mission_reward_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 mission_id = 2;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mission_id(), target);
  }

  // optional .user_mission.MISSION_STATUS status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // repeated .struct_game_element eles = 4;
  for (int i = 0; i < this->eles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->eles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_get_mission_reward_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 mission_id = 2;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_id());
    }

    // optional .user_mission.MISSION_STATUS status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .struct_game_element eles = 4;
  total_size += 1 * this->eles_size();
  for (int i = 0; i < this->eles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_get_mission_reward_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_get_mission_reward_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_get_mission_reward_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_get_mission_reward_res::MergeFrom(const gs_c_get_mission_reward_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  eles_.MergeFrom(from.eles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_get_mission_reward_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_get_mission_reward_res::CopyFrom(const gs_c_get_mission_reward_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_get_mission_reward_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < eles_size(); i++) {
    if (!this->eles(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_get_mission_reward_res::Swap(gs_c_get_mission_reward_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(status_, other->status_);
    eles_.Swap(&other->eles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_get_mission_reward_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_get_mission_reward_res_descriptor_;
  metadata.reflection = gs_c_get_mission_reward_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* sign_n_reward_SIGN_N_REWARD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sign_n_reward_SIGN_N_REWARD_TYPE_descriptor_;
}
bool sign_n_reward_SIGN_N_REWARD_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const sign_n_reward_SIGN_N_REWARD_TYPE sign_n_reward::MIN;
const sign_n_reward_SIGN_N_REWARD_TYPE sign_n_reward::SIGN_N_REWARD_TYPE_FIRST;
const sign_n_reward_SIGN_N_REWARD_TYPE sign_n_reward::SIGN_N_REWARD_TYPE_SECOND;
const sign_n_reward_SIGN_N_REWARD_TYPE sign_n_reward::SIGN_N_REWARD_TYPE_THREE;
const sign_n_reward_SIGN_N_REWARD_TYPE sign_n_reward::SIGN_N_REWARD_TYPE_FOUR;
const sign_n_reward_SIGN_N_REWARD_TYPE sign_n_reward::MAX;
const sign_n_reward_SIGN_N_REWARD_TYPE sign_n_reward::SIGN_N_REWARD_TYPE_MIN;
const sign_n_reward_SIGN_N_REWARD_TYPE sign_n_reward::SIGN_N_REWARD_TYPE_MAX;
const int sign_n_reward::SIGN_N_REWARD_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* sign_n_reward_SIGN_N_REWARD_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sign_n_reward_SIGN_N_REWARD_STATUS_descriptor_;
}
bool sign_n_reward_SIGN_N_REWARD_STATUS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const sign_n_reward_SIGN_N_REWARD_STATUS sign_n_reward::STATUS_CONDITION_NOT_SATISFY;
const sign_n_reward_SIGN_N_REWARD_STATUS sign_n_reward::STATUS_ALREADY_GET_ATTACH;
const sign_n_reward_SIGN_N_REWARD_STATUS sign_n_reward::STATUS_CAN_ATTACH;
const sign_n_reward_SIGN_N_REWARD_STATUS sign_n_reward::SIGN_N_REWARD_STATUS_MIN;
const sign_n_reward_SIGN_N_REWARD_STATUS sign_n_reward::SIGN_N_REWARD_STATUS_MAX;
const int sign_n_reward::SIGN_N_REWARD_STATUS_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int sign_n_reward::kRewardTypeFieldNumber;
const int sign_n_reward::kStatusFieldNumber;
#endif  // !_MSC_VER

sign_n_reward::sign_n_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sign_n_reward::InitAsDefaultInstance() {
}

sign_n_reward::sign_n_reward(const sign_n_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sign_n_reward::SharedCtor() {
  _cached_size_ = 0;
  reward_type_ = 1;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sign_n_reward::~sign_n_reward() {
  SharedDtor();
}

void sign_n_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sign_n_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sign_n_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sign_n_reward_descriptor_;
}

const sign_n_reward& sign_n_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

sign_n_reward* sign_n_reward::default_instance_ = NULL;

sign_n_reward* sign_n_reward::New() const {
  return new sign_n_reward;
}

void sign_n_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_type_ = 1;
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sign_n_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sign_n_reward.SIGN_N_REWARD_TYPE reward_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sign_n_reward_SIGN_N_REWARD_TYPE_IsValid(value)) {
            set_reward_type(static_cast< ::sign_n_reward_SIGN_N_REWARD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .sign_n_reward.SIGN_N_REWARD_STATUS status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sign_n_reward_SIGN_N_REWARD_STATUS_IsValid(value)) {
            set_status(static_cast< ::sign_n_reward_SIGN_N_REWARD_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sign_n_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sign_n_reward.SIGN_N_REWARD_TYPE reward_type = 1;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reward_type(), output);
  }

  // required .sign_n_reward.SIGN_N_REWARD_STATUS status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sign_n_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .sign_n_reward.SIGN_N_REWARD_TYPE reward_type = 1;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reward_type(), target);
  }

  // required .sign_n_reward.SIGN_N_REWARD_STATUS status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sign_n_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sign_n_reward.SIGN_N_REWARD_TYPE reward_type = 1;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_type());
    }

    // required .sign_n_reward.SIGN_N_REWARD_STATUS status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sign_n_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sign_n_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sign_n_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sign_n_reward::MergeFrom(const sign_n_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sign_n_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sign_n_reward::CopyFrom(const sign_n_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sign_n_reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void sign_n_reward::Swap(sign_n_reward* other) {
  if (other != this) {
    std::swap(reward_type_, other->reward_type_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sign_n_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sign_n_reward_descriptor_;
  metadata.reflection = sign_n_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_sign::kSigned1TimesFieldNumber;
const int user_sign::kSignedNRewardFieldNumber;
const int user_sign::kLeftAddSignTimesFieldNumber;
const int user_sign::kIsAlreadySignFieldNumber;
#endif  // !_MSC_VER

user_sign::user_sign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_sign::InitAsDefaultInstance() {
}

user_sign::user_sign(const user_sign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_sign::SharedCtor() {
  _cached_size_ = 0;
  signed_1_times_ = 0u;
  left_add_sign_times_ = 0u;
  is_already_sign_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_sign::~user_sign() {
  SharedDtor();
}

void user_sign::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_sign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_sign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_sign_descriptor_;
}

const user_sign& user_sign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_sign* user_sign::default_instance_ = NULL;

user_sign* user_sign::New() const {
  return new user_sign;
}

void user_sign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signed_1_times_ = 0u;
    left_add_sign_times_ = 0u;
    is_already_sign_ = false;
  }
  signed_n_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_sign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 signed_1_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signed_1_times_)));
          set_has_signed_1_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signed_n_reward;
        break;
      }

      // repeated .sign_n_reward signed_n_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signed_n_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signed_n_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signed_n_reward;
        if (input->ExpectTag(24)) goto parse_left_add_sign_times;
        break;
      }

      // required uint32 left_add_sign_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_add_sign_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_add_sign_times_)));
          set_has_left_add_sign_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_already_sign;
        break;
      }

      // required bool is_already_sign = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_already_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_already_sign_)));
          set_has_is_already_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_sign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 signed_1_times = 1;
  if (has_signed_1_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->signed_1_times(), output);
  }

  // repeated .sign_n_reward signed_n_reward = 2;
  for (int i = 0; i < this->signed_n_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signed_n_reward(i), output);
  }

  // required uint32 left_add_sign_times = 3;
  if (has_left_add_sign_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->left_add_sign_times(), output);
  }

  // required bool is_already_sign = 4;
  if (has_is_already_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_already_sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_sign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 signed_1_times = 1;
  if (has_signed_1_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->signed_1_times(), target);
  }

  // repeated .sign_n_reward signed_n_reward = 2;
  for (int i = 0; i < this->signed_n_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->signed_n_reward(i), target);
  }

  // required uint32 left_add_sign_times = 3;
  if (has_left_add_sign_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->left_add_sign_times(), target);
  }

  // required bool is_already_sign = 4;
  if (has_is_already_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_already_sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_sign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 signed_1_times = 1;
    if (has_signed_1_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signed_1_times());
    }

    // required uint32 left_add_sign_times = 3;
    if (has_left_add_sign_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_add_sign_times());
    }

    // required bool is_already_sign = 4;
    if (has_is_already_sign()) {
      total_size += 1 + 1;
    }

  }
  // repeated .sign_n_reward signed_n_reward = 2;
  total_size += 1 * this->signed_n_reward_size();
  for (int i = 0; i < this->signed_n_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signed_n_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_sign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_sign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_sign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_sign::MergeFrom(const user_sign& from) {
  GOOGLE_CHECK_NE(&from, this);
  signed_n_reward_.MergeFrom(from.signed_n_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signed_1_times()) {
      set_signed_1_times(from.signed_1_times());
    }
    if (from.has_left_add_sign_times()) {
      set_left_add_sign_times(from.left_add_sign_times());
    }
    if (from.has_is_already_sign()) {
      set_is_already_sign(from.is_already_sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_sign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_sign::CopyFrom(const user_sign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_sign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  for (int i = 0; i < signed_n_reward_size(); i++) {
    if (!this->signed_n_reward(i).IsInitialized()) return false;
  }
  return true;
}

void user_sign::Swap(user_sign* other) {
  if (other != this) {
    std::swap(signed_1_times_, other->signed_1_times_);
    signed_n_reward_.Swap(&other->signed_n_reward_);
    std::swap(left_add_sign_times_, other->left_add_sign_times_);
    std::swap(is_already_sign_, other->is_already_sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_sign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_sign_descriptor_;
  metadata.reflection = user_sign_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* c_gs_sign_req_SIGN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_sign_req_SIGN_TYPE_descriptor_;
}
bool c_gs_sign_req_SIGN_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const c_gs_sign_req_SIGN_TYPE c_gs_sign_req::SIGN_TYPE_1;
const c_gs_sign_req_SIGN_TYPE c_gs_sign_req::SIGN_TYPE_N;
const c_gs_sign_req_SIGN_TYPE c_gs_sign_req::SIGN_TYPE_MIN;
const c_gs_sign_req_SIGN_TYPE c_gs_sign_req::SIGN_TYPE_MAX;
const int c_gs_sign_req::SIGN_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int c_gs_sign_req::kSignTypeFieldNumber;
const int c_gs_sign_req::kRewardTypeFieldNumber;
#endif  // !_MSC_VER

c_gs_sign_req::c_gs_sign_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_sign_req::InitAsDefaultInstance() {
}

c_gs_sign_req::c_gs_sign_req(const c_gs_sign_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_sign_req::SharedCtor() {
  _cached_size_ = 0;
  sign_type_ = 1;
  reward_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_sign_req::~c_gs_sign_req() {
  SharedDtor();
}

void c_gs_sign_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_sign_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_sign_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_sign_req_descriptor_;
}

const c_gs_sign_req& c_gs_sign_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_sign_req* c_gs_sign_req::default_instance_ = NULL;

c_gs_sign_req* c_gs_sign_req::New() const {
  return new c_gs_sign_req;
}

void c_gs_sign_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sign_type_ = 1;
    reward_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_sign_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_sign_req.SIGN_TYPE sign_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_sign_req_SIGN_TYPE_IsValid(value)) {
            set_sign_type(static_cast< ::c_gs_sign_req_SIGN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_type;
        break;
      }

      // optional .sign_n_reward.SIGN_N_REWARD_TYPE reward_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::sign_n_reward_SIGN_N_REWARD_TYPE_IsValid(value)) {
            set_reward_type(static_cast< ::sign_n_reward_SIGN_N_REWARD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_sign_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_sign_req.SIGN_TYPE sign_type = 1;
  if (has_sign_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sign_type(), output);
  }

  // optional .sign_n_reward.SIGN_N_REWARD_TYPE reward_type = 2;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reward_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_sign_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_sign_req.SIGN_TYPE sign_type = 1;
  if (has_sign_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sign_type(), target);
  }

  // optional .sign_n_reward.SIGN_N_REWARD_TYPE reward_type = 2;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reward_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_sign_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_sign_req.SIGN_TYPE sign_type = 1;
    if (has_sign_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sign_type());
    }

    // optional .sign_n_reward.SIGN_N_REWARD_TYPE reward_type = 2;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_sign_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_sign_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_sign_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_sign_req::MergeFrom(const c_gs_sign_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_type()) {
      set_sign_type(from.sign_type());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_sign_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_sign_req::CopyFrom(const c_gs_sign_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_sign_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_sign_req::Swap(c_gs_sign_req* other) {
  if (other != this) {
    std::swap(sign_type_, other->sign_type_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_sign_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_sign_req_descriptor_;
  metadata.reflection = c_gs_sign_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_sign_res::kErrorCodeFieldNumber;
const int gs_c_sign_res::kElesFieldNumber;
#endif  // !_MSC_VER

gs_c_sign_res::gs_c_sign_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_sign_res::InitAsDefaultInstance() {
}

gs_c_sign_res::gs_c_sign_res(const gs_c_sign_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_sign_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_sign_res::~gs_c_sign_res() {
  SharedDtor();
}

void gs_c_sign_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_sign_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_sign_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_sign_res_descriptor_;
}

const gs_c_sign_res& gs_c_sign_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_sign_res* gs_c_sign_res::default_instance_ = NULL;

gs_c_sign_res* gs_c_sign_res::New() const {
  return new gs_c_sign_res;
}

void gs_c_sign_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  eles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_sign_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .e_gsc_errorcode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_gsc_errorcode_IsValid(value)) {
            set_error_code(static_cast< ::e_gsc_errorcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eles;
        break;
      }

      // repeated .struct_game_element eles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_sign_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .e_gsc_errorcode error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // repeated .struct_game_element eles = 2;
  for (int i = 0; i < this->eles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_sign_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .e_gsc_errorcode error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // repeated .struct_game_element eles = 2;
  for (int i = 0; i < this->eles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_sign_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .e_gsc_errorcode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  // repeated .struct_game_element eles = 2;
  total_size += 1 * this->eles_size();
  for (int i = 0; i < this->eles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_sign_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_sign_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_sign_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_sign_res::MergeFrom(const gs_c_sign_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  eles_.MergeFrom(from.eles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_sign_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_sign_res::CopyFrom(const gs_c_sign_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_sign_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < eles_size(); i++) {
    if (!this->eles(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_sign_res::Swap(gs_c_sign_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    eles_.Swap(&other->eles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_sign_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_sign_res_descriptor_;
  metadata.reflection = gs_c_sign_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_sign_add_req::c_gs_sign_add_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_sign_add_req::InitAsDefaultInstance() {
}

c_gs_sign_add_req::c_gs_sign_add_req(const c_gs_sign_add_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_sign_add_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_sign_add_req::~c_gs_sign_add_req() {
  SharedDtor();
}

void c_gs_sign_add_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_sign_add_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_sign_add_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_sign_add_req_descriptor_;
}

const c_gs_sign_add_req& c_gs_sign_add_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_sign_add_req* c_gs_sign_add_req::default_instance_ = NULL;

c_gs_sign_add_req* c_gs_sign_add_req::New() const {
  return new c_gs_sign_add_req;
}

void c_gs_sign_add_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_sign_add_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_sign_add_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_sign_add_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_sign_add_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_sign_add_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_sign_add_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_sign_add_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_sign_add_req::MergeFrom(const c_gs_sign_add_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_sign_add_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_sign_add_req::CopyFrom(const c_gs_sign_add_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_sign_add_req::IsInitialized() const {

  return true;
}

void c_gs_sign_add_req::Swap(c_gs_sign_add_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_sign_add_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_sign_add_req_descriptor_;
  metadata.reflection = c_gs_sign_add_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_sign_add_res::kErrorCodeFieldNumber;
const int gs_c_sign_add_res::kLeftAddSignTimesFieldNumber;
const int gs_c_sign_add_res::kElesFieldNumber;
#endif  // !_MSC_VER

gs_c_sign_add_res::gs_c_sign_add_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_sign_add_res::InitAsDefaultInstance() {
}

gs_c_sign_add_res::gs_c_sign_add_res(const gs_c_sign_add_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_sign_add_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  left_add_sign_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_sign_add_res::~gs_c_sign_add_res() {
  SharedDtor();
}

void gs_c_sign_add_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_sign_add_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_sign_add_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_sign_add_res_descriptor_;
}

const gs_c_sign_add_res& gs_c_sign_add_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_sign_add_res* gs_c_sign_add_res::default_instance_ = NULL;

gs_c_sign_add_res* gs_c_sign_add_res::New() const {
  return new gs_c_sign_add_res;
}

void gs_c_sign_add_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    left_add_sign_times_ = 0u;
  }
  eles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_sign_add_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .e_gsc_errorcode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_gsc_errorcode_IsValid(value)) {
            set_error_code(static_cast< ::e_gsc_errorcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_add_sign_times;
        break;
      }

      // optional uint32 left_add_sign_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_add_sign_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_add_sign_times_)));
          set_has_left_add_sign_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_eles;
        break;
      }

      // repeated .struct_game_element eles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_eles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_sign_add_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .e_gsc_errorcode error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional uint32 left_add_sign_times = 2;
  if (has_left_add_sign_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->left_add_sign_times(), output);
  }

  // repeated .struct_game_element eles = 3;
  for (int i = 0; i < this->eles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->eles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_sign_add_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .e_gsc_errorcode error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional uint32 left_add_sign_times = 2;
  if (has_left_add_sign_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->left_add_sign_times(), target);
  }

  // repeated .struct_game_element eles = 3;
  for (int i = 0; i < this->eles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->eles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_sign_add_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .e_gsc_errorcode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional uint32 left_add_sign_times = 2;
    if (has_left_add_sign_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_add_sign_times());
    }

  }
  // repeated .struct_game_element eles = 3;
  total_size += 1 * this->eles_size();
  for (int i = 0; i < this->eles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_sign_add_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_sign_add_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_sign_add_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_sign_add_res::MergeFrom(const gs_c_sign_add_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  eles_.MergeFrom(from.eles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_left_add_sign_times()) {
      set_left_add_sign_times(from.left_add_sign_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_sign_add_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_sign_add_res::CopyFrom(const gs_c_sign_add_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_sign_add_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < eles_size(); i++) {
    if (!this->eles(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_sign_add_res::Swap(gs_c_sign_add_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(left_add_sign_times_, other->left_add_sign_times_);
    eles_.Swap(&other->eles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_sign_add_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_sign_add_res_descriptor_;
  metadata.reflection = gs_c_sign_add_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_head_or_frame_change_req::kChangeTypeFieldNumber;
const int c_gs_head_or_frame_change_req::kTargetIdFieldNumber;
#endif  // !_MSC_VER

c_gs_head_or_frame_change_req::c_gs_head_or_frame_change_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_head_or_frame_change_req::InitAsDefaultInstance() {
}

c_gs_head_or_frame_change_req::c_gs_head_or_frame_change_req(const c_gs_head_or_frame_change_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_head_or_frame_change_req::SharedCtor() {
  _cached_size_ = 0;
  change_type_ = 1;
  target_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_head_or_frame_change_req::~c_gs_head_or_frame_change_req() {
  SharedDtor();
}

void c_gs_head_or_frame_change_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_head_or_frame_change_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_head_or_frame_change_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_head_or_frame_change_req_descriptor_;
}

const c_gs_head_or_frame_change_req& c_gs_head_or_frame_change_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_head_or_frame_change_req* c_gs_head_or_frame_change_req::default_instance_ = NULL;

c_gs_head_or_frame_change_req* c_gs_head_or_frame_change_req::New() const {
  return new c_gs_head_or_frame_change_req;
}

void c_gs_head_or_frame_change_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    change_type_ = 1;
    target_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_head_or_frame_change_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HEAD_CHANGE_TYPE change_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HEAD_CHANGE_TYPE_IsValid(value)) {
            set_change_type(static_cast< ::HEAD_CHANGE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // required uint32 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_head_or_frame_change_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HEAD_CHANGE_TYPE change_type = 1;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // required uint32 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_head_or_frame_change_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HEAD_CHANGE_TYPE change_type = 1;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }

  // required uint32 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_head_or_frame_change_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HEAD_CHANGE_TYPE change_type = 1;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // required uint32 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_head_or_frame_change_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_head_or_frame_change_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_head_or_frame_change_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_head_or_frame_change_req::MergeFrom(const c_gs_head_or_frame_change_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_head_or_frame_change_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_head_or_frame_change_req::CopyFrom(const c_gs_head_or_frame_change_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_head_or_frame_change_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void c_gs_head_or_frame_change_req::Swap(c_gs_head_or_frame_change_req* other) {
  if (other != this) {
    std::swap(change_type_, other->change_type_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_head_or_frame_change_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_head_or_frame_change_req_descriptor_;
  metadata.reflection = c_gs_head_or_frame_change_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_head_or_frame_change_res::kErrorCodeFieldNumber;
const int gs_c_head_or_frame_change_res::kChangeTypeFieldNumber;
const int gs_c_head_or_frame_change_res::kTargetIdFieldNumber;
#endif  // !_MSC_VER

gs_c_head_or_frame_change_res::gs_c_head_or_frame_change_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_head_or_frame_change_res::InitAsDefaultInstance() {
}

gs_c_head_or_frame_change_res::gs_c_head_or_frame_change_res(const gs_c_head_or_frame_change_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_head_or_frame_change_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  change_type_ = 1;
  target_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_head_or_frame_change_res::~gs_c_head_or_frame_change_res() {
  SharedDtor();
}

void gs_c_head_or_frame_change_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_head_or_frame_change_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_head_or_frame_change_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_head_or_frame_change_res_descriptor_;
}

const gs_c_head_or_frame_change_res& gs_c_head_or_frame_change_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_head_or_frame_change_res* gs_c_head_or_frame_change_res::default_instance_ = NULL;

gs_c_head_or_frame_change_res* gs_c_head_or_frame_change_res::New() const {
  return new gs_c_head_or_frame_change_res;
}

void gs_c_head_or_frame_change_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    change_type_ = 1;
    target_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_head_or_frame_change_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .e_gsc_errorcode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_gsc_errorcode_IsValid(value)) {
            set_error_code(static_cast< ::e_gsc_errorcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // optional .HEAD_CHANGE_TYPE change_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HEAD_CHANGE_TYPE_IsValid(value)) {
            set_change_type(static_cast< ::HEAD_CHANGE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_id;
        break;
      }

      // optional uint32 target_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_head_or_frame_change_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .e_gsc_errorcode error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional .HEAD_CHANGE_TYPE change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // optional uint32 target_id = 3;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_head_or_frame_change_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .e_gsc_errorcode error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional .HEAD_CHANGE_TYPE change_type = 2;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->change_type(), target);
  }

  // optional uint32 target_id = 3;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_head_or_frame_change_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .e_gsc_errorcode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional .HEAD_CHANGE_TYPE change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }

    // optional uint32 target_id = 3;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_head_or_frame_change_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_head_or_frame_change_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_head_or_frame_change_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_head_or_frame_change_res::MergeFrom(const gs_c_head_or_frame_change_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_head_or_frame_change_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_head_or_frame_change_res::CopyFrom(const gs_c_head_or_frame_change_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_head_or_frame_change_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_head_or_frame_change_res::Swap(gs_c_head_or_frame_change_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(change_type_, other->change_type_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_head_or_frame_change_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_head_or_frame_change_res_descriptor_;
  metadata.reflection = gs_c_head_or_frame_change_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_edit_player_info_req::kNameFieldNumber;
const int c_gs_edit_player_info_req::kHeadIdFieldNumber;
const int c_gs_edit_player_info_req::kHeadFrameIdFieldNumber;
const int c_gs_edit_player_info_req::kSignatureFieldNumber;
#endif  // !_MSC_VER

c_gs_edit_player_info_req::c_gs_edit_player_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_edit_player_info_req::InitAsDefaultInstance() {
}

c_gs_edit_player_info_req::c_gs_edit_player_info_req(const c_gs_edit_player_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_edit_player_info_req::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_id_ = 0u;
  head_frame_id_ = 0u;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_edit_player_info_req::~c_gs_edit_player_info_req() {
  SharedDtor();
}

void c_gs_edit_player_info_req::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void c_gs_edit_player_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_edit_player_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_edit_player_info_req_descriptor_;
}

const c_gs_edit_player_info_req& c_gs_edit_player_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_edit_player_info_req* c_gs_edit_player_info_req::default_instance_ = NULL;

c_gs_edit_player_info_req* c_gs_edit_player_info_req::New() const {
  return new c_gs_edit_player_info_req;
}

void c_gs_edit_player_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_id_ = 0u;
    head_frame_id_ = 0u;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_edit_player_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_head_id;
        break;
      }

      // optional uint32 head_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_frame_id;
        break;
      }

      // optional uint32 head_frame_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_frame_id_)));
          set_has_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_signature;
        break;
      }

      // optional string signature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_edit_player_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 head_id = 2;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->head_id(), output);
  }

  // optional uint32 head_frame_id = 3;
  if (has_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_frame_id(), output);
  }

  // optional string signature = 4;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_edit_player_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 head_id = 2;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->head_id(), target);
  }

  // optional uint32 head_frame_id = 3;
  if (has_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_frame_id(), target);
  }

  // optional string signature = 4;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_edit_player_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 head_id = 2;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // optional uint32 head_frame_id = 3;
    if (has_head_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_frame_id());
    }

    // optional string signature = 4;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_edit_player_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_edit_player_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_edit_player_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_edit_player_info_req::MergeFrom(const c_gs_edit_player_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_head_frame_id()) {
      set_head_frame_id(from.head_frame_id());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_edit_player_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_edit_player_info_req::CopyFrom(const c_gs_edit_player_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_edit_player_info_req::IsInitialized() const {

  return true;
}

void c_gs_edit_player_info_req::Swap(c_gs_edit_player_info_req* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(head_id_, other->head_id_);
    std::swap(head_frame_id_, other->head_frame_id_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_edit_player_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_edit_player_info_req_descriptor_;
  metadata.reflection = c_gs_edit_player_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_edit_player_info_res::kErrorCodeFieldNumber;
const int gs_c_edit_player_info_res::kNameFieldNumber;
const int gs_c_edit_player_info_res::kHeadIdFieldNumber;
const int gs_c_edit_player_info_res::kHeadFrameIdFieldNumber;
const int gs_c_edit_player_info_res::kSignatureFieldNumber;
#endif  // !_MSC_VER

gs_c_edit_player_info_res::gs_c_edit_player_info_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_edit_player_info_res::InitAsDefaultInstance() {
}

gs_c_edit_player_info_res::gs_c_edit_player_info_res(const gs_c_edit_player_info_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_edit_player_info_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_id_ = 0u;
  head_frame_id_ = 0u;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_edit_player_info_res::~gs_c_edit_player_info_res() {
  SharedDtor();
}

void gs_c_edit_player_info_res::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void gs_c_edit_player_info_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_edit_player_info_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_edit_player_info_res_descriptor_;
}

const gs_c_edit_player_info_res& gs_c_edit_player_info_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_edit_player_info_res* gs_c_edit_player_info_res::default_instance_ = NULL;

gs_c_edit_player_info_res* gs_c_edit_player_info_res::New() const {
  return new gs_c_edit_player_info_res;
}

void gs_c_edit_player_info_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_id_ = 0u;
    head_frame_id_ = 0u;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_edit_player_info_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .e_gsc_errorcode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_gsc_errorcode_IsValid(value)) {
            set_error_code(static_cast< ::e_gsc_errorcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_id;
        break;
      }

      // optional uint32 head_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_head_frame_id;
        break;
      }

      // optional uint32 head_frame_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_frame_id_)));
          set_has_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_signature;
        break;
      }

      // optional string signature = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_edit_player_info_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .e_gsc_errorcode error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 head_id = 3;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_id(), output);
  }

  // optional uint32 head_frame_id = 4;
  if (has_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->head_frame_id(), output);
  }

  // optional string signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_edit_player_info_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .e_gsc_errorcode error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 head_id = 3;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_id(), target);
  }

  // optional uint32 head_frame_id = 4;
  if (has_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->head_frame_id(), target);
  }

  // optional string signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_edit_player_info_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .e_gsc_errorcode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 head_id = 3;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // optional uint32 head_frame_id = 4;
    if (has_head_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_frame_id());
    }

    // optional string signature = 5;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_edit_player_info_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_edit_player_info_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_edit_player_info_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_edit_player_info_res::MergeFrom(const gs_c_edit_player_info_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_head_frame_id()) {
      set_head_frame_id(from.head_frame_id());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_edit_player_info_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_edit_player_info_res::CopyFrom(const gs_c_edit_player_info_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_edit_player_info_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_edit_player_info_res::Swap(gs_c_edit_player_info_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(name_, other->name_);
    std::swap(head_id_, other->head_id_);
    std::swap(head_frame_id_, other->head_frame_id_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_edit_player_info_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_edit_player_info_res_descriptor_;
  metadata.reflection = gs_c_edit_player_info_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_finish_novice_guide_req::kGuideIdFieldNumber;
#endif  // !_MSC_VER

c_gs_finish_novice_guide_req::c_gs_finish_novice_guide_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_finish_novice_guide_req::InitAsDefaultInstance() {
}

c_gs_finish_novice_guide_req::c_gs_finish_novice_guide_req(const c_gs_finish_novice_guide_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_finish_novice_guide_req::SharedCtor() {
  _cached_size_ = 0;
  guide_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_finish_novice_guide_req::~c_gs_finish_novice_guide_req() {
  SharedDtor();
}

void c_gs_finish_novice_guide_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_finish_novice_guide_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_finish_novice_guide_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_finish_novice_guide_req_descriptor_;
}

const c_gs_finish_novice_guide_req& c_gs_finish_novice_guide_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_finish_novice_guide_req* c_gs_finish_novice_guide_req::default_instance_ = NULL;

c_gs_finish_novice_guide_req* c_gs_finish_novice_guide_req::New() const {
  return new c_gs_finish_novice_guide_req;
}

void c_gs_finish_novice_guide_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guide_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_finish_novice_guide_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guide_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guide_id_)));
          set_has_guide_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_finish_novice_guide_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guide_id = 1;
  if (has_guide_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guide_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_finish_novice_guide_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guide_id = 1;
  if (has_guide_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guide_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_finish_novice_guide_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guide_id = 1;
    if (has_guide_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guide_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_finish_novice_guide_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_finish_novice_guide_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_finish_novice_guide_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_finish_novice_guide_req::MergeFrom(const c_gs_finish_novice_guide_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guide_id()) {
      set_guide_id(from.guide_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_finish_novice_guide_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_finish_novice_guide_req::CopyFrom(const c_gs_finish_novice_guide_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_finish_novice_guide_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_finish_novice_guide_req::Swap(c_gs_finish_novice_guide_req* other) {
  if (other != this) {
    std::swap(guide_id_, other->guide_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_finish_novice_guide_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_finish_novice_guide_req_descriptor_;
  metadata.reflection = c_gs_finish_novice_guide_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_finish_novice_guide_res::kErrorCodeFieldNumber;
const int gs_c_finish_novice_guide_res::kGuideIdFieldNumber;
#endif  // !_MSC_VER

gs_c_finish_novice_guide_res::gs_c_finish_novice_guide_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_finish_novice_guide_res::InitAsDefaultInstance() {
}

gs_c_finish_novice_guide_res::gs_c_finish_novice_guide_res(const gs_c_finish_novice_guide_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_finish_novice_guide_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  guide_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_finish_novice_guide_res::~gs_c_finish_novice_guide_res() {
  SharedDtor();
}

void gs_c_finish_novice_guide_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_finish_novice_guide_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_finish_novice_guide_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_finish_novice_guide_res_descriptor_;
}

const gs_c_finish_novice_guide_res& gs_c_finish_novice_guide_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_finish_novice_guide_res* gs_c_finish_novice_guide_res::default_instance_ = NULL;

gs_c_finish_novice_guide_res* gs_c_finish_novice_guide_res::New() const {
  return new gs_c_finish_novice_guide_res;
}

void gs_c_finish_novice_guide_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    guide_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_finish_novice_guide_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .e_gsc_errorcode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_gsc_errorcode_IsValid(value)) {
            set_error_code(static_cast< ::e_gsc_errorcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guide_id;
        break;
      }

      // optional uint32 guide_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guide_id_)));
          set_has_guide_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_finish_novice_guide_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .e_gsc_errorcode error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional uint32 guide_id = 2;
  if (has_guide_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guide_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_finish_novice_guide_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .e_gsc_errorcode error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional uint32 guide_id = 2;
  if (has_guide_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guide_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_finish_novice_guide_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .e_gsc_errorcode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional uint32 guide_id = 2;
    if (has_guide_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guide_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_finish_novice_guide_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_finish_novice_guide_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_finish_novice_guide_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_finish_novice_guide_res::MergeFrom(const gs_c_finish_novice_guide_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_guide_id()) {
      set_guide_id(from.guide_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_finish_novice_guide_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_finish_novice_guide_res::CopyFrom(const gs_c_finish_novice_guide_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_finish_novice_guide_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_finish_novice_guide_res::Swap(gs_c_finish_novice_guide_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(guide_id_, other->guide_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_finish_novice_guide_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_finish_novice_guide_res_descriptor_;
  metadata.reflection = gs_c_finish_novice_guide_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* gs_c_marquee_ntf_MARQUEE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_marquee_ntf_MARQUEE_TYPE_descriptor_;
}
bool gs_c_marquee_ntf_MARQUEE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf::MARQUEE_MIN;
const gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf::MARQUEE_INVOKE;
const gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf::MARQUEE_HERO_EVOLUTION;
const gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf::MARQUEE_INVOKE_HERO;
const gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf::MARQUEE_HERO_STAR_UP;
const gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf::MARQUEE_ARENA_CHALLENGE;
const gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf::MARQUEE_WORD;
const gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf::MARQUEE_MAX;
const gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf::MARQUEE_TYPE_MIN;
const gs_c_marquee_ntf_MARQUEE_TYPE gs_c_marquee_ntf::MARQUEE_TYPE_MAX;
const int gs_c_marquee_ntf::MARQUEE_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_c_marquee_ntf::kMarqueeTypeFieldNumber;
const int gs_c_marquee_ntf::kMarqueeTimesFieldNumber;
const int gs_c_marquee_ntf::kContentFieldNumber;
#endif  // !_MSC_VER

gs_c_marquee_ntf::gs_c_marquee_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_marquee_ntf::InitAsDefaultInstance() {
}

gs_c_marquee_ntf::gs_c_marquee_ntf(const gs_c_marquee_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_marquee_ntf::SharedCtor() {
  _cached_size_ = 0;
  marquee_type_ = 0;
  marquee_times_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_marquee_ntf::~gs_c_marquee_ntf() {
  SharedDtor();
}

void gs_c_marquee_ntf::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void gs_c_marquee_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_marquee_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_marquee_ntf_descriptor_;
}

const gs_c_marquee_ntf& gs_c_marquee_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_marquee_ntf* gs_c_marquee_ntf::default_instance_ = NULL;

gs_c_marquee_ntf* gs_c_marquee_ntf::New() const {
  return new gs_c_marquee_ntf;
}

void gs_c_marquee_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marquee_type_ = 0;
    marquee_times_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_marquee_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_c_marquee_ntf.MARQUEE_TYPE marquee_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_c_marquee_ntf_MARQUEE_TYPE_IsValid(value)) {
            set_marquee_type(static_cast< ::gs_c_marquee_ntf_MARQUEE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_marquee_times;
        break;
      }

      // required uint32 marquee_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marquee_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marquee_times_)));
          set_has_marquee_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_marquee_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_c_marquee_ntf.MARQUEE_TYPE marquee_type = 1;
  if (has_marquee_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->marquee_type(), output);
  }

  // required uint32 marquee_times = 2;
  if (has_marquee_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->marquee_times(), output);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_marquee_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_c_marquee_ntf.MARQUEE_TYPE marquee_type = 1;
  if (has_marquee_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->marquee_type(), target);
  }

  // required uint32 marquee_times = 2;
  if (has_marquee_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->marquee_times(), target);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_marquee_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_c_marquee_ntf.MARQUEE_TYPE marquee_type = 1;
    if (has_marquee_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->marquee_type());
    }

    // required uint32 marquee_times = 2;
    if (has_marquee_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->marquee_times());
    }

    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_marquee_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_marquee_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_marquee_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_marquee_ntf::MergeFrom(const gs_c_marquee_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marquee_type()) {
      set_marquee_type(from.marquee_type());
    }
    if (from.has_marquee_times()) {
      set_marquee_times(from.marquee_times());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_marquee_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_marquee_ntf::CopyFrom(const gs_c_marquee_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_marquee_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void gs_c_marquee_ntf::Swap(gs_c_marquee_ntf* other) {
  if (other != this) {
    std::swap(marquee_type_, other->marquee_type_);
    std::swap(marquee_times_, other->marquee_times_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_marquee_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_marquee_ntf_descriptor_;
  metadata.reflection = gs_c_marquee_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_element_ntf::kElesFieldNumber;
#endif  // !_MSC_VER

gs_c_element_ntf::gs_c_element_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_element_ntf::InitAsDefaultInstance() {
}

gs_c_element_ntf::gs_c_element_ntf(const gs_c_element_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_element_ntf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_element_ntf::~gs_c_element_ntf() {
  SharedDtor();
}

void gs_c_element_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_element_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_element_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_element_ntf_descriptor_;
}

const gs_c_element_ntf& gs_c_element_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_element_ntf* gs_c_element_ntf::default_instance_ = NULL;

gs_c_element_ntf* gs_c_element_ntf::New() const {
  return new gs_c_element_ntf;
}

void gs_c_element_ntf::Clear() {
  eles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_element_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .struct_game_element eles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_eles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_element_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .struct_game_element eles = 1;
  for (int i = 0; i < this->eles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->eles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_element_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .struct_game_element eles = 1;
  for (int i = 0; i < this->eles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->eles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_element_ntf::ByteSize() const {
  int total_size = 0;

  // repeated .struct_game_element eles = 1;
  total_size += 1 * this->eles_size();
  for (int i = 0; i < this->eles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_element_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_element_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_element_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_element_ntf::MergeFrom(const gs_c_element_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  eles_.MergeFrom(from.eles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_element_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_element_ntf::CopyFrom(const gs_c_element_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_element_ntf::IsInitialized() const {

  for (int i = 0; i < eles_size(); i++) {
    if (!this->eles(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_element_ntf::Swap(gs_c_element_ntf* other) {
  if (other != this) {
    eles_.Swap(&other->eles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_element_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_element_ntf_descriptor_;
  metadata.reflection = gs_c_element_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int friend_base_info::kUserIdFieldNumber;
const int friend_base_info::kHeadIdFieldNumber;
const int friend_base_info::kHeadFrameIdFieldNumber;
const int friend_base_info::kNameFieldNumber;
const int friend_base_info::kLevelFieldNumber;
const int friend_base_info::kVipFieldNumber;
const int friend_base_info::kArenaRankFieldNumber;
const int friend_base_info::kLastLoginTimeFieldNumber;
const int friend_base_info::kSignatureFieldNumber;
#endif  // !_MSC_VER

friend_base_info::friend_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void friend_base_info::InitAsDefaultInstance() {
}

friend_base_info::friend_base_info(const friend_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void friend_base_info::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  head_id_ = 0u;
  head_frame_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  vip_ = 0u;
  arena_rank_ = 0u;
  last_login_time_ = 0u;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

friend_base_info::~friend_base_info() {
  SharedDtor();
}

void friend_base_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void friend_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* friend_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return friend_base_info_descriptor_;
}

const friend_base_info& friend_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

friend_base_info* friend_base_info::default_instance_ = NULL;

friend_base_info* friend_base_info::New() const {
  return new friend_base_info;
}

void friend_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    head_id_ = 0u;
    head_frame_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    vip_ = 0u;
    arena_rank_ = 0u;
    last_login_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool friend_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_head_id;
        break;
      }

      // required uint32 head_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_frame_id;
        break;
      }

      // required uint32 head_frame_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_frame_id_)));
          set_has_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip;
        break;
      }

      // required uint32 vip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_arena_rank;
        break;
      }

      // required uint32 arena_rank = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arena_rank_)));
          set_has_arena_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_login_time;
        break;
      }

      // required uint32 last_login_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_time_)));
          set_has_last_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_signature;
        break;
      }

      // optional string signature = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void friend_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 head_id = 2;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->head_id(), output);
  }

  // required uint32 head_frame_id = 3;
  if (has_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_frame_id(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // required uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // required uint32 vip = 6;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vip(), output);
  }

  // required uint32 arena_rank = 7;
  if (has_arena_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->arena_rank(), output);
  }

  // required uint32 last_login_time = 8;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_login_time(), output);
  }

  // optional string signature = 9;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* friend_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 head_id = 2;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->head_id(), target);
  }

  // required uint32 head_frame_id = 3;
  if (has_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_frame_id(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // required uint32 vip = 6;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->vip(), target);
  }

  // required uint32 arena_rank = 7;
  if (has_arena_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->arena_rank(), target);
  }

  // required uint32 last_login_time = 8;
  if (has_last_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_login_time(), target);
  }

  // optional string signature = 9;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int friend_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 head_id = 2;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // required uint32 head_frame_id = 3;
    if (has_head_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_frame_id());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 vip = 6;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // required uint32 arena_rank = 7;
    if (has_arena_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arena_rank());
    }

    // required uint32 last_login_time = 8;
    if (has_last_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string signature = 9;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void friend_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const friend_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const friend_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void friend_base_info::MergeFrom(const friend_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_head_frame_id()) {
      set_head_frame_id(from.head_frame_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_arena_rank()) {
      set_arena_rank(from.arena_rank());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void friend_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void friend_base_info::CopyFrom(const friend_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool friend_base_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void friend_base_info::Swap(friend_base_info* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(head_id_, other->head_id_);
    std::swap(head_frame_id_, other->head_frame_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(vip_, other->vip_);
    std::swap(arena_rank_, other->arena_rank_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata friend_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = friend_base_info_descriptor_;
  metadata.reflection = friend_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_friend_friend_info::kBaseInfoFieldNumber;
const int user_friend_friend_info::kIsFriendGiveFieldNumber;
const int user_friend_friend_info::kIsMeGiveFieldNumber;
#endif  // !_MSC_VER

user_friend_friend_info::user_friend_friend_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_friend_friend_info::InitAsDefaultInstance() {
  base_info_ = const_cast< ::friend_base_info*>(&::friend_base_info::default_instance());
}

user_friend_friend_info::user_friend_friend_info(const user_friend_friend_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_friend_friend_info::SharedCtor() {
  _cached_size_ = 0;
  base_info_ = NULL;
  is_friend_give_ = false;
  is_me_give_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_friend_friend_info::~user_friend_friend_info() {
  SharedDtor();
}

void user_friend_friend_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
  }
}

void user_friend_friend_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_friend_friend_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_friend_friend_info_descriptor_;
}

const user_friend_friend_info& user_friend_friend_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_friend_friend_info* user_friend_friend_info::default_instance_ = NULL;

user_friend_friend_info* user_friend_friend_info::New() const {
  return new user_friend_friend_info;
}

void user_friend_friend_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::friend_base_info::Clear();
    }
    is_friend_give_ = false;
    is_me_give_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_friend_friend_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .friend_base_info base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_friend_give;
        break;
      }

      // required bool is_friend_give = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_friend_give:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_friend_give_)));
          set_has_is_friend_give();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_me_give;
        break;
      }

      // required bool is_me_give = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_me_give:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_me_give_)));
          set_has_is_me_give();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_friend_friend_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .friend_base_info base_info = 1;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_info(), output);
  }

  // required bool is_friend_give = 2;
  if (has_is_friend_give()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_friend_give(), output);
  }

  // required bool is_me_give = 3;
  if (has_is_me_give()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_me_give(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_friend_friend_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .friend_base_info base_info = 1;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_info(), target);
  }

  // required bool is_friend_give = 2;
  if (has_is_friend_give()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_friend_give(), target);
  }

  // required bool is_me_give = 3;
  if (has_is_me_give()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_me_give(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_friend_friend_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .friend_base_info base_info = 1;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

    // required bool is_friend_give = 2;
    if (has_is_friend_give()) {
      total_size += 1 + 1;
    }

    // required bool is_me_give = 3;
    if (has_is_me_give()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_friend_friend_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_friend_friend_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_friend_friend_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_friend_friend_info::MergeFrom(const user_friend_friend_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_info()) {
      mutable_base_info()->::friend_base_info::MergeFrom(from.base_info());
    }
    if (from.has_is_friend_give()) {
      set_is_friend_give(from.is_friend_give());
    }
    if (from.has_is_me_give()) {
      set_is_me_give(from.is_me_give());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_friend_friend_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_friend_friend_info::CopyFrom(const user_friend_friend_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_friend_friend_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  return true;
}

void user_friend_friend_info::Swap(user_friend_friend_info* other) {
  if (other != this) {
    std::swap(base_info_, other->base_info_);
    std::swap(is_friend_give_, other->is_friend_give_);
    std::swap(is_me_give_, other->is_me_give_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_friend_friend_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_friend_friend_info_descriptor_;
  metadata.reflection = user_friend_friend_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int user_friend::kFriendsFieldNumber;
const int user_friend::kAppliesFieldNumber;
const int user_friend::kConfirmsFieldNumber;
const int user_friend::kRecommendsFieldNumber;
#endif  // !_MSC_VER

user_friend::user_friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_friend::InitAsDefaultInstance() {
}

user_friend::user_friend(const user_friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_friend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_friend::~user_friend() {
  SharedDtor();
}

void user_friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_friend_descriptor_;
}

const user_friend& user_friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

user_friend* user_friend::default_instance_ = NULL;

user_friend* user_friend::New() const {
  return new user_friend;
}

void user_friend::Clear() {
  friends_.Clear();
  applies_.Clear();
  confirms_.Clear();
  recommends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .user_friend.friend_info friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectTag(18)) goto parse_applies;
        break;
      }

      // repeated .friend_base_info applies = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_applies;
        if (input->ExpectTag(26)) goto parse_confirms;
        break;
      }

      // repeated .friend_base_info confirms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_confirms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_confirms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_confirms;
        if (input->ExpectTag(34)) goto parse_recommends;
        break;
      }

      // repeated .friend_base_info recommends = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recommends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .user_friend.friend_info friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  // repeated .friend_base_info applies = 2;
  for (int i = 0; i < this->applies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->applies(i), output);
  }

  // repeated .friend_base_info confirms = 3;
  for (int i = 0; i < this->confirms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->confirms(i), output);
  }

  // repeated .friend_base_info recommends = 4;
  for (int i = 0; i < this->recommends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recommends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .user_friend.friend_info friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }

  // repeated .friend_base_info applies = 2;
  for (int i = 0; i < this->applies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->applies(i), target);
  }

  // repeated .friend_base_info confirms = 3;
  for (int i = 0; i < this->confirms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->confirms(i), target);
  }

  // repeated .friend_base_info recommends = 4;
  for (int i = 0; i < this->recommends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recommends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_friend::ByteSize() const {
  int total_size = 0;

  // repeated .user_friend.friend_info friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  // repeated .friend_base_info applies = 2;
  total_size += 1 * this->applies_size();
  for (int i = 0; i < this->applies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applies(i));
  }

  // repeated .friend_base_info confirms = 3;
  total_size += 1 * this->confirms_size();
  for (int i = 0; i < this->confirms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->confirms(i));
  }

  // repeated .friend_base_info recommends = 4;
  total_size += 1 * this->recommends_size();
  for (int i = 0; i < this->recommends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_friend::MergeFrom(const user_friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  applies_.MergeFrom(from.applies_);
  confirms_.MergeFrom(from.confirms_);
  recommends_.MergeFrom(from.recommends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_friend::CopyFrom(const user_friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_friend::IsInitialized() const {

  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  for (int i = 0; i < applies_size(); i++) {
    if (!this->applies(i).IsInitialized()) return false;
  }
  for (int i = 0; i < confirms_size(); i++) {
    if (!this->confirms(i).IsInitialized()) return false;
  }
  for (int i = 0; i < recommends_size(); i++) {
    if (!this->recommends(i).IsInitialized()) return false;
  }
  return true;
}

void user_friend::Swap(user_friend* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    applies_.Swap(&other->applies_);
    confirms_.Swap(&other->confirms_);
    recommends_.Swap(&other->recommends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_friend_descriptor_;
  metadata.reflection = user_friend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* c_gs_user_friend_op_req_OP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_user_friend_op_req_OP_TYPE_descriptor_;
}
bool c_gs_user_friend_op_req_OP_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::MIN;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::GET_ELEMENT1;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::GET_ELEMENTN;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::GIVE_ELEMENT1;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::GIVE_ELEMENTN;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::GIVE_UP_APPLY1;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::GIVE_UP_APPLYN;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::AFFIRM_AGREE1;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::AFFIRM_AGREEN;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::AFFIRM_REFUSE1;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::AFFIRM_REFUSEN;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::ADD_FRIEND;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::DEL_FRIEND;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::MAX;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::OP_TYPE_MIN;
const c_gs_user_friend_op_req_OP_TYPE c_gs_user_friend_op_req::OP_TYPE_MAX;
const int c_gs_user_friend_op_req::OP_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int c_gs_user_friend_op_req::kOpTypeFieldNumber;
const int c_gs_user_friend_op_req::kUserIdFieldNumber;
#endif  // !_MSC_VER

c_gs_user_friend_op_req::c_gs_user_friend_op_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_user_friend_op_req::InitAsDefaultInstance() {
}

c_gs_user_friend_op_req::c_gs_user_friend_op_req(const c_gs_user_friend_op_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_user_friend_op_req::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 0;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_user_friend_op_req::~c_gs_user_friend_op_req() {
  SharedDtor();
}

void c_gs_user_friend_op_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_user_friend_op_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_user_friend_op_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_user_friend_op_req_descriptor_;
}

const c_gs_user_friend_op_req& c_gs_user_friend_op_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_user_friend_op_req* c_gs_user_friend_op_req::default_instance_ = NULL;

c_gs_user_friend_op_req* c_gs_user_friend_op_req::New() const {
  return new c_gs_user_friend_op_req;
}

void c_gs_user_friend_op_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 0;
    user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_user_friend_op_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_user_friend_op_req.OP_TYPE op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_user_friend_op_req_OP_TYPE_IsValid(value)) {
            set_op_type(static_cast< ::c_gs_user_friend_op_req_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_user_friend_op_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_user_friend_op_req.OP_TYPE op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_user_friend_op_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_user_friend_op_req.OP_TYPE op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_user_friend_op_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_user_friend_op_req.OP_TYPE op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_user_friend_op_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_user_friend_op_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_user_friend_op_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_user_friend_op_req::MergeFrom(const c_gs_user_friend_op_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_user_friend_op_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_user_friend_op_req::CopyFrom(const c_gs_user_friend_op_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_user_friend_op_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_user_friend_op_req::Swap(c_gs_user_friend_op_req* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_user_friend_op_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_user_friend_op_req_descriptor_;
  metadata.reflection = c_gs_user_friend_op_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_user_friend_op_res::kErrorCodeFieldNumber;
const int gs_c_user_friend_op_res::kOpTypeFieldNumber;
const int gs_c_user_friend_op_res::kUserIdFieldNumber;
const int gs_c_user_friend_op_res::kElesFieldNumber;
const int gs_c_user_friend_op_res::kBaseInfoFieldNumber;
#endif  // !_MSC_VER

gs_c_user_friend_op_res::gs_c_user_friend_op_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_user_friend_op_res::InitAsDefaultInstance() {
  base_info_ = const_cast< ::friend_base_info*>(&::friend_base_info::default_instance());
}

gs_c_user_friend_op_res::gs_c_user_friend_op_res(const gs_c_user_friend_op_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_user_friend_op_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  op_type_ = 0;
  user_id_ = 0u;
  base_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_user_friend_op_res::~gs_c_user_friend_op_res() {
  SharedDtor();
}

void gs_c_user_friend_op_res::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
  }
}

void gs_c_user_friend_op_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_user_friend_op_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_user_friend_op_res_descriptor_;
}

const gs_c_user_friend_op_res& gs_c_user_friend_op_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_user_friend_op_res* gs_c_user_friend_op_res::default_instance_ = NULL;

gs_c_user_friend_op_res* gs_c_user_friend_op_res::New() const {
  return new gs_c_user_friend_op_res;
}

void gs_c_user_friend_op_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    op_type_ = 0;
    user_id_ = 0u;
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::friend_base_info::Clear();
    }
  }
  eles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_user_friend_op_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op_type;
        break;
      }

      // required .c_gs_user_friend_op_req.OP_TYPE op_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_user_friend_op_req_OP_TYPE_IsValid(value)) {
            set_op_type(static_cast< ::c_gs_user_friend_op_req_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eles;
        break;
      }

      // repeated .struct_game_element eles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eles;
        if (input->ExpectTag(42)) goto parse_base_info;
        break;
      }

      // optional .friend_base_info base_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_user_friend_op_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // required .c_gs_user_friend_op_req.OP_TYPE op_type = 2;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->op_type(), output);
  }

  // optional uint32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_id(), output);
  }

  // repeated .struct_game_element eles = 4;
  for (int i = 0; i < this->eles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->eles(i), output);
  }

  // optional .friend_base_info base_info = 5;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->base_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_user_friend_op_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // required .c_gs_user_friend_op_req.OP_TYPE op_type = 2;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->op_type(), target);
  }

  // optional uint32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_id(), target);
  }

  // repeated .struct_game_element eles = 4;
  for (int i = 0; i < this->eles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->eles(i), target);
  }

  // optional .friend_base_info base_info = 5;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->base_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_user_friend_op_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // required .c_gs_user_friend_op_req.OP_TYPE op_type = 2;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional uint32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional .friend_base_info base_info = 5;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

  }
  // repeated .struct_game_element eles = 4;
  total_size += 1 * this->eles_size();
  for (int i = 0; i < this->eles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_user_friend_op_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_user_friend_op_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_user_friend_op_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_user_friend_op_res::MergeFrom(const gs_c_user_friend_op_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  eles_.MergeFrom(from.eles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_base_info()) {
      mutable_base_info()->::friend_base_info::MergeFrom(from.base_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_user_friend_op_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_user_friend_op_res::CopyFrom(const gs_c_user_friend_op_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_user_friend_op_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < eles_size(); i++) {
    if (!this->eles(i).IsInitialized()) return false;
  }
  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  return true;
}

void gs_c_user_friend_op_res::Swap(gs_c_user_friend_op_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(op_type_, other->op_type_);
    std::swap(user_id_, other->user_id_);
    eles_.Swap(&other->eles_);
    std::swap(base_info_, other->base_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_user_friend_op_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_user_friend_op_res_descriptor_;
  metadata.reflection = gs_c_user_friend_op_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_search_user_req::kNameFieldNumber;
const int c_gs_search_user_req::kUserIdFieldNumber;
#endif  // !_MSC_VER

c_gs_search_user_req::c_gs_search_user_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_search_user_req::InitAsDefaultInstance() {
}

c_gs_search_user_req::c_gs_search_user_req(const c_gs_search_user_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_search_user_req::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_search_user_req::~c_gs_search_user_req() {
  SharedDtor();
}

void c_gs_search_user_req::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void c_gs_search_user_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_search_user_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_search_user_req_descriptor_;
}

const c_gs_search_user_req& c_gs_search_user_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_search_user_req* c_gs_search_user_req::default_instance_ = NULL;

c_gs_search_user_req* c_gs_search_user_req::New() const {
  return new c_gs_search_user_req;
}

void c_gs_search_user_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_search_user_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_search_user_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_search_user_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_search_user_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_search_user_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_search_user_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_search_user_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_search_user_req::MergeFrom(const c_gs_search_user_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_search_user_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_search_user_req::CopyFrom(const c_gs_search_user_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_search_user_req::IsInitialized() const {

  return true;
}

void c_gs_search_user_req::Swap(c_gs_search_user_req* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_search_user_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_search_user_req_descriptor_;
  metadata.reflection = c_gs_search_user_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_search_user_res::kErrorCodeFieldNumber;
const int gs_c_search_user_res::kBaseInfoFieldNumber;
#endif  // !_MSC_VER

gs_c_search_user_res::gs_c_search_user_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_search_user_res::InitAsDefaultInstance() {
  base_info_ = const_cast< ::friend_base_info*>(&::friend_base_info::default_instance());
}

gs_c_search_user_res::gs_c_search_user_res(const gs_c_search_user_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_search_user_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  base_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_search_user_res::~gs_c_search_user_res() {
  SharedDtor();
}

void gs_c_search_user_res::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
  }
}

void gs_c_search_user_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_search_user_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_search_user_res_descriptor_;
}

const gs_c_search_user_res& gs_c_search_user_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_search_user_res* gs_c_search_user_res::default_instance_ = NULL;

gs_c_search_user_res* gs_c_search_user_res::New() const {
  return new gs_c_search_user_res;
}

void gs_c_search_user_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::friend_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_search_user_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_info;
        break;
      }

      // optional .friend_base_info base_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_search_user_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional .friend_base_info base_info = 2;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_search_user_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional .friend_base_info base_info = 2;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_search_user_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .friend_base_info base_info = 2;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_search_user_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_search_user_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_search_user_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_search_user_res::MergeFrom(const gs_c_search_user_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_base_info()) {
      mutable_base_info()->::friend_base_info::MergeFrom(from.base_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_search_user_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_search_user_res::CopyFrom(const gs_c_search_user_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_search_user_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  return true;
}

void gs_c_search_user_res::Swap(gs_c_search_user_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(base_info_, other->base_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_search_user_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_search_user_res_descriptor_;
  metadata.reflection = gs_c_search_user_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* gs_c_friend_ntf_OP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_friend_ntf_OP_TYPE_descriptor_;
}
bool gs_c_friend_ntf_OP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_c_friend_ntf_OP_TYPE gs_c_friend_ntf::FRIEND_GIVE_ELEMENT;
const gs_c_friend_ntf_OP_TYPE gs_c_friend_ntf::FRIEND_GIVE_UP_APPLY;
const gs_c_friend_ntf_OP_TYPE gs_c_friend_ntf::FRIEND_AFFIRM_AGREE;
const gs_c_friend_ntf_OP_TYPE gs_c_friend_ntf::FRIEND_DEL_FRIEND;
const gs_c_friend_ntf_OP_TYPE gs_c_friend_ntf::FRIEND_AFFIRM_REFUSE;
const gs_c_friend_ntf_OP_TYPE gs_c_friend_ntf::FRIEND_ADD_FRIEND;
const gs_c_friend_ntf_OP_TYPE gs_c_friend_ntf::OP_TYPE_MIN;
const gs_c_friend_ntf_OP_TYPE gs_c_friend_ntf::OP_TYPE_MAX;
const int gs_c_friend_ntf::OP_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_c_friend_ntf::kOpTypeFieldNumber;
const int gs_c_friend_ntf::kFriendIdFieldNumber;
const int gs_c_friend_ntf::kBaseInfoFieldNumber;
#endif  // !_MSC_VER

gs_c_friend_ntf::gs_c_friend_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_friend_ntf::InitAsDefaultInstance() {
  base_info_ = const_cast< ::friend_base_info*>(&::friend_base_info::default_instance());
}

gs_c_friend_ntf::gs_c_friend_ntf(const gs_c_friend_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_friend_ntf::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  friend_id_ = 0u;
  base_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_friend_ntf::~gs_c_friend_ntf() {
  SharedDtor();
}

void gs_c_friend_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
  }
}

void gs_c_friend_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_friend_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_friend_ntf_descriptor_;
}

const gs_c_friend_ntf& gs_c_friend_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_friend_ntf* gs_c_friend_ntf::default_instance_ = NULL;

gs_c_friend_ntf* gs_c_friend_ntf::New() const {
  return new gs_c_friend_ntf;
}

void gs_c_friend_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    friend_id_ = 0u;
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::friend_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_friend_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_c_friend_ntf.OP_TYPE op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_c_friend_ntf_OP_TYPE_IsValid(value)) {
            set_op_type(static_cast< ::gs_c_friend_ntf_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // optional uint32 friend_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_base_info;
        break;
      }

      // optional .friend_base_info base_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_friend_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_c_friend_ntf.OP_TYPE op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional uint32 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friend_id(), output);
  }

  // optional .friend_base_info base_info = 3;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_friend_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_c_friend_ntf.OP_TYPE op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional uint32 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friend_id(), target);
  }

  // optional .friend_base_info base_info = 3;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_friend_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_c_friend_ntf.OP_TYPE op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional uint32 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_id());
    }

    // optional .friend_base_info base_info = 3;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_friend_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_friend_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_friend_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_friend_ntf::MergeFrom(const gs_c_friend_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_base_info()) {
      mutable_base_info()->::friend_base_info::MergeFrom(from.base_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_friend_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_friend_ntf::CopyFrom(const gs_c_friend_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_friend_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  return true;
}

void gs_c_friend_ntf::Swap(gs_c_friend_ntf* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(base_info_, other->base_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_friend_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_friend_ntf_descriptor_;
  metadata.reflection = gs_c_friend_ntf_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* c_gs_chat_req_CHAT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_chat_req_CHAT_TYPE_descriptor_;
}
bool c_gs_chat_req_CHAT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const c_gs_chat_req_CHAT_TYPE c_gs_chat_req::WORLD;
const c_gs_chat_req_CHAT_TYPE c_gs_chat_req::GUILD;
const c_gs_chat_req_CHAT_TYPE c_gs_chat_req::WHISPER;
const c_gs_chat_req_CHAT_TYPE c_gs_chat_req::CHAT_TYPE_MIN;
const c_gs_chat_req_CHAT_TYPE c_gs_chat_req::CHAT_TYPE_MAX;
const int c_gs_chat_req::CHAT_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int c_gs_chat_req::kChatTypeFieldNumber;
const int c_gs_chat_req::kToIdFieldNumber;
const int c_gs_chat_req::kToNameFieldNumber;
const int c_gs_chat_req::kWordFieldNumber;
#endif  // !_MSC_VER

c_gs_chat_req::c_gs_chat_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_chat_req::InitAsDefaultInstance() {
}

c_gs_chat_req::c_gs_chat_req(const c_gs_chat_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_chat_req::SharedCtor() {
  _cached_size_ = 0;
  chat_type_ = 1;
  to_id_ = 0u;
  to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_chat_req::~c_gs_chat_req() {
  SharedDtor();
}

void c_gs_chat_req::SharedDtor() {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (this != default_instance_) {
  }
}

void c_gs_chat_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_chat_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_chat_req_descriptor_;
}

const c_gs_chat_req& c_gs_chat_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_chat_req* c_gs_chat_req::default_instance_ = NULL;

c_gs_chat_req* c_gs_chat_req::New() const {
  return new c_gs_chat_req;
}

void c_gs_chat_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chat_type_ = 1;
    to_id_ = 0u;
    if (has_to_name()) {
      if (to_name_ != &::google::protobuf::internal::kEmptyString) {
        to_name_->clear();
      }
    }
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_chat_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_chat_req.CHAT_TYPE chat_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_chat_req_CHAT_TYPE_IsValid(value)) {
            set_chat_type(static_cast< ::c_gs_chat_req_CHAT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_id;
        break;
      }

      // optional uint32 to_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_to_name;
        break;
      }

      // optional string to_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_name().data(), this->to_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_word;
        break;
      }

      // required string word = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_chat_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_chat_req.CHAT_TYPE chat_type = 1;
  if (has_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chat_type(), output);
  }

  // optional uint32 to_id = 2;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_id(), output);
  }

  // optional string to_name = 3;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->to_name(), output);
  }

  // required string word = 4;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->word(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_chat_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_chat_req.CHAT_TYPE chat_type = 1;
  if (has_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chat_type(), target);
  }

  // optional uint32 to_id = 2;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to_id(), target);
  }

  // optional string to_name = 3;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->to_name(), target);
  }

  // required string word = 4;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->word(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_chat_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_chat_req.CHAT_TYPE chat_type = 1;
    if (has_chat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
    }

    // optional uint32 to_id = 2;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_id());
    }

    // optional string to_name = 3;
    if (has_to_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_name());
    }

    // required string word = 4;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_chat_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_chat_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_chat_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_chat_req::MergeFrom(const c_gs_chat_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_to_name()) {
      set_to_name(from.to_name());
    }
    if (from.has_word()) {
      set_word(from.word());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_chat_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_chat_req::CopyFrom(const c_gs_chat_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_chat_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void c_gs_chat_req::Swap(c_gs_chat_req* other) {
  if (other != this) {
    std::swap(chat_type_, other->chat_type_);
    std::swap(to_id_, other->to_id_);
    std::swap(to_name_, other->to_name_);
    std::swap(word_, other->word_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_chat_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_chat_req_descriptor_;
  metadata.reflection = c_gs_chat_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_chat_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_c_chat_res::gs_c_chat_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_chat_res::InitAsDefaultInstance() {
}

gs_c_chat_res::gs_c_chat_res(const gs_c_chat_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_chat_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_chat_res::~gs_c_chat_res() {
  SharedDtor();
}

void gs_c_chat_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_chat_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_chat_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_chat_res_descriptor_;
}

const gs_c_chat_res& gs_c_chat_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_chat_res* gs_c_chat_res::default_instance_ = NULL;

gs_c_chat_res* gs_c_chat_res::New() const {
  return new gs_c_chat_res;
}

void gs_c_chat_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_chat_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_chat_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_chat_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_chat_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_chat_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_chat_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_chat_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_chat_res::MergeFrom(const gs_c_chat_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_chat_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_chat_res::CopyFrom(const gs_c_chat_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_chat_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_chat_res::Swap(gs_c_chat_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_chat_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_chat_res_descriptor_;
  metadata.reflection = gs_c_chat_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_chat_ntf::kChatTypeFieldNumber;
const int gs_c_chat_ntf::kUserIdFieldNumber;
const int gs_c_chat_ntf::kVipFieldNumber;
const int gs_c_chat_ntf::kNameFieldNumber;
const int gs_c_chat_ntf::kHeadIdFieldNumber;
const int gs_c_chat_ntf::kHeadFrameIdFieldNumber;
const int gs_c_chat_ntf::kWordFieldNumber;
#endif  // !_MSC_VER

gs_c_chat_ntf::gs_c_chat_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_chat_ntf::InitAsDefaultInstance() {
}

gs_c_chat_ntf::gs_c_chat_ntf(const gs_c_chat_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_chat_ntf::SharedCtor() {
  _cached_size_ = 0;
  chat_type_ = 1;
  user_id_ = 0u;
  vip_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_id_ = 0u;
  head_frame_id_ = 0u;
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_chat_ntf::~gs_c_chat_ntf() {
  SharedDtor();
}

void gs_c_chat_ntf::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (this != default_instance_) {
  }
}

void gs_c_chat_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_chat_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_chat_ntf_descriptor_;
}

const gs_c_chat_ntf& gs_c_chat_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_chat_ntf* gs_c_chat_ntf::default_instance_ = NULL;

gs_c_chat_ntf* gs_c_chat_ntf::New() const {
  return new gs_c_chat_ntf;
}

void gs_c_chat_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chat_type_ = 1;
    user_id_ = 0u;
    vip_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_id_ = 0u;
    head_frame_id_ = 0u;
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_chat_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_chat_req.CHAT_TYPE chat_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_chat_req_CHAT_TYPE_IsValid(value)) {
            set_chat_type(static_cast< ::c_gs_chat_req_CHAT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip;
        break;
      }

      // required uint32 vip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_head_id;
        break;
      }

      // required uint32 head_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_head_frame_id;
        break;
      }

      // required uint32 head_frame_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_frame_id_)));
          set_has_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_word;
        break;
      }

      // required string word = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_chat_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_chat_req.CHAT_TYPE chat_type = 1;
  if (has_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chat_type(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 vip = 3;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vip(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // required uint32 head_id = 5;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->head_id(), output);
  }

  // required uint32 head_frame_id = 6;
  if (has_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->head_frame_id(), output);
  }

  // required string word = 7;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->word(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_chat_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_chat_req.CHAT_TYPE chat_type = 1;
  if (has_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chat_type(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required uint32 vip = 3;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vip(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required uint32 head_id = 5;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->head_id(), target);
  }

  // required uint32 head_frame_id = 6;
  if (has_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->head_frame_id(), target);
  }

  // required string word = 7;
  if (has_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->word(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_chat_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_chat_req.CHAT_TYPE chat_type = 1;
    if (has_chat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 vip = 3;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 head_id = 5;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // required uint32 head_frame_id = 6;
    if (has_head_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_frame_id());
    }

    // required string word = 7;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_chat_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_chat_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_chat_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_chat_ntf::MergeFrom(const gs_c_chat_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_head_frame_id()) {
      set_head_frame_id(from.head_frame_id());
    }
    if (from.has_word()) {
      set_word(from.word());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_chat_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_chat_ntf::CopyFrom(const gs_c_chat_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_chat_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void gs_c_chat_ntf::Swap(gs_c_chat_ntf* other) {
  if (other != this) {
    std::swap(chat_type_, other->chat_type_);
    std::swap(user_id_, other->user_id_);
    std::swap(vip_, other->vip_);
    std::swap(name_, other->name_);
    std::swap(head_id_, other->head_id_);
    std::swap(head_frame_id_, other->head_frame_id_);
    std::swap(word_, other->word_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_chat_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_chat_ntf_descriptor_;
  metadata.reflection = gs_c_chat_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_fight_power_req::kFightPowerFieldNumber;
#endif  // !_MSC_VER

c_gs_fight_power_req::c_gs_fight_power_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_fight_power_req::InitAsDefaultInstance() {
}

c_gs_fight_power_req::c_gs_fight_power_req(const c_gs_fight_power_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_fight_power_req::SharedCtor() {
  _cached_size_ = 0;
  fight_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_fight_power_req::~c_gs_fight_power_req() {
  SharedDtor();
}

void c_gs_fight_power_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_fight_power_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_fight_power_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_fight_power_req_descriptor_;
}

const c_gs_fight_power_req& c_gs_fight_power_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_fight_power_req* c_gs_fight_power_req::default_instance_ = NULL;

c_gs_fight_power_req* c_gs_fight_power_req::New() const {
  return new c_gs_fight_power_req;
}

void c_gs_fight_power_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fight_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_fight_power_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 fight_power = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_fight_power_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 fight_power = 1;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fight_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_fight_power_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 fight_power = 1;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fight_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_fight_power_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 fight_power = 1;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_fight_power_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_fight_power_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_fight_power_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_fight_power_req::MergeFrom(const c_gs_fight_power_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_fight_power_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_fight_power_req::CopyFrom(const c_gs_fight_power_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_fight_power_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_fight_power_req::Swap(c_gs_fight_power_req* other) {
  if (other != this) {
    std::swap(fight_power_, other->fight_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_fight_power_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_fight_power_req_descriptor_;
  metadata.reflection = c_gs_fight_power_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_fight_power_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_c_fight_power_res::gs_c_fight_power_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_fight_power_res::InitAsDefaultInstance() {
}

gs_c_fight_power_res::gs_c_fight_power_res(const gs_c_fight_power_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_fight_power_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_fight_power_res::~gs_c_fight_power_res() {
  SharedDtor();
}

void gs_c_fight_power_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_fight_power_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_fight_power_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_fight_power_res_descriptor_;
}

const gs_c_fight_power_res& gs_c_fight_power_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_fight_power_res* gs_c_fight_power_res::default_instance_ = NULL;

gs_c_fight_power_res* gs_c_fight_power_res::New() const {
  return new gs_c_fight_power_res;
}

void gs_c_fight_power_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_fight_power_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_fight_power_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_fight_power_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_fight_power_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_fight_power_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_fight_power_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_fight_power_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_fight_power_res::MergeFrom(const gs_c_fight_power_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_fight_power_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_fight_power_res::CopyFrom(const gs_c_fight_power_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_fight_power_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_fight_power_res::Swap(gs_c_fight_power_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_fight_power_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_fight_power_res_descriptor_;
  metadata.reflection = gs_c_fight_power_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* c_gs_rank_req_RANK_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_rank_req_RANK_TYPE_descriptor_;
}
bool c_gs_rank_req_RANK_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const c_gs_rank_req_RANK_TYPE c_gs_rank_req::ARENA;
const c_gs_rank_req_RANK_TYPE c_gs_rank_req::FIGHT_POWER;
const c_gs_rank_req_RANK_TYPE c_gs_rank_req::LEVEL;
const c_gs_rank_req_RANK_TYPE c_gs_rank_req::GUILD;
const c_gs_rank_req_RANK_TYPE c_gs_rank_req::RANK_TYPE_MIN;
const c_gs_rank_req_RANK_TYPE c_gs_rank_req::RANK_TYPE_MAX;
const int c_gs_rank_req::RANK_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int c_gs_rank_req::kRankTypeFieldNumber;
#endif  // !_MSC_VER

c_gs_rank_req::c_gs_rank_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_rank_req::InitAsDefaultInstance() {
}

c_gs_rank_req::c_gs_rank_req(const c_gs_rank_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_rank_req::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_rank_req::~c_gs_rank_req() {
  SharedDtor();
}

void c_gs_rank_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_rank_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_rank_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_rank_req_descriptor_;
}

const c_gs_rank_req& c_gs_rank_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_rank_req* c_gs_rank_req::default_instance_ = NULL;

c_gs_rank_req* c_gs_rank_req::New() const {
  return new c_gs_rank_req;
}

void c_gs_rank_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_rank_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_rank_req.RANK_TYPE rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_rank_req_RANK_TYPE_IsValid(value)) {
            set_rank_type(static_cast< ::c_gs_rank_req_RANK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_rank_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_rank_req.RANK_TYPE rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rank_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_rank_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_rank_req.RANK_TYPE rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rank_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_rank_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_rank_req.RANK_TYPE rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_rank_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_rank_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_rank_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_rank_req::MergeFrom(const c_gs_rank_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_rank_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_rank_req::CopyFrom(const c_gs_rank_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_rank_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_rank_req::Swap(c_gs_rank_req* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_rank_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_rank_req_descriptor_;
  metadata.reflection = c_gs_rank_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_rank_res_user_hero_brief_info::kHeroIdFieldNumber;
const int gs_c_rank_res_user_hero_brief_info::kLevelFieldNumber;
const int gs_c_rank_res_user_hero_brief_info::kQualityFieldNumber;
const int gs_c_rank_res_user_hero_brief_info::kStarFieldNumber;
#endif  // !_MSC_VER

gs_c_rank_res_user_hero_brief_info::gs_c_rank_res_user_hero_brief_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_rank_res_user_hero_brief_info::InitAsDefaultInstance() {
}

gs_c_rank_res_user_hero_brief_info::gs_c_rank_res_user_hero_brief_info(const gs_c_rank_res_user_hero_brief_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_rank_res_user_hero_brief_info::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  level_ = 0u;
  quality_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_rank_res_user_hero_brief_info::~gs_c_rank_res_user_hero_brief_info() {
  SharedDtor();
}

void gs_c_rank_res_user_hero_brief_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_rank_res_user_hero_brief_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_rank_res_user_hero_brief_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_rank_res_user_hero_brief_info_descriptor_;
}

const gs_c_rank_res_user_hero_brief_info& gs_c_rank_res_user_hero_brief_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_rank_res_user_hero_brief_info* gs_c_rank_res_user_hero_brief_info::default_instance_ = NULL;

gs_c_rank_res_user_hero_brief_info* gs_c_rank_res_user_hero_brief_info::New() const {
  return new gs_c_rank_res_user_hero_brief_info;
}

void gs_c_rank_res_user_hero_brief_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    level_ = 0u;
    quality_ = 0u;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_rank_res_user_hero_brief_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // required uint32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // required uint32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_rank_res_user_hero_brief_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  // required uint32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_rank_res_user_hero_brief_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quality(), target);
  }

  // required uint32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_rank_res_user_hero_brief_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_rank_res_user_hero_brief_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_rank_res_user_hero_brief_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_rank_res_user_hero_brief_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_rank_res_user_hero_brief_info::MergeFrom(const gs_c_rank_res_user_hero_brief_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_rank_res_user_hero_brief_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_rank_res_user_hero_brief_info::CopyFrom(const gs_c_rank_res_user_hero_brief_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_rank_res_user_hero_brief_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void gs_c_rank_res_user_hero_brief_info::Swap(gs_c_rank_res_user_hero_brief_info* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_rank_res_user_hero_brief_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_rank_res_user_hero_brief_info_descriptor_;
  metadata.reflection = gs_c_rank_res_user_hero_brief_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_c_rank_res_rank_info::kHeadIdFieldNumber;
const int gs_c_rank_res_rank_info::kHeadFrameIdFieldNumber;
const int gs_c_rank_res_rank_info::kLevelFieldNumber;
const int gs_c_rank_res_rank_info::kNameFieldNumber;
const int gs_c_rank_res_rank_info::kArenaRankFieldNumber;
const int gs_c_rank_res_rank_info::kFightRankFieldNumber;
const int gs_c_rank_res_rank_info::kFightPowerFieldNumber;
const int gs_c_rank_res_rank_info::kLevelRankFieldNumber;
const int gs_c_rank_res_rank_info::kVipFieldNumber;
const int gs_c_rank_res_rank_info::kHerosFieldNumber;
#endif  // !_MSC_VER

gs_c_rank_res_rank_info::gs_c_rank_res_rank_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_rank_res_rank_info::InitAsDefaultInstance() {
}

gs_c_rank_res_rank_info::gs_c_rank_res_rank_info(const gs_c_rank_res_rank_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_rank_res_rank_info::SharedCtor() {
  _cached_size_ = 0;
  head_id_ = 0u;
  head_frame_id_ = 0u;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  arena_rank_ = 0u;
  fight_rank_ = 0u;
  fight_power_ = 0u;
  level_rank_ = 0u;
  vip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_rank_res_rank_info::~gs_c_rank_res_rank_info() {
  SharedDtor();
}

void gs_c_rank_res_rank_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void gs_c_rank_res_rank_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_rank_res_rank_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_rank_res_rank_info_descriptor_;
}

const gs_c_rank_res_rank_info& gs_c_rank_res_rank_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_rank_res_rank_info* gs_c_rank_res_rank_info::default_instance_ = NULL;

gs_c_rank_res_rank_info* gs_c_rank_res_rank_info::New() const {
  return new gs_c_rank_res_rank_info;
}

void gs_c_rank_res_rank_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    head_id_ = 0u;
    head_frame_id_ = 0u;
    level_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    arena_rank_ = 0u;
    fight_rank_ = 0u;
    fight_power_ = 0u;
    level_rank_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vip_ = 0u;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_rank_res_rank_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 head_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_head_frame_id;
        break;
      }

      // required uint32 head_frame_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_frame_id_)));
          set_has_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_arena_rank;
        break;
      }

      // required uint32 arena_rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arena_rank_)));
          set_has_arena_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight_rank;
        break;
      }

      // required uint32 fight_rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_rank_)));
          set_has_fight_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fight_power;
        break;
      }

      // required uint32 fight_power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level_rank;
        break;
      }

      // required uint32 level_rank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_rank_)));
          set_has_level_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vip;
        break;
      }

      // required uint32 vip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_heros;
        break;
      }

      // repeated .gs_c_rank_res.user_hero_brief_info heros = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_rank_res_rank_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 head_id = 1;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->head_id(), output);
  }

  // required uint32 head_frame_id = 2;
  if (has_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->head_frame_id(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // required uint32 arena_rank = 5;
  if (has_arena_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->arena_rank(), output);
  }

  // required uint32 fight_rank = 6;
  if (has_fight_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fight_rank(), output);
  }

  // required uint32 fight_power = 7;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fight_power(), output);
  }

  // required uint32 level_rank = 8;
  if (has_level_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level_rank(), output);
  }

  // required uint32 vip = 9;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->vip(), output);
  }

  // repeated .gs_c_rank_res.user_hero_brief_info heros = 10;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_rank_res_rank_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 head_id = 1;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->head_id(), target);
  }

  // required uint32 head_frame_id = 2;
  if (has_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->head_frame_id(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required uint32 arena_rank = 5;
  if (has_arena_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->arena_rank(), target);
  }

  // required uint32 fight_rank = 6;
  if (has_fight_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fight_rank(), target);
  }

  // required uint32 fight_power = 7;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fight_power(), target);
  }

  // required uint32 level_rank = 8;
  if (has_level_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level_rank(), target);
  }

  // required uint32 vip = 9;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->vip(), target);
  }

  // repeated .gs_c_rank_res.user_hero_brief_info heros = 10;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_rank_res_rank_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 head_id = 1;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // required uint32 head_frame_id = 2;
    if (has_head_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_frame_id());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 arena_rank = 5;
    if (has_arena_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arena_rank());
    }

    // required uint32 fight_rank = 6;
    if (has_fight_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_rank());
    }

    // required uint32 fight_power = 7;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

    // required uint32 level_rank = 8;
    if (has_level_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_rank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 vip = 9;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

  }
  // repeated .gs_c_rank_res.user_hero_brief_info heros = 10;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_rank_res_rank_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_rank_res_rank_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_rank_res_rank_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_rank_res_rank_info::MergeFrom(const gs_c_rank_res_rank_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_head_frame_id()) {
      set_head_frame_id(from.head_frame_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_arena_rank()) {
      set_arena_rank(from.arena_rank());
    }
    if (from.has_fight_rank()) {
      set_fight_rank(from.fight_rank());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_level_rank()) {
      set_level_rank(from.level_rank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_rank_res_rank_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_rank_res_rank_info::CopyFrom(const gs_c_rank_res_rank_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_rank_res_rank_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_rank_res_rank_info::Swap(gs_c_rank_res_rank_info* other) {
  if (other != this) {
    std::swap(head_id_, other->head_id_);
    std::swap(head_frame_id_, other->head_frame_id_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(arena_rank_, other->arena_rank_);
    std::swap(fight_rank_, other->fight_rank_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(level_rank_, other->level_rank_);
    std::swap(vip_, other->vip_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_rank_res_rank_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_rank_res_rank_info_descriptor_;
  metadata.reflection = gs_c_rank_res_rank_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_c_rank_res::kErrorCodeFieldNumber;
const int gs_c_rank_res::kRankTypeFieldNumber;
const int gs_c_rank_res::kRanksFieldNumber;
const int gs_c_rank_res::kMeCurRankFieldNumber;
const int gs_c_rank_res::kMeCurValueFieldNumber;
#endif  // !_MSC_VER

gs_c_rank_res::gs_c_rank_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_rank_res::InitAsDefaultInstance() {
}

gs_c_rank_res::gs_c_rank_res(const gs_c_rank_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_rank_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  rank_type_ = 1;
  me_cur_rank_ = 0u;
  me_cur_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_rank_res::~gs_c_rank_res() {
  SharedDtor();
}

void gs_c_rank_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_rank_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_rank_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_rank_res_descriptor_;
}

const gs_c_rank_res& gs_c_rank_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_rank_res* gs_c_rank_res::default_instance_ = NULL;

gs_c_rank_res* gs_c_rank_res::New() const {
  return new gs_c_rank_res;
}

void gs_c_rank_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    rank_type_ = 1;
    me_cur_rank_ = 0u;
    me_cur_value_ = 0u;
  }
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_rank_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_type;
        break;
      }

      // optional .c_gs_rank_req.RANK_TYPE rank_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_rank_req_RANK_TYPE_IsValid(value)) {
            set_rank_type(static_cast< ::c_gs_rank_req_RANK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ranks;
        break;
      }

      // repeated .gs_c_rank_res.rank_info ranks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ranks;
        if (input->ExpectTag(32)) goto parse_me_cur_rank;
        break;
      }

      // optional uint32 me_cur_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_me_cur_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &me_cur_rank_)));
          set_has_me_cur_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_me_cur_value;
        break;
      }

      // optional uint32 me_cur_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_me_cur_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &me_cur_value_)));
          set_has_me_cur_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_rank_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional .c_gs_rank_req.RANK_TYPE rank_type = 2;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rank_type(), output);
  }

  // repeated .gs_c_rank_res.rank_info ranks = 3;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ranks(i), output);
  }

  // optional uint32 me_cur_rank = 4;
  if (has_me_cur_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->me_cur_rank(), output);
  }

  // optional uint32 me_cur_value = 5;
  if (has_me_cur_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->me_cur_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_rank_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional .c_gs_rank_req.RANK_TYPE rank_type = 2;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rank_type(), target);
  }

  // repeated .gs_c_rank_res.rank_info ranks = 3;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ranks(i), target);
  }

  // optional uint32 me_cur_rank = 4;
  if (has_me_cur_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->me_cur_rank(), target);
  }

  // optional uint32 me_cur_value = 5;
  if (has_me_cur_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->me_cur_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_rank_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional .c_gs_rank_req.RANK_TYPE rank_type = 2;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank_type());
    }

    // optional uint32 me_cur_rank = 4;
    if (has_me_cur_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->me_cur_rank());
    }

    // optional uint32 me_cur_value = 5;
    if (has_me_cur_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->me_cur_value());
    }

  }
  // repeated .gs_c_rank_res.rank_info ranks = 3;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_rank_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_rank_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_rank_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_rank_res::MergeFrom(const gs_c_rank_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
    if (from.has_me_cur_rank()) {
      set_me_cur_rank(from.me_cur_rank());
    }
    if (from.has_me_cur_value()) {
      set_me_cur_value(from.me_cur_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_rank_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_rank_res::CopyFrom(const gs_c_rank_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_rank_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ranks_size(); i++) {
    if (!this->ranks(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_rank_res::Swap(gs_c_rank_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(rank_type_, other->rank_type_);
    ranks_.Swap(&other->ranks_);
    std::swap(me_cur_rank_, other->me_cur_rank_);
    std::swap(me_cur_value_, other->me_cur_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_rank_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_rank_res_descriptor_;
  metadata.reflection = gs_c_rank_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_crusade_start_req::kWaveFieldNumber;
const int c_gs_crusade_start_req::kEnemyHerosFieldNumber;
const int c_gs_crusade_start_req::kMeHerosFieldNumber;
#endif  // !_MSC_VER

c_gs_crusade_start_req::c_gs_crusade_start_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_crusade_start_req::InitAsDefaultInstance() {
}

c_gs_crusade_start_req::c_gs_crusade_start_req(const c_gs_crusade_start_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_crusade_start_req::SharedCtor() {
  _cached_size_ = 0;
  wave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_crusade_start_req::~c_gs_crusade_start_req() {
  SharedDtor();
}

void c_gs_crusade_start_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_crusade_start_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_crusade_start_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_crusade_start_req_descriptor_;
}

const c_gs_crusade_start_req& c_gs_crusade_start_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_crusade_start_req* c_gs_crusade_start_req::default_instance_ = NULL;

c_gs_crusade_start_req* c_gs_crusade_start_req::New() const {
  return new c_gs_crusade_start_req;
}

void c_gs_crusade_start_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wave_ = 0u;
  }
  enemy_heros_.Clear();
  me_heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_crusade_start_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 wave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enemy_heros;
        break;
      }

      // repeated uint32 enemy_heros = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_enemy_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_enemy_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enemy_heros;
        if (input->ExpectTag(24)) goto parse_me_heros;
        break;
      }

      // repeated uint32 me_heros = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_me_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_me_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_me_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_me_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_crusade_start_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 wave = 1;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wave(), output);
  }

  // repeated uint32 enemy_heros = 2;
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->enemy_heros(i), output);
  }

  // repeated uint32 me_heros = 3;
  for (int i = 0; i < this->me_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->me_heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_crusade_start_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 wave = 1;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wave(), target);
  }

  // repeated uint32 enemy_heros = 2;
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->enemy_heros(i), target);
  }

  // repeated uint32 me_heros = 3;
  for (int i = 0; i < this->me_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->me_heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_crusade_start_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 wave = 1;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave());
    }

  }
  // repeated uint32 enemy_heros = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemy_heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->enemy_heros(i));
    }
    total_size += 1 * this->enemy_heros_size() + data_size;
  }

  // repeated uint32 me_heros = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->me_heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->me_heros(i));
    }
    total_size += 1 * this->me_heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_crusade_start_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_crusade_start_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_crusade_start_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_crusade_start_req::MergeFrom(const c_gs_crusade_start_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemy_heros_.MergeFrom(from.enemy_heros_);
  me_heros_.MergeFrom(from.me_heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wave()) {
      set_wave(from.wave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_crusade_start_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_crusade_start_req::CopyFrom(const c_gs_crusade_start_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_crusade_start_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_crusade_start_req::Swap(c_gs_crusade_start_req* other) {
  if (other != this) {
    std::swap(wave_, other->wave_);
    enemy_heros_.Swap(&other->enemy_heros_);
    me_heros_.Swap(&other->me_heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_crusade_start_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_crusade_start_req_descriptor_;
  metadata.reflection = c_gs_crusade_start_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_crusade_start_res::kErrorCodeFieldNumber;
const int gs_c_crusade_start_res::kWaveFieldNumber;
#endif  // !_MSC_VER

gs_c_crusade_start_res::gs_c_crusade_start_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_crusade_start_res::InitAsDefaultInstance() {
}

gs_c_crusade_start_res::gs_c_crusade_start_res(const gs_c_crusade_start_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_crusade_start_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  wave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_crusade_start_res::~gs_c_crusade_start_res() {
  SharedDtor();
}

void gs_c_crusade_start_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_crusade_start_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_crusade_start_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_crusade_start_res_descriptor_;
}

const gs_c_crusade_start_res& gs_c_crusade_start_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_crusade_start_res* gs_c_crusade_start_res::default_instance_ = NULL;

gs_c_crusade_start_res* gs_c_crusade_start_res::New() const {
  return new gs_c_crusade_start_res;
}

void gs_c_crusade_start_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    wave_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_crusade_start_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wave;
        break;
      }

      // optional uint32 wave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_crusade_start_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 wave = 2;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_crusade_start_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 wave = 2;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_crusade_start_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 wave = 2;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_crusade_start_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_crusade_start_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_crusade_start_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_crusade_start_res::MergeFrom(const gs_c_crusade_start_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_crusade_start_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_crusade_start_res::CopyFrom(const gs_c_crusade_start_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_crusade_start_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_crusade_start_res::Swap(gs_c_crusade_start_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(wave_, other->wave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_crusade_start_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_crusade_start_res_descriptor_;
  metadata.reflection = gs_c_crusade_start_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_crusade_end_req::kIsWinFieldNumber;
const int c_gs_crusade_end_req::kEnemyHerosFieldNumber;
const int c_gs_crusade_end_req::kMeHerosFieldNumber;
#endif  // !_MSC_VER

c_gs_crusade_end_req::c_gs_crusade_end_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_crusade_end_req::InitAsDefaultInstance() {
}

c_gs_crusade_end_req::c_gs_crusade_end_req(const c_gs_crusade_end_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_crusade_end_req::SharedCtor() {
  _cached_size_ = 0;
  is_win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_crusade_end_req::~c_gs_crusade_end_req() {
  SharedDtor();
}

void c_gs_crusade_end_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_crusade_end_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_crusade_end_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_crusade_end_req_descriptor_;
}

const c_gs_crusade_end_req& c_gs_crusade_end_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_crusade_end_req* c_gs_crusade_end_req::default_instance_ = NULL;

c_gs_crusade_end_req* c_gs_crusade_end_req::New() const {
  return new c_gs_crusade_end_req;
}

void c_gs_crusade_end_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_win_ = false;
  }
  enemy_heros_.Clear();
  me_heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_crusade_end_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enemy_heros;
        break;
      }

      // repeated .user_crusade.crusade_hero enemy_heros = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemy_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enemy_heros;
        if (input->ExpectTag(26)) goto parse_me_heros;
        break;
      }

      // repeated .user_crusade.crusade_hero me_heros = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_me_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_me_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_me_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_crusade_end_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_win = 1;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_win(), output);
  }

  // repeated .user_crusade.crusade_hero enemy_heros = 2;
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enemy_heros(i), output);
  }

  // repeated .user_crusade.crusade_hero me_heros = 3;
  for (int i = 0; i < this->me_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->me_heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_crusade_end_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_win = 1;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_win(), target);
  }

  // repeated .user_crusade.crusade_hero enemy_heros = 2;
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enemy_heros(i), target);
  }

  // repeated .user_crusade.crusade_hero me_heros = 3;
  for (int i = 0; i < this->me_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->me_heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_crusade_end_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_win = 1;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

  }
  // repeated .user_crusade.crusade_hero enemy_heros = 2;
  total_size += 1 * this->enemy_heros_size();
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemy_heros(i));
  }

  // repeated .user_crusade.crusade_hero me_heros = 3;
  total_size += 1 * this->me_heros_size();
  for (int i = 0; i < this->me_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->me_heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_crusade_end_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_crusade_end_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_crusade_end_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_crusade_end_req::MergeFrom(const c_gs_crusade_end_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemy_heros_.MergeFrom(from.enemy_heros_);
  me_heros_.MergeFrom(from.me_heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_crusade_end_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_crusade_end_req::CopyFrom(const c_gs_crusade_end_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_crusade_end_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < enemy_heros_size(); i++) {
    if (!this->enemy_heros(i).IsInitialized()) return false;
  }
  for (int i = 0; i < me_heros_size(); i++) {
    if (!this->me_heros(i).IsInitialized()) return false;
  }
  return true;
}

void c_gs_crusade_end_req::Swap(c_gs_crusade_end_req* other) {
  if (other != this) {
    std::swap(is_win_, other->is_win_);
    enemy_heros_.Swap(&other->enemy_heros_);
    me_heros_.Swap(&other->me_heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_crusade_end_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_crusade_end_req_descriptor_;
  metadata.reflection = c_gs_crusade_end_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_crusade_end_res::kErrorCodeFieldNumber;
const int gs_c_crusade_end_res::kOutputsFieldNumber;
#endif  // !_MSC_VER

gs_c_crusade_end_res::gs_c_crusade_end_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_crusade_end_res::InitAsDefaultInstance() {
}

gs_c_crusade_end_res::gs_c_crusade_end_res(const gs_c_crusade_end_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_crusade_end_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_crusade_end_res::~gs_c_crusade_end_res() {
  SharedDtor();
}

void gs_c_crusade_end_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_crusade_end_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_crusade_end_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_crusade_end_res_descriptor_;
}

const gs_c_crusade_end_res& gs_c_crusade_end_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_crusade_end_res* gs_c_crusade_end_res::default_instance_ = NULL;

gs_c_crusade_end_res* gs_c_crusade_end_res::New() const {
  return new gs_c_crusade_end_res;
}

void gs_c_crusade_end_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  outputs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_crusade_end_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_outputs;
        break;
      }

      // repeated .struct_game_element outputs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_outputs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_crusade_end_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .struct_game_element outputs = 2;
  for (int i = 0; i < this->outputs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->outputs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_crusade_end_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_game_element outputs = 2;
  for (int i = 0; i < this->outputs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->outputs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_crusade_end_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .struct_game_element outputs = 2;
  total_size += 1 * this->outputs_size();
  for (int i = 0; i < this->outputs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outputs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_crusade_end_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_crusade_end_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_crusade_end_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_crusade_end_res::MergeFrom(const gs_c_crusade_end_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  outputs_.MergeFrom(from.outputs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_crusade_end_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_crusade_end_res::CopyFrom(const gs_c_crusade_end_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_crusade_end_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < outputs_size(); i++) {
    if (!this->outputs(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_crusade_end_res::Swap(gs_c_crusade_end_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    outputs_.Swap(&other->outputs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_crusade_end_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_crusade_end_res_descriptor_;
  metadata.reflection = gs_c_crusade_end_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_crusade_hero_life_req::kHeroIdFieldNumber;
#endif  // !_MSC_VER

c_gs_crusade_hero_life_req::c_gs_crusade_hero_life_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_crusade_hero_life_req::InitAsDefaultInstance() {
}

c_gs_crusade_hero_life_req::c_gs_crusade_hero_life_req(const c_gs_crusade_hero_life_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_crusade_hero_life_req::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_crusade_hero_life_req::~c_gs_crusade_hero_life_req() {
  SharedDtor();
}

void c_gs_crusade_hero_life_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_crusade_hero_life_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_crusade_hero_life_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_crusade_hero_life_req_descriptor_;
}

const c_gs_crusade_hero_life_req& c_gs_crusade_hero_life_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_crusade_hero_life_req* c_gs_crusade_hero_life_req::default_instance_ = NULL;

c_gs_crusade_hero_life_req* c_gs_crusade_hero_life_req::New() const {
  return new c_gs_crusade_hero_life_req;
}

void c_gs_crusade_hero_life_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_crusade_hero_life_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_crusade_hero_life_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_crusade_hero_life_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_crusade_hero_life_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_crusade_hero_life_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_crusade_hero_life_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_crusade_hero_life_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_crusade_hero_life_req::MergeFrom(const c_gs_crusade_hero_life_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_crusade_hero_life_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_crusade_hero_life_req::CopyFrom(const c_gs_crusade_hero_life_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_crusade_hero_life_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_crusade_hero_life_req::Swap(c_gs_crusade_hero_life_req* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_crusade_hero_life_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_crusade_hero_life_req_descriptor_;
  metadata.reflection = c_gs_crusade_hero_life_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_crusade_hero_life_res::kErrorCodeFieldNumber;
const int gs_c_crusade_hero_life_res::kHeroIdFieldNumber;
const int gs_c_crusade_hero_life_res::kConsumesFieldNumber;
#endif  // !_MSC_VER

gs_c_crusade_hero_life_res::gs_c_crusade_hero_life_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_crusade_hero_life_res::InitAsDefaultInstance() {
}

gs_c_crusade_hero_life_res::gs_c_crusade_hero_life_res(const gs_c_crusade_hero_life_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_crusade_hero_life_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_crusade_hero_life_res::~gs_c_crusade_hero_life_res() {
  SharedDtor();
}

void gs_c_crusade_hero_life_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_crusade_hero_life_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_crusade_hero_life_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_crusade_hero_life_res_descriptor_;
}

const gs_c_crusade_hero_life_res& gs_c_crusade_hero_life_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_crusade_hero_life_res* gs_c_crusade_hero_life_res::default_instance_ = NULL;

gs_c_crusade_hero_life_res* gs_c_crusade_hero_life_res::New() const {
  return new gs_c_crusade_hero_life_res;
}

void gs_c_crusade_hero_life_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    hero_id_ = 0u;
  }
  consumes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_crusade_hero_life_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consumes;
        break;
      }

      // repeated .struct_game_element consumes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consumes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_consumes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_crusade_hero_life_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // repeated .struct_game_element consumes = 3;
  for (int i = 0; i < this->consumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->consumes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_crusade_hero_life_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // repeated .struct_game_element consumes = 3;
  for (int i = 0; i < this->consumes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->consumes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_crusade_hero_life_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  // repeated .struct_game_element consumes = 3;
  total_size += 1 * this->consumes_size();
  for (int i = 0; i < this->consumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consumes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_crusade_hero_life_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_crusade_hero_life_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_crusade_hero_life_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_crusade_hero_life_res::MergeFrom(const gs_c_crusade_hero_life_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consumes_.MergeFrom(from.consumes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_crusade_hero_life_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_crusade_hero_life_res::CopyFrom(const gs_c_crusade_hero_life_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_crusade_hero_life_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consumes_size(); i++) {
    if (!this->consumes(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_crusade_hero_life_res::Swap(gs_c_crusade_hero_life_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(hero_id_, other->hero_id_);
    consumes_.Swap(&other->consumes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_crusade_hero_life_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_crusade_hero_life_res_descriptor_;
  metadata.reflection = gs_c_crusade_hero_life_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_crusade_reset_req::c_gs_crusade_reset_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_crusade_reset_req::InitAsDefaultInstance() {
}

c_gs_crusade_reset_req::c_gs_crusade_reset_req(const c_gs_crusade_reset_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_crusade_reset_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_crusade_reset_req::~c_gs_crusade_reset_req() {
  SharedDtor();
}

void c_gs_crusade_reset_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_crusade_reset_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_crusade_reset_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_crusade_reset_req_descriptor_;
}

const c_gs_crusade_reset_req& c_gs_crusade_reset_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_crusade_reset_req* c_gs_crusade_reset_req::default_instance_ = NULL;

c_gs_crusade_reset_req* c_gs_crusade_reset_req::New() const {
  return new c_gs_crusade_reset_req;
}

void c_gs_crusade_reset_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_crusade_reset_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_crusade_reset_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_crusade_reset_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_crusade_reset_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_crusade_reset_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_crusade_reset_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_crusade_reset_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_crusade_reset_req::MergeFrom(const c_gs_crusade_reset_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_crusade_reset_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_crusade_reset_req::CopyFrom(const c_gs_crusade_reset_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_crusade_reset_req::IsInitialized() const {

  return true;
}

void c_gs_crusade_reset_req::Swap(c_gs_crusade_reset_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_crusade_reset_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_crusade_reset_req_descriptor_;
  metadata.reflection = c_gs_crusade_reset_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_crusade_reset_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_c_crusade_reset_res::gs_c_crusade_reset_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_crusade_reset_res::InitAsDefaultInstance() {
}

gs_c_crusade_reset_res::gs_c_crusade_reset_res(const gs_c_crusade_reset_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_crusade_reset_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_crusade_reset_res::~gs_c_crusade_reset_res() {
  SharedDtor();
}

void gs_c_crusade_reset_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_crusade_reset_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_crusade_reset_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_crusade_reset_res_descriptor_;
}

const gs_c_crusade_reset_res& gs_c_crusade_reset_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_crusade_reset_res* gs_c_crusade_reset_res::default_instance_ = NULL;

gs_c_crusade_reset_res* gs_c_crusade_reset_res::New() const {
  return new gs_c_crusade_reset_res;
}

void gs_c_crusade_reset_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_crusade_reset_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_crusade_reset_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_crusade_reset_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_crusade_reset_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_crusade_reset_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_crusade_reset_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_crusade_reset_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_crusade_reset_res::MergeFrom(const gs_c_crusade_reset_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_crusade_reset_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_crusade_reset_res::CopyFrom(const gs_c_crusade_reset_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_crusade_reset_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_crusade_reset_res::Swap(gs_c_crusade_reset_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_crusade_reset_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_crusade_reset_res_descriptor_;
  metadata.reflection = gs_c_crusade_reset_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_crusade_promote_award_req::c_gs_crusade_promote_award_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_crusade_promote_award_req::InitAsDefaultInstance() {
}

c_gs_crusade_promote_award_req::c_gs_crusade_promote_award_req(const c_gs_crusade_promote_award_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_crusade_promote_award_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_crusade_promote_award_req::~c_gs_crusade_promote_award_req() {
  SharedDtor();
}

void c_gs_crusade_promote_award_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_crusade_promote_award_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_crusade_promote_award_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_crusade_promote_award_req_descriptor_;
}

const c_gs_crusade_promote_award_req& c_gs_crusade_promote_award_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_crusade_promote_award_req* c_gs_crusade_promote_award_req::default_instance_ = NULL;

c_gs_crusade_promote_award_req* c_gs_crusade_promote_award_req::New() const {
  return new c_gs_crusade_promote_award_req;
}

void c_gs_crusade_promote_award_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_crusade_promote_award_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_crusade_promote_award_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_crusade_promote_award_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_crusade_promote_award_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_crusade_promote_award_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_crusade_promote_award_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_crusade_promote_award_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_crusade_promote_award_req::MergeFrom(const c_gs_crusade_promote_award_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_crusade_promote_award_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_crusade_promote_award_req::CopyFrom(const c_gs_crusade_promote_award_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_crusade_promote_award_req::IsInitialized() const {

  return true;
}

void c_gs_crusade_promote_award_req::Swap(c_gs_crusade_promote_award_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_crusade_promote_award_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_crusade_promote_award_req_descriptor_;
  metadata.reflection = c_gs_crusade_promote_award_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_crusade_promote_award_res::kErrorCodeFieldNumber;
const int gs_c_crusade_promote_award_res::kConsumesFieldNumber;
#endif  // !_MSC_VER

gs_c_crusade_promote_award_res::gs_c_crusade_promote_award_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_crusade_promote_award_res::InitAsDefaultInstance() {
}

gs_c_crusade_promote_award_res::gs_c_crusade_promote_award_res(const gs_c_crusade_promote_award_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_crusade_promote_award_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_crusade_promote_award_res::~gs_c_crusade_promote_award_res() {
  SharedDtor();
}

void gs_c_crusade_promote_award_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_crusade_promote_award_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_crusade_promote_award_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_crusade_promote_award_res_descriptor_;
}

const gs_c_crusade_promote_award_res& gs_c_crusade_promote_award_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_crusade_promote_award_res* gs_c_crusade_promote_award_res::default_instance_ = NULL;

gs_c_crusade_promote_award_res* gs_c_crusade_promote_award_res::New() const {
  return new gs_c_crusade_promote_award_res;
}

void gs_c_crusade_promote_award_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  consumes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_crusade_promote_award_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consumes;
        break;
      }

      // repeated .struct_game_element consumes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consumes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consumes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_crusade_promote_award_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .struct_game_element consumes = 2;
  for (int i = 0; i < this->consumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consumes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_crusade_promote_award_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_game_element consumes = 2;
  for (int i = 0; i < this->consumes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consumes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_crusade_promote_award_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .struct_game_element consumes = 2;
  total_size += 1 * this->consumes_size();
  for (int i = 0; i < this->consumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consumes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_crusade_promote_award_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_crusade_promote_award_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_crusade_promote_award_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_crusade_promote_award_res::MergeFrom(const gs_c_crusade_promote_award_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consumes_.MergeFrom(from.consumes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_crusade_promote_award_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_crusade_promote_award_res::CopyFrom(const gs_c_crusade_promote_award_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_crusade_promote_award_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consumes_size(); i++) {
    if (!this->consumes(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_crusade_promote_award_res::Swap(gs_c_crusade_promote_award_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    consumes_.Swap(&other->consumes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_crusade_promote_award_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_crusade_promote_award_res_descriptor_;
  metadata.reflection = gs_c_crusade_promote_award_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_crusade_buff_refresh_req::c_gs_crusade_buff_refresh_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_crusade_buff_refresh_req::InitAsDefaultInstance() {
}

c_gs_crusade_buff_refresh_req::c_gs_crusade_buff_refresh_req(const c_gs_crusade_buff_refresh_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_crusade_buff_refresh_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_crusade_buff_refresh_req::~c_gs_crusade_buff_refresh_req() {
  SharedDtor();
}

void c_gs_crusade_buff_refresh_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_crusade_buff_refresh_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_crusade_buff_refresh_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_crusade_buff_refresh_req_descriptor_;
}

const c_gs_crusade_buff_refresh_req& c_gs_crusade_buff_refresh_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_crusade_buff_refresh_req* c_gs_crusade_buff_refresh_req::default_instance_ = NULL;

c_gs_crusade_buff_refresh_req* c_gs_crusade_buff_refresh_req::New() const {
  return new c_gs_crusade_buff_refresh_req;
}

void c_gs_crusade_buff_refresh_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_crusade_buff_refresh_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_crusade_buff_refresh_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_crusade_buff_refresh_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_crusade_buff_refresh_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_crusade_buff_refresh_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_crusade_buff_refresh_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_crusade_buff_refresh_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_crusade_buff_refresh_req::MergeFrom(const c_gs_crusade_buff_refresh_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_crusade_buff_refresh_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_crusade_buff_refresh_req::CopyFrom(const c_gs_crusade_buff_refresh_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_crusade_buff_refresh_req::IsInitialized() const {

  return true;
}

void c_gs_crusade_buff_refresh_req::Swap(c_gs_crusade_buff_refresh_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_crusade_buff_refresh_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_crusade_buff_refresh_req_descriptor_;
  metadata.reflection = c_gs_crusade_buff_refresh_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_crusade_buff_refresh_res::kErrorCodeFieldNumber;
const int gs_c_crusade_buff_refresh_res::kConsumesFieldNumber;
#endif  // !_MSC_VER

gs_c_crusade_buff_refresh_res::gs_c_crusade_buff_refresh_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_crusade_buff_refresh_res::InitAsDefaultInstance() {
}

gs_c_crusade_buff_refresh_res::gs_c_crusade_buff_refresh_res(const gs_c_crusade_buff_refresh_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_crusade_buff_refresh_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_crusade_buff_refresh_res::~gs_c_crusade_buff_refresh_res() {
  SharedDtor();
}

void gs_c_crusade_buff_refresh_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_crusade_buff_refresh_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_crusade_buff_refresh_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_crusade_buff_refresh_res_descriptor_;
}

const gs_c_crusade_buff_refresh_res& gs_c_crusade_buff_refresh_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_crusade_buff_refresh_res* gs_c_crusade_buff_refresh_res::default_instance_ = NULL;

gs_c_crusade_buff_refresh_res* gs_c_crusade_buff_refresh_res::New() const {
  return new gs_c_crusade_buff_refresh_res;
}

void gs_c_crusade_buff_refresh_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  consumes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_crusade_buff_refresh_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consumes;
        break;
      }

      // repeated .struct_game_element consumes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consumes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consumes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_crusade_buff_refresh_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .struct_game_element consumes = 2;
  for (int i = 0; i < this->consumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consumes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_crusade_buff_refresh_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_game_element consumes = 2;
  for (int i = 0; i < this->consumes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consumes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_crusade_buff_refresh_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .struct_game_element consumes = 2;
  total_size += 1 * this->consumes_size();
  for (int i = 0; i < this->consumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consumes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_crusade_buff_refresh_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_crusade_buff_refresh_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_crusade_buff_refresh_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_crusade_buff_refresh_res::MergeFrom(const gs_c_crusade_buff_refresh_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consumes_.MergeFrom(from.consumes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_crusade_buff_refresh_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_crusade_buff_refresh_res::CopyFrom(const gs_c_crusade_buff_refresh_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_crusade_buff_refresh_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consumes_size(); i++) {
    if (!this->consumes(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_crusade_buff_refresh_res::Swap(gs_c_crusade_buff_refresh_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    consumes_.Swap(&other->consumes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_crusade_buff_refresh_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_crusade_buff_refresh_res_descriptor_;
  metadata.reflection = gs_c_crusade_buff_refresh_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int struct_guild_list_item::kNameFieldNumber;
const int struct_guild_list_item::kPresidentUserIdFieldNumber;
const int struct_guild_list_item::kStatusFieldNumber;
const int struct_guild_list_item::kFlagFieldNumber;
const int struct_guild_list_item::kGuildIdFieldNumber;
const int struct_guild_list_item::kPresidentNameFieldNumber;
const int struct_guild_list_item::kMemberNumFieldNumber;
#endif  // !_MSC_VER

struct_guild_list_item::struct_guild_list_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void struct_guild_list_item::InitAsDefaultInstance() {
}

struct_guild_list_item::struct_guild_list_item(const struct_guild_list_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void struct_guild_list_item::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  president_user_id_ = 0u;
  status_ = 0;
  flag_ = 0u;
  guild_id_ = 0u;
  president_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  member_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

struct_guild_list_item::~struct_guild_list_item() {
  SharedDtor();
}

void struct_guild_list_item::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (president_name_ != &::google::protobuf::internal::kEmptyString) {
    delete president_name_;
  }
  if (this != default_instance_) {
  }
}

void struct_guild_list_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_guild_list_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_guild_list_item_descriptor_;
}

const struct_guild_list_item& struct_guild_list_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

struct_guild_list_item* struct_guild_list_item::default_instance_ = NULL;

struct_guild_list_item* struct_guild_list_item::New() const {
  return new struct_guild_list_item;
}

void struct_guild_list_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    president_user_id_ = 0u;
    status_ = 0;
    flag_ = 0u;
    guild_id_ = 0u;
    if (has_president_name()) {
      if (president_name_ != &::google::protobuf::internal::kEmptyString) {
        president_name_->clear();
      }
    }
    member_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool struct_guild_list_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_president_user_id;
        break;
      }

      // required uint32 president_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_president_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &president_user_id_)));
          set_has_president_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .e_apply_switch_status status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_apply_switch_status_IsValid(value)) {
            set_status(static_cast< ::e_apply_switch_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // required uint32 flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guild_id;
        break;
      }

      // required uint32 guild_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_president_name;
        break;
      }

      // required string president_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_president_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_president_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->president_name().data(), this->president_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_member_num;
        break;
      }

      // required uint32 member_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_member_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_num_)));
          set_has_member_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void struct_guild_list_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 president_user_id = 2;
  if (has_president_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->president_user_id(), output);
  }

  // required .e_apply_switch_status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // required uint32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  // required uint32 guild_id = 5;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->guild_id(), output);
  }

  // required string president_name = 6;
  if (has_president_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->president_name().data(), this->president_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->president_name(), output);
  }

  // required uint32 member_num = 7;
  if (has_member_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->member_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* struct_guild_list_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 president_user_id = 2;
  if (has_president_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->president_user_id(), target);
  }

  // required .e_apply_switch_status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // required uint32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  // required uint32 guild_id = 5;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->guild_id(), target);
  }

  // required string president_name = 6;
  if (has_president_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->president_name().data(), this->president_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->president_name(), target);
  }

  // required uint32 member_num = 7;
  if (has_member_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->member_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int struct_guild_list_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 president_user_id = 2;
    if (has_president_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->president_user_id());
    }

    // required .e_apply_switch_status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required uint32 guild_id = 5;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // required string president_name = 6;
    if (has_president_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->president_name());
    }

    // required uint32 member_num = 7;
    if (has_member_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_guild_list_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const struct_guild_list_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const struct_guild_list_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void struct_guild_list_item::MergeFrom(const struct_guild_list_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_president_user_id()) {
      set_president_user_id(from.president_user_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_president_name()) {
      set_president_name(from.president_name());
    }
    if (from.has_member_num()) {
      set_member_num(from.member_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void struct_guild_list_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_guild_list_item::CopyFrom(const struct_guild_list_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool struct_guild_list_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void struct_guild_list_item::Swap(struct_guild_list_item* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(president_user_id_, other->president_user_id_);
    std::swap(status_, other->status_);
    std::swap(flag_, other->flag_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(president_name_, other->president_name_);
    std::swap(member_num_, other->member_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata struct_guild_list_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_guild_list_item_descriptor_;
  metadata.reflection = struct_guild_list_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int struct_user_guild_info_struct_guild_member::kUserIdFieldNumber;
const int struct_user_guild_info_struct_guild_member::kPositionFieldNumber;
const int struct_user_guild_info_struct_guild_member::kContributionPointFieldNumber;
const int struct_user_guild_info_struct_guild_member::kNameFieldNumber;
const int struct_user_guild_info_struct_guild_member::kHeadIdFieldNumber;
const int struct_user_guild_info_struct_guild_member::kHeadFrameIdFieldNumber;
const int struct_user_guild_info_struct_guild_member::kLastOnlineTimeFieldNumber;
#endif  // !_MSC_VER

struct_user_guild_info_struct_guild_member::struct_user_guild_info_struct_guild_member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void struct_user_guild_info_struct_guild_member::InitAsDefaultInstance() {
}

struct_user_guild_info_struct_guild_member::struct_user_guild_info_struct_guild_member(const struct_user_guild_info_struct_guild_member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void struct_user_guild_info_struct_guild_member::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  position_ = 0u;
  contribution_point_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_id_ = 0u;
  head_frame_id_ = 0u;
  last_online_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

struct_user_guild_info_struct_guild_member::~struct_user_guild_info_struct_guild_member() {
  SharedDtor();
}

void struct_user_guild_info_struct_guild_member::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void struct_user_guild_info_struct_guild_member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_user_guild_info_struct_guild_member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_user_guild_info_struct_guild_member_descriptor_;
}

const struct_user_guild_info_struct_guild_member& struct_user_guild_info_struct_guild_member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

struct_user_guild_info_struct_guild_member* struct_user_guild_info_struct_guild_member::default_instance_ = NULL;

struct_user_guild_info_struct_guild_member* struct_user_guild_info_struct_guild_member::New() const {
  return new struct_user_guild_info_struct_guild_member;
}

void struct_user_guild_info_struct_guild_member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    position_ = 0u;
    contribution_point_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    head_id_ = 0u;
    head_frame_id_ = 0u;
    last_online_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool struct_user_guild_info_struct_guild_member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required uint32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contribution_point;
        break;
      }

      // required uint32 contribution_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_point_)));
          set_has_contribution_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_head_id;
        break;
      }

      // required uint32 head_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_head_frame_id;
        break;
      }

      // required uint32 head_frame_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_frame_id_)));
          set_has_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_online_time;
        break;
      }

      // required uint32 last_online_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_online_time_)));
          set_has_last_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void struct_user_guild_info_struct_guild_member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // required uint32 contribution_point = 3;
  if (has_contribution_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contribution_point(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // required uint32 head_id = 5;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->head_id(), output);
  }

  // required uint32 head_frame_id = 6;
  if (has_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->head_frame_id(), output);
  }

  // required uint32 last_online_time = 7;
  if (has_last_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_online_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* struct_user_guild_info_struct_guild_member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // required uint32 contribution_point = 3;
  if (has_contribution_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->contribution_point(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required uint32 head_id = 5;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->head_id(), target);
  }

  // required uint32 head_frame_id = 6;
  if (has_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->head_frame_id(), target);
  }

  // required uint32 last_online_time = 7;
  if (has_last_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_online_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int struct_user_guild_info_struct_guild_member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // required uint32 contribution_point = 3;
    if (has_contribution_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution_point());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 head_id = 5;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // required uint32 head_frame_id = 6;
    if (has_head_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_frame_id());
    }

    // required uint32 last_online_time = 7;
    if (has_last_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_online_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_user_guild_info_struct_guild_member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const struct_user_guild_info_struct_guild_member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const struct_user_guild_info_struct_guild_member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void struct_user_guild_info_struct_guild_member::MergeFrom(const struct_user_guild_info_struct_guild_member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_contribution_point()) {
      set_contribution_point(from.contribution_point());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_head_frame_id()) {
      set_head_frame_id(from.head_frame_id());
    }
    if (from.has_last_online_time()) {
      set_last_online_time(from.last_online_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void struct_user_guild_info_struct_guild_member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_user_guild_info_struct_guild_member::CopyFrom(const struct_user_guild_info_struct_guild_member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool struct_user_guild_info_struct_guild_member::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void struct_user_guild_info_struct_guild_member::Swap(struct_user_guild_info_struct_guild_member* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(position_, other->position_);
    std::swap(contribution_point_, other->contribution_point_);
    std::swap(name_, other->name_);
    std::swap(head_id_, other->head_id_);
    std::swap(head_frame_id_, other->head_frame_id_);
    std::swap(last_online_time_, other->last_online_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata struct_user_guild_info_struct_guild_member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_user_guild_info_struct_guild_member_descriptor_;
  metadata.reflection = struct_user_guild_info_struct_guild_member_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int struct_user_guild_info::kPositionFieldNumber;
const int struct_user_guild_info::kLeaveTimeFieldNumber;
const int struct_user_guild_info::kMyCoinFieldNumber;
const int struct_user_guild_info::kMyContributionPointFieldNumber;
const int struct_user_guild_info::kGuildIdFieldNumber;
const int struct_user_guild_info::kNameFieldNumber;
const int struct_user_guild_info::kPresidentUserIdFieldNumber;
const int struct_user_guild_info::kStatusFieldNumber;
const int struct_user_guild_info::kFlagFieldNumber;
const int struct_user_guild_info::kContributionPointFieldNumber;
const int struct_user_guild_info::kCoinFieldNumber;
const int struct_user_guild_info::kAnnouncementFieldNumber;
const int struct_user_guild_info::kMembersFieldNumber;
const int struct_user_guild_info::kMaxBossPositionFieldNumber;
#endif  // !_MSC_VER

struct_user_guild_info::struct_user_guild_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void struct_user_guild_info::InitAsDefaultInstance() {
}

struct_user_guild_info::struct_user_guild_info(const struct_user_guild_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void struct_user_guild_info::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  leave_time_ = 0u;
  my_coin_ = 0u;
  my_contribution_point_ = 0u;
  guild_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  president_user_id_ = 0u;
  status_ = 0;
  flag_ = 0u;
  contribution_point_ = 0u;
  coin_ = 0u;
  announcement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_boss_position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

struct_user_guild_info::~struct_user_guild_info() {
  SharedDtor();
}

void struct_user_guild_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (announcement_ != &::google::protobuf::internal::kEmptyString) {
    delete announcement_;
  }
  if (this != default_instance_) {
  }
}

void struct_user_guild_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_user_guild_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_user_guild_info_descriptor_;
}

const struct_user_guild_info& struct_user_guild_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

struct_user_guild_info* struct_user_guild_info::default_instance_ = NULL;

struct_user_guild_info* struct_user_guild_info::New() const {
  return new struct_user_guild_info;
}

void struct_user_guild_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    leave_time_ = 0u;
    my_coin_ = 0u;
    my_contribution_point_ = 0u;
    guild_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    president_user_id_ = 0u;
    status_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    flag_ = 0u;
    contribution_point_ = 0u;
    coin_ = 0u;
    if (has_announcement()) {
      if (announcement_ != &::google::protobuf::internal::kEmptyString) {
        announcement_->clear();
      }
    }
    max_boss_position_ = 0u;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool struct_user_guild_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .e_guild_position position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_guild_position_IsValid(value)) {
            set_position(static_cast< ::e_guild_position >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leave_time;
        break;
      }

      // required uint32 leave_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leave_time_)));
          set_has_leave_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_my_coin;
        break;
      }

      // required uint32 my_coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_coin_)));
          set_has_my_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_my_contribution_point;
        break;
      }

      // optional uint32 my_contribution_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_contribution_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_contribution_point_)));
          set_has_my_contribution_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_president_user_id;
        break;
      }

      // optional uint32 president_user_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_president_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &president_user_id_)));
          set_has_president_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional .e_apply_switch_status status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_apply_switch_status_IsValid(value)) {
            set_status(static_cast< ::e_apply_switch_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_contribution_point;
        break;
      }

      // optional uint32 contribution_point = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_point_)));
          set_has_contribution_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_announcement;
        break;
      }

      // optional string announcement = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_announcement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announcement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->announcement().data(), this->announcement().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_members;
        break;
      }

      // repeated .struct_user_guild_info.struct_guild_member members = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_members;
        if (input->ExpectTag(120)) goto parse_max_boss_position;
        break;
      }

      // optional uint32 max_boss_position = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_boss_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_boss_position_)));
          set_has_max_boss_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void struct_user_guild_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .e_guild_position position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->position(), output);
  }

  // required uint32 leave_time = 2;
  if (has_leave_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leave_time(), output);
  }

  // required uint32 my_coin = 3;
  if (has_my_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->my_coin(), output);
  }

  // optional uint32 my_contribution_point = 4;
  if (has_my_contribution_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->my_contribution_point(), output);
  }

  // optional uint32 guild_id = 5;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->guild_id(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // optional uint32 president_user_id = 7;
  if (has_president_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->president_user_id(), output);
  }

  // optional .e_apply_switch_status status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->status(), output);
  }

  // optional uint32 flag = 9;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->flag(), output);
  }

  // optional uint32 contribution_point = 11;
  if (has_contribution_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->contribution_point(), output);
  }

  // optional uint32 coin = 12;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->coin(), output);
  }

  // optional string announcement = 13;
  if (has_announcement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->announcement(), output);
  }

  // repeated .struct_user_guild_info.struct_guild_member members = 14;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->members(i), output);
  }

  // optional uint32 max_boss_position = 15;
  if (has_max_boss_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->max_boss_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* struct_user_guild_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .e_guild_position position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->position(), target);
  }

  // required uint32 leave_time = 2;
  if (has_leave_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leave_time(), target);
  }

  // required uint32 my_coin = 3;
  if (has_my_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->my_coin(), target);
  }

  // optional uint32 my_contribution_point = 4;
  if (has_my_contribution_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->my_contribution_point(), target);
  }

  // optional uint32 guild_id = 5;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->guild_id(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 president_user_id = 7;
  if (has_president_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->president_user_id(), target);
  }

  // optional .e_apply_switch_status status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->status(), target);
  }

  // optional uint32 flag = 9;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->flag(), target);
  }

  // optional uint32 contribution_point = 11;
  if (has_contribution_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->contribution_point(), target);
  }

  // optional uint32 coin = 12;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->coin(), target);
  }

  // optional string announcement = 13;
  if (has_announcement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->announcement(), target);
  }

  // repeated .struct_user_guild_info.struct_guild_member members = 14;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->members(i), target);
  }

  // optional uint32 max_boss_position = 15;
  if (has_max_boss_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->max_boss_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int struct_user_guild_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .e_guild_position position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }

    // required uint32 leave_time = 2;
    if (has_leave_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leave_time());
    }

    // required uint32 my_coin = 3;
    if (has_my_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_coin());
    }

    // optional uint32 my_contribution_point = 4;
    if (has_my_contribution_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my_contribution_point());
    }

    // optional uint32 guild_id = 5;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 president_user_id = 7;
    if (has_president_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->president_user_id());
    }

    // optional .e_apply_switch_status status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 flag = 9;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional uint32 contribution_point = 11;
    if (has_contribution_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution_point());
    }

    // optional uint32 coin = 12;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional string announcement = 13;
    if (has_announcement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announcement());
    }

    // optional uint32 max_boss_position = 15;
    if (has_max_boss_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_boss_position());
    }

  }
  // repeated .struct_user_guild_info.struct_guild_member members = 14;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_user_guild_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const struct_user_guild_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const struct_user_guild_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void struct_user_guild_info::MergeFrom(const struct_user_guild_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_leave_time()) {
      set_leave_time(from.leave_time());
    }
    if (from.has_my_coin()) {
      set_my_coin(from.my_coin());
    }
    if (from.has_my_contribution_point()) {
      set_my_contribution_point(from.my_contribution_point());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_president_user_id()) {
      set_president_user_id(from.president_user_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_contribution_point()) {
      set_contribution_point(from.contribution_point());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_announcement()) {
      set_announcement(from.announcement());
    }
    if (from.has_max_boss_position()) {
      set_max_boss_position(from.max_boss_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void struct_user_guild_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_user_guild_info::CopyFrom(const struct_user_guild_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool struct_user_guild_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < members_size(); i++) {
    if (!this->members(i).IsInitialized()) return false;
  }
  return true;
}

void struct_user_guild_info::Swap(struct_user_guild_info* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(leave_time_, other->leave_time_);
    std::swap(my_coin_, other->my_coin_);
    std::swap(my_contribution_point_, other->my_contribution_point_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(name_, other->name_);
    std::swap(president_user_id_, other->president_user_id_);
    std::swap(status_, other->status_);
    std::swap(flag_, other->flag_);
    std::swap(contribution_point_, other->contribution_point_);
    std::swap(coin_, other->coin_);
    std::swap(announcement_, other->announcement_);
    members_.Swap(&other->members_);
    std::swap(max_boss_position_, other->max_boss_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata struct_user_guild_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_user_guild_info_descriptor_;
  metadata.reflection = struct_user_guild_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int struct_guild_boss::kPositionFieldNumber;
const int struct_guild_boss::kLoseHpFieldNumber;
const int struct_guild_boss::kKilledNumFieldNumber;
const int struct_guild_boss::kKillerUserIdFieldNumber;
const int struct_guild_boss::kKillerNameFieldNumber;
const int struct_guild_boss::kKillerHeadIdFieldNumber;
const int struct_guild_boss::kKillerHeadFrameIdFieldNumber;
#endif  // !_MSC_VER

struct_guild_boss::struct_guild_boss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void struct_guild_boss::InitAsDefaultInstance() {
}

struct_guild_boss::struct_guild_boss(const struct_guild_boss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void struct_guild_boss::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0u;
  lose_hp_ = 0u;
  killed_num_ = 0u;
  killer_user_id_ = 0u;
  killer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  killer_head_id_ = 0u;
  killer_head_frame_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

struct_guild_boss::~struct_guild_boss() {
  SharedDtor();
}

void struct_guild_boss::SharedDtor() {
  if (killer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete killer_name_;
  }
  if (this != default_instance_) {
  }
}

void struct_guild_boss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_guild_boss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_guild_boss_descriptor_;
}

const struct_guild_boss& struct_guild_boss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

struct_guild_boss* struct_guild_boss::default_instance_ = NULL;

struct_guild_boss* struct_guild_boss::New() const {
  return new struct_guild_boss;
}

void struct_guild_boss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0u;
    lose_hp_ = 0u;
    killed_num_ = 0u;
    killer_user_id_ = 0u;
    if (has_killer_name()) {
      if (killer_name_ != &::google::protobuf::internal::kEmptyString) {
        killer_name_->clear();
      }
    }
    killer_head_id_ = 0u;
    killer_head_frame_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool struct_guild_boss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lose_hp;
        break;
      }

      // required uint32 lose_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_hp_)));
          set_has_lose_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_killed_num;
        break;
      }

      // required uint32 killed_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killed_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_num_)));
          set_has_killed_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_killer_user_id;
        break;
      }

      // optional uint32 killer_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killer_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_user_id_)));
          set_has_killer_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_killer_name;
        break;
      }

      // optional string killer_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killer_name().data(), this->killer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_killer_head_id;
        break;
      }

      // optional uint32 killer_head_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killer_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_head_id_)));
          set_has_killer_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_killer_head_frame_id;
        break;
      }

      // optional uint32 killer_head_frame_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killer_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_head_frame_id_)));
          set_has_killer_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void struct_guild_boss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  // required uint32 lose_hp = 3;
  if (has_lose_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lose_hp(), output);
  }

  // required uint32 killed_num = 4;
  if (has_killed_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killed_num(), output);
  }

  // optional uint32 killer_user_id = 5;
  if (has_killer_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killer_user_id(), output);
  }

  // optional string killer_name = 6;
  if (has_killer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer_name().data(), this->killer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->killer_name(), output);
  }

  // optional uint32 killer_head_id = 7;
  if (has_killer_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->killer_head_id(), output);
  }

  // optional uint32 killer_head_frame_id = 8;
  if (has_killer_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->killer_head_frame_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* struct_guild_boss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  // required uint32 lose_hp = 3;
  if (has_lose_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lose_hp(), target);
  }

  // required uint32 killed_num = 4;
  if (has_killed_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killed_num(), target);
  }

  // optional uint32 killer_user_id = 5;
  if (has_killer_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killer_user_id(), target);
  }

  // optional string killer_name = 6;
  if (has_killer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer_name().data(), this->killer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->killer_name(), target);
  }

  // optional uint32 killer_head_id = 7;
  if (has_killer_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->killer_head_id(), target);
  }

  // optional uint32 killer_head_frame_id = 8;
  if (has_killer_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->killer_head_frame_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int struct_guild_boss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // required uint32 lose_hp = 3;
    if (has_lose_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose_hp());
    }

    // required uint32 killed_num = 4;
    if (has_killed_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killed_num());
    }

    // optional uint32 killer_user_id = 5;
    if (has_killer_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_user_id());
    }

    // optional string killer_name = 6;
    if (has_killer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killer_name());
    }

    // optional uint32 killer_head_id = 7;
    if (has_killer_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_head_id());
    }

    // optional uint32 killer_head_frame_id = 8;
    if (has_killer_head_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_head_frame_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_guild_boss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const struct_guild_boss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const struct_guild_boss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void struct_guild_boss::MergeFrom(const struct_guild_boss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_lose_hp()) {
      set_lose_hp(from.lose_hp());
    }
    if (from.has_killed_num()) {
      set_killed_num(from.killed_num());
    }
    if (from.has_killer_user_id()) {
      set_killer_user_id(from.killer_user_id());
    }
    if (from.has_killer_name()) {
      set_killer_name(from.killer_name());
    }
    if (from.has_killer_head_id()) {
      set_killer_head_id(from.killer_head_id());
    }
    if (from.has_killer_head_frame_id()) {
      set_killer_head_frame_id(from.killer_head_frame_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void struct_guild_boss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_guild_boss::CopyFrom(const struct_guild_boss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool struct_guild_boss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void struct_guild_boss::Swap(struct_guild_boss* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(lose_hp_, other->lose_hp_);
    std::swap(killed_num_, other->killed_num_);
    std::swap(killer_user_id_, other->killer_user_id_);
    std::swap(killer_name_, other->killer_name_);
    std::swap(killer_head_id_, other->killer_head_id_);
    std::swap(killer_head_frame_id_, other->killer_head_frame_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata struct_guild_boss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_guild_boss_descriptor_;
  metadata.reflection = struct_guild_boss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int struct_guild_boss_attacker_dead_hero::kHeroIdFieldNumber;
const int struct_guild_boss_attacker_dead_hero::kDeadTimeFieldNumber;
#endif  // !_MSC_VER

struct_guild_boss_attacker_dead_hero::struct_guild_boss_attacker_dead_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void struct_guild_boss_attacker_dead_hero::InitAsDefaultInstance() {
}

struct_guild_boss_attacker_dead_hero::struct_guild_boss_attacker_dead_hero(const struct_guild_boss_attacker_dead_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void struct_guild_boss_attacker_dead_hero::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  dead_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

struct_guild_boss_attacker_dead_hero::~struct_guild_boss_attacker_dead_hero() {
  SharedDtor();
}

void struct_guild_boss_attacker_dead_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void struct_guild_boss_attacker_dead_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_guild_boss_attacker_dead_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_guild_boss_attacker_dead_hero_descriptor_;
}

const struct_guild_boss_attacker_dead_hero& struct_guild_boss_attacker_dead_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

struct_guild_boss_attacker_dead_hero* struct_guild_boss_attacker_dead_hero::default_instance_ = NULL;

struct_guild_boss_attacker_dead_hero* struct_guild_boss_attacker_dead_hero::New() const {
  return new struct_guild_boss_attacker_dead_hero;
}

void struct_guild_boss_attacker_dead_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    dead_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool struct_guild_boss_attacker_dead_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dead_time;
        break;
      }

      // required uint32 dead_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_time_)));
          set_has_dead_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void struct_guild_boss_attacker_dead_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // required uint32 dead_time = 4;
  if (has_dead_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* struct_guild_boss_attacker_dead_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // required uint32 dead_time = 4;
  if (has_dead_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int struct_guild_boss_attacker_dead_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 dead_time = 4;
    if (has_dead_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_guild_boss_attacker_dead_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const struct_guild_boss_attacker_dead_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const struct_guild_boss_attacker_dead_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void struct_guild_boss_attacker_dead_hero::MergeFrom(const struct_guild_boss_attacker_dead_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_dead_time()) {
      set_dead_time(from.dead_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void struct_guild_boss_attacker_dead_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_guild_boss_attacker_dead_hero::CopyFrom(const struct_guild_boss_attacker_dead_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool struct_guild_boss_attacker_dead_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void struct_guild_boss_attacker_dead_hero::Swap(struct_guild_boss_attacker_dead_hero* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(dead_time_, other->dead_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata struct_guild_boss_attacker_dead_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_guild_boss_attacker_dead_hero_descriptor_;
  metadata.reflection = struct_guild_boss_attacker_dead_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_guild_new_req::kNameFieldNumber;
const int c_gs_guild_new_req::kFlagFieldNumber;
#endif  // !_MSC_VER

c_gs_guild_new_req::c_gs_guild_new_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_new_req::InitAsDefaultInstance() {
}

c_gs_guild_new_req::c_gs_guild_new_req(const c_gs_guild_new_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_new_req::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_new_req::~c_gs_guild_new_req() {
  SharedDtor();
}

void c_gs_guild_new_req::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void c_gs_guild_new_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_new_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_new_req_descriptor_;
}

const c_gs_guild_new_req& c_gs_guild_new_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_new_req* c_gs_guild_new_req::default_instance_ = NULL;

c_gs_guild_new_req* c_gs_guild_new_req::New() const {
  return new c_gs_guild_new_req;
}

void c_gs_guild_new_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_new_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_guild_new_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_new_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_new_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_new_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_new_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_new_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_new_req::MergeFrom(const c_gs_guild_new_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_new_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_new_req::CopyFrom(const c_gs_guild_new_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_new_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void c_gs_guild_new_req::Swap(c_gs_guild_new_req* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_new_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_new_req_descriptor_;
  metadata.reflection = c_gs_guild_new_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_new_res::kErrorCodeFieldNumber;
const int gs_c_guild_new_res::kConsumeFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_new_res::gs_c_guild_new_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_new_res::InitAsDefaultInstance() {
}

gs_c_guild_new_res::gs_c_guild_new_res(const gs_c_guild_new_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_new_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_new_res::~gs_c_guild_new_res() {
  SharedDtor();
}

void gs_c_guild_new_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_new_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_new_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_new_res_descriptor_;
}

const gs_c_guild_new_res& gs_c_guild_new_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_new_res* gs_c_guild_new_res::default_instance_ = NULL;

gs_c_guild_new_res* gs_c_guild_new_res::New() const {
  return new gs_c_guild_new_res;
}

void gs_c_guild_new_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_new_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_new_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // repeated .struct_game_element consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consume(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_new_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_game_element consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consume(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_new_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  // repeated .struct_game_element consume = 2;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_new_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_new_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_new_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_new_res::MergeFrom(const gs_c_guild_new_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_new_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_new_res::CopyFrom(const gs_c_guild_new_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_new_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_guild_new_res::Swap(gs_c_guild_new_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    consume_.Swap(&other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_new_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_new_res_descriptor_;
  metadata.reflection = gs_c_guild_new_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_guild_edit_req::kNameFieldNumber;
const int c_gs_guild_edit_req::kPresidentUserIdFieldNumber;
const int c_gs_guild_edit_req::kStatusFieldNumber;
const int c_gs_guild_edit_req::kFlagFieldNumber;
const int c_gs_guild_edit_req::kAnnouncementFieldNumber;
#endif  // !_MSC_VER

c_gs_guild_edit_req::c_gs_guild_edit_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_edit_req::InitAsDefaultInstance() {
}

c_gs_guild_edit_req::c_gs_guild_edit_req(const c_gs_guild_edit_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_edit_req::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  president_user_id_ = 0u;
  status_ = 0;
  flag_ = 0u;
  announcement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_edit_req::~c_gs_guild_edit_req() {
  SharedDtor();
}

void c_gs_guild_edit_req::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (announcement_ != &::google::protobuf::internal::kEmptyString) {
    delete announcement_;
  }
  if (this != default_instance_) {
  }
}

void c_gs_guild_edit_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_edit_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_edit_req_descriptor_;
}

const c_gs_guild_edit_req& c_gs_guild_edit_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_edit_req* c_gs_guild_edit_req::default_instance_ = NULL;

c_gs_guild_edit_req* c_gs_guild_edit_req::New() const {
  return new c_gs_guild_edit_req;
}

void c_gs_guild_edit_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    president_user_id_ = 0u;
    status_ = 0;
    flag_ = 0u;
    if (has_announcement()) {
      if (announcement_ != &::google::protobuf::internal::kEmptyString) {
        announcement_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_edit_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_president_user_id;
        break;
      }

      // required uint32 president_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_president_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &president_user_id_)));
          set_has_president_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required .e_apply_switch_status status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_apply_switch_status_IsValid(value)) {
            set_status(static_cast< ::e_apply_switch_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_flag;
        break;
      }

      // required uint32 flag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_announcement;
        break;
      }

      // required string announcement = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_announcement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announcement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->announcement().data(), this->announcement().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_guild_edit_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 president_user_id = 4;
  if (has_president_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->president_user_id(), output);
  }

  // required .e_apply_switch_status status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // required uint32 flag = 6;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->flag(), output);
  }

  // required string announcement = 10;
  if (has_announcement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->announcement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_edit_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 president_user_id = 4;
  if (has_president_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->president_user_id(), target);
  }

  // required .e_apply_switch_status status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // required uint32 flag = 6;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->flag(), target);
  }

  // required string announcement = 10;
  if (has_announcement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->announcement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_edit_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 president_user_id = 4;
    if (has_president_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->president_user_id());
    }

    // required .e_apply_switch_status status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint32 flag = 6;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required string announcement = 10;
    if (has_announcement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announcement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_edit_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_edit_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_edit_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_edit_req::MergeFrom(const c_gs_guild_edit_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_president_user_id()) {
      set_president_user_id(from.president_user_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_announcement()) {
      set_announcement(from.announcement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_edit_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_edit_req::CopyFrom(const c_gs_guild_edit_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_edit_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void c_gs_guild_edit_req::Swap(c_gs_guild_edit_req* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(president_user_id_, other->president_user_id_);
    std::swap(status_, other->status_);
    std::swap(flag_, other->flag_);
    std::swap(announcement_, other->announcement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_edit_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_edit_req_descriptor_;
  metadata.reflection = c_gs_guild_edit_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_edit_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_edit_res::gs_c_guild_edit_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_edit_res::InitAsDefaultInstance() {
}

gs_c_guild_edit_res::gs_c_guild_edit_res(const gs_c_guild_edit_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_edit_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_edit_res::~gs_c_guild_edit_res() {
  SharedDtor();
}

void gs_c_guild_edit_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_edit_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_edit_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_edit_res_descriptor_;
}

const gs_c_guild_edit_res& gs_c_guild_edit_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_edit_res* gs_c_guild_edit_res::default_instance_ = NULL;

gs_c_guild_edit_res* gs_c_guild_edit_res::New() const {
  return new gs_c_guild_edit_res;
}

void gs_c_guild_edit_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_edit_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_edit_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_edit_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_edit_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_edit_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_edit_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_edit_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_edit_res::MergeFrom(const gs_c_guild_edit_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_edit_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_edit_res::CopyFrom(const gs_c_guild_edit_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_edit_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_guild_edit_res::Swap(gs_c_guild_edit_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_edit_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_edit_res_descriptor_;
  metadata.reflection = gs_c_guild_edit_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_guild_delete_req::c_gs_guild_delete_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_delete_req::InitAsDefaultInstance() {
}

c_gs_guild_delete_req::c_gs_guild_delete_req(const c_gs_guild_delete_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_delete_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_delete_req::~c_gs_guild_delete_req() {
  SharedDtor();
}

void c_gs_guild_delete_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_guild_delete_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_delete_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_delete_req_descriptor_;
}

const c_gs_guild_delete_req& c_gs_guild_delete_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_delete_req* c_gs_guild_delete_req::default_instance_ = NULL;

c_gs_guild_delete_req* c_gs_guild_delete_req::New() const {
  return new c_gs_guild_delete_req;
}

void c_gs_guild_delete_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_delete_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_guild_delete_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_delete_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_delete_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_delete_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_delete_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_delete_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_delete_req::MergeFrom(const c_gs_guild_delete_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_delete_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_delete_req::CopyFrom(const c_gs_guild_delete_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_delete_req::IsInitialized() const {

  return true;
}

void c_gs_guild_delete_req::Swap(c_gs_guild_delete_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_delete_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_delete_req_descriptor_;
  metadata.reflection = c_gs_guild_delete_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_delete_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_delete_res::gs_c_guild_delete_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_delete_res::InitAsDefaultInstance() {
}

gs_c_guild_delete_res::gs_c_guild_delete_res(const gs_c_guild_delete_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_delete_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_delete_res::~gs_c_guild_delete_res() {
  SharedDtor();
}

void gs_c_guild_delete_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_delete_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_delete_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_delete_res_descriptor_;
}

const gs_c_guild_delete_res& gs_c_guild_delete_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_delete_res* gs_c_guild_delete_res::default_instance_ = NULL;

gs_c_guild_delete_res* gs_c_guild_delete_res::New() const {
  return new gs_c_guild_delete_res;
}

void gs_c_guild_delete_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_delete_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_delete_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_delete_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_delete_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_delete_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_delete_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_delete_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_delete_res::MergeFrom(const gs_c_guild_delete_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_delete_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_delete_res::CopyFrom(const gs_c_guild_delete_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_delete_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_guild_delete_res::Swap(gs_c_guild_delete_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_delete_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_delete_res_descriptor_;
  metadata.reflection = gs_c_guild_delete_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

gs_c_guild_quit_ntf::gs_c_guild_quit_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_quit_ntf::InitAsDefaultInstance() {
}

gs_c_guild_quit_ntf::gs_c_guild_quit_ntf(const gs_c_guild_quit_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_quit_ntf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_quit_ntf::~gs_c_guild_quit_ntf() {
  SharedDtor();
}

void gs_c_guild_quit_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_quit_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_quit_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_quit_ntf_descriptor_;
}

const gs_c_guild_quit_ntf& gs_c_guild_quit_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_quit_ntf* gs_c_guild_quit_ntf::default_instance_ = NULL;

gs_c_guild_quit_ntf* gs_c_guild_quit_ntf::New() const {
  return new gs_c_guild_quit_ntf;
}

void gs_c_guild_quit_ntf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_quit_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void gs_c_guild_quit_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_quit_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_quit_ntf::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_quit_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_quit_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_quit_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_quit_ntf::MergeFrom(const gs_c_guild_quit_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_quit_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_quit_ntf::CopyFrom(const gs_c_guild_quit_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_quit_ntf::IsInitialized() const {

  return true;
}

void gs_c_guild_quit_ntf::Swap(gs_c_guild_quit_ntf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_quit_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_quit_ntf_descriptor_;
  metadata.reflection = gs_c_guild_quit_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

gs_c_guild_join_ntf::gs_c_guild_join_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_join_ntf::InitAsDefaultInstance() {
}

gs_c_guild_join_ntf::gs_c_guild_join_ntf(const gs_c_guild_join_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_join_ntf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_join_ntf::~gs_c_guild_join_ntf() {
  SharedDtor();
}

void gs_c_guild_join_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_join_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_join_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_join_ntf_descriptor_;
}

const gs_c_guild_join_ntf& gs_c_guild_join_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_join_ntf* gs_c_guild_join_ntf::default_instance_ = NULL;

gs_c_guild_join_ntf* gs_c_guild_join_ntf::New() const {
  return new gs_c_guild_join_ntf;
}

void gs_c_guild_join_ntf::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_join_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void gs_c_guild_join_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_join_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_join_ntf::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_join_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_join_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_join_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_join_ntf::MergeFrom(const gs_c_guild_join_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_join_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_join_ntf::CopyFrom(const gs_c_guild_join_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_join_ntf::IsInitialized() const {

  return true;
}

void gs_c_guild_join_ntf::Swap(gs_c_guild_join_ntf* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_join_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_join_ntf_descriptor_;
  metadata.reflection = gs_c_guild_join_ntf_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* c_gs_guild_apply_list_req_e_show_for_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_apply_list_req_e_show_for_descriptor_;
}
bool c_gs_guild_apply_list_req_e_show_for_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const c_gs_guild_apply_list_req_e_show_for c_gs_guild_apply_list_req::EOutsider;
const c_gs_guild_apply_list_req_e_show_for c_gs_guild_apply_list_req::EManager;
const c_gs_guild_apply_list_req_e_show_for c_gs_guild_apply_list_req::e_show_for_MIN;
const c_gs_guild_apply_list_req_e_show_for c_gs_guild_apply_list_req::e_show_for_MAX;
const int c_gs_guild_apply_list_req::e_show_for_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int c_gs_guild_apply_list_req::kWhoFieldNumber;
#endif  // !_MSC_VER

c_gs_guild_apply_list_req::c_gs_guild_apply_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_apply_list_req::InitAsDefaultInstance() {
}

c_gs_guild_apply_list_req::c_gs_guild_apply_list_req(const c_gs_guild_apply_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_apply_list_req::SharedCtor() {
  _cached_size_ = 0;
  who_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_apply_list_req::~c_gs_guild_apply_list_req() {
  SharedDtor();
}

void c_gs_guild_apply_list_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_guild_apply_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_apply_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_apply_list_req_descriptor_;
}

const c_gs_guild_apply_list_req& c_gs_guild_apply_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_apply_list_req* c_gs_guild_apply_list_req::default_instance_ = NULL;

c_gs_guild_apply_list_req* c_gs_guild_apply_list_req::New() const {
  return new c_gs_guild_apply_list_req;
}

void c_gs_guild_apply_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    who_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_apply_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_guild_apply_list_req.e_show_for who = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_guild_apply_list_req_e_show_for_IsValid(value)) {
            set_who(static_cast< ::c_gs_guild_apply_list_req_e_show_for >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_guild_apply_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_guild_apply_list_req.e_show_for who = 1;
  if (has_who()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->who(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_apply_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_guild_apply_list_req.e_show_for who = 1;
  if (has_who()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->who(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_apply_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_guild_apply_list_req.e_show_for who = 1;
    if (has_who()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->who());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_apply_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_apply_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_apply_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_apply_list_req::MergeFrom(const c_gs_guild_apply_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_who()) {
      set_who(from.who());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_apply_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_apply_list_req::CopyFrom(const c_gs_guild_apply_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_apply_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_guild_apply_list_req::Swap(c_gs_guild_apply_list_req* other) {
  if (other != this) {
    std::swap(who_, other->who_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_apply_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_apply_list_req_descriptor_;
  metadata.reflection = c_gs_guild_apply_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_apply_list_res_struct_apply_for_outsider::kUserIdFieldNumber;
const int gs_c_guild_apply_list_res_struct_apply_for_outsider::kTimeFieldNumber;
const int gs_c_guild_apply_list_res_struct_apply_for_outsider::kNameFieldNumber;
const int gs_c_guild_apply_list_res_struct_apply_for_outsider::kLevelFieldNumber;
const int gs_c_guild_apply_list_res_struct_apply_for_outsider::kFightPowerFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_apply_list_res_struct_apply_for_outsider::gs_c_guild_apply_list_res_struct_apply_for_outsider()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_apply_list_res_struct_apply_for_outsider::InitAsDefaultInstance() {
}

gs_c_guild_apply_list_res_struct_apply_for_outsider::gs_c_guild_apply_list_res_struct_apply_for_outsider(const gs_c_guild_apply_list_res_struct_apply_for_outsider& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_apply_list_res_struct_apply_for_outsider::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  time_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  fight_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_apply_list_res_struct_apply_for_outsider::~gs_c_guild_apply_list_res_struct_apply_for_outsider() {
  SharedDtor();
}

void gs_c_guild_apply_list_res_struct_apply_for_outsider::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void gs_c_guild_apply_list_res_struct_apply_for_outsider::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_apply_list_res_struct_apply_for_outsider::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_apply_list_res_struct_apply_for_outsider_descriptor_;
}

const gs_c_guild_apply_list_res_struct_apply_for_outsider& gs_c_guild_apply_list_res_struct_apply_for_outsider::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_apply_list_res_struct_apply_for_outsider* gs_c_guild_apply_list_res_struct_apply_for_outsider::default_instance_ = NULL;

gs_c_guild_apply_list_res_struct_apply_for_outsider* gs_c_guild_apply_list_res_struct_apply_for_outsider::New() const {
  return new gs_c_guild_apply_list_res_struct_apply_for_outsider;
}

void gs_c_guild_apply_list_res_struct_apply_for_outsider::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    time_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    fight_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_apply_list_res_struct_apply_for_outsider::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fight_power;
        break;
      }

      // required uint32 fight_power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_apply_list_res_struct_apply_for_outsider::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // required uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // required uint32 fight_power = 7;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fight_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_apply_list_res_struct_apply_for_outsider::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // required uint32 fight_power = 7;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fight_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_apply_list_res_struct_apply_for_outsider::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 fight_power = 7;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_apply_list_res_struct_apply_for_outsider::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_apply_list_res_struct_apply_for_outsider* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_apply_list_res_struct_apply_for_outsider*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_apply_list_res_struct_apply_for_outsider::MergeFrom(const gs_c_guild_apply_list_res_struct_apply_for_outsider& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_apply_list_res_struct_apply_for_outsider::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_apply_list_res_struct_apply_for_outsider::CopyFrom(const gs_c_guild_apply_list_res_struct_apply_for_outsider& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_apply_list_res_struct_apply_for_outsider::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void gs_c_guild_apply_list_res_struct_apply_for_outsider::Swap(gs_c_guild_apply_list_res_struct_apply_for_outsider* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_apply_list_res_struct_apply_for_outsider::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_apply_list_res_struct_apply_for_outsider_descriptor_;
  metadata.reflection = gs_c_guild_apply_list_res_struct_apply_for_outsider_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_c_guild_apply_list_res::kErrorCodeFieldNumber;
const int gs_c_guild_apply_list_res::kApplysForManagerFieldNumber;
const int gs_c_guild_apply_list_res::kApplysForOutsiderFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_apply_list_res::gs_c_guild_apply_list_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_apply_list_res::InitAsDefaultInstance() {
}

gs_c_guild_apply_list_res::gs_c_guild_apply_list_res(const gs_c_guild_apply_list_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_apply_list_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_apply_list_res::~gs_c_guild_apply_list_res() {
  SharedDtor();
}

void gs_c_guild_apply_list_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_apply_list_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_apply_list_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_apply_list_res_descriptor_;
}

const gs_c_guild_apply_list_res& gs_c_guild_apply_list_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_apply_list_res* gs_c_guild_apply_list_res::default_instance_ = NULL;

gs_c_guild_apply_list_res* gs_c_guild_apply_list_res::New() const {
  return new gs_c_guild_apply_list_res;
}

void gs_c_guild_apply_list_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  applys_for_manager_.Clear();
  applys_for_outsider_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_apply_list_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_applys_for_manager;
        break;
      }

      // repeated .gs_c_guild_apply_list_res.struct_apply_for_outsider applys_for_manager = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applys_for_manager:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applys_for_manager()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_applys_for_manager;
        if (input->ExpectTag(26)) goto parse_applys_for_outsider;
        break;
      }

      // repeated .struct_guild_list_item applys_for_outsider = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applys_for_outsider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applys_for_outsider()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_applys_for_outsider;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_apply_list_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // repeated .gs_c_guild_apply_list_res.struct_apply_for_outsider applys_for_manager = 2;
  for (int i = 0; i < this->applys_for_manager_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->applys_for_manager(i), output);
  }

  // repeated .struct_guild_list_item applys_for_outsider = 3;
  for (int i = 0; i < this->applys_for_outsider_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->applys_for_outsider(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_apply_list_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // repeated .gs_c_guild_apply_list_res.struct_apply_for_outsider applys_for_manager = 2;
  for (int i = 0; i < this->applys_for_manager_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->applys_for_manager(i), target);
  }

  // repeated .struct_guild_list_item applys_for_outsider = 3;
  for (int i = 0; i < this->applys_for_outsider_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->applys_for_outsider(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_apply_list_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  // repeated .gs_c_guild_apply_list_res.struct_apply_for_outsider applys_for_manager = 2;
  total_size += 1 * this->applys_for_manager_size();
  for (int i = 0; i < this->applys_for_manager_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applys_for_manager(i));
  }

  // repeated .struct_guild_list_item applys_for_outsider = 3;
  total_size += 1 * this->applys_for_outsider_size();
  for (int i = 0; i < this->applys_for_outsider_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applys_for_outsider(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_apply_list_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_apply_list_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_apply_list_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_apply_list_res::MergeFrom(const gs_c_guild_apply_list_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  applys_for_manager_.MergeFrom(from.applys_for_manager_);
  applys_for_outsider_.MergeFrom(from.applys_for_outsider_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_apply_list_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_apply_list_res::CopyFrom(const gs_c_guild_apply_list_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_apply_list_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < applys_for_manager_size(); i++) {
    if (!this->applys_for_manager(i).IsInitialized()) return false;
  }
  for (int i = 0; i < applys_for_outsider_size(); i++) {
    if (!this->applys_for_outsider(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_guild_apply_list_res::Swap(gs_c_guild_apply_list_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    applys_for_manager_.Swap(&other->applys_for_manager_);
    applys_for_outsider_.Swap(&other->applys_for_outsider_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_apply_list_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_apply_list_res_descriptor_;
  metadata.reflection = gs_c_guild_apply_list_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* c_gs_guild_apply_op_req_e_op_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_apply_op_req_e_op_type_descriptor_;
}
bool c_gs_guild_apply_op_req_e_op_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const c_gs_guild_apply_op_req_e_op_type c_gs_guild_apply_op_req::EUser_Send;
const c_gs_guild_apply_op_req_e_op_type c_gs_guild_apply_op_req::EUser_Quick_Send;
const c_gs_guild_apply_op_req_e_op_type c_gs_guild_apply_op_req::EUser_Cancel;
const c_gs_guild_apply_op_req_e_op_type c_gs_guild_apply_op_req::EGuild_Accept;
const c_gs_guild_apply_op_req_e_op_type c_gs_guild_apply_op_req::EGuild_Refuse;
const c_gs_guild_apply_op_req_e_op_type c_gs_guild_apply_op_req::e_op_type_MIN;
const c_gs_guild_apply_op_req_e_op_type c_gs_guild_apply_op_req::e_op_type_MAX;
const int c_gs_guild_apply_op_req::e_op_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int c_gs_guild_apply_op_req::kOpTypeFieldNumber;
const int c_gs_guild_apply_op_req::kGuildIdFieldNumber;
const int c_gs_guild_apply_op_req::kUserIdFieldNumber;
#endif  // !_MSC_VER

c_gs_guild_apply_op_req::c_gs_guild_apply_op_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_apply_op_req::InitAsDefaultInstance() {
}

c_gs_guild_apply_op_req::c_gs_guild_apply_op_req(const c_gs_guild_apply_op_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_apply_op_req::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  guild_id_ = 0u;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_apply_op_req::~c_gs_guild_apply_op_req() {
  SharedDtor();
}

void c_gs_guild_apply_op_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_guild_apply_op_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_apply_op_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_apply_op_req_descriptor_;
}

const c_gs_guild_apply_op_req& c_gs_guild_apply_op_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_apply_op_req* c_gs_guild_apply_op_req::default_instance_ = NULL;

c_gs_guild_apply_op_req* c_gs_guild_apply_op_req::New() const {
  return new c_gs_guild_apply_op_req;
}

void c_gs_guild_apply_op_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    guild_id_ = 0u;
    user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_apply_op_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_guild_apply_op_req.e_op_type op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_guild_apply_op_req_e_op_type_IsValid(value)) {
            set_op_type(static_cast< ::c_gs_guild_apply_op_req_e_op_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_guild_apply_op_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_guild_apply_op_req.e_op_type op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guild_id(), output);
  }

  // optional uint32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_apply_op_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_guild_apply_op_req.e_op_type op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guild_id(), target);
  }

  // optional uint32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_apply_op_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_guild_apply_op_req.e_op_type op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional uint32 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_apply_op_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_apply_op_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_apply_op_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_apply_op_req::MergeFrom(const c_gs_guild_apply_op_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_apply_op_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_apply_op_req::CopyFrom(const c_gs_guild_apply_op_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_apply_op_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_guild_apply_op_req::Swap(c_gs_guild_apply_op_req* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_apply_op_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_apply_op_req_descriptor_;
  metadata.reflection = c_gs_guild_apply_op_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_apply_op_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_apply_op_res::gs_c_guild_apply_op_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_apply_op_res::InitAsDefaultInstance() {
}

gs_c_guild_apply_op_res::gs_c_guild_apply_op_res(const gs_c_guild_apply_op_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_apply_op_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_apply_op_res::~gs_c_guild_apply_op_res() {
  SharedDtor();
}

void gs_c_guild_apply_op_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_apply_op_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_apply_op_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_apply_op_res_descriptor_;
}

const gs_c_guild_apply_op_res& gs_c_guild_apply_op_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_apply_op_res* gs_c_guild_apply_op_res::default_instance_ = NULL;

gs_c_guild_apply_op_res* gs_c_guild_apply_op_res::New() const {
  return new gs_c_guild_apply_op_res;
}

void gs_c_guild_apply_op_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_apply_op_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_apply_op_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_apply_op_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_apply_op_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_apply_op_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_apply_op_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_apply_op_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_apply_op_res::MergeFrom(const gs_c_guild_apply_op_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_apply_op_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_apply_op_res::CopyFrom(const gs_c_guild_apply_op_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_apply_op_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_guild_apply_op_res::Swap(gs_c_guild_apply_op_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_apply_op_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_apply_op_res_descriptor_;
  metadata.reflection = gs_c_guild_apply_op_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_guild_member_op_req::kUserIdFieldNumber;
const int c_gs_guild_member_op_req::kNewPositionFieldNumber;
#endif  // !_MSC_VER

c_gs_guild_member_op_req::c_gs_guild_member_op_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_member_op_req::InitAsDefaultInstance() {
}

c_gs_guild_member_op_req::c_gs_guild_member_op_req(const c_gs_guild_member_op_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_member_op_req::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  new_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_member_op_req::~c_gs_guild_member_op_req() {
  SharedDtor();
}

void c_gs_guild_member_op_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_guild_member_op_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_member_op_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_member_op_req_descriptor_;
}

const c_gs_guild_member_op_req& c_gs_guild_member_op_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_member_op_req* c_gs_guild_member_op_req::default_instance_ = NULL;

c_gs_guild_member_op_req* c_gs_guild_member_op_req::New() const {
  return new c_gs_guild_member_op_req;
}

void c_gs_guild_member_op_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    new_position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_member_op_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_position;
        break;
      }

      // required .e_guild_position new_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_guild_position_IsValid(value)) {
            set_new_position(static_cast< ::e_guild_position >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_guild_member_op_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .e_guild_position new_position = 2;
  if (has_new_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->new_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_member_op_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .e_guild_position new_position = 2;
  if (has_new_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->new_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_member_op_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .e_guild_position new_position = 2;
    if (has_new_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_member_op_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_member_op_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_member_op_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_member_op_req::MergeFrom(const c_gs_guild_member_op_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_new_position()) {
      set_new_position(from.new_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_member_op_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_member_op_req::CopyFrom(const c_gs_guild_member_op_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_member_op_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void c_gs_guild_member_op_req::Swap(c_gs_guild_member_op_req* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(new_position_, other->new_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_member_op_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_member_op_req_descriptor_;
  metadata.reflection = c_gs_guild_member_op_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_member_op_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_member_op_res::gs_c_guild_member_op_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_member_op_res::InitAsDefaultInstance() {
}

gs_c_guild_member_op_res::gs_c_guild_member_op_res(const gs_c_guild_member_op_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_member_op_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_member_op_res::~gs_c_guild_member_op_res() {
  SharedDtor();
}

void gs_c_guild_member_op_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_member_op_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_member_op_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_member_op_res_descriptor_;
}

const gs_c_guild_member_op_res& gs_c_guild_member_op_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_member_op_res* gs_c_guild_member_op_res::default_instance_ = NULL;

gs_c_guild_member_op_res* gs_c_guild_member_op_res::New() const {
  return new gs_c_guild_member_op_res;
}

void gs_c_guild_member_op_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_member_op_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_member_op_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_member_op_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_member_op_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_member_op_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_member_op_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_member_op_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_member_op_res::MergeFrom(const gs_c_guild_member_op_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_member_op_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_member_op_res::CopyFrom(const gs_c_guild_member_op_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_member_op_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_guild_member_op_res::Swap(gs_c_guild_member_op_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_member_op_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_member_op_res_descriptor_;
  metadata.reflection = gs_c_guild_member_op_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_guild_boss_refresh_req::kPositionFieldNumber;
#endif  // !_MSC_VER

c_gs_guild_boss_refresh_req::c_gs_guild_boss_refresh_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_boss_refresh_req::InitAsDefaultInstance() {
}

c_gs_guild_boss_refresh_req::c_gs_guild_boss_refresh_req(const c_gs_guild_boss_refresh_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_boss_refresh_req::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_boss_refresh_req::~c_gs_guild_boss_refresh_req() {
  SharedDtor();
}

void c_gs_guild_boss_refresh_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_guild_boss_refresh_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_boss_refresh_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_boss_refresh_req_descriptor_;
}

const c_gs_guild_boss_refresh_req& c_gs_guild_boss_refresh_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_boss_refresh_req* c_gs_guild_boss_refresh_req::default_instance_ = NULL;

c_gs_guild_boss_refresh_req* c_gs_guild_boss_refresh_req::New() const {
  return new c_gs_guild_boss_refresh_req;
}

void c_gs_guild_boss_refresh_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_boss_refresh_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_guild_boss_refresh_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_boss_refresh_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_boss_refresh_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_boss_refresh_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_boss_refresh_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_boss_refresh_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_boss_refresh_req::MergeFrom(const c_gs_guild_boss_refresh_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_boss_refresh_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_boss_refresh_req::CopyFrom(const c_gs_guild_boss_refresh_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_boss_refresh_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_guild_boss_refresh_req::Swap(c_gs_guild_boss_refresh_req* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_boss_refresh_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_boss_refresh_req_descriptor_;
  metadata.reflection = c_gs_guild_boss_refresh_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_boss_refresh_res::kErrorCodeFieldNumber;
const int gs_c_guild_boss_refresh_res::kConsumeFieldNumber;
const int gs_c_guild_boss_refresh_res::kBossFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_boss_refresh_res::gs_c_guild_boss_refresh_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_boss_refresh_res::InitAsDefaultInstance() {
  boss_ = const_cast< ::struct_guild_boss*>(&::struct_guild_boss::default_instance());
}

gs_c_guild_boss_refresh_res::gs_c_guild_boss_refresh_res(const gs_c_guild_boss_refresh_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_boss_refresh_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  boss_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_boss_refresh_res::~gs_c_guild_boss_refresh_res() {
  SharedDtor();
}

void gs_c_guild_boss_refresh_res::SharedDtor() {
  if (this != default_instance_) {
    delete boss_;
  }
}

void gs_c_guild_boss_refresh_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_boss_refresh_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_boss_refresh_res_descriptor_;
}

const gs_c_guild_boss_refresh_res& gs_c_guild_boss_refresh_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_boss_refresh_res* gs_c_guild_boss_refresh_res::default_instance_ = NULL;

gs_c_guild_boss_refresh_res* gs_c_guild_boss_refresh_res::New() const {
  return new gs_c_guild_boss_refresh_res;
}

void gs_c_guild_boss_refresh_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_boss()) {
      if (boss_ != NULL) boss_->::struct_guild_boss::Clear();
    }
  }
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_boss_refresh_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_consume;
        if (input->ExpectTag(26)) goto parse_boss;
        break;
      }

      // optional .struct_guild_boss boss = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_boss_refresh_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // repeated .struct_game_element consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consume(i), output);
  }

  // optional .struct_guild_boss boss = 3;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boss(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_boss_refresh_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_game_element consume = 2;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consume(i), target);
  }

  // optional .struct_guild_boss boss = 3;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->boss(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_boss_refresh_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .struct_guild_boss boss = 3;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss());
    }

  }
  // repeated .struct_game_element consume = 2;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_boss_refresh_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_boss_refresh_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_boss_refresh_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_boss_refresh_res::MergeFrom(const gs_c_guild_boss_refresh_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_boss()) {
      mutable_boss()->::struct_guild_boss::MergeFrom(from.boss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_boss_refresh_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_boss_refresh_res::CopyFrom(const gs_c_guild_boss_refresh_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_boss_refresh_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  if (has_boss()) {
    if (!this->boss().IsInitialized()) return false;
  }
  return true;
}

void gs_c_guild_boss_refresh_res::Swap(gs_c_guild_boss_refresh_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    consume_.Swap(&other->consume_);
    std::swap(boss_, other->boss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_boss_refresh_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_boss_refresh_res_descriptor_;
  metadata.reflection = gs_c_guild_boss_refresh_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_guild_search_req::kNameFieldNumber;
const int c_gs_guild_search_req::kGuildIdFieldNumber;
#endif  // !_MSC_VER

c_gs_guild_search_req::c_gs_guild_search_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_search_req::InitAsDefaultInstance() {
}

c_gs_guild_search_req::c_gs_guild_search_req(const c_gs_guild_search_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_search_req::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_search_req::~c_gs_guild_search_req() {
  SharedDtor();
}

void c_gs_guild_search_req::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void c_gs_guild_search_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_search_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_search_req_descriptor_;
}

const c_gs_guild_search_req& c_gs_guild_search_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_search_req* c_gs_guild_search_req::default_instance_ = NULL;

c_gs_guild_search_req* c_gs_guild_search_req::New() const {
  return new c_gs_guild_search_req;
}

void c_gs_guild_search_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    guild_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_search_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_guild_search_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_search_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_search_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_search_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_search_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_search_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_search_req::MergeFrom(const c_gs_guild_search_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_search_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_search_req::CopyFrom(const c_gs_guild_search_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_search_req::IsInitialized() const {

  return true;
}

void c_gs_guild_search_req::Swap(c_gs_guild_search_req* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_search_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_search_req_descriptor_;
  metadata.reflection = c_gs_guild_search_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_search_res::kErrorCodeFieldNumber;
const int gs_c_guild_search_res::kGuildsFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_search_res::gs_c_guild_search_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_search_res::InitAsDefaultInstance() {
}

gs_c_guild_search_res::gs_c_guild_search_res(const gs_c_guild_search_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_search_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_search_res::~gs_c_guild_search_res() {
  SharedDtor();
}

void gs_c_guild_search_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_search_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_search_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_search_res_descriptor_;
}

const gs_c_guild_search_res& gs_c_guild_search_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_search_res* gs_c_guild_search_res::default_instance_ = NULL;

gs_c_guild_search_res* gs_c_guild_search_res::New() const {
  return new gs_c_guild_search_res;
}

void gs_c_guild_search_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  guilds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_search_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guilds;
        break;
      }

      // repeated .struct_guild_list_item guilds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guilds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guilds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guilds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_search_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // repeated .struct_guild_list_item guilds = 2;
  for (int i = 0; i < this->guilds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guilds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_search_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_guild_list_item guilds = 2;
  for (int i = 0; i < this->guilds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guilds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_search_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  // repeated .struct_guild_list_item guilds = 2;
  total_size += 1 * this->guilds_size();
  for (int i = 0; i < this->guilds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guilds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_search_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_search_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_search_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_search_res::MergeFrom(const gs_c_guild_search_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  guilds_.MergeFrom(from.guilds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_search_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_search_res::CopyFrom(const gs_c_guild_search_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_search_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < guilds_size(); i++) {
    if (!this->guilds(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_guild_search_res::Swap(gs_c_guild_search_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    guilds_.Swap(&other->guilds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_search_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_search_res_descriptor_;
  metadata.reflection = gs_c_guild_search_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* c_gs_guild_list_req_e_list_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_list_req_e_list_type_descriptor_;
}
bool c_gs_guild_list_req_e_list_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const c_gs_guild_list_req_e_list_type c_gs_guild_list_req::ERecommend;
const c_gs_guild_list_req_e_list_type c_gs_guild_list_req::EApplied;
const c_gs_guild_list_req_e_list_type c_gs_guild_list_req::EActive;
const c_gs_guild_list_req_e_list_type c_gs_guild_list_req::e_list_type_MIN;
const c_gs_guild_list_req_e_list_type c_gs_guild_list_req::e_list_type_MAX;
const int c_gs_guild_list_req::e_list_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int c_gs_guild_list_req::kTypeFieldNumber;
#endif  // !_MSC_VER

c_gs_guild_list_req::c_gs_guild_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_list_req::InitAsDefaultInstance() {
}

c_gs_guild_list_req::c_gs_guild_list_req(const c_gs_guild_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_list_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_list_req::~c_gs_guild_list_req() {
  SharedDtor();
}

void c_gs_guild_list_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_guild_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_list_req_descriptor_;
}

const c_gs_guild_list_req& c_gs_guild_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_list_req* c_gs_guild_list_req::default_instance_ = NULL;

c_gs_guild_list_req* c_gs_guild_list_req::New() const {
  return new c_gs_guild_list_req;
}

void c_gs_guild_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .c_gs_guild_list_req.e_list_type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::c_gs_guild_list_req_e_list_type_IsValid(value)) {
            set_type(static_cast< ::c_gs_guild_list_req_e_list_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_guild_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .c_gs_guild_list_req.e_list_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .c_gs_guild_list_req.e_list_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .c_gs_guild_list_req.e_list_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_list_req::MergeFrom(const c_gs_guild_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_list_req::CopyFrom(const c_gs_guild_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_list_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_guild_list_req::Swap(c_gs_guild_list_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_list_req_descriptor_;
  metadata.reflection = c_gs_guild_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_list_res::kErrorCodeFieldNumber;
const int gs_c_guild_list_res::kGuildsFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_list_res::gs_c_guild_list_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_list_res::InitAsDefaultInstance() {
}

gs_c_guild_list_res::gs_c_guild_list_res(const gs_c_guild_list_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_list_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_list_res::~gs_c_guild_list_res() {
  SharedDtor();
}

void gs_c_guild_list_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_list_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_list_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_list_res_descriptor_;
}

const gs_c_guild_list_res& gs_c_guild_list_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_list_res* gs_c_guild_list_res::default_instance_ = NULL;

gs_c_guild_list_res* gs_c_guild_list_res::New() const {
  return new gs_c_guild_list_res;
}

void gs_c_guild_list_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  guilds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_list_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guilds;
        break;
      }

      // repeated .struct_guild_list_item guilds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guilds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guilds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guilds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_list_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // repeated .struct_guild_list_item guilds = 2;
  for (int i = 0; i < this->guilds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guilds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_list_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_guild_list_item guilds = 2;
  for (int i = 0; i < this->guilds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guilds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_list_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  // repeated .struct_guild_list_item guilds = 2;
  total_size += 1 * this->guilds_size();
  for (int i = 0; i < this->guilds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guilds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_list_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_list_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_list_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_list_res::MergeFrom(const gs_c_guild_list_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  guilds_.MergeFrom(from.guilds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_list_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_list_res::CopyFrom(const gs_c_guild_list_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_list_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < guilds_size(); i++) {
    if (!this->guilds(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_guild_list_res::Swap(gs_c_guild_list_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    guilds_.Swap(&other->guilds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_list_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_list_res_descriptor_;
  metadata.reflection = gs_c_guild_list_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_guild_info_req::c_gs_guild_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_info_req::InitAsDefaultInstance() {
}

c_gs_guild_info_req::c_gs_guild_info_req(const c_gs_guild_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_info_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_info_req::~c_gs_guild_info_req() {
  SharedDtor();
}

void c_gs_guild_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_guild_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_info_req_descriptor_;
}

const c_gs_guild_info_req& c_gs_guild_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_info_req* c_gs_guild_info_req::default_instance_ = NULL;

c_gs_guild_info_req* c_gs_guild_info_req::New() const {
  return new c_gs_guild_info_req;
}

void c_gs_guild_info_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_guild_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_info_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_info_req::MergeFrom(const c_gs_guild_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_info_req::CopyFrom(const c_gs_guild_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_info_req::IsInitialized() const {

  return true;
}

void c_gs_guild_info_req::Swap(c_gs_guild_info_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_info_req_descriptor_;
  metadata.reflection = c_gs_guild_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_info_res::kErrorCodeFieldNumber;
const int gs_c_guild_info_res::kMyGuildFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_info_res::gs_c_guild_info_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_info_res::InitAsDefaultInstance() {
  my_guild_ = const_cast< ::struct_user_guild_info*>(&::struct_user_guild_info::default_instance());
}

gs_c_guild_info_res::gs_c_guild_info_res(const gs_c_guild_info_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_info_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  my_guild_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_info_res::~gs_c_guild_info_res() {
  SharedDtor();
}

void gs_c_guild_info_res::SharedDtor() {
  if (this != default_instance_) {
    delete my_guild_;
  }
}

void gs_c_guild_info_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_info_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_info_res_descriptor_;
}

const gs_c_guild_info_res& gs_c_guild_info_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_info_res* gs_c_guild_info_res::default_instance_ = NULL;

gs_c_guild_info_res* gs_c_guild_info_res::New() const {
  return new gs_c_guild_info_res;
}

void gs_c_guild_info_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_my_guild()) {
      if (my_guild_ != NULL) my_guild_->::struct_user_guild_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_info_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_my_guild;
        break;
      }

      // optional .struct_user_guild_info my_guild = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_info_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional .struct_user_guild_info my_guild = 2;
  if (has_my_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->my_guild(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_info_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional .struct_user_guild_info my_guild = 2;
  if (has_my_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->my_guild(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_info_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .struct_user_guild_info my_guild = 2;
    if (has_my_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_guild());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_info_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_info_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_info_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_info_res::MergeFrom(const gs_c_guild_info_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_my_guild()) {
      mutable_my_guild()->::struct_user_guild_info::MergeFrom(from.my_guild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_info_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_info_res::CopyFrom(const gs_c_guild_info_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_info_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_my_guild()) {
    if (!this->my_guild().IsInitialized()) return false;
  }
  return true;
}

void gs_c_guild_info_res::Swap(gs_c_guild_info_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(my_guild_, other->my_guild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_info_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_info_res_descriptor_;
  metadata.reflection = gs_c_guild_info_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_guild_boss_list_req::c_gs_guild_boss_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_boss_list_req::InitAsDefaultInstance() {
}

c_gs_guild_boss_list_req::c_gs_guild_boss_list_req(const c_gs_guild_boss_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_boss_list_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_boss_list_req::~c_gs_guild_boss_list_req() {
  SharedDtor();
}

void c_gs_guild_boss_list_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_guild_boss_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_boss_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_boss_list_req_descriptor_;
}

const c_gs_guild_boss_list_req& c_gs_guild_boss_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_boss_list_req* c_gs_guild_boss_list_req::default_instance_ = NULL;

c_gs_guild_boss_list_req* c_gs_guild_boss_list_req::New() const {
  return new c_gs_guild_boss_list_req;
}

void c_gs_guild_boss_list_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_boss_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_guild_boss_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_boss_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_boss_list_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_boss_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_boss_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_boss_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_boss_list_req::MergeFrom(const c_gs_guild_boss_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_boss_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_boss_list_req::CopyFrom(const c_gs_guild_boss_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_boss_list_req::IsInitialized() const {

  return true;
}

void c_gs_guild_boss_list_req::Swap(c_gs_guild_boss_list_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_boss_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_boss_list_req_descriptor_;
  metadata.reflection = c_gs_guild_boss_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_boss_list_res::kErrorCodeFieldNumber;
const int gs_c_guild_boss_list_res::kBossesFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_boss_list_res::gs_c_guild_boss_list_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_boss_list_res::InitAsDefaultInstance() {
}

gs_c_guild_boss_list_res::gs_c_guild_boss_list_res(const gs_c_guild_boss_list_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_boss_list_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_boss_list_res::~gs_c_guild_boss_list_res() {
  SharedDtor();
}

void gs_c_guild_boss_list_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_boss_list_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_boss_list_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_boss_list_res_descriptor_;
}

const gs_c_guild_boss_list_res& gs_c_guild_boss_list_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_boss_list_res* gs_c_guild_boss_list_res::default_instance_ = NULL;

gs_c_guild_boss_list_res* gs_c_guild_boss_list_res::New() const {
  return new gs_c_guild_boss_list_res;
}

void gs_c_guild_boss_list_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  bosses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_boss_list_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bosses;
        break;
      }

      // repeated .struct_guild_boss bosses = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bosses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bosses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bosses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_boss_list_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // repeated .struct_guild_boss bosses = 2;
  for (int i = 0; i < this->bosses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bosses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_boss_list_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // repeated .struct_guild_boss bosses = 2;
  for (int i = 0; i < this->bosses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bosses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_boss_list_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  // repeated .struct_guild_boss bosses = 2;
  total_size += 1 * this->bosses_size();
  for (int i = 0; i < this->bosses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bosses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_boss_list_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_boss_list_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_boss_list_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_boss_list_res::MergeFrom(const gs_c_guild_boss_list_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  bosses_.MergeFrom(from.bosses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_boss_list_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_boss_list_res::CopyFrom(const gs_c_guild_boss_list_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_boss_list_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < bosses_size(); i++) {
    if (!this->bosses(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_guild_boss_list_res::Swap(gs_c_guild_boss_list_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    bosses_.Swap(&other->bosses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_boss_list_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_boss_list_res_descriptor_;
  metadata.reflection = gs_c_guild_boss_list_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_guild_boss_info_req::kPositionFieldNumber;
#endif  // !_MSC_VER

c_gs_guild_boss_info_req::c_gs_guild_boss_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_boss_info_req::InitAsDefaultInstance() {
}

c_gs_guild_boss_info_req::c_gs_guild_boss_info_req(const c_gs_guild_boss_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_boss_info_req::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_boss_info_req::~c_gs_guild_boss_info_req() {
  SharedDtor();
}

void c_gs_guild_boss_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_guild_boss_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_boss_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_boss_info_req_descriptor_;
}

const c_gs_guild_boss_info_req& c_gs_guild_boss_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_boss_info_req* c_gs_guild_boss_info_req::default_instance_ = NULL;

c_gs_guild_boss_info_req* c_gs_guild_boss_info_req::New() const {
  return new c_gs_guild_boss_info_req;
}

void c_gs_guild_boss_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_boss_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_guild_boss_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_boss_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_boss_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_boss_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_boss_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_boss_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_boss_info_req::MergeFrom(const c_gs_guild_boss_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_boss_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_boss_info_req::CopyFrom(const c_gs_guild_boss_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_boss_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_guild_boss_info_req::Swap(c_gs_guild_boss_info_req* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_boss_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_boss_info_req_descriptor_;
  metadata.reflection = c_gs_guild_boss_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_boss_info_res::kErrorCodeFieldNumber;
const int gs_c_guild_boss_info_res::kBossFieldNumber;
const int gs_c_guild_boss_info_res::kLastResetTimeFieldNumber;
const int gs_c_guild_boss_info_res::kLastDayResetNumFieldNumber;
const int gs_c_guild_boss_info_res::kDeadHerosFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_boss_info_res::gs_c_guild_boss_info_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_boss_info_res::InitAsDefaultInstance() {
  boss_ = const_cast< ::struct_guild_boss*>(&::struct_guild_boss::default_instance());
}

gs_c_guild_boss_info_res::gs_c_guild_boss_info_res(const gs_c_guild_boss_info_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_boss_info_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  boss_ = NULL;
  last_reset_time_ = 0u;
  last_day_reset_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_boss_info_res::~gs_c_guild_boss_info_res() {
  SharedDtor();
}

void gs_c_guild_boss_info_res::SharedDtor() {
  if (this != default_instance_) {
    delete boss_;
  }
}

void gs_c_guild_boss_info_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_boss_info_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_boss_info_res_descriptor_;
}

const gs_c_guild_boss_info_res& gs_c_guild_boss_info_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_boss_info_res* gs_c_guild_boss_info_res::default_instance_ = NULL;

gs_c_guild_boss_info_res* gs_c_guild_boss_info_res::New() const {
  return new gs_c_guild_boss_info_res;
}

void gs_c_guild_boss_info_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_boss()) {
      if (boss_ != NULL) boss_->::struct_guild_boss::Clear();
    }
    last_reset_time_ = 0u;
    last_day_reset_num_ = 0u;
  }
  dead_heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_boss_info_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_boss;
        break;
      }

      // optional .struct_guild_boss boss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_reset_time;
        break;
      }

      // optional uint32 last_reset_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_reset_time_)));
          set_has_last_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_day_reset_num;
        break;
      }

      // optional uint32 last_day_reset_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_reset_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_reset_num_)));
          set_has_last_day_reset_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dead_heros;
        break;
      }

      // repeated .struct_guild_boss_attacker_dead_hero dead_heros = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dead_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dead_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dead_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_boss_info_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional .struct_guild_boss boss = 2;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boss(), output);
  }

  // optional uint32 last_reset_time = 3;
  if (has_last_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_reset_time(), output);
  }

  // optional uint32 last_day_reset_num = 4;
  if (has_last_day_reset_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_day_reset_num(), output);
  }

  // repeated .struct_guild_boss_attacker_dead_hero dead_heros = 5;
  for (int i = 0; i < this->dead_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dead_heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_boss_info_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional .struct_guild_boss boss = 2;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boss(), target);
  }

  // optional uint32 last_reset_time = 3;
  if (has_last_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_reset_time(), target);
  }

  // optional uint32 last_day_reset_num = 4;
  if (has_last_day_reset_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_day_reset_num(), target);
  }

  // repeated .struct_guild_boss_attacker_dead_hero dead_heros = 5;
  for (int i = 0; i < this->dead_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dead_heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_boss_info_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional .struct_guild_boss boss = 2;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss());
    }

    // optional uint32 last_reset_time = 3;
    if (has_last_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_reset_time());
    }

    // optional uint32 last_day_reset_num = 4;
    if (has_last_day_reset_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_reset_num());
    }

  }
  // repeated .struct_guild_boss_attacker_dead_hero dead_heros = 5;
  total_size += 1 * this->dead_heros_size();
  for (int i = 0; i < this->dead_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dead_heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_boss_info_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_boss_info_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_boss_info_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_boss_info_res::MergeFrom(const gs_c_guild_boss_info_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  dead_heros_.MergeFrom(from.dead_heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_boss()) {
      mutable_boss()->::struct_guild_boss::MergeFrom(from.boss());
    }
    if (from.has_last_reset_time()) {
      set_last_reset_time(from.last_reset_time());
    }
    if (from.has_last_day_reset_num()) {
      set_last_day_reset_num(from.last_day_reset_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_boss_info_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_boss_info_res::CopyFrom(const gs_c_guild_boss_info_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_boss_info_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_boss()) {
    if (!this->boss().IsInitialized()) return false;
  }
  for (int i = 0; i < dead_heros_size(); i++) {
    if (!this->dead_heros(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_guild_boss_info_res::Swap(gs_c_guild_boss_info_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(boss_, other->boss_);
    std::swap(last_reset_time_, other->last_reset_time_);
    std::swap(last_day_reset_num_, other->last_day_reset_num_);
    dead_heros_.Swap(&other->dead_heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_boss_info_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_boss_info_res_descriptor_;
  metadata.reflection = gs_c_guild_boss_info_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_guild_boss_attack_req::kBossPositionFieldNumber;
const int c_gs_guild_boss_attack_req::kLoseHpFieldNumber;
const int c_gs_guild_boss_attack_req::kDeadHerosFieldNumber;
#endif  // !_MSC_VER

c_gs_guild_boss_attack_req::c_gs_guild_boss_attack_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_boss_attack_req::InitAsDefaultInstance() {
}

c_gs_guild_boss_attack_req::c_gs_guild_boss_attack_req(const c_gs_guild_boss_attack_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_boss_attack_req::SharedCtor() {
  _cached_size_ = 0;
  boss_position_ = 0u;
  lose_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_boss_attack_req::~c_gs_guild_boss_attack_req() {
  SharedDtor();
}

void c_gs_guild_boss_attack_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_guild_boss_attack_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_boss_attack_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_boss_attack_req_descriptor_;
}

const c_gs_guild_boss_attack_req& c_gs_guild_boss_attack_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_boss_attack_req* c_gs_guild_boss_attack_req::default_instance_ = NULL;

c_gs_guild_boss_attack_req* c_gs_guild_boss_attack_req::New() const {
  return new c_gs_guild_boss_attack_req;
}

void c_gs_guild_boss_attack_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boss_position_ = 0u;
    lose_hp_ = 0u;
  }
  dead_heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_boss_attack_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 boss_position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_position_)));
          set_has_boss_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lose_hp;
        break;
      }

      // required uint32 lose_hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_hp_)));
          set_has_lose_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dead_heros;
        break;
      }

      // repeated uint32 dead_heros = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_dead_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dead_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dead_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_guild_boss_attack_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 boss_position = 1;
  if (has_boss_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boss_position(), output);
  }

  // required uint32 lose_hp = 2;
  if (has_lose_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lose_hp(), output);
  }

  // repeated uint32 dead_heros = 3;
  for (int i = 0; i < this->dead_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->dead_heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_boss_attack_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 boss_position = 1;
  if (has_boss_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boss_position(), target);
  }

  // required uint32 lose_hp = 2;
  if (has_lose_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lose_hp(), target);
  }

  // repeated uint32 dead_heros = 3;
  for (int i = 0; i < this->dead_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->dead_heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_boss_attack_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 boss_position = 1;
    if (has_boss_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_position());
    }

    // required uint32 lose_hp = 2;
    if (has_lose_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose_hp());
    }

  }
  // repeated uint32 dead_heros = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dead_heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dead_heros(i));
    }
    total_size += 1 * this->dead_heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_boss_attack_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_boss_attack_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_boss_attack_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_boss_attack_req::MergeFrom(const c_gs_guild_boss_attack_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  dead_heros_.MergeFrom(from.dead_heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_position()) {
      set_boss_position(from.boss_position());
    }
    if (from.has_lose_hp()) {
      set_lose_hp(from.lose_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_boss_attack_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_boss_attack_req::CopyFrom(const c_gs_guild_boss_attack_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_boss_attack_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void c_gs_guild_boss_attack_req::Swap(c_gs_guild_boss_attack_req* other) {
  if (other != this) {
    std::swap(boss_position_, other->boss_position_);
    std::swap(lose_hp_, other->lose_hp_);
    dead_heros_.Swap(&other->dead_heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_boss_attack_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_boss_attack_req_descriptor_;
  metadata.reflection = c_gs_guild_boss_attack_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_boss_attack_res::kErrorCodeFieldNumber;
const int gs_c_guild_boss_attack_res::kIsKillerFieldNumber;
const int gs_c_guild_boss_attack_res::kConsumeFieldNumber;
const int gs_c_guild_boss_attack_res::kOutputFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_boss_attack_res::gs_c_guild_boss_attack_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_boss_attack_res::InitAsDefaultInstance() {
}

gs_c_guild_boss_attack_res::gs_c_guild_boss_attack_res(const gs_c_guild_boss_attack_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_boss_attack_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  is_killer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_boss_attack_res::~gs_c_guild_boss_attack_res() {
  SharedDtor();
}

void gs_c_guild_boss_attack_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_boss_attack_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_boss_attack_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_boss_attack_res_descriptor_;
}

const gs_c_guild_boss_attack_res& gs_c_guild_boss_attack_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_boss_attack_res* gs_c_guild_boss_attack_res::default_instance_ = NULL;

gs_c_guild_boss_attack_res* gs_c_guild_boss_attack_res::New() const {
  return new gs_c_guild_boss_attack_res;
}

void gs_c_guild_boss_attack_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    is_killer_ = 0u;
  }
  consume_.Clear();
  output_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_boss_attack_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_killer;
        break;
      }

      // optional uint32 is_killer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_killer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_killer_)));
          set_has_is_killer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_consume;
        if (input->ExpectTag(42)) goto parse_output;
        break;
      }

      // repeated .struct_game_element output = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_output;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_boss_attack_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional uint32 is_killer = 2;
  if (has_is_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_killer(), output);
  }

  // repeated .struct_game_element consume = 4;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->consume(i), output);
  }

  // repeated .struct_game_element output = 5;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->output(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_boss_attack_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 is_killer = 2;
  if (has_is_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_killer(), target);
  }

  // repeated .struct_game_element consume = 4;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->consume(i), target);
  }

  // repeated .struct_game_element output = 5;
  for (int i = 0; i < this->output_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->output(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_boss_attack_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional uint32 is_killer = 2;
    if (has_is_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_killer());
    }

  }
  // repeated .struct_game_element consume = 4;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  // repeated .struct_game_element output = 5;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_boss_attack_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_boss_attack_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_boss_attack_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_boss_attack_res::MergeFrom(const gs_c_guild_boss_attack_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  output_.MergeFrom(from.output_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_is_killer()) {
      set_is_killer(from.is_killer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_boss_attack_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_boss_attack_res::CopyFrom(const gs_c_guild_boss_attack_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_boss_attack_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  for (int i = 0; i < output_size(); i++) {
    if (!this->output(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_guild_boss_attack_res::Swap(gs_c_guild_boss_attack_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(is_killer_, other->is_killer_);
    consume_.Swap(&other->consume_);
    output_.Swap(&other->output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_boss_attack_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_boss_attack_res_descriptor_;
  metadata.reflection = gs_c_guild_boss_attack_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_guild_boss_dead_hero_reset_req::kBossPositionFieldNumber;
#endif  // !_MSC_VER

c_gs_guild_boss_dead_hero_reset_req::c_gs_guild_boss_dead_hero_reset_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_boss_dead_hero_reset_req::InitAsDefaultInstance() {
}

c_gs_guild_boss_dead_hero_reset_req::c_gs_guild_boss_dead_hero_reset_req(const c_gs_guild_boss_dead_hero_reset_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_boss_dead_hero_reset_req::SharedCtor() {
  _cached_size_ = 0;
  boss_position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_boss_dead_hero_reset_req::~c_gs_guild_boss_dead_hero_reset_req() {
  SharedDtor();
}

void c_gs_guild_boss_dead_hero_reset_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_guild_boss_dead_hero_reset_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_boss_dead_hero_reset_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_boss_dead_hero_reset_req_descriptor_;
}

const c_gs_guild_boss_dead_hero_reset_req& c_gs_guild_boss_dead_hero_reset_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_boss_dead_hero_reset_req* c_gs_guild_boss_dead_hero_reset_req::default_instance_ = NULL;

c_gs_guild_boss_dead_hero_reset_req* c_gs_guild_boss_dead_hero_reset_req::New() const {
  return new c_gs_guild_boss_dead_hero_reset_req;
}

void c_gs_guild_boss_dead_hero_reset_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boss_position_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_boss_dead_hero_reset_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 boss_position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_position_)));
          set_has_boss_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_guild_boss_dead_hero_reset_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 boss_position = 1;
  if (has_boss_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boss_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_boss_dead_hero_reset_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 boss_position = 1;
  if (has_boss_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boss_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_boss_dead_hero_reset_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 boss_position = 1;
    if (has_boss_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_boss_dead_hero_reset_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_boss_dead_hero_reset_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_boss_dead_hero_reset_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_boss_dead_hero_reset_req::MergeFrom(const c_gs_guild_boss_dead_hero_reset_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_position()) {
      set_boss_position(from.boss_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_boss_dead_hero_reset_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_boss_dead_hero_reset_req::CopyFrom(const c_gs_guild_boss_dead_hero_reset_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_boss_dead_hero_reset_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_guild_boss_dead_hero_reset_req::Swap(c_gs_guild_boss_dead_hero_reset_req* other) {
  if (other != this) {
    std::swap(boss_position_, other->boss_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_boss_dead_hero_reset_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_boss_dead_hero_reset_req_descriptor_;
  metadata.reflection = c_gs_guild_boss_dead_hero_reset_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_boss_dead_hero_reset_res::kErrorCodeFieldNumber;
const int gs_c_guild_boss_dead_hero_reset_res::kBossPositionFieldNumber;
const int gs_c_guild_boss_dead_hero_reset_res::kResetNumFieldNumber;
const int gs_c_guild_boss_dead_hero_reset_res::kLastResetTimeFieldNumber;
const int gs_c_guild_boss_dead_hero_reset_res::kConsumeFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_boss_dead_hero_reset_res::gs_c_guild_boss_dead_hero_reset_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_boss_dead_hero_reset_res::InitAsDefaultInstance() {
}

gs_c_guild_boss_dead_hero_reset_res::gs_c_guild_boss_dead_hero_reset_res(const gs_c_guild_boss_dead_hero_reset_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_boss_dead_hero_reset_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  boss_position_ = 0u;
  reset_num_ = 0u;
  last_reset_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_boss_dead_hero_reset_res::~gs_c_guild_boss_dead_hero_reset_res() {
  SharedDtor();
}

void gs_c_guild_boss_dead_hero_reset_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_boss_dead_hero_reset_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_boss_dead_hero_reset_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_boss_dead_hero_reset_res_descriptor_;
}

const gs_c_guild_boss_dead_hero_reset_res& gs_c_guild_boss_dead_hero_reset_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_boss_dead_hero_reset_res* gs_c_guild_boss_dead_hero_reset_res::default_instance_ = NULL;

gs_c_guild_boss_dead_hero_reset_res* gs_c_guild_boss_dead_hero_reset_res::New() const {
  return new gs_c_guild_boss_dead_hero_reset_res;
}

void gs_c_guild_boss_dead_hero_reset_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    boss_position_ = 0u;
    reset_num_ = 0u;
    last_reset_time_ = 0u;
  }
  consume_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_boss_dead_hero_reset_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boss_position;
        break;
      }

      // optional uint32 boss_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_position_)));
          set_has_boss_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reset_num;
        break;
      }

      // optional uint32 reset_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_num_)));
          set_has_reset_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_reset_time;
        break;
      }

      // optional uint32 last_reset_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_reset_time_)));
          set_has_last_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_consume;
        break;
      }

      // repeated .struct_game_element consume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_consume;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_boss_dead_hero_reset_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional uint32 boss_position = 2;
  if (has_boss_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boss_position(), output);
  }

  // optional uint32 reset_num = 3;
  if (has_reset_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reset_num(), output);
  }

  // optional uint32 last_reset_time = 4;
  if (has_last_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_reset_time(), output);
  }

  // repeated .struct_game_element consume = 5;
  for (int i = 0; i < this->consume_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->consume(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_boss_dead_hero_reset_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 boss_position = 2;
  if (has_boss_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boss_position(), target);
  }

  // optional uint32 reset_num = 3;
  if (has_reset_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reset_num(), target);
  }

  // optional uint32 last_reset_time = 4;
  if (has_last_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_reset_time(), target);
  }

  // repeated .struct_game_element consume = 5;
  for (int i = 0; i < this->consume_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->consume(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_boss_dead_hero_reset_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional uint32 boss_position = 2;
    if (has_boss_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_position());
    }

    // optional uint32 reset_num = 3;
    if (has_reset_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_num());
    }

    // optional uint32 last_reset_time = 4;
    if (has_last_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_reset_time());
    }

  }
  // repeated .struct_game_element consume = 5;
  total_size += 1 * this->consume_size();
  for (int i = 0; i < this->consume_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_boss_dead_hero_reset_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_boss_dead_hero_reset_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_boss_dead_hero_reset_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_boss_dead_hero_reset_res::MergeFrom(const gs_c_guild_boss_dead_hero_reset_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_.MergeFrom(from.consume_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_boss_position()) {
      set_boss_position(from.boss_position());
    }
    if (from.has_reset_num()) {
      set_reset_num(from.reset_num());
    }
    if (from.has_last_reset_time()) {
      set_last_reset_time(from.last_reset_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_boss_dead_hero_reset_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_boss_dead_hero_reset_res::CopyFrom(const gs_c_guild_boss_dead_hero_reset_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_boss_dead_hero_reset_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < consume_size(); i++) {
    if (!this->consume(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_guild_boss_dead_hero_reset_res::Swap(gs_c_guild_boss_dead_hero_reset_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(boss_position_, other->boss_position_);
    std::swap(reset_num_, other->reset_num_);
    std::swap(last_reset_time_, other->last_reset_time_);
    consume_.Swap(&other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_boss_dead_hero_reset_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_boss_dead_hero_reset_res_descriptor_;
  metadata.reflection = gs_c_guild_boss_dead_hero_reset_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int c_gs_guild_boss_attacker_rank_req::kBossPositionFieldNumber;
#endif  // !_MSC_VER

c_gs_guild_boss_attacker_rank_req::c_gs_guild_boss_attacker_rank_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_guild_boss_attacker_rank_req::InitAsDefaultInstance() {
}

c_gs_guild_boss_attacker_rank_req::c_gs_guild_boss_attacker_rank_req(const c_gs_guild_boss_attacker_rank_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_guild_boss_attacker_rank_req::SharedCtor() {
  _cached_size_ = 0;
  boss_position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_guild_boss_attacker_rank_req::~c_gs_guild_boss_attacker_rank_req() {
  SharedDtor();
}

void c_gs_guild_boss_attacker_rank_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_guild_boss_attacker_rank_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_guild_boss_attacker_rank_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_guild_boss_attacker_rank_req_descriptor_;
}

const c_gs_guild_boss_attacker_rank_req& c_gs_guild_boss_attacker_rank_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_guild_boss_attacker_rank_req* c_gs_guild_boss_attacker_rank_req::default_instance_ = NULL;

c_gs_guild_boss_attacker_rank_req* c_gs_guild_boss_attacker_rank_req::New() const {
  return new c_gs_guild_boss_attacker_rank_req;
}

void c_gs_guild_boss_attacker_rank_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boss_position_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_guild_boss_attacker_rank_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 boss_position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_position_)));
          set_has_boss_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void c_gs_guild_boss_attacker_rank_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 boss_position = 1;
  if (has_boss_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boss_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_guild_boss_attacker_rank_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 boss_position = 1;
  if (has_boss_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boss_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_guild_boss_attacker_rank_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 boss_position = 1;
    if (has_boss_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_guild_boss_attacker_rank_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_guild_boss_attacker_rank_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_guild_boss_attacker_rank_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_guild_boss_attacker_rank_req::MergeFrom(const c_gs_guild_boss_attacker_rank_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_position()) {
      set_boss_position(from.boss_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_guild_boss_attacker_rank_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_guild_boss_attacker_rank_req::CopyFrom(const c_gs_guild_boss_attacker_rank_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_guild_boss_attacker_rank_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void c_gs_guild_boss_attacker_rank_req::Swap(c_gs_guild_boss_attacker_rank_req* other) {
  if (other != this) {
    std::swap(boss_position_, other->boss_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_guild_boss_attacker_rank_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_guild_boss_attacker_rank_req_descriptor_;
  metadata.reflection = c_gs_guild_boss_attacker_rank_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::kUserIdFieldNumber;
const int gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::kNameFieldNumber;
const int gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::kLoseHpFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::InitAsDefaultInstance() {
}

gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::gs_c_guild_boss_attacker_rank_res_struct_boss_attacker(const gs_c_guild_boss_attacker_rank_res_struct_boss_attacker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lose_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::~gs_c_guild_boss_attacker_rank_res_struct_boss_attacker() {
  SharedDtor();
}

void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_boss_attacker_rank_res_struct_boss_attacker_descriptor_;
}

const gs_c_guild_boss_attacker_rank_res_struct_boss_attacker& gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_boss_attacker_rank_res_struct_boss_attacker* gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::default_instance_ = NULL;

gs_c_guild_boss_attacker_rank_res_struct_boss_attacker* gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::New() const {
  return new gs_c_guild_boss_attacker_rank_res_struct_boss_attacker;
}

void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lose_hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lose_hp;
        break;
      }

      // required uint32 lose_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_hp_)));
          set_has_lose_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 lose_hp = 3;
  if (has_lose_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lose_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 lose_hp = 3;
  if (has_lose_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lose_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 lose_hp = 3;
    if (has_lose_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_boss_attacker_rank_res_struct_boss_attacker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_boss_attacker_rank_res_struct_boss_attacker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::MergeFrom(const gs_c_guild_boss_attacker_rank_res_struct_boss_attacker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lose_hp()) {
      set_lose_hp(from.lose_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::CopyFrom(const gs_c_guild_boss_attacker_rank_res_struct_boss_attacker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::Swap(gs_c_guild_boss_attacker_rank_res_struct_boss_attacker* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(lose_hp_, other->lose_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_boss_attacker_rank_res_struct_boss_attacker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_boss_attacker_rank_res_struct_boss_attacker_descriptor_;
  metadata.reflection = gs_c_guild_boss_attacker_rank_res_struct_boss_attacker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_c_guild_boss_attacker_rank_res::kErrorCodeFieldNumber;
const int gs_c_guild_boss_attacker_rank_res::kAttckersFieldNumber;
#endif  // !_MSC_VER

gs_c_guild_boss_attacker_rank_res::gs_c_guild_boss_attacker_rank_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_guild_boss_attacker_rank_res::InitAsDefaultInstance() {
}

gs_c_guild_boss_attacker_rank_res::gs_c_guild_boss_attacker_rank_res(const gs_c_guild_boss_attacker_rank_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_guild_boss_attacker_rank_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_guild_boss_attacker_rank_res::~gs_c_guild_boss_attacker_rank_res() {
  SharedDtor();
}

void gs_c_guild_boss_attacker_rank_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_guild_boss_attacker_rank_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_guild_boss_attacker_rank_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_guild_boss_attacker_rank_res_descriptor_;
}

const gs_c_guild_boss_attacker_rank_res& gs_c_guild_boss_attacker_rank_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_guild_boss_attacker_rank_res* gs_c_guild_boss_attacker_rank_res::default_instance_ = NULL;

gs_c_guild_boss_attacker_rank_res* gs_c_guild_boss_attacker_rank_res::New() const {
  return new gs_c_guild_boss_attacker_rank_res;
}

void gs_c_guild_boss_attacker_rank_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  attckers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_guild_boss_attacker_rank_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attckers;
        break;
      }

      // repeated .gs_c_guild_boss_attacker_rank_res.struct_boss_attacker attckers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attckers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attckers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attckers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_guild_boss_attacker_rank_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // repeated .gs_c_guild_boss_attacker_rank_res.struct_boss_attacker attckers = 2;
  for (int i = 0; i < this->attckers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attckers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_guild_boss_attacker_rank_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // repeated .gs_c_guild_boss_attacker_rank_res.struct_boss_attacker attckers = 2;
  for (int i = 0; i < this->attckers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attckers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_guild_boss_attacker_rank_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  // repeated .gs_c_guild_boss_attacker_rank_res.struct_boss_attacker attckers = 2;
  total_size += 1 * this->attckers_size();
  for (int i = 0; i < this->attckers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attckers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_guild_boss_attacker_rank_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_guild_boss_attacker_rank_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_guild_boss_attacker_rank_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_guild_boss_attacker_rank_res::MergeFrom(const gs_c_guild_boss_attacker_rank_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  attckers_.MergeFrom(from.attckers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_guild_boss_attacker_rank_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_guild_boss_attacker_rank_res::CopyFrom(const gs_c_guild_boss_attacker_rank_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_guild_boss_attacker_rank_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < attckers_size(); i++) {
    if (!this->attckers(i).IsInitialized()) return false;
  }
  return true;
}

void gs_c_guild_boss_attacker_rank_res::Swap(gs_c_guild_boss_attacker_rank_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    attckers_.Swap(&other->attckers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_guild_boss_attacker_rank_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_guild_boss_attacker_rank_res_descriptor_;
  metadata.reflection = gs_c_guild_boss_attacker_rank_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

c_gs_server_time_req::c_gs_server_time_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void c_gs_server_time_req::InitAsDefaultInstance() {
}

c_gs_server_time_req::c_gs_server_time_req(const c_gs_server_time_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void c_gs_server_time_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c_gs_server_time_req::~c_gs_server_time_req() {
  SharedDtor();
}

void c_gs_server_time_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void c_gs_server_time_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c_gs_server_time_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c_gs_server_time_req_descriptor_;
}

const c_gs_server_time_req& c_gs_server_time_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

c_gs_server_time_req* c_gs_server_time_req::default_instance_ = NULL;

c_gs_server_time_req* c_gs_server_time_req::New() const {
  return new c_gs_server_time_req;
}

void c_gs_server_time_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool c_gs_server_time_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void c_gs_server_time_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* c_gs_server_time_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int c_gs_server_time_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c_gs_server_time_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const c_gs_server_time_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const c_gs_server_time_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void c_gs_server_time_req::MergeFrom(const c_gs_server_time_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void c_gs_server_time_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c_gs_server_time_req::CopyFrom(const c_gs_server_time_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c_gs_server_time_req::IsInitialized() const {

  return true;
}

void c_gs_server_time_req::Swap(c_gs_server_time_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata c_gs_server_time_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c_gs_server_time_req_descriptor_;
  metadata.reflection = c_gs_server_time_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_c_server_time_res::kErrorCodeFieldNumber;
const int gs_c_server_time_res::kServerTimeFieldNumber;
#endif  // !_MSC_VER

gs_c_server_time_res::gs_c_server_time_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_c_server_time_res::InitAsDefaultInstance() {
}

gs_c_server_time_res::gs_c_server_time_res(const gs_c_server_time_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_c_server_time_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  server_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_c_server_time_res::~gs_c_server_time_res() {
  SharedDtor();
}

void gs_c_server_time_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_c_server_time_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_c_server_time_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_c_server_time_res_descriptor_;
}

const gs_c_server_time_res& gs_c_server_time_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  return *default_instance_;
}

gs_c_server_time_res* gs_c_server_time_res::default_instance_ = NULL;

gs_c_server_time_res* gs_c_server_time_res::New() const {
  return new gs_c_server_time_res;
}

void gs_c_server_time_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    server_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_c_server_time_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_time;
        break;
      }

      // optional uint32 server_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
          set_has_server_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_c_server_time_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional uint32 server_time = 2;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_c_server_time_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional uint32 server_time = 2;
  if (has_server_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_c_server_time_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional uint32 server_time = 2;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_c_server_time_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_c_server_time_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_c_server_time_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_c_server_time_res::MergeFrom(const gs_c_server_time_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_c_server_time_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_c_server_time_res::CopyFrom(const gs_c_server_time_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_c_server_time_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_c_server_time_res::Swap(gs_c_server_time_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_c_server_time_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_c_server_time_res_descriptor_;
  metadata.reflection = gs_c_server_time_res_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
