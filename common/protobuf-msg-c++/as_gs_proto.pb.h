// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: as_gs_proto.proto

#ifndef PROTOBUF_as_5fgs_5fproto_2eproto__INCLUDED
#define PROTOBUF_as_5fgs_5fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_as_5fgs_5fproto_2eproto();
void protobuf_AssignDesc_as_5fgs_5fproto_2eproto();
void protobuf_ShutdownFile_as_5fgs_5fproto_2eproto();

class as_gs_enter_area_req;
class gs_as_enter_area_res;

enum e_msg_as_gs {
  e_msg_as_gs_min = 0,
  e_msg_as_gs_enter_area_req = 1,
  e_msg_as_gs_max = 2
};
bool e_msg_as_gs_IsValid(int value);
const e_msg_as_gs e_msg_as_gs_MIN = e_msg_as_gs_min;
const e_msg_as_gs e_msg_as_gs_MAX = e_msg_as_gs_max;
const int e_msg_as_gs_ARRAYSIZE = e_msg_as_gs_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_msg_as_gs_descriptor();
inline const ::std::string& e_msg_as_gs_Name(e_msg_as_gs value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_msg_as_gs_descriptor(), value);
}
inline bool e_msg_as_gs_Parse(
    const ::std::string& name, e_msg_as_gs* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_msg_as_gs>(
    e_msg_as_gs_descriptor(), name, value);
}
enum e_msg_gs_as {
  e_msg_gs_as_min = 0,
  e_msg_gs_as_enter_area_res = 1,
  e_msg_gs_as_max = 2
};
bool e_msg_gs_as_IsValid(int value);
const e_msg_gs_as e_msg_gs_as_MIN = e_msg_gs_as_min;
const e_msg_gs_as e_msg_gs_as_MAX = e_msg_gs_as_max;
const int e_msg_gs_as_ARRAYSIZE = e_msg_gs_as_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_msg_gs_as_descriptor();
inline const ::std::string& e_msg_gs_as_Name(e_msg_gs_as value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_msg_gs_as_descriptor(), value);
}
inline bool e_msg_gs_as_Parse(
    const ::std::string& name, e_msg_gs_as* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_msg_gs_as>(
    e_msg_gs_as_descriptor(), name, value);
}
enum e_asgs_errorcode {
  e_asgs_errorcode_min = 0,
  e_asgs_errorcode_success = 1,
  e_asgs_errorcode_unkown_error = 2,
  e_asgs_errorcode_token = 3,
  e_asgs_errorcode_has_same_token = 4,
  e_asgs_errorcode_max = 5
};
bool e_asgs_errorcode_IsValid(int value);
const e_asgs_errorcode e_asgs_errorcode_MIN = e_asgs_errorcode_min;
const e_asgs_errorcode e_asgs_errorcode_MAX = e_asgs_errorcode_max;
const int e_asgs_errorcode_ARRAYSIZE = e_asgs_errorcode_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_asgs_errorcode_descriptor();
inline const ::std::string& e_asgs_errorcode_Name(e_asgs_errorcode value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_asgs_errorcode_descriptor(), value);
}
inline bool e_asgs_errorcode_Parse(
    const ::std::string& name, e_asgs_errorcode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_asgs_errorcode>(
    e_asgs_errorcode_descriptor(), name, value);
}
// ===================================================================

class as_gs_enter_area_req : public ::google::protobuf::Message {
 public:
  as_gs_enter_area_req();
  virtual ~as_gs_enter_area_req();

  as_gs_enter_area_req(const as_gs_enter_area_req& from);

  inline as_gs_enter_area_req& operator=(const as_gs_enter_area_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const as_gs_enter_area_req& default_instance();

  void Swap(as_gs_enter_area_req* other);

  // implements Message ----------------------------------------------

  as_gs_enter_area_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const as_gs_enter_area_req& from);
  void MergeFrom(const as_gs_enter_area_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes client_id = 1;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const void* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // required bytes token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const void* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required int32 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int32 user_id() const;
  inline void set_user_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:as_gs_enter_area_req)
 private:
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* client_id_;
  ::std::string* token_;
  ::google::protobuf::int32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_as_5fgs_5fproto_2eproto();
  friend void protobuf_AssignDesc_as_5fgs_5fproto_2eproto();
  friend void protobuf_ShutdownFile_as_5fgs_5fproto_2eproto();

  void InitAsDefaultInstance();
  static as_gs_enter_area_req* default_instance_;
};
// -------------------------------------------------------------------

class gs_as_enter_area_res : public ::google::protobuf::Message {
 public:
  gs_as_enter_area_res();
  virtual ~gs_as_enter_area_res();

  gs_as_enter_area_res(const gs_as_enter_area_res& from);

  inline gs_as_enter_area_res& operator=(const gs_as_enter_area_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gs_as_enter_area_res& default_instance();

  void Swap(gs_as_enter_area_res* other);

  // implements Message ----------------------------------------------

  gs_as_enter_area_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gs_as_enter_area_res& from);
  void MergeFrom(const gs_as_enter_area_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // required bytes client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const void* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // optional bytes token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const void* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:gs_as_enter_area_res)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* client_id_;
  ::std::string* token_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_as_5fgs_5fproto_2eproto();
  friend void protobuf_AssignDesc_as_5fgs_5fproto_2eproto();
  friend void protobuf_ShutdownFile_as_5fgs_5fproto_2eproto();

  void InitAsDefaultInstance();
  static gs_as_enter_area_res* default_instance_;
};
// ===================================================================


// ===================================================================

// as_gs_enter_area_req

// required bytes client_id = 1;
inline bool as_gs_enter_area_req::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void as_gs_enter_area_req::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void as_gs_enter_area_req::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void as_gs_enter_area_req::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& as_gs_enter_area_req::client_id() const {
  return *client_id_;
}
inline void as_gs_enter_area_req::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void as_gs_enter_area_req::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void as_gs_enter_area_req::set_client_id(const void* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* as_gs_enter_area_req::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  return client_id_;
}
inline ::std::string* as_gs_enter_area_req::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void as_gs_enter_area_req::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes token = 2;
inline bool as_gs_enter_area_req::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void as_gs_enter_area_req::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void as_gs_enter_area_req::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void as_gs_enter_area_req::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& as_gs_enter_area_req::token() const {
  return *token_;
}
inline void as_gs_enter_area_req::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void as_gs_enter_area_req::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void as_gs_enter_area_req::set_token(const void* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* as_gs_enter_area_req::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* as_gs_enter_area_req::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void as_gs_enter_area_req::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 user_id = 3;
inline bool as_gs_enter_area_req::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void as_gs_enter_area_req::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void as_gs_enter_area_req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void as_gs_enter_area_req::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 as_gs_enter_area_req::user_id() const {
  return user_id_;
}
inline void as_gs_enter_area_req::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// gs_as_enter_area_res

// required int32 error_code = 1;
inline bool gs_as_enter_area_res::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gs_as_enter_area_res::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gs_as_enter_area_res::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gs_as_enter_area_res::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 gs_as_enter_area_res::error_code() const {
  return error_code_;
}
inline void gs_as_enter_area_res::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// required bytes client_id = 2;
inline bool gs_as_enter_area_res::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gs_as_enter_area_res::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gs_as_enter_area_res::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gs_as_enter_area_res::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& gs_as_enter_area_res::client_id() const {
  return *client_id_;
}
inline void gs_as_enter_area_res::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void gs_as_enter_area_res::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
}
inline void gs_as_enter_area_res::set_client_id(const void* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_as_enter_area_res::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    client_id_ = new ::std::string;
  }
  return client_id_;
}
inline ::std::string* gs_as_enter_area_res::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_as_enter_area_res::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes token = 3;
inline bool gs_as_enter_area_res::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gs_as_enter_area_res::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gs_as_enter_area_res::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gs_as_enter_area_res::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& gs_as_enter_area_res::token() const {
  return *token_;
}
inline void gs_as_enter_area_res::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void gs_as_enter_area_res::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void gs_as_enter_area_res::set_token(const void* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gs_as_enter_area_res::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* gs_as_enter_area_res::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gs_as_enter_area_res::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_msg_as_gs>() {
  return ::e_msg_as_gs_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_msg_gs_as>() {
  return ::e_msg_gs_as_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e_asgs_errorcode>() {
  return ::e_asgs_errorcode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_as_5fgs_5fproto_2eproto__INCLUDED
