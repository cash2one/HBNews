// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbs_gs_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dbs_gs_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* db_user_sub_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_sub_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_sub_task_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_sub_task_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_hero_equip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_hero_equip_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_hero_skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_hero_skill_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_hero_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_hero_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_mail_attach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_mail_attach_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_mail_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_mail_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_shop_buy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_shop_buy_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_shop_buy_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_shop_buy_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_shop_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_shop_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_shop_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_shop_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_mission_event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_mission_event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* db_user_mission_event_MISSION_EVENT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* db_user_mission_event_MISSION_EVENT_SUB_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* db_user_arena_log_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_arena_log_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_arena_log_db_user_arena_log_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_arena_log_db_user_arena_log_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_mission_event_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_mission_event_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_mission_chain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_mission_chain_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_mission_chain_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_mission_chain_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_arena_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_arena_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_sign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_sign_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_novice_guide_array_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_novice_guide_array_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_friend_friend_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_friend_friend_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_crusade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_crusade_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_guild_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_guild_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_guild_info_struct_apply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_guild_info_struct_apply_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_guild_info_struct_boss_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_guild_info_struct_boss_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_guild_info_struct_boss_info_struct_dead_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_guild_info_struct_boss_info_struct_dead_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* db_user_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  db_user_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_user_info_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_user_info_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_new_create_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_new_create_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_user_info_new_create_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_user_info_new_create_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_sub_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_sub_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_new_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_new_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_hero_base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_hero_base_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_hero_equip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_hero_equip_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_hero_skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_hero_skill_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_shop_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_shop_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_shop_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_mission_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_new_arena_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_new_arena_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_arena_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_arena_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_clear_arena_team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_clear_arena_team_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_arena_challenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_arena_challenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_sign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_sign_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_new_sign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_new_sign_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_novice_guide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_novice_guide_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_new_user_statis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_new_user_statis_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_new_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_new_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_friend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_crusade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_crusade_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_crusade_crusade_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_info_op_req_struct_op_crusade_crusade_end_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_dbs_user_info_op_req_struct_op_crusade_CRUSADE_OP_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_dbs_user_info_op_req_EOPType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_user_info_op_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_user_info_op_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_new_mail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_new_mail_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_user_new_mail_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_user_new_mail_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* arena_mail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arena_mail_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_new_arena_mail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_new_arena_mail_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_user_new_arena_mail_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_user_new_arena_mail_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_edit_name_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_edit_name_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_edit_name_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_edit_name_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_user_friend_op_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_user_friend_op_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_dbs_user_friend_op_req_OP_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_user_friend_op_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_user_friend_op_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_search_user_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_search_user_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_search_user_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_search_user_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_friend_offline_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_friend_offline_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_dbs_friend_offline_req_OP_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_friend_offline_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_friend_offline_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_rank_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_rank_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_rank_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_rank_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_rank_res_rank_brief_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_rank_res_rank_brief_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_rank_res_rank_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_rank_res_rank_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_new_guild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_new_guild_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_update_guild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_update_guild_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_delete_guild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_delete_guild_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_new_apply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_new_apply_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_delete_apply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_delete_apply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_dbs_guild_op_req_struct_delete_apply_EOPType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_new_member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_new_member_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_update_member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_update_member_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_new_boss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_new_boss_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_update_boss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_update_boss_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_new_boss_attacker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_new_boss_attacker_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_delete_boss_attacker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_delete_boss_attacker_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_new_dead_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_new_dead_hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_delete_dead_hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_dbs_guild_op_req_struct_delete_dead_hero_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gs_dbs_guild_op_req_struct_delete_dead_hero_EOPType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* dbs_gs_guild_op_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dbs_gs_guild_op_res_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* e_msg_gs_dbs_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_msg_dbs_gs_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_dbsgs_errorcode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dbs_5fgs_5fproto_2eproto() {
  protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dbs_gs_proto.proto");
  GOOGLE_CHECK(file != NULL);
  db_user_sub_task_descriptor_ = file->message_type(0);
  static const int db_user_sub_task_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sub_task, sub_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sub_task, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sub_task, last_enter_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sub_task, last_day_enter_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sub_task, total_enter_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sub_task, last_reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sub_task, last_day_reset_num_),
  };
  db_user_sub_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_sub_task_descriptor_,
      db_user_sub_task::default_instance_,
      db_user_sub_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sub_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sub_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_sub_task));
  db_user_sub_task_array_descriptor_ = file->message_type(1);
  static const int db_user_sub_task_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sub_task_array, items_),
  };
  db_user_sub_task_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_sub_task_array_descriptor_,
      db_user_sub_task_array::default_instance_,
      db_user_sub_task_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sub_task_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sub_task_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_sub_task_array));
  db_user_hero_equip_descriptor_ = file->message_type(2);
  static const int db_user_hero_equip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero_equip, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero_equip, level_),
  };
  db_user_hero_equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_hero_equip_descriptor_,
      db_user_hero_equip::default_instance_,
      db_user_hero_equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero_equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero_equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_hero_equip));
  db_user_hero_skill_descriptor_ = file->message_type(3);
  static const int db_user_hero_skill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero_skill, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero_skill, level_),
  };
  db_user_hero_skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_hero_skill_descriptor_,
      db_user_hero_skill::default_instance_,
      db_user_hero_skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero_skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero_skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_hero_skill));
  db_user_hero_descriptor_ = file->message_type(4);
  static const int db_user_hero_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero, cur_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero, got_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero, skills_),
  };
  db_user_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_hero_descriptor_,
      db_user_hero::default_instance_,
      db_user_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_hero));
  db_user_hero_array_descriptor_ = file->message_type(5);
  static const int db_user_hero_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero_array, items_),
  };
  db_user_hero_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_hero_array_descriptor_,
      db_user_hero_array::default_instance_,
      db_user_hero_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_hero_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_hero_array));
  db_mail_attach_descriptor_ = file->message_type(6);
  static const int db_mail_attach_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_attach, attach_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_attach, element_),
  };
  db_mail_attach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_mail_attach_descriptor_,
      db_mail_attach::default_instance_,
      db_mail_attach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_attach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_mail_attach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_mail_attach));
  db_user_mail_descriptor_ = file->message_type(7);
  static const int db_user_mail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mail, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mail, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mail, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mail, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mail, attachs_),
  };
  db_user_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_mail_descriptor_,
      db_user_mail::default_instance_,
      db_user_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_mail));
  db_user_mail_array_descriptor_ = file->message_type(8);
  static const int db_user_mail_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mail_array, mails_),
  };
  db_user_mail_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_mail_array_descriptor_,
      db_user_mail_array::default_instance_,
      db_user_mail_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mail_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mail_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_mail_array));
  db_user_shop_buy_descriptor_ = file->message_type(9);
  static const int db_user_shop_buy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_buy, element_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_buy, element_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_buy, last_day_buy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_buy, last_buy_time_),
  };
  db_user_shop_buy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_shop_buy_descriptor_,
      db_user_shop_buy::default_instance_,
      db_user_shop_buy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_buy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_buy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_shop_buy));
  db_user_shop_buy_array_descriptor_ = file->message_type(10);
  static const int db_user_shop_buy_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_buy_array, items_),
  };
  db_user_shop_buy_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_shop_buy_array_descriptor_,
      db_user_shop_buy_array::default_instance_,
      db_user_shop_buy_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_buy_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_buy_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_shop_buy_array));
  db_user_shop_item_descriptor_ = file->message_type(11);
  static const int db_user_shop_item_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_item, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_item, element_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_item, element_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_item, element_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_item, consume_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_item, consume_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_item, consume_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_item, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_item, is_sold_),
  };
  db_user_shop_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_shop_item_descriptor_,
      db_user_shop_item::default_instance_,
      db_user_shop_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_shop_item));
  db_user_shop_descriptor_ = file->message_type(12);
  static const int db_user_shop_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop, shop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop, last_auto_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop, last_manual_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop, last_day_manual_refresh_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop, random_open_start_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop, random_open_end_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop, items_),
  };
  db_user_shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_shop_descriptor_,
      db_user_shop::default_instance_,
      db_user_shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_shop));
  db_user_shop_array_descriptor_ = file->message_type(13);
  static const int db_user_shop_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_array, items_),
  };
  db_user_shop_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_shop_array_descriptor_,
      db_user_shop_array::default_instance_,
      db_user_shop_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_shop_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_shop_array));
  db_user_mission_event_descriptor_ = file->message_type(14);
  static const int db_user_mission_event_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_event, mission_event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_event, mission_event_sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_event, last_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_event, last_day_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_event, total_value_),
  };
  db_user_mission_event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_mission_event_descriptor_,
      db_user_mission_event::default_instance_,
      db_user_mission_event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_mission_event));
  db_user_mission_event_MISSION_EVENT_TYPE_descriptor_ = db_user_mission_event_descriptor_->enum_type(0);
  db_user_mission_event_MISSION_EVENT_SUB_TYPE_descriptor_ = db_user_mission_event_descriptor_->enum_type(1);
  db_user_arena_log_descriptor_ = file->message_type(15);
  static const int db_user_arena_log_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log, is_attacker_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log, is_me_attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log, me_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log, match_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log, match_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log, match_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log, match_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log, match_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log, match_heros_),
  };
  db_user_arena_log_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_arena_log_descriptor_,
      db_user_arena_log::default_instance_,
      db_user_arena_log_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_arena_log));
  db_user_arena_log_db_user_arena_log_hero_descriptor_ = db_user_arena_log_descriptor_->nested_type(0);
  static const int db_user_arena_log_db_user_arena_log_hero_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log_db_user_arena_log_hero, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log_db_user_arena_log_hero, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log_db_user_arena_log_hero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log_db_user_arena_log_hero, star_),
  };
  db_user_arena_log_db_user_arena_log_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_arena_log_db_user_arena_log_hero_descriptor_,
      db_user_arena_log_db_user_arena_log_hero::default_instance_,
      db_user_arena_log_db_user_arena_log_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log_db_user_arena_log_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena_log_db_user_arena_log_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_arena_log_db_user_arena_log_hero));
  db_user_mission_event_array_descriptor_ = file->message_type(16);
  static const int db_user_mission_event_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_event_array, events_),
  };
  db_user_mission_event_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_mission_event_array_descriptor_,
      db_user_mission_event_array::default_instance_,
      db_user_mission_event_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_event_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_event_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_mission_event_array));
  db_user_mission_chain_descriptor_ = file->message_type(17);
  static const int db_user_mission_chain_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_chain, mission_chain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_chain, last_get_reward_mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_chain, last_get_reward_timestamp_),
  };
  db_user_mission_chain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_mission_chain_descriptor_,
      db_user_mission_chain::default_instance_,
      db_user_mission_chain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_chain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_chain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_mission_chain));
  db_user_mission_chain_array_descriptor_ = file->message_type(18);
  static const int db_user_mission_chain_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_chain_array, chains_),
  };
  db_user_mission_chain_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_mission_chain_array_descriptor_,
      db_user_mission_chain_array::default_instance_,
      db_user_mission_chain_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_chain_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_mission_chain_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_mission_chain_array));
  db_user_arena_descriptor_ = file->message_type(19);
  static const int db_user_arena_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena, last_challenge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena, last_day_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena, history_highest_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena, last_time_buy_arena_challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena, last_day_buy_arena_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena, logs_),
  };
  db_user_arena_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_arena_descriptor_,
      db_user_arena::default_instance_,
      db_user_arena_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_arena, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_arena));
  db_user_base_info_descriptor_ = file->message_type(20);
  static const int db_user_base_info_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, health_cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, health_last_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, skill_point_last_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, invoke_gold_free_left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, invoke_gold_free_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, invoke_gold_n_total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, invoke_diamond_free_left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, invoke_diamond_free_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, invoke_diamond_n_total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, head_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, friend_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, crusade_point_),
  };
  db_user_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_base_info_descriptor_,
      db_user_base_info::default_instance_,
      db_user_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_base_info));
  db_user_sign_descriptor_ = file->message_type(21);
  static const int db_user_sign_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sign, sign_1_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sign, sign_n_reward_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sign, last_sign_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sign, add_signed_times_),
  };
  db_user_sign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_sign_descriptor_,
      db_user_sign::default_instance_,
      db_user_sign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_sign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_sign));
  db_user_novice_guide_array_descriptor_ = file->message_type(22);
  static const int db_user_novice_guide_array_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_novice_guide_array, guide_ids_),
  };
  db_user_novice_guide_array_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_novice_guide_array_descriptor_,
      db_user_novice_guide_array::default_instance_,
      db_user_novice_guide_array_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_novice_guide_array, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_novice_guide_array, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_novice_guide_array));
  db_user_friend_descriptor_ = file->message_type(23);
  static const int db_user_friend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_friend, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_friend, applies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_friend, confirms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_friend, recommends_),
  };
  db_user_friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_friend_descriptor_,
      db_user_friend::default_instance_,
      db_user_friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_friend));
  db_user_friend_friend_info_descriptor_ = db_user_friend_descriptor_->nested_type(0);
  static const int db_user_friend_friend_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_friend_friend_info, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_friend_friend_info, friend_give_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_friend_friend_info, me_give_timestamp_),
  };
  db_user_friend_friend_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_friend_friend_info_descriptor_,
      db_user_friend_friend_info::default_instance_,
      db_user_friend_friend_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_friend_friend_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_friend_friend_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_friend_friend_info));
  db_user_crusade_descriptor_ = file->message_type(24);
  static const int db_user_crusade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_crusade, me_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_crusade, enemy_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_crusade, wave_),
  };
  db_user_crusade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_crusade_descriptor_,
      db_user_crusade::default_instance_,
      db_user_crusade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_crusade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_crusade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_crusade));
  db_user_guild_info_descriptor_ = file->message_type(25);
  static const int db_user_guild_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info, leave_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info, applys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info, bosses_),
  };
  db_user_guild_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_guild_info_descriptor_,
      db_user_guild_info::default_instance_,
      db_user_guild_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_guild_info));
  db_user_guild_info_struct_apply_descriptor_ = db_user_guild_info_descriptor_->nested_type(0);
  static const int db_user_guild_info_struct_apply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_apply, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_apply, time_),
  };
  db_user_guild_info_struct_apply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_guild_info_struct_apply_descriptor_,
      db_user_guild_info_struct_apply::default_instance_,
      db_user_guild_info_struct_apply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_apply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_apply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_guild_info_struct_apply));
  db_user_guild_info_struct_boss_info_descriptor_ = db_user_guild_info_descriptor_->nested_type(1);
  static const int db_user_guild_info_struct_boss_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_boss_info, boss_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_boss_info, boss_lose_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_boss_info, last_reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_boss_info, last_day_reset_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_boss_info, dead_heros_),
  };
  db_user_guild_info_struct_boss_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_guild_info_struct_boss_info_descriptor_,
      db_user_guild_info_struct_boss_info::default_instance_,
      db_user_guild_info_struct_boss_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_boss_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_boss_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_guild_info_struct_boss_info));
  db_user_guild_info_struct_boss_info_struct_dead_hero_descriptor_ = db_user_guild_info_struct_boss_info_descriptor_->nested_type(0);
  static const int db_user_guild_info_struct_boss_info_struct_dead_hero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_boss_info_struct_dead_hero, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_boss_info_struct_dead_hero, dead_time_),
  };
  db_user_guild_info_struct_boss_info_struct_dead_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_guild_info_struct_boss_info_struct_dead_hero_descriptor_,
      db_user_guild_info_struct_boss_info_struct_dead_hero::default_instance_,
      db_user_guild_info_struct_boss_info_struct_dead_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_boss_info_struct_dead_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_guild_info_struct_boss_info_struct_dead_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_guild_info_struct_boss_info_struct_dead_hero));
  db_user_info_descriptor_ = file->message_type(26);
  static const int db_user_info_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, user_base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, sub_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, mails_received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, mails_unreceived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, shops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, buy_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, mission_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, mission_chains_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, arena_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, guide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, user_crusade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, user_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, guild_),
  };
  db_user_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      db_user_info_descriptor_,
      db_user_info::default_instance_,
      db_user_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(db_user_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(db_user_info));
  gs_dbs_user_info_req_descriptor_ = file->message_type(27);
  static const int gs_dbs_user_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_req, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_req, user_connect_id_),
  };
  gs_dbs_user_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_req_descriptor_,
      gs_dbs_user_info_req::default_instance_,
      gs_dbs_user_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_req));
  dbs_gs_user_info_res_descriptor_ = file->message_type(28);
  static const int dbs_gs_user_info_res_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_info_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_info_res, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_info_res, user_connect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_info_res, user_info_),
  };
  dbs_gs_user_info_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_user_info_res_descriptor_,
      dbs_gs_user_info_res::default_instance_,
      dbs_gs_user_info_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_info_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_info_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_user_info_res));
  gs_dbs_user_info_new_create_req_descriptor_ = file->message_type(29);
  static const int gs_dbs_user_info_new_create_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_new_create_req, user_info_),
  };
  gs_dbs_user_info_new_create_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_new_create_req_descriptor_,
      gs_dbs_user_info_new_create_req::default_instance_,
      gs_dbs_user_info_new_create_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_new_create_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_new_create_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_new_create_req));
  dbs_gs_user_info_new_create_res_descriptor_ = file->message_type(30);
  static const int dbs_gs_user_info_new_create_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_info_new_create_res, error_code_),
  };
  dbs_gs_user_info_new_create_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_user_info_new_create_res_descriptor_,
      dbs_gs_user_info_new_create_res::default_instance_,
      dbs_gs_user_info_new_create_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_info_new_create_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_info_new_create_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_user_info_new_create_res));
  gs_dbs_user_info_op_req_descriptor_ = file->message_type(31);
  static const int gs_dbs_user_info_op_req_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, sub_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, new_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, heros_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, hero_equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, hero_skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, op_mails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, shops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, shop_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, buy_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, new_arena_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, op_arena_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, clear_arena_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, arena_challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, new_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, novice_guide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, new_user_statis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, new_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, op_friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, op_crusade_),
  };
  gs_dbs_user_info_op_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_descriptor_,
      gs_dbs_user_info_op_req::default_instance_,
      gs_dbs_user_info_op_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req));
  gs_dbs_user_info_op_req_struct_op_base_info_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(0);
  static const int gs_dbs_user_info_op_req_struct_op_base_info_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, health_cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, health_last_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, skill_point_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, invoke_gold_free_left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, invoke_gold_free_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, invoke_gold_n_total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, invoke_diamond_free_left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, invoke_diamond_free_update_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, invoke_diamond_n_total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, head_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, friend_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, crusade_point_),
  };
  gs_dbs_user_info_op_req_struct_op_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_base_info_descriptor_,
      gs_dbs_user_info_op_req_struct_op_base_info::default_instance_,
      gs_dbs_user_info_op_req_struct_op_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_base_info));
  gs_dbs_user_info_op_req_struct_op_sub_task_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(1);
  static const int gs_dbs_user_info_op_req_struct_op_sub_task_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sub_task, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sub_task, sub_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sub_task, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sub_task, last_enter_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sub_task, last_day_enter_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sub_task, total_enter_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sub_task, last_reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sub_task, last_day_reset_num_),
  };
  gs_dbs_user_info_op_req_struct_op_sub_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_sub_task_descriptor_,
      gs_dbs_user_info_op_req_struct_op_sub_task::default_instance_,
      gs_dbs_user_info_op_req_struct_op_sub_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sub_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sub_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_sub_task));
  gs_dbs_user_info_op_req_struct_op_mail_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(2);
  static const int gs_dbs_user_info_op_req_struct_op_mail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_mail, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_mail, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_mail, mail_),
  };
  gs_dbs_user_info_op_req_struct_op_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_mail_descriptor_,
      gs_dbs_user_info_op_req_struct_op_mail::default_instance_,
      gs_dbs_user_info_op_req_struct_op_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_mail));
  gs_dbs_user_info_op_req_struct_new_hero_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(3);
  static const int gs_dbs_user_info_op_req_struct_new_hero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_hero, hero_),
  };
  gs_dbs_user_info_op_req_struct_new_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_new_hero_descriptor_,
      gs_dbs_user_info_op_req_struct_new_hero::default_instance_,
      gs_dbs_user_info_op_req_struct_new_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_new_hero));
  gs_dbs_user_info_op_req_struct_op_hero_base_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(4);
  static const int gs_dbs_user_info_op_req_struct_op_hero_base_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_base, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_base, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_base, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_base, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_base, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_base, cur_exp_),
  };
  gs_dbs_user_info_op_req_struct_op_hero_base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_hero_base_descriptor_,
      gs_dbs_user_info_op_req_struct_op_hero_base::default_instance_,
      gs_dbs_user_info_op_req_struct_op_hero_base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_hero_base));
  gs_dbs_user_info_op_req_struct_op_hero_equip_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(5);
  static const int gs_dbs_user_info_op_req_struct_op_hero_equip_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_equip, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_equip, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_equip, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_equip, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_equip, evolution_equip_id_),
  };
  gs_dbs_user_info_op_req_struct_op_hero_equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_hero_equip_descriptor_,
      gs_dbs_user_info_op_req_struct_op_hero_equip::default_instance_,
      gs_dbs_user_info_op_req_struct_op_hero_equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_hero_equip));
  gs_dbs_user_info_op_req_struct_op_hero_skill_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(6);
  static const int gs_dbs_user_info_op_req_struct_op_hero_skill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_skill, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_skill, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_skill, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_skill, level_),
  };
  gs_dbs_user_info_op_req_struct_op_hero_skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_hero_skill_descriptor_,
      gs_dbs_user_info_op_req_struct_op_hero_skill::default_instance_,
      gs_dbs_user_info_op_req_struct_op_hero_skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_hero_skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_hero_skill));
  gs_dbs_user_info_op_req_struct_op_shop_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(7);
  static const int gs_dbs_user_info_op_req_struct_op_shop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_shop, shop_op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_shop, shop_),
  };
  gs_dbs_user_info_op_req_struct_op_shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_shop_descriptor_,
      gs_dbs_user_info_op_req_struct_op_shop::default_instance_,
      gs_dbs_user_info_op_req_struct_op_shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_shop));
  gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType_descriptor_ = gs_dbs_user_info_op_req_struct_op_shop_descriptor_->enum_type(0);
  gs_dbs_user_info_op_req_struct_op_shop_item_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(8);
  static const int gs_dbs_user_info_op_req_struct_op_shop_item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_shop_item, shop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_shop_item, item_),
  };
  gs_dbs_user_info_op_req_struct_op_shop_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_shop_item_descriptor_,
      gs_dbs_user_info_op_req_struct_op_shop_item::default_instance_,
      gs_dbs_user_info_op_req_struct_op_shop_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_shop_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_shop_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_shop_item));
  gs_dbs_user_info_op_req_struct_op_mission_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(9);
  static const int gs_dbs_user_info_op_req_struct_op_mission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_mission, mission_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_mission, mission_chain_),
  };
  gs_dbs_user_info_op_req_struct_op_mission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_mission_descriptor_,
      gs_dbs_user_info_op_req_struct_op_mission::default_instance_,
      gs_dbs_user_info_op_req_struct_op_mission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_mission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_mission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_mission));
  gs_dbs_user_info_op_req_struct_new_arena_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(10);
  static const int gs_dbs_user_info_op_req_struct_new_arena_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_arena, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_arena, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_arena, last_challenge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_arena, last_day_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_arena, history_highest_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_arena, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_arena, last_time_buy_arena_challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_arena, last_day_buy_arena_challenge_num_),
  };
  gs_dbs_user_info_op_req_struct_new_arena_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_new_arena_descriptor_,
      gs_dbs_user_info_op_req_struct_new_arena::default_instance_,
      gs_dbs_user_info_op_req_struct_new_arena_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_arena, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_arena, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_new_arena));
  gs_dbs_user_info_op_req_struct_op_arena_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(11);
  static const int gs_dbs_user_info_op_req_struct_op_arena_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena, last_challenge_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena, last_day_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena, history_highest_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena, last_time_buy_arena_challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena, last_day_buy_arena_challenge_num_),
  };
  gs_dbs_user_info_op_req_struct_op_arena_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_arena_descriptor_,
      gs_dbs_user_info_op_req_struct_op_arena::default_instance_,
      gs_dbs_user_info_op_req_struct_op_arena_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_arena));
  gs_dbs_user_info_op_req_struct_clear_arena_team_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(12);
  static const int gs_dbs_user_info_op_req_struct_clear_arena_team_offsets_[1] = {
  };
  gs_dbs_user_info_op_req_struct_clear_arena_team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_clear_arena_team_descriptor_,
      gs_dbs_user_info_op_req_struct_clear_arena_team::default_instance_,
      gs_dbs_user_info_op_req_struct_clear_arena_team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_clear_arena_team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_clear_arena_team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_clear_arena_team));
  gs_dbs_user_info_op_req_struct_op_arena_challenge_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(13);
  static const int gs_dbs_user_info_op_req_struct_op_arena_challenge_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, attacker_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, attacker_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, attacker_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, attacker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, attacker_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, attacker_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, defender_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, defender_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, defender_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, defender_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, defender_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, defender_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, score_),
  };
  gs_dbs_user_info_op_req_struct_op_arena_challenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_arena_challenge_descriptor_,
      gs_dbs_user_info_op_req_struct_op_arena_challenge::default_instance_,
      gs_dbs_user_info_op_req_struct_op_arena_challenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_arena_challenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_arena_challenge));
  gs_dbs_user_info_op_req_struct_op_sign_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(14);
  static const int gs_dbs_user_info_op_req_struct_op_sign_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sign, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sign, sign_1_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sign, sign_n_reward_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sign, last_sign_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sign, add_signed_times_),
  };
  gs_dbs_user_info_op_req_struct_op_sign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_sign_descriptor_,
      gs_dbs_user_info_op_req_struct_op_sign::default_instance_,
      gs_dbs_user_info_op_req_struct_op_sign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_sign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_sign));
  gs_dbs_user_info_op_req_struct_new_sign_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(15);
  static const int gs_dbs_user_info_op_req_struct_new_sign_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_sign, sign_1_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_sign, sign_n_reward_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_sign, last_sign_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_sign, add_signed_times_),
  };
  gs_dbs_user_info_op_req_struct_new_sign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_new_sign_descriptor_,
      gs_dbs_user_info_op_req_struct_new_sign::default_instance_,
      gs_dbs_user_info_op_req_struct_new_sign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_sign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_sign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_new_sign));
  gs_dbs_user_info_op_req_struct_op_novice_guide_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(16);
  static const int gs_dbs_user_info_op_req_struct_op_novice_guide_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_novice_guide, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_novice_guide, guide_id_),
  };
  gs_dbs_user_info_op_req_struct_op_novice_guide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_novice_guide_descriptor_,
      gs_dbs_user_info_op_req_struct_op_novice_guide::default_instance_,
      gs_dbs_user_info_op_req_struct_op_novice_guide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_novice_guide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_novice_guide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_novice_guide));
  gs_dbs_user_info_op_req_struct_new_user_statis_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(17);
  static const int gs_dbs_user_info_op_req_struct_new_user_statis_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_user_statis, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_user_statis, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_user_statis, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_user_statis, occur_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_user_statis, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_user_statis, cur_id_),
  };
  gs_dbs_user_info_op_req_struct_new_user_statis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_new_user_statis_descriptor_,
      gs_dbs_user_info_op_req_struct_new_user_statis::default_instance_,
      gs_dbs_user_info_op_req_struct_new_user_statis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_user_statis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_user_statis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_new_user_statis));
  gs_dbs_user_info_op_req_struct_new_mail_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(18);
  static const int gs_dbs_user_info_op_req_struct_new_mail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_mail, mail_),
  };
  gs_dbs_user_info_op_req_struct_new_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_new_mail_descriptor_,
      gs_dbs_user_info_op_req_struct_new_mail::default_instance_,
      gs_dbs_user_info_op_req_struct_new_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_new_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_new_mail));
  gs_dbs_user_info_op_req_struct_op_friend_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(19);
  static const int gs_dbs_user_info_op_req_struct_op_friend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_friend, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_friend, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_friend, base_info_),
  };
  gs_dbs_user_info_op_req_struct_op_friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_friend_descriptor_,
      gs_dbs_user_info_op_req_struct_op_friend::default_instance_,
      gs_dbs_user_info_op_req_struct_op_friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_friend));
  gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE_descriptor_ = gs_dbs_user_info_op_req_struct_op_friend_descriptor_->enum_type(0);
  gs_dbs_user_info_op_req_struct_op_crusade_descriptor_ = gs_dbs_user_info_op_req_descriptor_->nested_type(20);
  static const int gs_dbs_user_info_op_req_struct_op_crusade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_crusade, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_crusade, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_crusade, hero_id_),
  };
  gs_dbs_user_info_op_req_struct_op_crusade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_crusade_descriptor_,
      gs_dbs_user_info_op_req_struct_op_crusade::default_instance_,
      gs_dbs_user_info_op_req_struct_op_crusade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_crusade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_crusade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_crusade));
  gs_dbs_user_info_op_req_struct_op_crusade_crusade_end_descriptor_ = gs_dbs_user_info_op_req_struct_op_crusade_descriptor_->nested_type(0);
  static const int gs_dbs_user_info_op_req_struct_op_crusade_crusade_end_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_crusade_crusade_end, me_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_crusade_crusade_end, enemy_heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_crusade_crusade_end, wave_),
  };
  gs_dbs_user_info_op_req_struct_op_crusade_crusade_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_info_op_req_struct_op_crusade_crusade_end_descriptor_,
      gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::default_instance_,
      gs_dbs_user_info_op_req_struct_op_crusade_crusade_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_crusade_crusade_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_info_op_req_struct_op_crusade_crusade_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_info_op_req_struct_op_crusade_crusade_end));
  gs_dbs_user_info_op_req_struct_op_crusade_CRUSADE_OP_TYPE_descriptor_ = gs_dbs_user_info_op_req_struct_op_crusade_descriptor_->enum_type(0);
  gs_dbs_user_info_op_req_EOPType_descriptor_ = gs_dbs_user_info_op_req_descriptor_->enum_type(0);
  dbs_gs_user_info_op_res_descriptor_ = file->message_type(32);
  static const int dbs_gs_user_info_op_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_info_op_res, error_code_),
  };
  dbs_gs_user_info_op_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_user_info_op_res_descriptor_,
      dbs_gs_user_info_op_res::default_instance_,
      dbs_gs_user_info_op_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_info_op_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_info_op_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_user_info_op_res));
  gs_dbs_user_new_mail_req_descriptor_ = file->message_type(33);
  static const int gs_dbs_user_new_mail_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_new_mail_req, send_user_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_new_mail_req, mail_),
  };
  gs_dbs_user_new_mail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_new_mail_req_descriptor_,
      gs_dbs_user_new_mail_req::default_instance_,
      gs_dbs_user_new_mail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_new_mail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_new_mail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_new_mail_req));
  dbs_gs_user_new_mail_res_descriptor_ = file->message_type(34);
  static const int dbs_gs_user_new_mail_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_new_mail_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_new_mail_res, user_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_new_mail_res, mail_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_new_mail_res, mail_attach_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_new_mail_res, mail_),
  };
  dbs_gs_user_new_mail_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_user_new_mail_res_descriptor_,
      dbs_gs_user_new_mail_res::default_instance_,
      dbs_gs_user_new_mail_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_new_mail_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_new_mail_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_user_new_mail_res));
  arena_mail_descriptor_ = file->message_type(35);
  static const int arena_mail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_mail, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_mail, mail_),
  };
  arena_mail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arena_mail_descriptor_,
      arena_mail::default_instance_,
      arena_mail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_mail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arena_mail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arena_mail));
  gs_dbs_user_new_arena_mail_req_descriptor_ = file->message_type(36);
  static const int gs_dbs_user_new_arena_mail_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_new_arena_mail_req, mails_),
  };
  gs_dbs_user_new_arena_mail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_new_arena_mail_req_descriptor_,
      gs_dbs_user_new_arena_mail_req::default_instance_,
      gs_dbs_user_new_arena_mail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_new_arena_mail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_new_arena_mail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_new_arena_mail_req));
  dbs_gs_user_new_arena_mail_res_descriptor_ = file->message_type(37);
  static const int dbs_gs_user_new_arena_mail_res_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_new_arena_mail_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_new_arena_mail_res, mails_),
  };
  dbs_gs_user_new_arena_mail_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_user_new_arena_mail_res_descriptor_,
      dbs_gs_user_new_arena_mail_res::default_instance_,
      dbs_gs_user_new_arena_mail_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_new_arena_mail_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_new_arena_mail_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_user_new_arena_mail_res));
  gs_dbs_edit_name_req_descriptor_ = file->message_type(38);
  static const int gs_dbs_edit_name_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_edit_name_req, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_edit_name_req, name_),
  };
  gs_dbs_edit_name_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_edit_name_req_descriptor_,
      gs_dbs_edit_name_req::default_instance_,
      gs_dbs_edit_name_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_edit_name_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_edit_name_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_edit_name_req));
  dbs_gs_edit_name_res_descriptor_ = file->message_type(39);
  static const int dbs_gs_edit_name_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_edit_name_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_edit_name_res, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_edit_name_res, name_),
  };
  dbs_gs_edit_name_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_edit_name_res_descriptor_,
      dbs_gs_edit_name_res::default_instance_,
      dbs_gs_edit_name_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_edit_name_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_edit_name_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_edit_name_res));
  gs_dbs_user_friend_op_req_descriptor_ = file->message_type(40);
  static const int gs_dbs_user_friend_op_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_friend_op_req, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_friend_op_req, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_friend_op_req, friend_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_friend_op_req, base_info_),
  };
  gs_dbs_user_friend_op_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_user_friend_op_req_descriptor_,
      gs_dbs_user_friend_op_req::default_instance_,
      gs_dbs_user_friend_op_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_friend_op_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_user_friend_op_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_user_friend_op_req));
  gs_dbs_user_friend_op_req_OP_TYPE_descriptor_ = gs_dbs_user_friend_op_req_descriptor_->enum_type(0);
  dbs_gs_user_friend_op_res_descriptor_ = file->message_type(41);
  static const int dbs_gs_user_friend_op_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_friend_op_res, error_code_),
  };
  dbs_gs_user_friend_op_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_user_friend_op_res_descriptor_,
      dbs_gs_user_friend_op_res::default_instance_,
      dbs_gs_user_friend_op_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_friend_op_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_user_friend_op_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_user_friend_op_res));
  gs_dbs_search_user_req_descriptor_ = file->message_type(42);
  static const int gs_dbs_search_user_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_search_user_req, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_search_user_req, search_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_search_user_req, search_name_),
  };
  gs_dbs_search_user_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_search_user_req_descriptor_,
      gs_dbs_search_user_req::default_instance_,
      gs_dbs_search_user_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_search_user_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_search_user_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_search_user_req));
  dbs_gs_search_user_res_descriptor_ = file->message_type(43);
  static const int dbs_gs_search_user_res_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_search_user_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_search_user_res, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_search_user_res, base_info_),
  };
  dbs_gs_search_user_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_search_user_res_descriptor_,
      dbs_gs_search_user_res::default_instance_,
      dbs_gs_search_user_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_search_user_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_search_user_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_search_user_res));
  gs_dbs_friend_offline_req_descriptor_ = file->message_type(44);
  static const int gs_dbs_friend_offline_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_friend_offline_req, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_friend_offline_req, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_friend_offline_req, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_friend_offline_req, friend_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_friend_offline_req, me_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_friend_offline_req, affirm_ids_),
  };
  gs_dbs_friend_offline_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_friend_offline_req_descriptor_,
      gs_dbs_friend_offline_req::default_instance_,
      gs_dbs_friend_offline_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_friend_offline_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_friend_offline_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_friend_offline_req));
  gs_dbs_friend_offline_req_OP_TYPE_descriptor_ = gs_dbs_friend_offline_req_descriptor_->enum_type(0);
  dbs_gs_friend_offline_res_descriptor_ = file->message_type(45);
  static const int dbs_gs_friend_offline_res_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_friend_offline_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_friend_offline_res, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_friend_offline_res, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_friend_offline_res, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_friend_offline_res, affirm_ids_),
  };
  dbs_gs_friend_offline_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_friend_offline_res_descriptor_,
      dbs_gs_friend_offline_res::default_instance_,
      dbs_gs_friend_offline_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_friend_offline_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_friend_offline_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_friend_offline_res));
  gs_dbs_rank_req_descriptor_ = file->message_type(46);
  static const int gs_dbs_rank_req_offsets_[1] = {
  };
  gs_dbs_rank_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_rank_req_descriptor_,
      gs_dbs_rank_req::default_instance_,
      gs_dbs_rank_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_rank_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_rank_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_rank_req));
  dbs_gs_rank_res_descriptor_ = file->message_type(47);
  static const int dbs_gs_rank_res_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res, level_brief_ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res, fight_power_brief_ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res, level_ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res, fight_power_ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res, arena_ranks_),
  };
  dbs_gs_rank_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_rank_res_descriptor_,
      dbs_gs_rank_res::default_instance_,
      dbs_gs_rank_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_rank_res));
  dbs_gs_rank_res_rank_brief_info_descriptor_ = dbs_gs_rank_res_descriptor_->nested_type(0);
  static const int dbs_gs_rank_res_rank_brief_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_brief_info, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_brief_info, user_id_),
  };
  dbs_gs_rank_res_rank_brief_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_rank_res_rank_brief_info_descriptor_,
      dbs_gs_rank_res_rank_brief_info::default_instance_,
      dbs_gs_rank_res_rank_brief_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_brief_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_brief_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_rank_res_rank_brief_info));
  dbs_gs_rank_res_rank_info_descriptor_ = dbs_gs_rank_res_descriptor_->nested_type(1);
  static const int dbs_gs_rank_res_rank_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_info, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_info, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_info, head_frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_info, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_info, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_info, fight_power_),
  };
  dbs_gs_rank_res_rank_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_rank_res_rank_info_descriptor_,
      dbs_gs_rank_res_rank_info::default_instance_,
      dbs_gs_rank_res_rank_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_rank_res_rank_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_rank_res_rank_info));
  gs_dbs_guild_op_req_descriptor_ = file->message_type(48);
  static const int gs_dbs_guild_op_req_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, new_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, update_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, delete_guild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, new_apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, delete_apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, new_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, update_members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, new_boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, update_boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, new_boss_attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, delete_boss_attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, new_dead_hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, delete_dead_hero_),
  };
  gs_dbs_guild_op_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_descriptor_,
      gs_dbs_guild_op_req::default_instance_,
      gs_dbs_guild_op_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req));
  gs_dbs_guild_op_req_struct_new_guild_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(0);
  static const int gs_dbs_guild_op_req_struct_new_guild_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_guild, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_guild, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_guild, creator_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_guild, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_guild, president_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_guild, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_guild, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_guild, contribution_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_guild, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_guild, announcement_),
  };
  gs_dbs_guild_op_req_struct_new_guild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_new_guild_descriptor_,
      gs_dbs_guild_op_req_struct_new_guild::default_instance_,
      gs_dbs_guild_op_req_struct_new_guild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_guild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_guild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_new_guild));
  gs_dbs_guild_op_req_struct_update_guild_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(1);
  static const int gs_dbs_guild_op_req_struct_update_guild_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_guild, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_guild, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_guild, president_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_guild, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_guild, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_guild, contribution_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_guild, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_guild, announcement_),
  };
  gs_dbs_guild_op_req_struct_update_guild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_update_guild_descriptor_,
      gs_dbs_guild_op_req_struct_update_guild::default_instance_,
      gs_dbs_guild_op_req_struct_update_guild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_guild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_guild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_update_guild));
  gs_dbs_guild_op_req_struct_delete_guild_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(2);
  static const int gs_dbs_guild_op_req_struct_delete_guild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_guild, guild_id_),
  };
  gs_dbs_guild_op_req_struct_delete_guild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_delete_guild_descriptor_,
      gs_dbs_guild_op_req_struct_delete_guild::default_instance_,
      gs_dbs_guild_op_req_struct_delete_guild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_guild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_guild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_delete_guild));
  gs_dbs_guild_op_req_struct_new_apply_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(3);
  static const int gs_dbs_guild_op_req_struct_new_apply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_apply, guild_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_apply, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_apply, time_),
  };
  gs_dbs_guild_op_req_struct_new_apply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_new_apply_descriptor_,
      gs_dbs_guild_op_req_struct_new_apply::default_instance_,
      gs_dbs_guild_op_req_struct_new_apply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_apply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_apply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_new_apply));
  gs_dbs_guild_op_req_struct_delete_apply_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(4);
  static const int gs_dbs_guild_op_req_struct_delete_apply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_apply, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_apply, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_apply, user_id_),
  };
  gs_dbs_guild_op_req_struct_delete_apply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_delete_apply_descriptor_,
      gs_dbs_guild_op_req_struct_delete_apply::default_instance_,
      gs_dbs_guild_op_req_struct_delete_apply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_apply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_apply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_delete_apply));
  gs_dbs_guild_op_req_struct_delete_apply_EOPType_descriptor_ = gs_dbs_guild_op_req_struct_delete_apply_descriptor_->enum_type(0);
  gs_dbs_guild_op_req_struct_new_member_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(5);
  static const int gs_dbs_guild_op_req_struct_new_member_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_member, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_member, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_member, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_member, join_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_member, leave_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_member, contribution_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_member, coin_),
  };
  gs_dbs_guild_op_req_struct_new_member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_new_member_descriptor_,
      gs_dbs_guild_op_req_struct_new_member::default_instance_,
      gs_dbs_guild_op_req_struct_new_member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_new_member));
  gs_dbs_guild_op_req_struct_update_member_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(6);
  static const int gs_dbs_guild_op_req_struct_update_member_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_member, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_member, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_member, join_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_member, leave_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_member, contribution_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_member, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_member, new_guild_id_),
  };
  gs_dbs_guild_op_req_struct_update_member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_update_member_descriptor_,
      gs_dbs_guild_op_req_struct_update_member::default_instance_,
      gs_dbs_guild_op_req_struct_update_member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_update_member));
  gs_dbs_guild_op_req_struct_new_boss_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(7);
  static const int gs_dbs_guild_op_req_struct_new_boss_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss, lose_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss, killer_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss, killed_num_),
  };
  gs_dbs_guild_op_req_struct_new_boss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_new_boss_descriptor_,
      gs_dbs_guild_op_req_struct_new_boss::default_instance_,
      gs_dbs_guild_op_req_struct_new_boss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_new_boss));
  gs_dbs_guild_op_req_struct_update_boss_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(8);
  static const int gs_dbs_guild_op_req_struct_update_boss_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_boss, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_boss, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_boss, lose_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_boss, killer_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_boss, killed_num_),
  };
  gs_dbs_guild_op_req_struct_update_boss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_update_boss_descriptor_,
      gs_dbs_guild_op_req_struct_update_boss::default_instance_,
      gs_dbs_guild_op_req_struct_update_boss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_boss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_update_boss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_update_boss));
  gs_dbs_guild_op_req_struct_new_boss_attacker_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(9);
  static const int gs_dbs_guild_op_req_struct_new_boss_attacker_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss_attacker, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss_attacker, boss_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss_attacker, boss_lose_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss_attacker, last_reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss_attacker, last_day_reset_num_),
  };
  gs_dbs_guild_op_req_struct_new_boss_attacker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_new_boss_attacker_descriptor_,
      gs_dbs_guild_op_req_struct_new_boss_attacker::default_instance_,
      gs_dbs_guild_op_req_struct_new_boss_attacker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss_attacker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_boss_attacker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_new_boss_attacker));
  gs_dbs_guild_op_req_struct_delete_boss_attacker_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(10);
  static const int gs_dbs_guild_op_req_struct_delete_boss_attacker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_boss_attacker, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_boss_attacker, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_boss_attacker, boss_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_boss_attacker, guild_id_),
  };
  gs_dbs_guild_op_req_struct_delete_boss_attacker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_delete_boss_attacker_descriptor_,
      gs_dbs_guild_op_req_struct_delete_boss_attacker::default_instance_,
      gs_dbs_guild_op_req_struct_delete_boss_attacker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_boss_attacker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_boss_attacker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_delete_boss_attacker));
  gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType_descriptor_ = gs_dbs_guild_op_req_struct_delete_boss_attacker_descriptor_->enum_type(0);
  gs_dbs_guild_op_req_struct_new_dead_hero_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(11);
  static const int gs_dbs_guild_op_req_struct_new_dead_hero_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_dead_hero, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_dead_hero, boss_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_dead_hero, heros_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_dead_hero, dead_time_),
  };
  gs_dbs_guild_op_req_struct_new_dead_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_new_dead_hero_descriptor_,
      gs_dbs_guild_op_req_struct_new_dead_hero::default_instance_,
      gs_dbs_guild_op_req_struct_new_dead_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_dead_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_new_dead_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_new_dead_hero));
  gs_dbs_guild_op_req_struct_delete_dead_hero_descriptor_ = gs_dbs_guild_op_req_descriptor_->nested_type(12);
  static const int gs_dbs_guild_op_req_struct_delete_dead_hero_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_dead_hero, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_dead_hero, boss_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_dead_hero, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_dead_hero, guild_id_),
  };
  gs_dbs_guild_op_req_struct_delete_dead_hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_dbs_guild_op_req_struct_delete_dead_hero_descriptor_,
      gs_dbs_guild_op_req_struct_delete_dead_hero::default_instance_,
      gs_dbs_guild_op_req_struct_delete_dead_hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_dead_hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_dbs_guild_op_req_struct_delete_dead_hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_dbs_guild_op_req_struct_delete_dead_hero));
  gs_dbs_guild_op_req_struct_delete_dead_hero_EOPType_descriptor_ = gs_dbs_guild_op_req_struct_delete_dead_hero_descriptor_->enum_type(0);
  dbs_gs_guild_op_res_descriptor_ = file->message_type(49);
  static const int dbs_gs_guild_op_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_guild_op_res, error_code_),
  };
  dbs_gs_guild_op_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dbs_gs_guild_op_res_descriptor_,
      dbs_gs_guild_op_res::default_instance_,
      dbs_gs_guild_op_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_guild_op_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dbs_gs_guild_op_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dbs_gs_guild_op_res));
  e_msg_gs_dbs_descriptor_ = file->enum_type(0);
  e_msg_dbs_gs_descriptor_ = file->enum_type(1);
  e_dbsgs_errorcode_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dbs_5fgs_5fproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_sub_task_descriptor_, &db_user_sub_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_sub_task_array_descriptor_, &db_user_sub_task_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_hero_equip_descriptor_, &db_user_hero_equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_hero_skill_descriptor_, &db_user_hero_skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_hero_descriptor_, &db_user_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_hero_array_descriptor_, &db_user_hero_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_mail_attach_descriptor_, &db_mail_attach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_mail_descriptor_, &db_user_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_mail_array_descriptor_, &db_user_mail_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_shop_buy_descriptor_, &db_user_shop_buy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_shop_buy_array_descriptor_, &db_user_shop_buy_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_shop_item_descriptor_, &db_user_shop_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_shop_descriptor_, &db_user_shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_shop_array_descriptor_, &db_user_shop_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_mission_event_descriptor_, &db_user_mission_event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_arena_log_descriptor_, &db_user_arena_log::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_arena_log_db_user_arena_log_hero_descriptor_, &db_user_arena_log_db_user_arena_log_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_mission_event_array_descriptor_, &db_user_mission_event_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_mission_chain_descriptor_, &db_user_mission_chain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_mission_chain_array_descriptor_, &db_user_mission_chain_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_arena_descriptor_, &db_user_arena::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_base_info_descriptor_, &db_user_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_sign_descriptor_, &db_user_sign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_novice_guide_array_descriptor_, &db_user_novice_guide_array::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_friend_descriptor_, &db_user_friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_friend_friend_info_descriptor_, &db_user_friend_friend_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_crusade_descriptor_, &db_user_crusade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_guild_info_descriptor_, &db_user_guild_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_guild_info_struct_apply_descriptor_, &db_user_guild_info_struct_apply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_guild_info_struct_boss_info_descriptor_, &db_user_guild_info_struct_boss_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_guild_info_struct_boss_info_struct_dead_hero_descriptor_, &db_user_guild_info_struct_boss_info_struct_dead_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    db_user_info_descriptor_, &db_user_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_req_descriptor_, &gs_dbs_user_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_user_info_res_descriptor_, &dbs_gs_user_info_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_new_create_req_descriptor_, &gs_dbs_user_info_new_create_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_user_info_new_create_res_descriptor_, &dbs_gs_user_info_new_create_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_descriptor_, &gs_dbs_user_info_op_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_base_info_descriptor_, &gs_dbs_user_info_op_req_struct_op_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_sub_task_descriptor_, &gs_dbs_user_info_op_req_struct_op_sub_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_mail_descriptor_, &gs_dbs_user_info_op_req_struct_op_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_new_hero_descriptor_, &gs_dbs_user_info_op_req_struct_new_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_hero_base_descriptor_, &gs_dbs_user_info_op_req_struct_op_hero_base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_hero_equip_descriptor_, &gs_dbs_user_info_op_req_struct_op_hero_equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_hero_skill_descriptor_, &gs_dbs_user_info_op_req_struct_op_hero_skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_shop_descriptor_, &gs_dbs_user_info_op_req_struct_op_shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_shop_item_descriptor_, &gs_dbs_user_info_op_req_struct_op_shop_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_mission_descriptor_, &gs_dbs_user_info_op_req_struct_op_mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_new_arena_descriptor_, &gs_dbs_user_info_op_req_struct_new_arena::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_arena_descriptor_, &gs_dbs_user_info_op_req_struct_op_arena::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_clear_arena_team_descriptor_, &gs_dbs_user_info_op_req_struct_clear_arena_team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_arena_challenge_descriptor_, &gs_dbs_user_info_op_req_struct_op_arena_challenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_sign_descriptor_, &gs_dbs_user_info_op_req_struct_op_sign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_new_sign_descriptor_, &gs_dbs_user_info_op_req_struct_new_sign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_novice_guide_descriptor_, &gs_dbs_user_info_op_req_struct_op_novice_guide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_new_user_statis_descriptor_, &gs_dbs_user_info_op_req_struct_new_user_statis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_new_mail_descriptor_, &gs_dbs_user_info_op_req_struct_new_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_friend_descriptor_, &gs_dbs_user_info_op_req_struct_op_friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_crusade_descriptor_, &gs_dbs_user_info_op_req_struct_op_crusade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_info_op_req_struct_op_crusade_crusade_end_descriptor_, &gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_user_info_op_res_descriptor_, &dbs_gs_user_info_op_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_new_mail_req_descriptor_, &gs_dbs_user_new_mail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_user_new_mail_res_descriptor_, &dbs_gs_user_new_mail_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arena_mail_descriptor_, &arena_mail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_new_arena_mail_req_descriptor_, &gs_dbs_user_new_arena_mail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_user_new_arena_mail_res_descriptor_, &dbs_gs_user_new_arena_mail_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_edit_name_req_descriptor_, &gs_dbs_edit_name_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_edit_name_res_descriptor_, &dbs_gs_edit_name_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_user_friend_op_req_descriptor_, &gs_dbs_user_friend_op_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_user_friend_op_res_descriptor_, &dbs_gs_user_friend_op_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_search_user_req_descriptor_, &gs_dbs_search_user_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_search_user_res_descriptor_, &dbs_gs_search_user_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_friend_offline_req_descriptor_, &gs_dbs_friend_offline_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_friend_offline_res_descriptor_, &dbs_gs_friend_offline_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_rank_req_descriptor_, &gs_dbs_rank_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_rank_res_descriptor_, &dbs_gs_rank_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_rank_res_rank_brief_info_descriptor_, &dbs_gs_rank_res_rank_brief_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_rank_res_rank_info_descriptor_, &dbs_gs_rank_res_rank_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_descriptor_, &gs_dbs_guild_op_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_new_guild_descriptor_, &gs_dbs_guild_op_req_struct_new_guild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_update_guild_descriptor_, &gs_dbs_guild_op_req_struct_update_guild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_delete_guild_descriptor_, &gs_dbs_guild_op_req_struct_delete_guild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_new_apply_descriptor_, &gs_dbs_guild_op_req_struct_new_apply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_delete_apply_descriptor_, &gs_dbs_guild_op_req_struct_delete_apply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_new_member_descriptor_, &gs_dbs_guild_op_req_struct_new_member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_update_member_descriptor_, &gs_dbs_guild_op_req_struct_update_member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_new_boss_descriptor_, &gs_dbs_guild_op_req_struct_new_boss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_update_boss_descriptor_, &gs_dbs_guild_op_req_struct_update_boss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_new_boss_attacker_descriptor_, &gs_dbs_guild_op_req_struct_new_boss_attacker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_delete_boss_attacker_descriptor_, &gs_dbs_guild_op_req_struct_delete_boss_attacker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_new_dead_hero_descriptor_, &gs_dbs_guild_op_req_struct_new_dead_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_dbs_guild_op_req_struct_delete_dead_hero_descriptor_, &gs_dbs_guild_op_req_struct_delete_dead_hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dbs_gs_guild_op_res_descriptor_, &dbs_gs_guild_op_res::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dbs_5fgs_5fproto_2eproto() {
  delete db_user_sub_task::default_instance_;
  delete db_user_sub_task_reflection_;
  delete db_user_sub_task_array::default_instance_;
  delete db_user_sub_task_array_reflection_;
  delete db_user_hero_equip::default_instance_;
  delete db_user_hero_equip_reflection_;
  delete db_user_hero_skill::default_instance_;
  delete db_user_hero_skill_reflection_;
  delete db_user_hero::default_instance_;
  delete db_user_hero_reflection_;
  delete db_user_hero_array::default_instance_;
  delete db_user_hero_array_reflection_;
  delete db_mail_attach::default_instance_;
  delete db_mail_attach_reflection_;
  delete db_user_mail::default_instance_;
  delete db_user_mail_reflection_;
  delete db_user_mail_array::default_instance_;
  delete db_user_mail_array_reflection_;
  delete db_user_shop_buy::default_instance_;
  delete db_user_shop_buy_reflection_;
  delete db_user_shop_buy_array::default_instance_;
  delete db_user_shop_buy_array_reflection_;
  delete db_user_shop_item::default_instance_;
  delete db_user_shop_item_reflection_;
  delete db_user_shop::default_instance_;
  delete db_user_shop_reflection_;
  delete db_user_shop_array::default_instance_;
  delete db_user_shop_array_reflection_;
  delete db_user_mission_event::default_instance_;
  delete db_user_mission_event_reflection_;
  delete db_user_arena_log::default_instance_;
  delete db_user_arena_log_reflection_;
  delete db_user_arena_log_db_user_arena_log_hero::default_instance_;
  delete db_user_arena_log_db_user_arena_log_hero_reflection_;
  delete db_user_mission_event_array::default_instance_;
  delete db_user_mission_event_array_reflection_;
  delete db_user_mission_chain::default_instance_;
  delete db_user_mission_chain_reflection_;
  delete db_user_mission_chain_array::default_instance_;
  delete db_user_mission_chain_array_reflection_;
  delete db_user_arena::default_instance_;
  delete db_user_arena_reflection_;
  delete db_user_base_info::default_instance_;
  delete db_user_base_info_reflection_;
  delete db_user_sign::default_instance_;
  delete db_user_sign_reflection_;
  delete db_user_novice_guide_array::default_instance_;
  delete db_user_novice_guide_array_reflection_;
  delete db_user_friend::default_instance_;
  delete db_user_friend_reflection_;
  delete db_user_friend_friend_info::default_instance_;
  delete db_user_friend_friend_info_reflection_;
  delete db_user_crusade::default_instance_;
  delete db_user_crusade_reflection_;
  delete db_user_guild_info::default_instance_;
  delete db_user_guild_info_reflection_;
  delete db_user_guild_info_struct_apply::default_instance_;
  delete db_user_guild_info_struct_apply_reflection_;
  delete db_user_guild_info_struct_boss_info::default_instance_;
  delete db_user_guild_info_struct_boss_info_reflection_;
  delete db_user_guild_info_struct_boss_info_struct_dead_hero::default_instance_;
  delete db_user_guild_info_struct_boss_info_struct_dead_hero_reflection_;
  delete db_user_info::default_instance_;
  delete db_user_info_reflection_;
  delete gs_dbs_user_info_req::default_instance_;
  delete gs_dbs_user_info_req_reflection_;
  delete dbs_gs_user_info_res::default_instance_;
  delete dbs_gs_user_info_res_reflection_;
  delete gs_dbs_user_info_new_create_req::default_instance_;
  delete gs_dbs_user_info_new_create_req_reflection_;
  delete dbs_gs_user_info_new_create_res::default_instance_;
  delete dbs_gs_user_info_new_create_res_reflection_;
  delete gs_dbs_user_info_op_req::default_instance_;
  delete gs_dbs_user_info_op_req_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_base_info::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_base_info_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_sub_task::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_sub_task_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_mail::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_mail_reflection_;
  delete gs_dbs_user_info_op_req_struct_new_hero::default_instance_;
  delete gs_dbs_user_info_op_req_struct_new_hero_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_hero_base::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_hero_base_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_hero_equip::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_hero_equip_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_hero_skill::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_hero_skill_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_shop::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_shop_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_shop_item::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_shop_item_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_mission::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_mission_reflection_;
  delete gs_dbs_user_info_op_req_struct_new_arena::default_instance_;
  delete gs_dbs_user_info_op_req_struct_new_arena_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_arena::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_arena_reflection_;
  delete gs_dbs_user_info_op_req_struct_clear_arena_team::default_instance_;
  delete gs_dbs_user_info_op_req_struct_clear_arena_team_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_arena_challenge::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_arena_challenge_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_sign::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_sign_reflection_;
  delete gs_dbs_user_info_op_req_struct_new_sign::default_instance_;
  delete gs_dbs_user_info_op_req_struct_new_sign_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_novice_guide::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_novice_guide_reflection_;
  delete gs_dbs_user_info_op_req_struct_new_user_statis::default_instance_;
  delete gs_dbs_user_info_op_req_struct_new_user_statis_reflection_;
  delete gs_dbs_user_info_op_req_struct_new_mail::default_instance_;
  delete gs_dbs_user_info_op_req_struct_new_mail_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_friend::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_friend_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_crusade::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_crusade_reflection_;
  delete gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::default_instance_;
  delete gs_dbs_user_info_op_req_struct_op_crusade_crusade_end_reflection_;
  delete dbs_gs_user_info_op_res::default_instance_;
  delete dbs_gs_user_info_op_res_reflection_;
  delete gs_dbs_user_new_mail_req::default_instance_;
  delete gs_dbs_user_new_mail_req_reflection_;
  delete dbs_gs_user_new_mail_res::default_instance_;
  delete dbs_gs_user_new_mail_res_reflection_;
  delete arena_mail::default_instance_;
  delete arena_mail_reflection_;
  delete gs_dbs_user_new_arena_mail_req::default_instance_;
  delete gs_dbs_user_new_arena_mail_req_reflection_;
  delete dbs_gs_user_new_arena_mail_res::default_instance_;
  delete dbs_gs_user_new_arena_mail_res_reflection_;
  delete gs_dbs_edit_name_req::default_instance_;
  delete gs_dbs_edit_name_req_reflection_;
  delete dbs_gs_edit_name_res::default_instance_;
  delete dbs_gs_edit_name_res_reflection_;
  delete gs_dbs_user_friend_op_req::default_instance_;
  delete gs_dbs_user_friend_op_req_reflection_;
  delete dbs_gs_user_friend_op_res::default_instance_;
  delete dbs_gs_user_friend_op_res_reflection_;
  delete gs_dbs_search_user_req::default_instance_;
  delete gs_dbs_search_user_req_reflection_;
  delete dbs_gs_search_user_res::default_instance_;
  delete dbs_gs_search_user_res_reflection_;
  delete gs_dbs_friend_offline_req::default_instance_;
  delete gs_dbs_friend_offline_req_reflection_;
  delete dbs_gs_friend_offline_res::default_instance_;
  delete dbs_gs_friend_offline_res_reflection_;
  delete gs_dbs_rank_req::default_instance_;
  delete gs_dbs_rank_req_reflection_;
  delete dbs_gs_rank_res::default_instance_;
  delete dbs_gs_rank_res_reflection_;
  delete dbs_gs_rank_res_rank_brief_info::default_instance_;
  delete dbs_gs_rank_res_rank_brief_info_reflection_;
  delete dbs_gs_rank_res_rank_info::default_instance_;
  delete dbs_gs_rank_res_rank_info_reflection_;
  delete gs_dbs_guild_op_req::default_instance_;
  delete gs_dbs_guild_op_req_reflection_;
  delete gs_dbs_guild_op_req_struct_new_guild::default_instance_;
  delete gs_dbs_guild_op_req_struct_new_guild_reflection_;
  delete gs_dbs_guild_op_req_struct_update_guild::default_instance_;
  delete gs_dbs_guild_op_req_struct_update_guild_reflection_;
  delete gs_dbs_guild_op_req_struct_delete_guild::default_instance_;
  delete gs_dbs_guild_op_req_struct_delete_guild_reflection_;
  delete gs_dbs_guild_op_req_struct_new_apply::default_instance_;
  delete gs_dbs_guild_op_req_struct_new_apply_reflection_;
  delete gs_dbs_guild_op_req_struct_delete_apply::default_instance_;
  delete gs_dbs_guild_op_req_struct_delete_apply_reflection_;
  delete gs_dbs_guild_op_req_struct_new_member::default_instance_;
  delete gs_dbs_guild_op_req_struct_new_member_reflection_;
  delete gs_dbs_guild_op_req_struct_update_member::default_instance_;
  delete gs_dbs_guild_op_req_struct_update_member_reflection_;
  delete gs_dbs_guild_op_req_struct_new_boss::default_instance_;
  delete gs_dbs_guild_op_req_struct_new_boss_reflection_;
  delete gs_dbs_guild_op_req_struct_update_boss::default_instance_;
  delete gs_dbs_guild_op_req_struct_update_boss_reflection_;
  delete gs_dbs_guild_op_req_struct_new_boss_attacker::default_instance_;
  delete gs_dbs_guild_op_req_struct_new_boss_attacker_reflection_;
  delete gs_dbs_guild_op_req_struct_delete_boss_attacker::default_instance_;
  delete gs_dbs_guild_op_req_struct_delete_boss_attacker_reflection_;
  delete gs_dbs_guild_op_req_struct_new_dead_hero::default_instance_;
  delete gs_dbs_guild_op_req_struct_new_dead_hero_reflection_;
  delete gs_dbs_guild_op_req_struct_delete_dead_hero::default_instance_;
  delete gs_dbs_guild_op_req_struct_delete_dead_hero_reflection_;
  delete dbs_gs_guild_op_res::default_instance_;
  delete dbs_gs_guild_op_res_reflection_;
}

void protobuf_AddDesc_dbs_5fgs_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_gs_5fc_5fproto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022dbs_gs_proto.proto\032\020gs_c_proto.proto\"\314"
    "\001\n\020db_user_sub_task\022\026\n\013sub_task_id\030\001 \002(\r"
    ":\0010\022\017\n\004star\030\002 \002(\r:\0010\022\037\n\024last_enter_times"
    "tamp\030\003 \002(\r:\0010\022\035\n\022last_day_enter_num\030\004 \002("
    "\r:\0010\022\032\n\017total_enter_num\030\005 \002(\r:\0010\022\027\n\017last"
    "_reset_time\030\006 \002(\r\022\032\n\022last_day_reset_num\030"
    "\007 \002(\r\":\n\026db_user_sub_task_array\022 \n\005items"
    "\030\001 \003(\0132\021.db_user_sub_task\";\n\022db_user_her"
    "o_equip\022\023\n\010equip_id\030\001 \002(\r:\0010\022\020\n\005level\030\002 "
    "\002(\r:\0010\"P\n\022db_user_hero_skill\022+\n\004type\030\001 \002"
    "(\0162\035.user_hero_skill.e_skill_type\022\r\n\005lev"
    "el\030\002 \002(\r\"\277\001\n\014db_user_hero\022\017\n\007hero_id\030\001 \002"
    "(\r\022\014\n\004star\030\002 \002(\r\022\017\n\007quality\030\003 \002(\r\022\r\n\005lev"
    "el\030\004 \002(\r\022\017\n\007cur_exp\030\005 \002(\r\022\025\n\rgot_timesta"
    "mp\030\006 \002(\r\022#\n\006equips\030\007 \003(\0132\023.db_user_hero_"
    "equip\022#\n\006skills\030\010 \003(\0132\023.db_user_hero_ski"
    "ll\"2\n\022db_user_hero_array\022\034\n\005items\030\001 \003(\0132"
    "\r.db_user_hero\"J\n\016db_mail_attach\022\021\n\tatta"
    "ch_id\030\001 \002(\r\022%\n\007element\030\002 \002(\0132\024.struct_ga"
    "me_element\"\235\001\n\014db_user_mail\022\017\n\007mail_id\030\001"
    " \002(\r\022\021\n\tsend_time\030\002 \002(\r\022\030\n\004type\030\003 \002(\0162\n."
    "MAIL_TYPE\022\017\n\007content\030\004 \001(\t\022\034\n\006status\030\005 \002"
    "(\0162\014.MAIL_STATUS\022 \n\007attachs\030\006 \003(\0132\017.db_m"
    "ail_attach\"2\n\022db_user_mail_array\022\034\n\005mail"
    "s\030\001 \003(\0132\r.db_user_mail\"\220\001\n\020db_user_shop_"
    "buy\0227\n\014element_type\030\001 \002(\0162!.struct_game_"
    "element.EELEMENTTYPE\022\022\n\nelement_id\030\002 \002(\r"
    "\022\030\n\020last_day_buy_num\030\003 \002(\r\022\025\n\rlast_buy_t"
    "ime\030\004 \002(\r\":\n\026db_user_shop_buy_array\022 \n\005i"
    "tems\030\001 \003(\0132\021.db_user_shop_buy\"\242\002\n\021db_use"
    "r_shop_item\022\013\n\003pos\030\001 \002(\r\0227\n\014element_type"
    "\030\002 \002(\0162!.struct_game_element.EELEMENTTYP"
    "E\022\022\n\nelement_id\030\003 \002(\r\022\023\n\013element_num\030\004 \002"
    "(\r\0227\n\014consume_type\030\005 \002(\0162!.struct_game_e"
    "lement.EELEMENTTYPE\022\022\n\nconsume_id\030\006 \002(\r\022"
    "\023\n\013consume_num\030\007 \002(\r\022+\n\004flag\030\010 \002(\0162\035.use"
    "r_shop_item.ESHOPITEMFLAG\022\017\n\007is_sold\030\t \002"
    "(\r\"\211\002\n\014db_user_shop\022\'\n\tshop_type\030\001 \002(\0162\024"
    ".user_shop.ESHOPTYPE\022\036\n\026last_auto_refres"
    "h_time\030\002 \002(\r\022 \n\030last_manual_refresh_time"
    "\030\003 \002(\r\022#\n\033last_day_manual_refresh_num\030\004 "
    "\002(\r\022#\n\033random_open_start_timestamp\030\005 \002(\r"
    "\022!\n\031random_open_end_timestamp\030\006 \002(\r\022!\n\005i"
    "tems\030\007 \003(\0132\022.db_user_shop_item\"2\n\022db_use"
    "r_shop_array\022\034\n\005items\030\001 \003(\0132\r.db_user_sh"
    "op\"\335\010\n\025db_user_mission_event\022E\n\022mission_"
    "event_type\030\001 \002(\0162).db_user_mission_event"
    ".MISSION_EVENT_TYPE\022\036\n\026mission_event_sub"
    "_type\030\002 \002(\r\022\035\n\025last_update_timestamp\030\003 \001"
    "(\r\022\026\n\016last_day_value\030\004 \001(\r\022\023\n\013total_valu"
    "e\030\005 \001(\r\"\324\005\n\022MISSION_EVENT_TYPE\022\007\n\003min\020\000\022"
    "\022\n\016SKILL_LEVEL_UP\020\001\022\014\n\010RECHARGE\020\002\022\026\n\022COM"
    "MON_FB_COMPLETE\020\003\022\031\n\025COMMON_FB_ALL_THROU"
    "GH\020\004\022$\n COMMON_FB_ALL_THROUGH_THREE_STAR"
    "\020\005\022\022\n\016EQUIP_LEVEL_UP\020\006\022 \n\034RECHARGE_MISSI"
    "ON_MONTH_CARD1\020\007\022\026\n\022GIVE_FRIEND_HEALTH\020\010"
    "\022\020\n\014HERO_COLLECT\020\t\022\017\n\013HEALTH_MEAL\020\n\022\016\n\nG"
    "ET_REWARD\020\013\022 \n\034RECHARGE_MISSION_MONTH_CA"
    "RD2\020\014\022\020\n\014MISSION_MAIN\020\r\022\020\n\014MISSION_FREE\020"
    "\016\022\014\n\010ACTIVITY\020\017\022\n\n\006JI_TAN\020\020\022\023\n\017ARENA_CHA"
    "LLENGE\020\021\022\017\n\013SHI_LIAN_TA\020\022\022\013\n\007CRUSADE\020\023\022\014"
    "\n\010LEVEL_UP\020\024\022\014\n\010BUY_GOLD\020\025\022\013\n\007FB_FAIL\020\026\022"
    "&\n\"COMPLETE_CHAPTER_ALL_FB_THREE_STAR\020\027\022"
    "\022\n\016ARENA_RANK_TOP\020\030\022\027\n\023COMPLETE_CHAPTER_"
    "FB\020\031\022\017\n\nBuy_Health\020\350\007\022\024\n\017Buy_Skill_Point"
    "\020\351\007\022\n\n\005Login\020\352\007\022\017\n\nDel_Friend\020\353\007\022\016\n\tHero"
    "_Life\020\354\007\022\022\n\rCrusade_Reset\020\355\007\022\033\n\026Crusade_"
    "Promote_Reward\020\356\007\022\031\n\024Crusade_Refresh_Buf"
    "f\020\357\007\022\010\n\003max\020\360\007\"\271\001\n\026MISSION_EVENT_SUB_TYP"
    "E\022\007\n\003MIN\020\000\022\010\n\004NONE\020\001\022\026\n\022HERO_QUALITY_GRE"
    "EN\020\002\022\025\n\021HERO_QUALITY_BLUE\020\003\022\022\n\016HERO_STAR"
    "_FOUR\020\004\022\023\n\017HERO_STAR_THREE\020\005\022\020\n\014PLAYER_L"
    "EVEL\020\006\022\r\n\tVIP_LEVEL\020\007\022\n\n\006HUAXIA\020\010\022\007\n\003MAX"
    "\020\t\"\345\002\n\021db_user_arena_log\022\027\n\017is_attacker_"
    "win\030\001 \002(\010\022\014\n\004time\030\002 \002(\r\022\026\n\016is_me_attacke"
    "r\030\003 \002(\010\022\017\n\007me_rank\030\004 \002(\r\022\025\n\rmatch_user_i"
    "d\030\005 \002(\r\022\022\n\nmatch_rank\030\006 \002(\r\022\023\n\013match_pow"
    "er\030\007 \002(\r\022\022\n\nmatch_name\030\010 \002(\t\022\023\n\013match_le"
    "vel\030\t \002(\r\022>\n\013match_heros\030\n \003(\0132).db_user"
    "_arena_log.db_user_arena_log_hero\032W\n\026db_"
    "user_arena_log_hero\022\017\n\007hero_id\030\001 \002(\r\022\017\n\007"
    "quality\030\002 \002(\r\022\r\n\005level\030\003 \002(\r\022\014\n\004star\030\004 \002"
    "(\r\"E\n\033db_user_mission_event_array\022&\n\006eve"
    "nts\030\001 \003(\0132\026.db_user_mission_event\"x\n\025db_"
    "user_mission_chain\022\030\n\020mission_chain_id\030\001"
    " \002(\r\022\"\n\032last_get_reward_mission_id\030\002 \002(\r"
    "\022!\n\031last_get_reward_timestamp\030\003 \002(\r\"E\n\033d"
    "b_user_mission_chain_array\022&\n\006chains\030\001 \003"
    "(\0132\026.db_user_mission_chain\"\211\002\n\rdb_user_a"
    "rena\022\014\n\004rank\030\001 \002(\r\022\r\n\005score\030\002 \002(\r\022\033\n\023las"
    "t_challenge_time\030\003 \002(\r\022\036\n\026last_day_chall"
    "enge_num\030\004 \002(\r\022\034\n\024history_highest_rank\030\005"
    " \002(\r\022\r\n\005heros\030\006 \003(\r\022%\n\035last_time_buy_are"
    "na_challenge\030\007 \002(\r\022(\n last_day_buy_arena"
    "_challenge_num\030\010 \002(\r\022 \n\004logs\030\t \003(\0132\022.db_"
    "user_arena_log\"\330\004\n\021db_user_base_info\022\017\n\007"
    "user_id\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\r\n\005level\030\003 \002"
    "(\r\022\013\n\003exp\030\004 \002(\r\022\013\n\003vip\030\005 \002(\r\022\017\n\007diamond\030"
    "\006 \002(\r\022\014\n\004gold\030\007 \002(\r\022\022\n\nhealth_cur\030\010 \002(\r\022"
    "$\n\034health_last_update_timestamp\030\t \002(\r\022\023\n"
    "\013skill_point\030\n \002(\r\022)\n!skill_point_last_u"
    "pdate_timestamp\030\013 \002(\r\022!\n\031invoke_gold_fre"
    "e_left_num\030\014 \002(\r\022)\n!invoke_gold_free_upd"
    "ate_timestamp\030\r \002(\r\022\037\n\027invoke_gold_n_tot"
    "al_num\030\016 \002(\r\022$\n\034invoke_diamond_free_left"
    "_num\030\017 \002(\r\022,\n$invoke_diamond_free_update"
    "_timestamp\030\020 \002(\r\022\"\n\032invoke_diamond_n_tot"
    "al_num\030\021 \002(\r\022\017\n\007head_id\030\022 \002(\r\022\025\n\rhead_fr"
    "ame_id\030\023 \002(\r\022\024\n\014friend_point\030\024 \002(\r\022\021\n\tsi"
    "gnature\030\025 \002(\t\022\023\n\013fight_power\030\026 \002(\r\022\025\n\rcr"
    "usade_point\030\027 \002(\r\"t\n\014db_user_sign\022\024\n\014sig"
    "n_1_times\030\001 \002(\r\022\034\n\024sign_n_reward_status\030"
    "\002 \002(\t\022\026\n\016last_sign_time\030\003 \002(\r\022\030\n\020add_sig"
    "ned_times\030\004 \002(\r\"/\n\032db_user_novice_guide_"
    "array\022\021\n\tguide_ids\030\016 \003(\r\"\235\002\n\016db_user_fri"
    "end\022,\n\007friends\030\001 \003(\0132\033.db_user_friend.fr"
    "iend_info\022\"\n\007applies\030\002 \003(\0132\021.friend_base"
    "_info\022#\n\010confirms\030\003 \003(\0132\021.friend_base_in"
    "fo\022%\n\nrecommends\030\004 \003(\0132\021.friend_base_inf"
    "o\032m\n\013friend_info\022$\n\tbase_info\030\001 \002(\0132\021.fr"
    "iend_base_info\022\035\n\025friend_give_timestamp\030"
    "\002 \002(\r\022\031\n\021me_give_timestamp\030\003 \002(\r\"~\n\017db_u"
    "ser_crusade\022,\n\010me_heros\030\001 \003(\0132\032.user_cru"
    "sade.crusade_hero\022/\n\013enemy_heros\030\002 \003(\0132\032"
    ".user_crusade.crusade_hero\022\014\n\004wave\030\003 \002(\r"
    "\"\377\003\n\022db_user_guild_info\022\020\n\010guild_id\030\001 \002("
    "\r\022#\n\010position\030\002 \002(\0162\021.e_guild_position\022\022"
    "\n\nleave_time\030\003 \002(\r\022\014\n\004coin\030\004 \002(\r\0220\n\006appl"
    "ys\030\005 \003(\0132 .db_user_guild_info.struct_app"
    "ly\0224\n\006bosses\030\006 \003(\0132$.db_user_guild_info."
    "struct_boss_info\032.\n\014struct_apply\022\020\n\010guil"
    "d_id\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\032\367\001\n\020struct_boss"
    "_info\022\025\n\rboss_position\030\001 \002(\r\022\024\n\014boss_los"
    "e_hp\030\002 \002(\r\022\027\n\017last_reset_time\030\003 \002(\r\022\032\n\022l"
    "ast_day_reset_num\030\004 \002(\r\022I\n\ndead_heros\030\005 "
    "\003(\01325.db_user_guild_info.struct_boss_inf"
    "o.struct_dead_hero\0326\n\020struct_dead_hero\022\017"
    "\n\007hero_id\030\001 \002(\r\022\021\n\tdead_time\030\002 \002(\r\"\247\005\n\014d"
    "b_user_info\022*\n\016user_base_info\030\001 \002(\0132\022.db"
    "_user_base_info\022*\n\tsub_tasks\030\002 \001(\0132\027.db_"
    "user_sub_task_array\022\"\n\005heros\030\003 \001(\0132\023.db_"
    "user_hero_array\022)\n\005items\030\004 \001(\0132\032.struct_"
    "game_element_array\022+\n\016mails_received\030\005 \001"
    "(\0132\023.db_user_mail_array\022-\n\020mails_unrecei"
    "ved\030\006 \001(\0132\023.db_user_mail_array\022\"\n\005shops\030"
    "\007 \001(\0132\023.db_user_shop_array\022*\n\tbuy_items\030"
    "\010 \001(\0132\027.db_user_shop_buy_array\0224\n\016missio"
    "n_events\030\n \001(\0132\034.db_user_mission_event_a"
    "rray\0224\n\016mission_chains\030\013 \001(\0132\034.db_user_m"
    "ission_chain_array\022\035\n\005arena\030\014 \001(\0132\016.db_u"
    "ser_arena\022\033\n\004sign\030\r \001(\0132\r.db_user_sign\022*"
    "\n\005guide\030\016 \001(\0132\033.db_user_novice_guide_arr"
    "ay\022&\n\014user_crusade\030\017 \001(\0132\020.db_user_crusa"
    "de\022$\n\013user_friend\030\020 \001(\0132\017.db_user_friend"
    "\022\"\n\005guild\030\021 \001(\0132\023.db_user_guild_info\"@\n\024"
    "gs_dbs_user_info_req\022\017\n\007user_id\030\001 \002(\r\022\027\n"
    "\017user_connect_id\030\002 \002(\014\"v\n\024dbs_gs_user_in"
    "fo_res\022\022\n\nerror_code\030\001 \002(\r\022\017\n\007user_id\030\002 "
    "\002(\r\022\027\n\017user_connect_id\030\003 \002(\014\022 \n\tuser_inf"
    "o\030\004 \001(\0132\r.db_user_info\"C\n\037gs_dbs_user_in"
    "fo_new_create_req\022 \n\tuser_info\030\001 \002(\0132\r.d"
    "b_user_info\"5\n\037dbs_gs_user_info_new_crea"
    "te_res\022\022\n\nerror_code\030\001 \002(\r\"\314-\n\027gs_dbs_us"
    "er_info_op_req\022\017\n\007user_id\030\001 \002(\r\022\?\n\tbase_"
    "info\030\002 \001(\0132,.gs_dbs_user_info_op_req.str"
    "uct_op_base_info\022=\n\010sub_task\030\003 \001(\0132+.gs_"
    "dbs_user_info_op_req.struct_op_sub_task\022"
    ";\n\tnew_heros\030\004 \003(\0132(.gs_dbs_user_info_op"
    "_req.struct_new_hero\022@\n\nheros_base\030\005 \003(\013"
    "2,.gs_dbs_user_info_op_req.struct_op_her"
    "o_base\022B\n\013hero_equips\030\006 \003(\0132-.gs_dbs_use"
    "r_info_op_req.struct_op_hero_equip\022B\n\013he"
    "ro_skills\030\007 \003(\0132-.gs_dbs_user_info_op_re"
    "q.struct_op_hero_skill\022#\n\005items\030\010 \003(\0132\024."
    "struct_game_element\0229\n\010op_mails\030\t \003(\0132\'."
    "gs_dbs_user_info_op_req.struct_op_mail\0226"
    "\n\005shops\030\n \003(\0132\'.gs_dbs_user_info_op_req."
    "struct_op_shop\022@\n\nshop_items\030\013 \003(\0132,.gs_"
    "dbs_user_info_op_req.struct_op_shop_item"
    "\022$\n\tbuy_items\030\014 \003(\0132\021.db_user_shop_buy\022<"
    "\n\tnew_arena\030\r \001(\0132).gs_dbs_user_info_op_"
    "req.struct_new_arena\022:\n\010op_arena\030\016 \001(\0132("
    ".gs_dbs_user_info_op_req.struct_op_arena"
    "\022J\n\020clear_arena_team\030\017 \001(\01320.gs_dbs_user"
    "_info_op_req.struct_clear_arena_team\022K\n\017"
    "arena_challenge\030\020 \001(\01322.gs_dbs_user_info"
    "_op_req.struct_op_arena_challenge\022<\n\010mis"
    "sions\030\021 \003(\0132*.gs_dbs_user_info_op_req.st"
    "ruct_op_mission\0225\n\004sign\030\022 \001(\0132\'.gs_dbs_u"
    "ser_info_op_req.struct_op_sign\022:\n\010new_si"
    "gn\030\023 \001(\0132(.gs_dbs_user_info_op_req.struc"
    "t_new_sign\022E\n\014novice_guide\030\024 \001(\0132/.gs_db"
    "s_user_info_op_req.struct_op_novice_guid"
    "e\022H\n\017new_user_statis\030\025 \001(\0132/.gs_dbs_user"
    "_info_op_req.struct_new_user_statis\022:\n\010n"
    "ew_mail\030\026 \001(\0132(.gs_dbs_user_info_op_req."
    "struct_new_mail\022=\n\nop_friends\030\027 \003(\0132).gs"
    "_dbs_user_info_op_req.struct_op_friend\022>"
    "\n\nop_crusade\030\030 \001(\0132*.gs_dbs_user_info_op"
    "_req.struct_op_crusade\032\367\004\n\023struct_op_bas"
    "e_info\0221\n\007op_type\030\001 \002(\0162 .gs_dbs_user_in"
    "fo_op_req.EOPType\022\014\n\004name\030\002 \001(\t\022\r\n\005level"
    "\030\003 \001(\r\022\013\n\003exp\030\004 \001(\r\022\013\n\003vip\030\005 \001(\r\022\017\n\007diam"
    "ond\030\006 \001(\r\022\014\n\004gold\030\007 \001(\r\022\022\n\nhealth_cur\030\010 "
    "\001(\r\022$\n\034health_last_update_timestamp\030\t \001("
    "\r\022\023\n\013skill_point\030\n \001(\r\022$\n\034skill_point_up"
    "date_timestamp\030\013 \001(\r\022!\n\031invoke_gold_free"
    "_left_num\030\014 \001(\r\022)\n!invoke_gold_free_upda"
    "te_timestamp\030\r \001(\r\022\037\n\027invoke_gold_n_tota"
    "l_num\030\016 \001(\r\022$\n\034invoke_diamond_free_left_"
    "num\030\017 \001(\r\022,\n$invoke_diamond_free_update_"
    "timestamp\030\020 \001(\r\022\"\n\032invoke_diamond_n_tota"
    "l_num\030\021 \001(\r\022\017\n\007head_id\030\022 \001(\r\022\025\n\rhead_fra"
    "me_id\030\023 \001(\r\022\024\n\014friend_point\030\024 \001(\r\022\021\n\tsig"
    "nature\030\025 \001(\t\022\023\n\013fight_power\030\026 \001(\r\022\025\n\rcru"
    "sade_point\030\027 \001(\r\032\362\001\n\022struct_op_sub_task\022"
    "1\n\007op_type\030\001 \002(\0162 .gs_dbs_user_info_op_r"
    "eq.EOPType\022\023\n\013sub_task_id\030\002 \002(\r\022\014\n\004star\030"
    "\003 \001(\r\022\034\n\024last_enter_timestamp\030\004 \001(\r\022\032\n\022l"
    "ast_day_enter_num\030\005 \001(\r\022\027\n\017total_enter_n"
    "um\030\006 \001(\r\022\027\n\017last_reset_time\030\007 \001(\r\022\032\n\022las"
    "t_day_reset_num\030\010 \001(\r\032q\n\016struct_op_mail\022"
    "\017\n\007mail_id\030\001 \001(\r\0221\n\007op_type\030\002 \002(\0162 .gs_d"
    "bs_user_info_op_req.EOPType\022\033\n\004mail\030\003 \001("
    "\0132\r.db_user_mail\032.\n\017struct_new_hero\022\033\n\004h"
    "ero\030\001 \002(\0132\r.db_user_hero\032\230\001\n\023struct_op_h"
    "ero_base\0221\n\007op_type\030\001 \002(\0162 .gs_dbs_user_"
    "info_op_req.EOPType\022\017\n\007hero_id\030\002 \002(\r\022\014\n\004"
    "star\030\003 \001(\r\022\017\n\007quality\030\004 \001(\r\022\r\n\005level\030\005 \001"
    "(\r\022\017\n\007cur_exp\030\006 \001(\r\032\227\001\n\024struct_op_hero_e"
    "quip\0221\n\007op_type\030\001 \002(\0162 .gs_dbs_user_info"
    "_op_req.EOPType\022\017\n\007hero_id\030\002 \002(\r\022\020\n\010equi"
    "p_id\030\003 \002(\r\022\r\n\005level\030\004 \001(\r\022\032\n\022evolution_e"
    "quip_id\030\005 \001(\r\032\226\001\n\024struct_op_hero_skill\0221"
    "\n\007op_type\030\001 \002(\0162 .gs_dbs_user_info_op_re"
    "q.EOPType\022\017\n\007hero_id\030\002 \002(\r\022+\n\004type\030\003 \002(\016"
    "2\035.user_hero_skill.e_skill_type\022\r\n\005level"
    "\030\004 \002(\r\032\337\001\n\016struct_op_shop\022I\n\014shop_op_typ"
    "e\030\001 \002(\01623.gs_dbs_user_info_op_req.struct"
    "_op_shop.ESHOPOPType\022\033\n\004shop\030\002 \002(\0132\r.db_"
    "user_shop\"e\n\013ESHOPOPType\022\007\n\003min\020\000\022\n\n\006CRE"
    "ATE\020\001\022\020\n\014AUTO_REFRESH\020\002\022\022\n\016MANUAL_REFRES"
    "H\020\003\022\022\n\016RANDOM_REFRESH\020\004\022\007\n\003max\020\005\032`\n\023stru"
    "ct_op_shop_item\022\'\n\tshop_type\030\001 \002(\0162\024.use"
    "r_shop.ESHOPTYPE\022 \n\004item\030\002 \002(\0132\022.db_user"
    "_shop_item\032q\n\021struct_op_mission\022-\n\rmissi"
    "on_event\030\001 \001(\0132\026.db_user_mission_event\022-"
    "\n\rmission_chain\030\002 \001(\0132\026.db_user_mission_"
    "chain\032\352\001\n\020struct_new_arena\022\014\n\004rank\030\001 \002(\r"
    "\022\r\n\005score\030\002 \002(\r\022\033\n\023last_challenge_time\030\003"
    " \002(\r\022\036\n\026last_day_challenge_num\030\004 \002(\r\022\034\n\024"
    "history_highest_rank\030\005 \002(\r\022\r\n\005heros\030\006 \003("
    "\r\022%\n\035last_time_buy_arena_challenge\030\007 \002(\r"
    "\022(\n last_day_buy_arena_challenge_num\030\010 \002"
    "(\r\032\234\002\n\017struct_op_arena\0221\n\007op_type\030\001 \002(\0162"
    " .gs_dbs_user_info_op_req.EOPType\022\014\n\004ran"
    "k\030\002 \001(\r\022\r\n\005score\030\003 \001(\r\022\033\n\023last_challenge"
    "_time\030\004 \001(\r\022\036\n\026last_day_challenge_num\030\005 "
    "\001(\r\022\034\n\024history_highest_rank\030\006 \001(\r\022\r\n\005her"
    "os\030\007 \003(\r\022%\n\035last_time_buy_arena_challeng"
    "e\030\010 \001(\r\022(\n last_day_buy_arena_challenge_"
    "num\030\t \001(\r\032\031\n\027struct_clear_arena_team\032\276\003\n"
    "\031struct_op_arena_challenge\022\030\n\020attacker_u"
    "ser_id\030\001 \002(\r\022\025\n\rattacker_rank\030\002 \002(\r\022\026\n\016a"
    "ttacker_power\030\003 \002(\r\022\025\n\rattacker_name\030\004 \002"
    "(\t\022\026\n\016attacker_level\030\005 \002(\r\022A\n\016attacker_h"
    "eros\030\006 \003(\0132).db_user_arena_log.db_user_a"
    "rena_log_hero\022\030\n\020defender_user_id\030\007 \002(\r\022"
    "\025\n\rdefender_rank\030\010 \002(\r\022\026\n\016defender_power"
    "\030\t \002(\r\022\025\n\rdefender_name\030\n \002(\t\022\026\n\016defende"
    "r_level\030\013 \002(\r\022A\n\016defender_heros\030\014 \003(\0132)."
    "db_user_arena_log.db_user_arena_log_hero"
    "\022\016\n\006is_win\030\r \002(\r\022\014\n\004time\030\016 \002(\r\022\r\n\005score\030"
    "\017 \001(\r\032\251\001\n\016struct_op_sign\0221\n\007op_type\030\001 \002("
    "\0162 .gs_dbs_user_info_op_req.EOPType\022\024\n\014s"
    "ign_1_times\030\002 \001(\r\022\034\n\024sign_n_reward_statu"
    "s\030\003 \001(\t\022\026\n\016last_sign_time\030\004 \001(\r\022\030\n\020add_s"
    "igned_times\030\005 \001(\r\032w\n\017struct_new_sign\022\024\n\014"
    "sign_1_times\030\001 \002(\r\022\034\n\024sign_n_reward_stat"
    "us\030\002 \002(\t\022\026\n\016last_sign_time\030\003 \002(\r\022\030\n\020add_"
    "signed_times\030\004 \002(\r\032]\n\026struct_op_novice_g"
    "uide\0221\n\007op_type\030\001 \002(\0162 .gs_dbs_user_info"
    "_op_req.EOPType\022\020\n\010guide_id\030\002 \002(\r\032\201\001\n\026st"
    "ruct_new_user_statis\022\r\n\005level\030\001 \002(\r\022\023\n\013f"
    "ight_power\030\002 \001(\r\022\013\n\003vip\030\003 \002(\r\022\022\n\noccur_t"
    "ime\030\004 \002(\r\022\022\n\nevent_type\030\005 \002(\r\022\016\n\006cur_id\030"
    "\006 \002(\r\032.\n\017struct_new_mail\022\033\n\004mail\030\001 \002(\0132\r"
    ".db_user_mail\032\237\003\n\020struct_op_friend\022B\n\007op"
    "_type\030\001 \002(\01621.gs_dbs_user_info_op_req.st"
    "ruct_op_friend.OP_TYPE\022\021\n\tfriend_id\030\002 \001("
    "\r\022$\n\tbase_info\030\003 \001(\0132\021.friend_base_info\""
    "\215\002\n\007OP_TYPE\022\020\n\014GET_ELEMENT1\020\001\022\020\n\014GET_ELE"
    "MENTN\020\002\022\021\n\rGIVE_ELEMENT1\020\003\022\021\n\rGIVE_ELEME"
    "NTN\020\004\022\022\n\016GIVE_UP_APPLY1\020\005\022\022\n\016GIVE_UP_APP"
    "LYN\020\006\022\021\n\rAFFIRM_AGREE1\020\007\022\021\n\rAFFIRM_AGREE"
    "N\020\010\022\022\n\016AFFIRM_REFUSE1\020\t\022\022\n\016AFFIRM_REFUSE"
    "N\020\n\022\030\n\024ADD_FRIEND_GS_ONLINE\020\013\022\016\n\nDEL_FRI"
    "END\020\014\022\030\n\024DEL_RECOMMEND_FRIEND\020\r\032\360\002\n\021stru"
    "ct_op_crusade\022K\n\007op_type\030\001 \002(\0162:.gs_dbs_"
    "user_info_op_req.struct_op_crusade.CRUSA"
    "DE_OP_TYPE\022C\n\003end\030\002 \001(\01326.gs_dbs_user_in"
    "fo_op_req.struct_op_crusade.crusade_end\022"
    "\017\n\007hero_id\030\003 \001(\r\032z\n\013crusade_end\022,\n\010me_he"
    "ros\030\002 \003(\0132\032.user_crusade.crusade_hero\022/\n"
    "\013enemy_heros\030\003 \003(\0132\032.user_crusade.crusad"
    "e_hero\022\014\n\004wave\030\004 \002(\r\"<\n\017CRUSADE_OP_TYPE\022"
    "\017\n\013CRUSADE_END\020\001\022\r\n\tHERO_LIFE\020\002\022\t\n\005RESET"
    "\020\003\"=\n\007EOPType\022\021\n\rAdd_Or_Update\020\001\022\n\n\006Dele"
    "te\020\002\022\007\n\003Add\020\003\022\n\n\006Update\020\004\"-\n\027dbs_gs_user"
    "_info_op_res\022\022\n\nerror_code\030\001 \002(\r\"N\n\030gs_d"
    "bs_user_new_mail_req\022\025\n\rsend_user_ids\030\001 "
    "\003(\r\022\033\n\004mail\030\002 \002(\0132\r.db_user_mail\"\210\001\n\030dbs"
    "_gs_user_new_mail_res\022\022\n\nerror_code\030\001 \002("
    "\r\022\020\n\010user_ids\030\002 \003(\r\022\020\n\010mail_ids\030\003 \003(\r\022\027\n"
    "\017mail_attach_ids\030\004 \003(\r\022\033\n\004mail\030\005 \002(\0132\r.d"
    "b_user_mail\":\n\narena_mail\022\017\n\007user_id\030\001 \002"
    "(\r\022\033\n\004mail\030\002 \002(\0132\r.db_user_mail\"<\n\036gs_db"
    "s_user_new_arena_mail_req\022\032\n\005mails\030\001 \003(\013"
    "2\013.arena_mail\"P\n\036dbs_gs_user_new_arena_m"
    "ail_res\022\022\n\nerror_code\030\001 \002(\005\022\032\n\005mails\030\002 \003"
    "(\0132\013.arena_mail\"5\n\024gs_dbs_edit_name_req\022"
    "\017\n\007user_id\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\"I\n\024dbs_gs"
    "_edit_name_res\022\022\n\nerror_code\030\001 \002(\r\022\017\n\007us"
    "er_id\030\002 \002(\r\022\014\n\004name\030\003 \001(\t\"\277\002\n\031gs_dbs_use"
    "r_friend_op_req\0223\n\007op_type\030\001 \002(\0162\".gs_db"
    "s_user_friend_op_req.OP_TYPE\022\017\n\007user_id\030"
    "\002 \002(\r\022\026\n\016friend_user_id\030\003 \001(\r\022$\n\tbase_in"
    "fo\030\004 \001(\0132\021.friend_base_info\"\235\001\n\007OP_TYPE\022"
    "\027\n\023FRIEND_GIVE_ELEMENT\020\001\022\030\n\024FRIEND_GIVE_"
    "UP_APPLY\020\002\022\027\n\023FRIEND_AFFIRM_AGREE\020\003\022\030\n\024F"
    "RIEND_AFFIRM_REFUSE\020\004\022\025\n\021FRIEND_DEL_FRIE"
    "ND\020\005\022\025\n\021FRIEND_ADD_FRIEND\020\006\"/\n\031dbs_gs_us"
    "er_friend_op_res\022\022\n\nerror_code\030\001 \002(\r\"Q\n\026"
    "gs_dbs_search_user_req\022\017\n\007user_id\030\001 \002(\r\022"
    "\021\n\tsearch_id\030\002 \001(\r\022\023\n\013search_name\030\003 \001(\t\""
    "c\n\026dbs_gs_search_user_res\022\022\n\nerror_code\030"
    "\001 \002(\r\022\017\n\007user_id\030\002 \002(\r\022$\n\tbase_info\030\003 \001("
    "\0132\021.friend_base_info\"\225\002\n\031gs_dbs_friend_o"
    "ffline_req\0223\n\007op_type\030\001 \002(\0162\".gs_dbs_fri"
    "end_offline_req.OP_TYPE\022\017\n\007user_id\030\002 \002(\r"
    "\022\021\n\tfriend_id\030\003 \001(\r\022&\n\013friend_info\030\004 \001(\013"
    "2\021.friend_base_info\022\"\n\007me_info\030\005 \001(\0132\021.f"
    "riend_base_info\022\022\n\naffirm_ids\030\006 \003(\r\"\?\n\007O"
    "P_TYPE\022\016\n\nADD_FRIEND\020\001\022\021\n\rAFFIRM_AGREE1\020"
    "\002\022\021\n\rAFFIRM_AGREEN\020\003\"\252\001\n\031dbs_gs_friend_o"
    "ffline_res\022\022\n\nerror_code\030\001 \002(\r\0223\n\007op_typ"
    "e\030\002 \002(\0162\".gs_dbs_friend_offline_req.OP_T"
    "YPE\022\017\n\007user_id\030\003 \002(\r\022\037\n\004info\030\004 \001(\0132\021.fri"
    "end_base_info\022\022\n\naffirm_ids\030\005 \003(\r\"\021\n\017gs_"
    "dbs_rank_req\"\366\003\n\017dbs_gs_rank_res\022\022\n\nerro"
    "r_code\030\001 \002(\r\022;\n\021level_brief_ranks\030\002 \003(\0132"
    " .dbs_gs_rank_res.rank_brief_info\022A\n\027fig"
    "ht_power_brief_ranks\030\003 \003(\0132 .dbs_gs_rank"
    "_res.rank_brief_info\022/\n\013level_ranks\030\004 \003("
    "\0132\032.dbs_gs_rank_res.rank_info\0225\n\021fight_p"
    "ower_ranks\030\005 \003(\0132\032.dbs_gs_rank_res.rank_"
    "info\022/\n\013arena_ranks\030\006 \003(\0132\032.dbs_gs_rank_"
    "res.rank_info\0320\n\017rank_brief_info\022\014\n\004rank"
    "\030\001 \002(\r\022\017\n\007user_id\030\002 \002(\r\032\203\001\n\trank_info\022\017\n"
    "\007user_id\030\001 \002(\r\022\017\n\007head_id\030\002 \002(\r\022\025\n\rhead_"
    "frame_id\030\003 \002(\r\022\r\n\005level\030\004 \002(\r\022\014\n\004name\030\005 "
    "\002(\t\022\013\n\003vip\030\006 \002(\r\022\023\n\013fight_power\030\007 \002(\r\"\213\026"
    "\n\023gs_dbs_guild_op_req\0228\n\tnew_guild\030\001 \001(\013"
    "2%.gs_dbs_guild_op_req.struct_new_guild\022"
    ">\n\014update_guild\030\002 \001(\0132(.gs_dbs_guild_op_"
    "req.struct_update_guild\022>\n\014delete_guild\030"
    "\003 \001(\0132(.gs_dbs_guild_op_req.struct_delet"
    "e_guild\0228\n\tnew_apply\030\004 \001(\0132%.gs_dbs_guil"
    "d_op_req.struct_new_apply\022>\n\014delete_appl"
    "y\030\005 \001(\0132(.gs_dbs_guild_op_req.struct_del"
    "ete_apply\022:\n\nnew_member\030\006 \001(\0132&.gs_dbs_g"
    "uild_op_req.struct_new_member\022A\n\016update_"
    "members\030\007 \003(\0132).gs_dbs_guild_op_req.stru"
    "ct_update_member\0226\n\010new_boss\030\t \001(\0132$.gs_"
    "dbs_guild_op_req.struct_new_boss\022<\n\013upda"
    "te_boss\030\n \001(\0132\'.gs_dbs_guild_op_req.stru"
    "ct_update_boss\022H\n\021new_boss_attacker\030\013 \001("
    "\0132-.gs_dbs_guild_op_req.struct_new_boss_"
    "attacker\022N\n\024delete_boss_attacker\030\r \001(\01320"
    ".gs_dbs_guild_op_req.struct_delete_boss_"
    "attacker\022@\n\rnew_dead_hero\030\016 \001(\0132).gs_dbs"
    "_guild_op_req.struct_new_dead_hero\022F\n\020de"
    "lete_dead_hero\030\017 \001(\0132,.gs_dbs_guild_op_r"
    "eq.struct_delete_dead_hero\032\353\001\n\020struct_ne"
    "w_guild\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\027\n\017cre"
    "ator_user_id\030\003 \002(\r\022\023\n\013create_time\030\004 \002(\r\022"
    "\031\n\021president_user_id\030\005 \002(\r\022&\n\006status\030\006 \002"
    "(\0162\026.e_apply_switch_status\022\014\n\004flag\030\007 \002(\r"
    "\022\032\n\022contribution_point\030\t \002(\r\022\014\n\004coin\030\n \002"
    "(\r\022\024\n\014announcement\030\013 \002(\t\032\306\001\n\023struct_upda"
    "te_guild\022\020\n\010guild_id\030\001 \002(\r\022\014\n\004name\030\002 \001(\t"
    "\022\031\n\021president_user_id\030\003 \001(\r\022&\n\006status\030\004 "
    "\001(\0162\026.e_apply_switch_status\022\014\n\004flag\030\005 \001("
    "\r\022\032\n\022contribution_point\030\006 \001(\r\022\014\n\004coin\030\007 "
    "\001(\r\022\024\n\014announcement\030\010 \001(\t\032\'\n\023struct_dele"
    "te_guild\022\020\n\010guild_id\030\001 \002(\r\032D\n\020struct_new"
    "_apply\022\021\n\tguild_ids\030\001 \003(\r\022\017\n\007user_id\030\002 \002"
    "(\r\022\014\n\004time\030\003 \002(\r\032\247\001\n\023struct_delete_apply"
    "\022A\n\007op_type\030\001 \002(\01620.gs_dbs_guild_op_req."
    "struct_delete_apply.EOPType\022\020\n\010guild_id\030"
    "\002 \001(\r\022\017\n\007user_id\030\003 \001(\r\"*\n\007EOPType\022\t\n\005G1_"
    "A1\020\001\022\t\n\005G1_AN\020\002\022\t\n\005A1_GN\020\003\032\254\001\n\021struct_ne"
    "w_member\022\020\n\010guild_id\030\001 \002(\r\022\017\n\007user_id\030\002 "
    "\002(\r\022#\n\010position\030\003 \002(\0162\021.e_guild_position"
    "\022\021\n\tjoin_time\030\004 \002(\r\022\022\n\nleave_time\030\005 \002(\r\022"
    "\032\n\022contribution_point\030\006 \002(\r\022\014\n\004coin\030\007 \002("
    "\r\032\263\001\n\024struct_update_member\022\017\n\007user_id\030\001 "
    "\002(\r\022#\n\010position\030\002 \001(\0162\021.e_guild_position"
    "\022\021\n\tjoin_time\030\003 \001(\r\022\022\n\nleave_time\030\004 \001(\r\022"
    "\032\n\022contribution_point\030\005 \001(\r\022\014\n\004coin\030\006 \001("
    "\r\022\024\n\014new_guild_id\030\007 \001(\r\032r\n\017struct_new_bo"
    "ss\022\020\n\010guild_id\030\001 \002(\r\022\020\n\010position\030\002 \002(\r\022\017"
    "\n\007lose_hp\030\003 \002(\r\022\026\n\016killer_user_id\030\004 \002(\r\022"
    "\022\n\nkilled_num\030\005 \002(\r\032u\n\022struct_update_bos"
    "s\022\020\n\010guild_id\030\001 \002(\r\022\020\n\010position\030\002 \002(\r\022\017\n"
    "\007lose_hp\030\003 \001(\r\022\026\n\016killer_user_id\030\004 \001(\r\022\022"
    "\n\nkilled_num\030\005 \001(\r\032\215\001\n\030struct_new_boss_a"
    "ttacker\022\017\n\007user_id\030\001 \002(\r\022\025\n\rboss_positio"
    "n\030\002 \002(\r\022\024\n\014boss_lose_hp\030\003 \002(\r\022\027\n\017last_re"
    "set_time\030\004 \002(\r\022\032\n\022last_day_reset_num\030\005 \002"
    "(\r\032\331\001\n\033struct_delete_boss_attacker\022I\n\007op"
    "_type\030\001 \002(\01628.gs_dbs_guild_op_req.struct"
    "_delete_boss_attacker.EOPType\022\017\n\007user_id"
    "\030\002 \001(\r\022\025\n\rboss_position\030\003 \001(\r\022\020\n\010guild_i"
    "d\030\004 \001(\r\"5\n\007EOPType\022\t\n\005M1_B1\020\001\022\t\n\005M1_BN\020\002"
    "\022\t\n\005MN_B1\020\003\022\t\n\005MN_BN\020\004\032c\n\024struct_new_dea"
    "d_hero\022\017\n\007user_id\030\001 \002(\r\022\025\n\rboss_position"
    "\030\002 \002(\r\022\020\n\010heros_id\030\003 \003(\r\022\021\n\tdead_time\030\004 "
    "\002(\r\032\265\001\n\027struct_delete_dead_hero\022E\n\007op_ty"
    "pe\030\001 \002(\01624.gs_dbs_guild_op_req.struct_de"
    "lete_dead_hero.EOPType\022\025\n\rboss_position\030"
    "\002 \002(\r\022\017\n\007user_id\030\003 \001(\r\022\020\n\010guild_id\030\004 \001(\r"
    "\"\031\n\007EOPType\022\006\n\002M1\020\001\022\006\n\002MN\020\002\")\n\023dbs_gs_gu"
    "ild_op_res\022\022\n\nerror_code\030\001 \002(\005*\274\003\n\014e_msg"
    "_gs_dbs\022\024\n\020e_msg_gs_dbs_min\020\000\022\036\n\032e_msg_g"
    "s_dbs_user_info_req\020\001\022!\n\035e_msg_gs_dbs_us"
    "er_info_op_req\020\002\022)\n%e_msg_gs_dbs_user_in"
    "fo_new_create_req\020\003\022\"\n\036e_msg_gs_dbs_user"
    "_new_mail_req\020\004\022\036\n\032e_msg_gs_dbs_edit_nam"
    "e_req\020\005\022(\n$e_msg_gs_dbs_user_new_arena_m"
    "ail_req\020\006\022#\n\037e_msg_gs_dbs_user_friend_op"
    "_req\020\007\022 \n\034e_msg_gs_dbs_search_user_req\020\010"
    "\022#\n\037e_msg_gs_dbs_friend_offline_req\020\t\022\031\n"
    "\025e_msg_gs_dbs_rank_req\020\n\022\035\n\031e_msg_gs_dbs"
    "_guild_op_req\020\013\022\024\n\020e_msg_gs_dbs_max\020\014*\274\003"
    "\n\014e_msg_dbs_gs\022\024\n\020e_msg_dbs_gs_min\020\000\022\036\n\032"
    "e_msg_dbs_gs_user_info_res\020\001\022!\n\035e_msg_db"
    "s_gs_user_info_op_res\020\002\022)\n%e_msg_dbs_gs_"
    "user_info_new_create_res\020\003\022\"\n\036e_msg_dbs_"
    "gs_user_new_mail_res\020\004\022\036\n\032e_msg_dbs_gs_e"
    "dit_name_res\020\005\022(\n$e_msg_dbs_gs_user_new_"
    "arena_mail_res\020\006\022#\n\037e_msg_dbs_gs_user_fr"
    "iend_op_res\020\007\022 \n\034e_msg_dbs_gs_search_use"
    "r_res\020\010\022#\n\037e_msg_dbs_gs_friend_offline_r"
    "es\020\t\022\031\n\025e_msg_dbs_gs_rank_res\020\n\022\035\n\031e_msg"
    "_dbs_gs_guild_op_res\020\013\022\024\n\020e_msg_dbs_gs_m"
    "ax\020\014*\355\002\n\021e_dbsgs_errorcode\022\031\n\025e_dbsgs_er"
    "rorcode_min\020\000\022\035\n\031e_dbsgs_errorcode_succe"
    "ss\020\001\022\"\n\036e_dbsgs_errorcode_unkown_error\020\002"
    "\022)\n%e_dbsgs_errorcode_user_info_not_exsi"
    "t\020\003\022)\n%e_dbsgs_errorcode_user_info_has_e"
    "rror\020\004\022)\n%e_dbsgs_errorcode_user_edit_sa"
    "me_name\020\005\0222\n.e_dbsgs_errorcode_friend_ad"
    "d_confirm_reach_max\020\006\022*\n&e_dbsgs_errorco"
    "de_friend_num_reach_max\020\007\022\031\n\025e_dbsgs_err"
    "orcode_max\020\010", 18612);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbs_gs_proto.proto", &protobuf_RegisterTypes);
  db_user_sub_task::default_instance_ = new db_user_sub_task();
  db_user_sub_task_array::default_instance_ = new db_user_sub_task_array();
  db_user_hero_equip::default_instance_ = new db_user_hero_equip();
  db_user_hero_skill::default_instance_ = new db_user_hero_skill();
  db_user_hero::default_instance_ = new db_user_hero();
  db_user_hero_array::default_instance_ = new db_user_hero_array();
  db_mail_attach::default_instance_ = new db_mail_attach();
  db_user_mail::default_instance_ = new db_user_mail();
  db_user_mail_array::default_instance_ = new db_user_mail_array();
  db_user_shop_buy::default_instance_ = new db_user_shop_buy();
  db_user_shop_buy_array::default_instance_ = new db_user_shop_buy_array();
  db_user_shop_item::default_instance_ = new db_user_shop_item();
  db_user_shop::default_instance_ = new db_user_shop();
  db_user_shop_array::default_instance_ = new db_user_shop_array();
  db_user_mission_event::default_instance_ = new db_user_mission_event();
  db_user_arena_log::default_instance_ = new db_user_arena_log();
  db_user_arena_log_db_user_arena_log_hero::default_instance_ = new db_user_arena_log_db_user_arena_log_hero();
  db_user_mission_event_array::default_instance_ = new db_user_mission_event_array();
  db_user_mission_chain::default_instance_ = new db_user_mission_chain();
  db_user_mission_chain_array::default_instance_ = new db_user_mission_chain_array();
  db_user_arena::default_instance_ = new db_user_arena();
  db_user_base_info::default_instance_ = new db_user_base_info();
  db_user_sign::default_instance_ = new db_user_sign();
  db_user_novice_guide_array::default_instance_ = new db_user_novice_guide_array();
  db_user_friend::default_instance_ = new db_user_friend();
  db_user_friend_friend_info::default_instance_ = new db_user_friend_friend_info();
  db_user_crusade::default_instance_ = new db_user_crusade();
  db_user_guild_info::default_instance_ = new db_user_guild_info();
  db_user_guild_info_struct_apply::default_instance_ = new db_user_guild_info_struct_apply();
  db_user_guild_info_struct_boss_info::default_instance_ = new db_user_guild_info_struct_boss_info();
  db_user_guild_info_struct_boss_info_struct_dead_hero::default_instance_ = new db_user_guild_info_struct_boss_info_struct_dead_hero();
  db_user_info::default_instance_ = new db_user_info();
  gs_dbs_user_info_req::default_instance_ = new gs_dbs_user_info_req();
  dbs_gs_user_info_res::default_instance_ = new dbs_gs_user_info_res();
  gs_dbs_user_info_new_create_req::default_instance_ = new gs_dbs_user_info_new_create_req();
  dbs_gs_user_info_new_create_res::default_instance_ = new dbs_gs_user_info_new_create_res();
  gs_dbs_user_info_op_req::default_instance_ = new gs_dbs_user_info_op_req();
  gs_dbs_user_info_op_req_struct_op_base_info::default_instance_ = new gs_dbs_user_info_op_req_struct_op_base_info();
  gs_dbs_user_info_op_req_struct_op_sub_task::default_instance_ = new gs_dbs_user_info_op_req_struct_op_sub_task();
  gs_dbs_user_info_op_req_struct_op_mail::default_instance_ = new gs_dbs_user_info_op_req_struct_op_mail();
  gs_dbs_user_info_op_req_struct_new_hero::default_instance_ = new gs_dbs_user_info_op_req_struct_new_hero();
  gs_dbs_user_info_op_req_struct_op_hero_base::default_instance_ = new gs_dbs_user_info_op_req_struct_op_hero_base();
  gs_dbs_user_info_op_req_struct_op_hero_equip::default_instance_ = new gs_dbs_user_info_op_req_struct_op_hero_equip();
  gs_dbs_user_info_op_req_struct_op_hero_skill::default_instance_ = new gs_dbs_user_info_op_req_struct_op_hero_skill();
  gs_dbs_user_info_op_req_struct_op_shop::default_instance_ = new gs_dbs_user_info_op_req_struct_op_shop();
  gs_dbs_user_info_op_req_struct_op_shop_item::default_instance_ = new gs_dbs_user_info_op_req_struct_op_shop_item();
  gs_dbs_user_info_op_req_struct_op_mission::default_instance_ = new gs_dbs_user_info_op_req_struct_op_mission();
  gs_dbs_user_info_op_req_struct_new_arena::default_instance_ = new gs_dbs_user_info_op_req_struct_new_arena();
  gs_dbs_user_info_op_req_struct_op_arena::default_instance_ = new gs_dbs_user_info_op_req_struct_op_arena();
  gs_dbs_user_info_op_req_struct_clear_arena_team::default_instance_ = new gs_dbs_user_info_op_req_struct_clear_arena_team();
  gs_dbs_user_info_op_req_struct_op_arena_challenge::default_instance_ = new gs_dbs_user_info_op_req_struct_op_arena_challenge();
  gs_dbs_user_info_op_req_struct_op_sign::default_instance_ = new gs_dbs_user_info_op_req_struct_op_sign();
  gs_dbs_user_info_op_req_struct_new_sign::default_instance_ = new gs_dbs_user_info_op_req_struct_new_sign();
  gs_dbs_user_info_op_req_struct_op_novice_guide::default_instance_ = new gs_dbs_user_info_op_req_struct_op_novice_guide();
  gs_dbs_user_info_op_req_struct_new_user_statis::default_instance_ = new gs_dbs_user_info_op_req_struct_new_user_statis();
  gs_dbs_user_info_op_req_struct_new_mail::default_instance_ = new gs_dbs_user_info_op_req_struct_new_mail();
  gs_dbs_user_info_op_req_struct_op_friend::default_instance_ = new gs_dbs_user_info_op_req_struct_op_friend();
  gs_dbs_user_info_op_req_struct_op_crusade::default_instance_ = new gs_dbs_user_info_op_req_struct_op_crusade();
  gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::default_instance_ = new gs_dbs_user_info_op_req_struct_op_crusade_crusade_end();
  dbs_gs_user_info_op_res::default_instance_ = new dbs_gs_user_info_op_res();
  gs_dbs_user_new_mail_req::default_instance_ = new gs_dbs_user_new_mail_req();
  dbs_gs_user_new_mail_res::default_instance_ = new dbs_gs_user_new_mail_res();
  arena_mail::default_instance_ = new arena_mail();
  gs_dbs_user_new_arena_mail_req::default_instance_ = new gs_dbs_user_new_arena_mail_req();
  dbs_gs_user_new_arena_mail_res::default_instance_ = new dbs_gs_user_new_arena_mail_res();
  gs_dbs_edit_name_req::default_instance_ = new gs_dbs_edit_name_req();
  dbs_gs_edit_name_res::default_instance_ = new dbs_gs_edit_name_res();
  gs_dbs_user_friend_op_req::default_instance_ = new gs_dbs_user_friend_op_req();
  dbs_gs_user_friend_op_res::default_instance_ = new dbs_gs_user_friend_op_res();
  gs_dbs_search_user_req::default_instance_ = new gs_dbs_search_user_req();
  dbs_gs_search_user_res::default_instance_ = new dbs_gs_search_user_res();
  gs_dbs_friend_offline_req::default_instance_ = new gs_dbs_friend_offline_req();
  dbs_gs_friend_offline_res::default_instance_ = new dbs_gs_friend_offline_res();
  gs_dbs_rank_req::default_instance_ = new gs_dbs_rank_req();
  dbs_gs_rank_res::default_instance_ = new dbs_gs_rank_res();
  dbs_gs_rank_res_rank_brief_info::default_instance_ = new dbs_gs_rank_res_rank_brief_info();
  dbs_gs_rank_res_rank_info::default_instance_ = new dbs_gs_rank_res_rank_info();
  gs_dbs_guild_op_req::default_instance_ = new gs_dbs_guild_op_req();
  gs_dbs_guild_op_req_struct_new_guild::default_instance_ = new gs_dbs_guild_op_req_struct_new_guild();
  gs_dbs_guild_op_req_struct_update_guild::default_instance_ = new gs_dbs_guild_op_req_struct_update_guild();
  gs_dbs_guild_op_req_struct_delete_guild::default_instance_ = new gs_dbs_guild_op_req_struct_delete_guild();
  gs_dbs_guild_op_req_struct_new_apply::default_instance_ = new gs_dbs_guild_op_req_struct_new_apply();
  gs_dbs_guild_op_req_struct_delete_apply::default_instance_ = new gs_dbs_guild_op_req_struct_delete_apply();
  gs_dbs_guild_op_req_struct_new_member::default_instance_ = new gs_dbs_guild_op_req_struct_new_member();
  gs_dbs_guild_op_req_struct_update_member::default_instance_ = new gs_dbs_guild_op_req_struct_update_member();
  gs_dbs_guild_op_req_struct_new_boss::default_instance_ = new gs_dbs_guild_op_req_struct_new_boss();
  gs_dbs_guild_op_req_struct_update_boss::default_instance_ = new gs_dbs_guild_op_req_struct_update_boss();
  gs_dbs_guild_op_req_struct_new_boss_attacker::default_instance_ = new gs_dbs_guild_op_req_struct_new_boss_attacker();
  gs_dbs_guild_op_req_struct_delete_boss_attacker::default_instance_ = new gs_dbs_guild_op_req_struct_delete_boss_attacker();
  gs_dbs_guild_op_req_struct_new_dead_hero::default_instance_ = new gs_dbs_guild_op_req_struct_new_dead_hero();
  gs_dbs_guild_op_req_struct_delete_dead_hero::default_instance_ = new gs_dbs_guild_op_req_struct_delete_dead_hero();
  dbs_gs_guild_op_res::default_instance_ = new dbs_gs_guild_op_res();
  db_user_sub_task::default_instance_->InitAsDefaultInstance();
  db_user_sub_task_array::default_instance_->InitAsDefaultInstance();
  db_user_hero_equip::default_instance_->InitAsDefaultInstance();
  db_user_hero_skill::default_instance_->InitAsDefaultInstance();
  db_user_hero::default_instance_->InitAsDefaultInstance();
  db_user_hero_array::default_instance_->InitAsDefaultInstance();
  db_mail_attach::default_instance_->InitAsDefaultInstance();
  db_user_mail::default_instance_->InitAsDefaultInstance();
  db_user_mail_array::default_instance_->InitAsDefaultInstance();
  db_user_shop_buy::default_instance_->InitAsDefaultInstance();
  db_user_shop_buy_array::default_instance_->InitAsDefaultInstance();
  db_user_shop_item::default_instance_->InitAsDefaultInstance();
  db_user_shop::default_instance_->InitAsDefaultInstance();
  db_user_shop_array::default_instance_->InitAsDefaultInstance();
  db_user_mission_event::default_instance_->InitAsDefaultInstance();
  db_user_arena_log::default_instance_->InitAsDefaultInstance();
  db_user_arena_log_db_user_arena_log_hero::default_instance_->InitAsDefaultInstance();
  db_user_mission_event_array::default_instance_->InitAsDefaultInstance();
  db_user_mission_chain::default_instance_->InitAsDefaultInstance();
  db_user_mission_chain_array::default_instance_->InitAsDefaultInstance();
  db_user_arena::default_instance_->InitAsDefaultInstance();
  db_user_base_info::default_instance_->InitAsDefaultInstance();
  db_user_sign::default_instance_->InitAsDefaultInstance();
  db_user_novice_guide_array::default_instance_->InitAsDefaultInstance();
  db_user_friend::default_instance_->InitAsDefaultInstance();
  db_user_friend_friend_info::default_instance_->InitAsDefaultInstance();
  db_user_crusade::default_instance_->InitAsDefaultInstance();
  db_user_guild_info::default_instance_->InitAsDefaultInstance();
  db_user_guild_info_struct_apply::default_instance_->InitAsDefaultInstance();
  db_user_guild_info_struct_boss_info::default_instance_->InitAsDefaultInstance();
  db_user_guild_info_struct_boss_info_struct_dead_hero::default_instance_->InitAsDefaultInstance();
  db_user_info::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_req::default_instance_->InitAsDefaultInstance();
  dbs_gs_user_info_res::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_new_create_req::default_instance_->InitAsDefaultInstance();
  dbs_gs_user_info_new_create_res::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_base_info::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_sub_task::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_mail::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_new_hero::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_hero_base::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_hero_equip::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_hero_skill::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_shop::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_shop_item::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_mission::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_new_arena::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_arena::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_clear_arena_team::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_arena_challenge::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_sign::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_new_sign::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_novice_guide::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_new_user_statis::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_new_mail::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_friend::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_crusade::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::default_instance_->InitAsDefaultInstance();
  dbs_gs_user_info_op_res::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_new_mail_req::default_instance_->InitAsDefaultInstance();
  dbs_gs_user_new_mail_res::default_instance_->InitAsDefaultInstance();
  arena_mail::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_new_arena_mail_req::default_instance_->InitAsDefaultInstance();
  dbs_gs_user_new_arena_mail_res::default_instance_->InitAsDefaultInstance();
  gs_dbs_edit_name_req::default_instance_->InitAsDefaultInstance();
  dbs_gs_edit_name_res::default_instance_->InitAsDefaultInstance();
  gs_dbs_user_friend_op_req::default_instance_->InitAsDefaultInstance();
  dbs_gs_user_friend_op_res::default_instance_->InitAsDefaultInstance();
  gs_dbs_search_user_req::default_instance_->InitAsDefaultInstance();
  dbs_gs_search_user_res::default_instance_->InitAsDefaultInstance();
  gs_dbs_friend_offline_req::default_instance_->InitAsDefaultInstance();
  dbs_gs_friend_offline_res::default_instance_->InitAsDefaultInstance();
  gs_dbs_rank_req::default_instance_->InitAsDefaultInstance();
  dbs_gs_rank_res::default_instance_->InitAsDefaultInstance();
  dbs_gs_rank_res_rank_brief_info::default_instance_->InitAsDefaultInstance();
  dbs_gs_rank_res_rank_info::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_new_guild::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_update_guild::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_delete_guild::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_new_apply::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_delete_apply::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_new_member::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_update_member::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_new_boss::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_update_boss::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_new_boss_attacker::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_delete_boss_attacker::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_new_dead_hero::default_instance_->InitAsDefaultInstance();
  gs_dbs_guild_op_req_struct_delete_dead_hero::default_instance_->InitAsDefaultInstance();
  dbs_gs_guild_op_res::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dbs_5fgs_5fproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dbs_5fgs_5fproto_2eproto {
  StaticDescriptorInitializer_dbs_5fgs_5fproto_2eproto() {
    protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  }
} static_descriptor_initializer_dbs_5fgs_5fproto_2eproto_;
const ::google::protobuf::EnumDescriptor* e_msg_gs_dbs_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_msg_gs_dbs_descriptor_;
}
bool e_msg_gs_dbs_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_msg_dbs_gs_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_msg_dbs_gs_descriptor_;
}
bool e_msg_dbs_gs_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_dbsgs_errorcode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_dbsgs_errorcode_descriptor_;
}
bool e_dbsgs_errorcode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_sub_task::kSubTaskIdFieldNumber;
const int db_user_sub_task::kStarFieldNumber;
const int db_user_sub_task::kLastEnterTimestampFieldNumber;
const int db_user_sub_task::kLastDayEnterNumFieldNumber;
const int db_user_sub_task::kTotalEnterNumFieldNumber;
const int db_user_sub_task::kLastResetTimeFieldNumber;
const int db_user_sub_task::kLastDayResetNumFieldNumber;
#endif  // !_MSC_VER

db_user_sub_task::db_user_sub_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_sub_task::InitAsDefaultInstance() {
}

db_user_sub_task::db_user_sub_task(const db_user_sub_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_sub_task::SharedCtor() {
  _cached_size_ = 0;
  sub_task_id_ = 0u;
  star_ = 0u;
  last_enter_timestamp_ = 0u;
  last_day_enter_num_ = 0u;
  total_enter_num_ = 0u;
  last_reset_time_ = 0u;
  last_day_reset_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_sub_task::~db_user_sub_task() {
  SharedDtor();
}

void db_user_sub_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_sub_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_sub_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_sub_task_descriptor_;
}

const db_user_sub_task& db_user_sub_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_sub_task* db_user_sub_task::default_instance_ = NULL;

db_user_sub_task* db_user_sub_task::New() const {
  return new db_user_sub_task;
}

void db_user_sub_task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sub_task_id_ = 0u;
    star_ = 0u;
    last_enter_timestamp_ = 0u;
    last_day_enter_num_ = 0u;
    total_enter_num_ = 0u;
    last_reset_time_ = 0u;
    last_day_reset_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_sub_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sub_task_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_task_id_)));
          set_has_sub_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_enter_timestamp;
        break;
      }

      // required uint32 last_enter_timestamp = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_enter_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_enter_timestamp_)));
          set_has_last_enter_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_day_enter_num;
        break;
      }

      // required uint32 last_day_enter_num = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_enter_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_enter_num_)));
          set_has_last_day_enter_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_enter_num;
        break;
      }

      // required uint32 total_enter_num = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_enter_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_enter_num_)));
          set_has_total_enter_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_reset_time;
        break;
      }

      // required uint32 last_reset_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_reset_time_)));
          set_has_last_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_day_reset_num;
        break;
      }

      // required uint32 last_day_reset_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_reset_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_reset_num_)));
          set_has_last_day_reset_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_sub_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sub_task_id = 1 [default = 0];
  if (has_sub_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sub_task_id(), output);
  }

  // required uint32 star = 2 [default = 0];
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // required uint32 last_enter_timestamp = 3 [default = 0];
  if (has_last_enter_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_enter_timestamp(), output);
  }

  // required uint32 last_day_enter_num = 4 [default = 0];
  if (has_last_day_enter_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_day_enter_num(), output);
  }

  // required uint32 total_enter_num = 5 [default = 0];
  if (has_total_enter_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_enter_num(), output);
  }

  // required uint32 last_reset_time = 6;
  if (has_last_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_reset_time(), output);
  }

  // required uint32 last_day_reset_num = 7;
  if (has_last_day_reset_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_day_reset_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_sub_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sub_task_id = 1 [default = 0];
  if (has_sub_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sub_task_id(), target);
  }

  // required uint32 star = 2 [default = 0];
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // required uint32 last_enter_timestamp = 3 [default = 0];
  if (has_last_enter_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_enter_timestamp(), target);
  }

  // required uint32 last_day_enter_num = 4 [default = 0];
  if (has_last_day_enter_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_day_enter_num(), target);
  }

  // required uint32 total_enter_num = 5 [default = 0];
  if (has_total_enter_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_enter_num(), target);
  }

  // required uint32 last_reset_time = 6;
  if (has_last_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_reset_time(), target);
  }

  // required uint32 last_day_reset_num = 7;
  if (has_last_day_reset_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_day_reset_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_sub_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sub_task_id = 1 [default = 0];
    if (has_sub_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_task_id());
    }

    // required uint32 star = 2 [default = 0];
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 last_enter_timestamp = 3 [default = 0];
    if (has_last_enter_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_enter_timestamp());
    }

    // required uint32 last_day_enter_num = 4 [default = 0];
    if (has_last_day_enter_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_enter_num());
    }

    // required uint32 total_enter_num = 5 [default = 0];
    if (has_total_enter_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_enter_num());
    }

    // required uint32 last_reset_time = 6;
    if (has_last_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_reset_time());
    }

    // required uint32 last_day_reset_num = 7;
    if (has_last_day_reset_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_reset_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_sub_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_sub_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_sub_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_sub_task::MergeFrom(const db_user_sub_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sub_task_id()) {
      set_sub_task_id(from.sub_task_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_last_enter_timestamp()) {
      set_last_enter_timestamp(from.last_enter_timestamp());
    }
    if (from.has_last_day_enter_num()) {
      set_last_day_enter_num(from.last_day_enter_num());
    }
    if (from.has_total_enter_num()) {
      set_total_enter_num(from.total_enter_num());
    }
    if (from.has_last_reset_time()) {
      set_last_reset_time(from.last_reset_time());
    }
    if (from.has_last_day_reset_num()) {
      set_last_day_reset_num(from.last_day_reset_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_sub_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_sub_task::CopyFrom(const db_user_sub_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_sub_task::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void db_user_sub_task::Swap(db_user_sub_task* other) {
  if (other != this) {
    std::swap(sub_task_id_, other->sub_task_id_);
    std::swap(star_, other->star_);
    std::swap(last_enter_timestamp_, other->last_enter_timestamp_);
    std::swap(last_day_enter_num_, other->last_day_enter_num_);
    std::swap(total_enter_num_, other->total_enter_num_);
    std::swap(last_reset_time_, other->last_reset_time_);
    std::swap(last_day_reset_num_, other->last_day_reset_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_sub_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_sub_task_descriptor_;
  metadata.reflection = db_user_sub_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_sub_task_array::kItemsFieldNumber;
#endif  // !_MSC_VER

db_user_sub_task_array::db_user_sub_task_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_sub_task_array::InitAsDefaultInstance() {
}

db_user_sub_task_array::db_user_sub_task_array(const db_user_sub_task_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_sub_task_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_sub_task_array::~db_user_sub_task_array() {
  SharedDtor();
}

void db_user_sub_task_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_sub_task_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_sub_task_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_sub_task_array_descriptor_;
}

const db_user_sub_task_array& db_user_sub_task_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_sub_task_array* db_user_sub_task_array::default_instance_ = NULL;

db_user_sub_task_array* db_user_sub_task_array::New() const {
  return new db_user_sub_task_array;
}

void db_user_sub_task_array::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_sub_task_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db_user_sub_task items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_sub_task_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .db_user_sub_task items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_sub_task_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .db_user_sub_task items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_sub_task_array::ByteSize() const {
  int total_size = 0;

  // repeated .db_user_sub_task items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_sub_task_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_sub_task_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_sub_task_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_sub_task_array::MergeFrom(const db_user_sub_task_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_sub_task_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_sub_task_array::CopyFrom(const db_user_sub_task_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_sub_task_array::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_sub_task_array::Swap(db_user_sub_task_array* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_sub_task_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_sub_task_array_descriptor_;
  metadata.reflection = db_user_sub_task_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_hero_equip::kEquipIdFieldNumber;
const int db_user_hero_equip::kLevelFieldNumber;
#endif  // !_MSC_VER

db_user_hero_equip::db_user_hero_equip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_hero_equip::InitAsDefaultInstance() {
}

db_user_hero_equip::db_user_hero_equip(const db_user_hero_equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_hero_equip::SharedCtor() {
  _cached_size_ = 0;
  equip_id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_hero_equip::~db_user_hero_equip() {
  SharedDtor();
}

void db_user_hero_equip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_hero_equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_hero_equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_hero_equip_descriptor_;
}

const db_user_hero_equip& db_user_hero_equip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_hero_equip* db_user_hero_equip::default_instance_ = NULL;

db_user_hero_equip* db_user_hero_equip::New() const {
  return new db_user_hero_equip;
}

void db_user_hero_equip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_hero_equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equip_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_hero_equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 equip_id = 1 [default = 0];
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equip_id(), output);
  }

  // required uint32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_hero_equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 equip_id = 1 [default = 0];
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equip_id(), target);
  }

  // required uint32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_hero_equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equip_id = 1 [default = 0];
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_id());
    }

    // required uint32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_hero_equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_hero_equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_hero_equip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_hero_equip::MergeFrom(const db_user_hero_equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_hero_equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_hero_equip::CopyFrom(const db_user_hero_equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_hero_equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void db_user_hero_equip::Swap(db_user_hero_equip* other) {
  if (other != this) {
    std::swap(equip_id_, other->equip_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_hero_equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_hero_equip_descriptor_;
  metadata.reflection = db_user_hero_equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_hero_skill::kTypeFieldNumber;
const int db_user_hero_skill::kLevelFieldNumber;
#endif  // !_MSC_VER

db_user_hero_skill::db_user_hero_skill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_hero_skill::InitAsDefaultInstance() {
}

db_user_hero_skill::db_user_hero_skill(const db_user_hero_skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_hero_skill::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_hero_skill::~db_user_hero_skill() {
  SharedDtor();
}

void db_user_hero_skill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_hero_skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_hero_skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_hero_skill_descriptor_;
}

const db_user_hero_skill& db_user_hero_skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_hero_skill* db_user_hero_skill::default_instance_ = NULL;

db_user_hero_skill* db_user_hero_skill::New() const {
  return new db_user_hero_skill;
}

void db_user_hero_skill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_hero_skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .user_hero_skill.e_skill_type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_hero_skill_e_skill_type_IsValid(value)) {
            set_type(static_cast< ::user_hero_skill_e_skill_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_hero_skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .user_hero_skill.e_skill_type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_hero_skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .user_hero_skill.e_skill_type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_hero_skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .user_hero_skill.e_skill_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_hero_skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_hero_skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_hero_skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_hero_skill::MergeFrom(const db_user_hero_skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_hero_skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_hero_skill::CopyFrom(const db_user_hero_skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_hero_skill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void db_user_hero_skill::Swap(db_user_hero_skill* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_hero_skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_hero_skill_descriptor_;
  metadata.reflection = db_user_hero_skill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_hero::kHeroIdFieldNumber;
const int db_user_hero::kStarFieldNumber;
const int db_user_hero::kQualityFieldNumber;
const int db_user_hero::kLevelFieldNumber;
const int db_user_hero::kCurExpFieldNumber;
const int db_user_hero::kGotTimestampFieldNumber;
const int db_user_hero::kEquipsFieldNumber;
const int db_user_hero::kSkillsFieldNumber;
#endif  // !_MSC_VER

db_user_hero::db_user_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_hero::InitAsDefaultInstance() {
}

db_user_hero::db_user_hero(const db_user_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_hero::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  star_ = 0u;
  quality_ = 0u;
  level_ = 0u;
  cur_exp_ = 0u;
  got_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_hero::~db_user_hero() {
  SharedDtor();
}

void db_user_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_hero_descriptor_;
}

const db_user_hero& db_user_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_hero* db_user_hero::default_instance_ = NULL;

db_user_hero* db_user_hero::New() const {
  return new db_user_hero;
}

void db_user_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    star_ = 0u;
    quality_ = 0u;
    level_ = 0u;
    cur_exp_ = 0u;
    got_timestamp_ = 0u;
  }
  equips_.Clear();
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // required uint32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_exp;
        break;
      }

      // required uint32 cur_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_exp_)));
          set_has_cur_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_got_timestamp;
        break;
      }

      // required uint32 got_timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_got_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &got_timestamp_)));
          set_has_got_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equips;
        break;
      }

      // repeated .db_user_hero_equip equips = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equips;
        if (input->ExpectTag(66)) goto parse_skills;
        break;
      }

      // repeated .db_user_hero_skill skills = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // required uint32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint32 cur_exp = 5;
  if (has_cur_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cur_exp(), output);
  }

  // required uint32 got_timestamp = 6;
  if (has_got_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->got_timestamp(), output);
  }

  // repeated .db_user_hero_equip equips = 7;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->equips(i), output);
  }

  // repeated .db_user_hero_skill skills = 8;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // required uint32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quality(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required uint32 cur_exp = 5;
  if (has_cur_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cur_exp(), target);
  }

  // required uint32 got_timestamp = 6;
  if (has_got_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->got_timestamp(), target);
  }

  // repeated .db_user_hero_equip equips = 7;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->equips(i), target);
  }

  // repeated .db_user_hero_skill skills = 8;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 cur_exp = 5;
    if (has_cur_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_exp());
    }

    // required uint32 got_timestamp = 6;
    if (has_got_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->got_timestamp());
    }

  }
  // repeated .db_user_hero_equip equips = 7;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .db_user_hero_skill skills = 8;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_hero::MergeFrom(const db_user_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cur_exp()) {
      set_cur_exp(from.cur_exp());
    }
    if (from.has_got_timestamp()) {
      set_got_timestamp(from.got_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_hero::CopyFrom(const db_user_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < equips_size(); i++) {
    if (!this->equips(i).IsInitialized()) return false;
  }
  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_hero::Swap(db_user_hero* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(star_, other->star_);
    std::swap(quality_, other->quality_);
    std::swap(level_, other->level_);
    std::swap(cur_exp_, other->cur_exp_);
    std::swap(got_timestamp_, other->got_timestamp_);
    equips_.Swap(&other->equips_);
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_hero_descriptor_;
  metadata.reflection = db_user_hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_hero_array::kItemsFieldNumber;
#endif  // !_MSC_VER

db_user_hero_array::db_user_hero_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_hero_array::InitAsDefaultInstance() {
}

db_user_hero_array::db_user_hero_array(const db_user_hero_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_hero_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_hero_array::~db_user_hero_array() {
  SharedDtor();
}

void db_user_hero_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_hero_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_hero_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_hero_array_descriptor_;
}

const db_user_hero_array& db_user_hero_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_hero_array* db_user_hero_array::default_instance_ = NULL;

db_user_hero_array* db_user_hero_array::New() const {
  return new db_user_hero_array;
}

void db_user_hero_array::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_hero_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db_user_hero items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_hero_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .db_user_hero items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_hero_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .db_user_hero items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_hero_array::ByteSize() const {
  int total_size = 0;

  // repeated .db_user_hero items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_hero_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_hero_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_hero_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_hero_array::MergeFrom(const db_user_hero_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_hero_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_hero_array::CopyFrom(const db_user_hero_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_hero_array::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_hero_array::Swap(db_user_hero_array* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_hero_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_hero_array_descriptor_;
  metadata.reflection = db_user_hero_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_mail_attach::kAttachIdFieldNumber;
const int db_mail_attach::kElementFieldNumber;
#endif  // !_MSC_VER

db_mail_attach::db_mail_attach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_mail_attach::InitAsDefaultInstance() {
  element_ = const_cast< ::struct_game_element*>(&::struct_game_element::default_instance());
}

db_mail_attach::db_mail_attach(const db_mail_attach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_mail_attach::SharedCtor() {
  _cached_size_ = 0;
  attach_id_ = 0u;
  element_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_mail_attach::~db_mail_attach() {
  SharedDtor();
}

void db_mail_attach::SharedDtor() {
  if (this != default_instance_) {
    delete element_;
  }
}

void db_mail_attach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_mail_attach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_mail_attach_descriptor_;
}

const db_mail_attach& db_mail_attach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_mail_attach* db_mail_attach::default_instance_ = NULL;

db_mail_attach* db_mail_attach::New() const {
  return new db_mail_attach;
}

void db_mail_attach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attach_id_ = 0u;
    if (has_element()) {
      if (element_ != NULL) element_->::struct_game_element::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_mail_attach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attach_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attach_id_)));
          set_has_attach_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_element;
        break;
      }

      // required .struct_game_element element = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_element:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_element()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_mail_attach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attach_id = 1;
  if (has_attach_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attach_id(), output);
  }

  // required .struct_game_element element = 2;
  if (has_element()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->element(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_mail_attach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attach_id = 1;
  if (has_attach_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attach_id(), target);
  }

  // required .struct_game_element element = 2;
  if (has_element()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->element(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_mail_attach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attach_id = 1;
    if (has_attach_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attach_id());
    }

    // required .struct_game_element element = 2;
    if (has_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->element());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_mail_attach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_mail_attach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_mail_attach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_mail_attach::MergeFrom(const db_mail_attach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attach_id()) {
      set_attach_id(from.attach_id());
    }
    if (from.has_element()) {
      mutable_element()->::struct_game_element::MergeFrom(from.element());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_mail_attach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_mail_attach::CopyFrom(const db_mail_attach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_mail_attach::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_element()) {
    if (!this->element().IsInitialized()) return false;
  }
  return true;
}

void db_mail_attach::Swap(db_mail_attach* other) {
  if (other != this) {
    std::swap(attach_id_, other->attach_id_);
    std::swap(element_, other->element_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_mail_attach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_mail_attach_descriptor_;
  metadata.reflection = db_mail_attach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_mail::kMailIdFieldNumber;
const int db_user_mail::kSendTimeFieldNumber;
const int db_user_mail::kTypeFieldNumber;
const int db_user_mail::kContentFieldNumber;
const int db_user_mail::kStatusFieldNumber;
const int db_user_mail::kAttachsFieldNumber;
#endif  // !_MSC_VER

db_user_mail::db_user_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_mail::InitAsDefaultInstance() {
}

db_user_mail::db_user_mail(const db_user_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_mail::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  send_time_ = 0u;
  type_ = 1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_mail::~db_user_mail() {
  SharedDtor();
}

void db_user_mail::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void db_user_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_mail_descriptor_;
}

const db_user_mail& db_user_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_mail* db_user_mail::default_instance_ = NULL;

db_user_mail* db_user_mail::New() const {
  return new db_user_mail;
}

void db_user_mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0u;
    send_time_ = 0u;
    type_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    status_ = 1;
  }
  attachs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_send_time;
        break;
      }

      // required uint32 send_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .MAIL_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MAIL_TYPE_IsValid(value)) {
            set_type(static_cast< ::MAIL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required .MAIL_STATUS status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MAIL_STATUS_IsValid(value)) {
            set_status(static_cast< ::MAIL_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attachs;
        break;
      }

      // repeated .db_mail_attach attachs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attachs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // required uint32 send_time = 2;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->send_time(), output);
  }

  // required .MAIL_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  // required .MAIL_STATUS status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // repeated .db_mail_attach attachs = 6;
  for (int i = 0; i < this->attachs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attachs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // required uint32 send_time = 2;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->send_time(), target);
  }

  // required .MAIL_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // required .MAIL_STATUS status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // repeated .db_mail_attach attachs = 6;
  for (int i = 0; i < this->attachs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attachs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

    // required uint32 send_time = 2;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_time());
    }

    // required .MAIL_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required .MAIL_STATUS status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .db_mail_attach attachs = 6;
  total_size += 1 * this->attachs_size();
  for (int i = 0; i < this->attachs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_mail::MergeFrom(const db_user_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachs_.MergeFrom(from.attachs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_mail::CopyFrom(const db_user_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  for (int i = 0; i < attachs_size(); i++) {
    if (!this->attachs(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_mail::Swap(db_user_mail* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(send_time_, other->send_time_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(status_, other->status_);
    attachs_.Swap(&other->attachs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_mail_descriptor_;
  metadata.reflection = db_user_mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_mail_array::kMailsFieldNumber;
#endif  // !_MSC_VER

db_user_mail_array::db_user_mail_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_mail_array::InitAsDefaultInstance() {
}

db_user_mail_array::db_user_mail_array(const db_user_mail_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_mail_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_mail_array::~db_user_mail_array() {
  SharedDtor();
}

void db_user_mail_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_mail_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_mail_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_mail_array_descriptor_;
}

const db_user_mail_array& db_user_mail_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_mail_array* db_user_mail_array::default_instance_ = NULL;

db_user_mail_array* db_user_mail_array::New() const {
  return new db_user_mail_array;
}

void db_user_mail_array::Clear() {
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_mail_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db_user_mail mails = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_mail_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .db_user_mail mails = 1;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_mail_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .db_user_mail mails = 1;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_mail_array::ByteSize() const {
  int total_size = 0;

  // repeated .db_user_mail mails = 1;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_mail_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_mail_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_mail_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_mail_array::MergeFrom(const db_user_mail_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_mail_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_mail_array::CopyFrom(const db_user_mail_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_mail_array::IsInitialized() const {

  for (int i = 0; i < mails_size(); i++) {
    if (!this->mails(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_mail_array::Swap(db_user_mail_array* other) {
  if (other != this) {
    mails_.Swap(&other->mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_mail_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_mail_array_descriptor_;
  metadata.reflection = db_user_mail_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_shop_buy::kElementTypeFieldNumber;
const int db_user_shop_buy::kElementIdFieldNumber;
const int db_user_shop_buy::kLastDayBuyNumFieldNumber;
const int db_user_shop_buy::kLastBuyTimeFieldNumber;
#endif  // !_MSC_VER

db_user_shop_buy::db_user_shop_buy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_shop_buy::InitAsDefaultInstance() {
}

db_user_shop_buy::db_user_shop_buy(const db_user_shop_buy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_shop_buy::SharedCtor() {
  _cached_size_ = 0;
  element_type_ = 0;
  element_id_ = 0u;
  last_day_buy_num_ = 0u;
  last_buy_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_shop_buy::~db_user_shop_buy() {
  SharedDtor();
}

void db_user_shop_buy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_shop_buy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_shop_buy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_shop_buy_descriptor_;
}

const db_user_shop_buy& db_user_shop_buy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_shop_buy* db_user_shop_buy::default_instance_ = NULL;

db_user_shop_buy* db_user_shop_buy::New() const {
  return new db_user_shop_buy;
}

void db_user_shop_buy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    element_type_ = 0;
    element_id_ = 0u;
    last_day_buy_num_ = 0u;
    last_buy_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_shop_buy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .struct_game_element.EELEMENTTYPE element_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::struct_game_element_EELEMENTTYPE_IsValid(value)) {
            set_element_type(static_cast< ::struct_game_element_EELEMENTTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_element_id;
        break;
      }

      // required uint32 element_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_id_)));
          set_has_element_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_day_buy_num;
        break;
      }

      // required uint32 last_day_buy_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_buy_num_)));
          set_has_last_day_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_buy_time;
        break;
      }

      // required uint32 last_buy_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_buy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_buy_time_)));
          set_has_last_buy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_shop_buy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .struct_game_element.EELEMENTTYPE element_type = 1;
  if (has_element_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->element_type(), output);
  }

  // required uint32 element_id = 2;
  if (has_element_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->element_id(), output);
  }

  // required uint32 last_day_buy_num = 3;
  if (has_last_day_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_day_buy_num(), output);
  }

  // required uint32 last_buy_time = 4;
  if (has_last_buy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_buy_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_shop_buy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .struct_game_element.EELEMENTTYPE element_type = 1;
  if (has_element_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->element_type(), target);
  }

  // required uint32 element_id = 2;
  if (has_element_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->element_id(), target);
  }

  // required uint32 last_day_buy_num = 3;
  if (has_last_day_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_day_buy_num(), target);
  }

  // required uint32 last_buy_time = 4;
  if (has_last_buy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_buy_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_shop_buy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .struct_game_element.EELEMENTTYPE element_type = 1;
    if (has_element_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->element_type());
    }

    // required uint32 element_id = 2;
    if (has_element_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->element_id());
    }

    // required uint32 last_day_buy_num = 3;
    if (has_last_day_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_buy_num());
    }

    // required uint32 last_buy_time = 4;
    if (has_last_buy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_buy_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_shop_buy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_shop_buy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_shop_buy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_shop_buy::MergeFrom(const db_user_shop_buy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_element_type()) {
      set_element_type(from.element_type());
    }
    if (from.has_element_id()) {
      set_element_id(from.element_id());
    }
    if (from.has_last_day_buy_num()) {
      set_last_day_buy_num(from.last_day_buy_num());
    }
    if (from.has_last_buy_time()) {
      set_last_buy_time(from.last_buy_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_shop_buy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_shop_buy::CopyFrom(const db_user_shop_buy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_shop_buy::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void db_user_shop_buy::Swap(db_user_shop_buy* other) {
  if (other != this) {
    std::swap(element_type_, other->element_type_);
    std::swap(element_id_, other->element_id_);
    std::swap(last_day_buy_num_, other->last_day_buy_num_);
    std::swap(last_buy_time_, other->last_buy_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_shop_buy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_shop_buy_descriptor_;
  metadata.reflection = db_user_shop_buy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_shop_buy_array::kItemsFieldNumber;
#endif  // !_MSC_VER

db_user_shop_buy_array::db_user_shop_buy_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_shop_buy_array::InitAsDefaultInstance() {
}

db_user_shop_buy_array::db_user_shop_buy_array(const db_user_shop_buy_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_shop_buy_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_shop_buy_array::~db_user_shop_buy_array() {
  SharedDtor();
}

void db_user_shop_buy_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_shop_buy_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_shop_buy_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_shop_buy_array_descriptor_;
}

const db_user_shop_buy_array& db_user_shop_buy_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_shop_buy_array* db_user_shop_buy_array::default_instance_ = NULL;

db_user_shop_buy_array* db_user_shop_buy_array::New() const {
  return new db_user_shop_buy_array;
}

void db_user_shop_buy_array::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_shop_buy_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db_user_shop_buy items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_shop_buy_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .db_user_shop_buy items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_shop_buy_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .db_user_shop_buy items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_shop_buy_array::ByteSize() const {
  int total_size = 0;

  // repeated .db_user_shop_buy items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_shop_buy_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_shop_buy_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_shop_buy_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_shop_buy_array::MergeFrom(const db_user_shop_buy_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_shop_buy_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_shop_buy_array::CopyFrom(const db_user_shop_buy_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_shop_buy_array::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_shop_buy_array::Swap(db_user_shop_buy_array* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_shop_buy_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_shop_buy_array_descriptor_;
  metadata.reflection = db_user_shop_buy_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_shop_item::kPosFieldNumber;
const int db_user_shop_item::kElementTypeFieldNumber;
const int db_user_shop_item::kElementIdFieldNumber;
const int db_user_shop_item::kElementNumFieldNumber;
const int db_user_shop_item::kConsumeTypeFieldNumber;
const int db_user_shop_item::kConsumeIdFieldNumber;
const int db_user_shop_item::kConsumeNumFieldNumber;
const int db_user_shop_item::kFlagFieldNumber;
const int db_user_shop_item::kIsSoldFieldNumber;
#endif  // !_MSC_VER

db_user_shop_item::db_user_shop_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_shop_item::InitAsDefaultInstance() {
}

db_user_shop_item::db_user_shop_item(const db_user_shop_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_shop_item::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  element_type_ = 0;
  element_id_ = 0u;
  element_num_ = 0u;
  consume_type_ = 0;
  consume_id_ = 0u;
  consume_num_ = 0u;
  flag_ = 0;
  is_sold_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_shop_item::~db_user_shop_item() {
  SharedDtor();
}

void db_user_shop_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_shop_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_shop_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_shop_item_descriptor_;
}

const db_user_shop_item& db_user_shop_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_shop_item* db_user_shop_item::default_instance_ = NULL;

db_user_shop_item* db_user_shop_item::New() const {
  return new db_user_shop_item;
}

void db_user_shop_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    element_type_ = 0;
    element_id_ = 0u;
    element_num_ = 0u;
    consume_type_ = 0;
    consume_id_ = 0u;
    consume_num_ = 0u;
    flag_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_sold_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_shop_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_element_type;
        break;
      }

      // required .struct_game_element.EELEMENTTYPE element_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::struct_game_element_EELEMENTTYPE_IsValid(value)) {
            set_element_type(static_cast< ::struct_game_element_EELEMENTTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_element_id;
        break;
      }

      // required uint32 element_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_id_)));
          set_has_element_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_element_num;
        break;
      }

      // required uint32 element_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_num_)));
          set_has_element_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consume_type;
        break;
      }

      // required .struct_game_element.EELEMENTTYPE consume_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::struct_game_element_EELEMENTTYPE_IsValid(value)) {
            set_consume_type(static_cast< ::struct_game_element_EELEMENTTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_consume_id;
        break;
      }

      // required uint32 consume_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_id_)));
          set_has_consume_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_consume_num;
        break;
      }

      // required uint32 consume_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_num_)));
          set_has_consume_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flag;
        break;
      }

      // required .user_shop_item.ESHOPITEMFLAG flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_shop_item_ESHOPITEMFLAG_IsValid(value)) {
            set_flag(static_cast< ::user_shop_item_ESHOPITEMFLAG >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_sold;
        break;
      }

      // required uint32 is_sold = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_sold_)));
          set_has_is_sold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_shop_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required .struct_game_element.EELEMENTTYPE element_type = 2;
  if (has_element_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->element_type(), output);
  }

  // required uint32 element_id = 3;
  if (has_element_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->element_id(), output);
  }

  // required uint32 element_num = 4;
  if (has_element_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->element_num(), output);
  }

  // required .struct_game_element.EELEMENTTYPE consume_type = 5;
  if (has_consume_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->consume_type(), output);
  }

  // required uint32 consume_id = 6;
  if (has_consume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consume_id(), output);
  }

  // required uint32 consume_num = 7;
  if (has_consume_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->consume_num(), output);
  }

  // required .user_shop_item.ESHOPITEMFLAG flag = 8;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->flag(), output);
  }

  // required uint32 is_sold = 9;
  if (has_is_sold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->is_sold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_shop_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required .struct_game_element.EELEMENTTYPE element_type = 2;
  if (has_element_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->element_type(), target);
  }

  // required uint32 element_id = 3;
  if (has_element_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->element_id(), target);
  }

  // required uint32 element_num = 4;
  if (has_element_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->element_num(), target);
  }

  // required .struct_game_element.EELEMENTTYPE consume_type = 5;
  if (has_consume_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->consume_type(), target);
  }

  // required uint32 consume_id = 6;
  if (has_consume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->consume_id(), target);
  }

  // required uint32 consume_num = 7;
  if (has_consume_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->consume_num(), target);
  }

  // required .user_shop_item.ESHOPITEMFLAG flag = 8;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->flag(), target);
  }

  // required uint32 is_sold = 9;
  if (has_is_sold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->is_sold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_shop_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required .struct_game_element.EELEMENTTYPE element_type = 2;
    if (has_element_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->element_type());
    }

    // required uint32 element_id = 3;
    if (has_element_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->element_id());
    }

    // required uint32 element_num = 4;
    if (has_element_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->element_num());
    }

    // required .struct_game_element.EELEMENTTYPE consume_type = 5;
    if (has_consume_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->consume_type());
    }

    // required uint32 consume_id = 6;
    if (has_consume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_id());
    }

    // required uint32 consume_num = 7;
    if (has_consume_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume_num());
    }

    // required .user_shop_item.ESHOPITEMFLAG flag = 8;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 is_sold = 9;
    if (has_is_sold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_sold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_shop_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_shop_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_shop_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_shop_item::MergeFrom(const db_user_shop_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_element_type()) {
      set_element_type(from.element_type());
    }
    if (from.has_element_id()) {
      set_element_id(from.element_id());
    }
    if (from.has_element_num()) {
      set_element_num(from.element_num());
    }
    if (from.has_consume_type()) {
      set_consume_type(from.consume_type());
    }
    if (from.has_consume_id()) {
      set_consume_id(from.consume_id());
    }
    if (from.has_consume_num()) {
      set_consume_num(from.consume_num());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_sold()) {
      set_is_sold(from.is_sold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_shop_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_shop_item::CopyFrom(const db_user_shop_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_shop_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void db_user_shop_item::Swap(db_user_shop_item* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(element_type_, other->element_type_);
    std::swap(element_id_, other->element_id_);
    std::swap(element_num_, other->element_num_);
    std::swap(consume_type_, other->consume_type_);
    std::swap(consume_id_, other->consume_id_);
    std::swap(consume_num_, other->consume_num_);
    std::swap(flag_, other->flag_);
    std::swap(is_sold_, other->is_sold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_shop_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_shop_item_descriptor_;
  metadata.reflection = db_user_shop_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_shop::kShopTypeFieldNumber;
const int db_user_shop::kLastAutoRefreshTimeFieldNumber;
const int db_user_shop::kLastManualRefreshTimeFieldNumber;
const int db_user_shop::kLastDayManualRefreshNumFieldNumber;
const int db_user_shop::kRandomOpenStartTimestampFieldNumber;
const int db_user_shop::kRandomOpenEndTimestampFieldNumber;
const int db_user_shop::kItemsFieldNumber;
#endif  // !_MSC_VER

db_user_shop::db_user_shop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_shop::InitAsDefaultInstance() {
}

db_user_shop::db_user_shop(const db_user_shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_shop::SharedCtor() {
  _cached_size_ = 0;
  shop_type_ = 0;
  last_auto_refresh_time_ = 0u;
  last_manual_refresh_time_ = 0u;
  last_day_manual_refresh_num_ = 0u;
  random_open_start_timestamp_ = 0u;
  random_open_end_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_shop::~db_user_shop() {
  SharedDtor();
}

void db_user_shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_shop_descriptor_;
}

const db_user_shop& db_user_shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_shop* db_user_shop::default_instance_ = NULL;

db_user_shop* db_user_shop::New() const {
  return new db_user_shop;
}

void db_user_shop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_type_ = 0;
    last_auto_refresh_time_ = 0u;
    last_manual_refresh_time_ = 0u;
    last_day_manual_refresh_num_ = 0u;
    random_open_start_timestamp_ = 0u;
    random_open_end_timestamp_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .user_shop.ESHOPTYPE shop_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_shop_ESHOPTYPE_IsValid(value)) {
            set_shop_type(static_cast< ::user_shop_ESHOPTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_auto_refresh_time;
        break;
      }

      // required uint32 last_auto_refresh_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_auto_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_auto_refresh_time_)));
          set_has_last_auto_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_manual_refresh_time;
        break;
      }

      // required uint32 last_manual_refresh_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_manual_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_manual_refresh_time_)));
          set_has_last_manual_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_day_manual_refresh_num;
        break;
      }

      // required uint32 last_day_manual_refresh_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_manual_refresh_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_manual_refresh_num_)));
          set_has_last_day_manual_refresh_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_random_open_start_timestamp;
        break;
      }

      // required uint32 random_open_start_timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_open_start_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_open_start_timestamp_)));
          set_has_random_open_start_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_random_open_end_timestamp;
        break;
      }

      // required uint32 random_open_end_timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_open_end_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_open_end_timestamp_)));
          set_has_random_open_end_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_items;
        break;
      }

      // repeated .db_user_shop_item items = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .user_shop.ESHOPTYPE shop_type = 1;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shop_type(), output);
  }

  // required uint32 last_auto_refresh_time = 2;
  if (has_last_auto_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_auto_refresh_time(), output);
  }

  // required uint32 last_manual_refresh_time = 3;
  if (has_last_manual_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_manual_refresh_time(), output);
  }

  // required uint32 last_day_manual_refresh_num = 4;
  if (has_last_day_manual_refresh_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_day_manual_refresh_num(), output);
  }

  // required uint32 random_open_start_timestamp = 5;
  if (has_random_open_start_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->random_open_start_timestamp(), output);
  }

  // required uint32 random_open_end_timestamp = 6;
  if (has_random_open_end_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->random_open_end_timestamp(), output);
  }

  // repeated .db_user_shop_item items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .user_shop.ESHOPTYPE shop_type = 1;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shop_type(), target);
  }

  // required uint32 last_auto_refresh_time = 2;
  if (has_last_auto_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_auto_refresh_time(), target);
  }

  // required uint32 last_manual_refresh_time = 3;
  if (has_last_manual_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_manual_refresh_time(), target);
  }

  // required uint32 last_day_manual_refresh_num = 4;
  if (has_last_day_manual_refresh_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_day_manual_refresh_num(), target);
  }

  // required uint32 random_open_start_timestamp = 5;
  if (has_random_open_start_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->random_open_start_timestamp(), target);
  }

  // required uint32 random_open_end_timestamp = 6;
  if (has_random_open_end_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->random_open_end_timestamp(), target);
  }

  // repeated .db_user_shop_item items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_shop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .user_shop.ESHOPTYPE shop_type = 1;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shop_type());
    }

    // required uint32 last_auto_refresh_time = 2;
    if (has_last_auto_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_auto_refresh_time());
    }

    // required uint32 last_manual_refresh_time = 3;
    if (has_last_manual_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_manual_refresh_time());
    }

    // required uint32 last_day_manual_refresh_num = 4;
    if (has_last_day_manual_refresh_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_manual_refresh_num());
    }

    // required uint32 random_open_start_timestamp = 5;
    if (has_random_open_start_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_open_start_timestamp());
    }

    // required uint32 random_open_end_timestamp = 6;
    if (has_random_open_end_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_open_end_timestamp());
    }

  }
  // repeated .db_user_shop_item items = 7;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_shop::MergeFrom(const db_user_shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
    if (from.has_last_auto_refresh_time()) {
      set_last_auto_refresh_time(from.last_auto_refresh_time());
    }
    if (from.has_last_manual_refresh_time()) {
      set_last_manual_refresh_time(from.last_manual_refresh_time());
    }
    if (from.has_last_day_manual_refresh_num()) {
      set_last_day_manual_refresh_num(from.last_day_manual_refresh_num());
    }
    if (from.has_random_open_start_timestamp()) {
      set_random_open_start_timestamp(from.random_open_start_timestamp());
    }
    if (from.has_random_open_end_timestamp()) {
      set_random_open_end_timestamp(from.random_open_end_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_shop::CopyFrom(const db_user_shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_shop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_shop::Swap(db_user_shop* other) {
  if (other != this) {
    std::swap(shop_type_, other->shop_type_);
    std::swap(last_auto_refresh_time_, other->last_auto_refresh_time_);
    std::swap(last_manual_refresh_time_, other->last_manual_refresh_time_);
    std::swap(last_day_manual_refresh_num_, other->last_day_manual_refresh_num_);
    std::swap(random_open_start_timestamp_, other->random_open_start_timestamp_);
    std::swap(random_open_end_timestamp_, other->random_open_end_timestamp_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_shop_descriptor_;
  metadata.reflection = db_user_shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_shop_array::kItemsFieldNumber;
#endif  // !_MSC_VER

db_user_shop_array::db_user_shop_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_shop_array::InitAsDefaultInstance() {
}

db_user_shop_array::db_user_shop_array(const db_user_shop_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_shop_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_shop_array::~db_user_shop_array() {
  SharedDtor();
}

void db_user_shop_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_shop_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_shop_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_shop_array_descriptor_;
}

const db_user_shop_array& db_user_shop_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_shop_array* db_user_shop_array::default_instance_ = NULL;

db_user_shop_array* db_user_shop_array::New() const {
  return new db_user_shop_array;
}

void db_user_shop_array::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_shop_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db_user_shop items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_shop_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .db_user_shop items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_shop_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .db_user_shop items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_shop_array::ByteSize() const {
  int total_size = 0;

  // repeated .db_user_shop items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_shop_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_shop_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_shop_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_shop_array::MergeFrom(const db_user_shop_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_shop_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_shop_array::CopyFrom(const db_user_shop_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_shop_array::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_shop_array::Swap(db_user_shop_array* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_shop_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_shop_array_descriptor_;
  metadata.reflection = db_user_shop_array_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* db_user_mission_event_MISSION_EVENT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_mission_event_MISSION_EVENT_TYPE_descriptor_;
}
bool db_user_mission_event_MISSION_EVENT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::min;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::SKILL_LEVEL_UP;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::RECHARGE;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::COMMON_FB_COMPLETE;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::COMMON_FB_ALL_THROUGH;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::COMMON_FB_ALL_THROUGH_THREE_STAR;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::EQUIP_LEVEL_UP;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::RECHARGE_MISSION_MONTH_CARD1;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::GIVE_FRIEND_HEALTH;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::HERO_COLLECT;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::HEALTH_MEAL;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::GET_REWARD;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::RECHARGE_MISSION_MONTH_CARD2;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::MISSION_MAIN;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::MISSION_FREE;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::ACTIVITY;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::JI_TAN;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::ARENA_CHALLENGE;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::SHI_LIAN_TA;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::CRUSADE;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::LEVEL_UP;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::BUY_GOLD;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::FB_FAIL;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::COMPLETE_CHAPTER_ALL_FB_THREE_STAR;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::ARENA_RANK_TOP;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::COMPLETE_CHAPTER_FB;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::Buy_Health;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::Buy_Skill_Point;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::Login;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::Del_Friend;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::Hero_Life;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::Crusade_Reset;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::Crusade_Promote_Reward;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::Crusade_Refresh_Buff;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::max;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::MISSION_EVENT_TYPE_MIN;
const db_user_mission_event_MISSION_EVENT_TYPE db_user_mission_event::MISSION_EVENT_TYPE_MAX;
const int db_user_mission_event::MISSION_EVENT_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* db_user_mission_event_MISSION_EVENT_SUB_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_mission_event_MISSION_EVENT_SUB_TYPE_descriptor_;
}
bool db_user_mission_event_MISSION_EVENT_SUB_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const db_user_mission_event_MISSION_EVENT_SUB_TYPE db_user_mission_event::MIN;
const db_user_mission_event_MISSION_EVENT_SUB_TYPE db_user_mission_event::NONE;
const db_user_mission_event_MISSION_EVENT_SUB_TYPE db_user_mission_event::HERO_QUALITY_GREEN;
const db_user_mission_event_MISSION_EVENT_SUB_TYPE db_user_mission_event::HERO_QUALITY_BLUE;
const db_user_mission_event_MISSION_EVENT_SUB_TYPE db_user_mission_event::HERO_STAR_FOUR;
const db_user_mission_event_MISSION_EVENT_SUB_TYPE db_user_mission_event::HERO_STAR_THREE;
const db_user_mission_event_MISSION_EVENT_SUB_TYPE db_user_mission_event::PLAYER_LEVEL;
const db_user_mission_event_MISSION_EVENT_SUB_TYPE db_user_mission_event::VIP_LEVEL;
const db_user_mission_event_MISSION_EVENT_SUB_TYPE db_user_mission_event::HUAXIA;
const db_user_mission_event_MISSION_EVENT_SUB_TYPE db_user_mission_event::MAX;
const db_user_mission_event_MISSION_EVENT_SUB_TYPE db_user_mission_event::MISSION_EVENT_SUB_TYPE_MIN;
const db_user_mission_event_MISSION_EVENT_SUB_TYPE db_user_mission_event::MISSION_EVENT_SUB_TYPE_MAX;
const int db_user_mission_event::MISSION_EVENT_SUB_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int db_user_mission_event::kMissionEventTypeFieldNumber;
const int db_user_mission_event::kMissionEventSubTypeFieldNumber;
const int db_user_mission_event::kLastUpdateTimestampFieldNumber;
const int db_user_mission_event::kLastDayValueFieldNumber;
const int db_user_mission_event::kTotalValueFieldNumber;
#endif  // !_MSC_VER

db_user_mission_event::db_user_mission_event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_mission_event::InitAsDefaultInstance() {
}

db_user_mission_event::db_user_mission_event(const db_user_mission_event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_mission_event::SharedCtor() {
  _cached_size_ = 0;
  mission_event_type_ = 0;
  mission_event_sub_type_ = 0u;
  last_update_timestamp_ = 0u;
  last_day_value_ = 0u;
  total_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_mission_event::~db_user_mission_event() {
  SharedDtor();
}

void db_user_mission_event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_mission_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_mission_event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_mission_event_descriptor_;
}

const db_user_mission_event& db_user_mission_event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_mission_event* db_user_mission_event::default_instance_ = NULL;

db_user_mission_event* db_user_mission_event::New() const {
  return new db_user_mission_event;
}

void db_user_mission_event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_event_type_ = 0;
    mission_event_sub_type_ = 0u;
    last_update_timestamp_ = 0u;
    last_day_value_ = 0u;
    total_value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_mission_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .db_user_mission_event.MISSION_EVENT_TYPE mission_event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::db_user_mission_event_MISSION_EVENT_TYPE_IsValid(value)) {
            set_mission_event_type(static_cast< ::db_user_mission_event_MISSION_EVENT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mission_event_sub_type;
        break;
      }

      // required uint32 mission_event_sub_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission_event_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_event_sub_type_)));
          set_has_mission_event_sub_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_update_timestamp;
        break;
      }

      // optional uint32 last_update_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_update_timestamp_)));
          set_has_last_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_day_value;
        break;
      }

      // optional uint32 last_day_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_value_)));
          set_has_last_day_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_value;
        break;
      }

      // optional uint32 total_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_value_)));
          set_has_total_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_mission_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .db_user_mission_event.MISSION_EVENT_TYPE mission_event_type = 1;
  if (has_mission_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mission_event_type(), output);
  }

  // required uint32 mission_event_sub_type = 2;
  if (has_mission_event_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mission_event_sub_type(), output);
  }

  // optional uint32 last_update_timestamp = 3;
  if (has_last_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_update_timestamp(), output);
  }

  // optional uint32 last_day_value = 4;
  if (has_last_day_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_day_value(), output);
  }

  // optional uint32 total_value = 5;
  if (has_total_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_mission_event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .db_user_mission_event.MISSION_EVENT_TYPE mission_event_type = 1;
  if (has_mission_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mission_event_type(), target);
  }

  // required uint32 mission_event_sub_type = 2;
  if (has_mission_event_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mission_event_sub_type(), target);
  }

  // optional uint32 last_update_timestamp = 3;
  if (has_last_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_update_timestamp(), target);
  }

  // optional uint32 last_day_value = 4;
  if (has_last_day_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_day_value(), target);
  }

  // optional uint32 total_value = 5;
  if (has_total_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_mission_event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .db_user_mission_event.MISSION_EVENT_TYPE mission_event_type = 1;
    if (has_mission_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mission_event_type());
    }

    // required uint32 mission_event_sub_type = 2;
    if (has_mission_event_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_event_sub_type());
    }

    // optional uint32 last_update_timestamp = 3;
    if (has_last_update_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_update_timestamp());
    }

    // optional uint32 last_day_value = 4;
    if (has_last_day_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_value());
    }

    // optional uint32 total_value = 5;
    if (has_total_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_mission_event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_mission_event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_mission_event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_mission_event::MergeFrom(const db_user_mission_event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_event_type()) {
      set_mission_event_type(from.mission_event_type());
    }
    if (from.has_mission_event_sub_type()) {
      set_mission_event_sub_type(from.mission_event_sub_type());
    }
    if (from.has_last_update_timestamp()) {
      set_last_update_timestamp(from.last_update_timestamp());
    }
    if (from.has_last_day_value()) {
      set_last_day_value(from.last_day_value());
    }
    if (from.has_total_value()) {
      set_total_value(from.total_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_mission_event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_mission_event::CopyFrom(const db_user_mission_event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_mission_event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void db_user_mission_event::Swap(db_user_mission_event* other) {
  if (other != this) {
    std::swap(mission_event_type_, other->mission_event_type_);
    std::swap(mission_event_sub_type_, other->mission_event_sub_type_);
    std::swap(last_update_timestamp_, other->last_update_timestamp_);
    std::swap(last_day_value_, other->last_day_value_);
    std::swap(total_value_, other->total_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_mission_event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_mission_event_descriptor_;
  metadata.reflection = db_user_mission_event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_arena_log_db_user_arena_log_hero::kHeroIdFieldNumber;
const int db_user_arena_log_db_user_arena_log_hero::kQualityFieldNumber;
const int db_user_arena_log_db_user_arena_log_hero::kLevelFieldNumber;
const int db_user_arena_log_db_user_arena_log_hero::kStarFieldNumber;
#endif  // !_MSC_VER

db_user_arena_log_db_user_arena_log_hero::db_user_arena_log_db_user_arena_log_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_arena_log_db_user_arena_log_hero::InitAsDefaultInstance() {
}

db_user_arena_log_db_user_arena_log_hero::db_user_arena_log_db_user_arena_log_hero(const db_user_arena_log_db_user_arena_log_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_arena_log_db_user_arena_log_hero::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  quality_ = 0u;
  level_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_arena_log_db_user_arena_log_hero::~db_user_arena_log_db_user_arena_log_hero() {
  SharedDtor();
}

void db_user_arena_log_db_user_arena_log_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_arena_log_db_user_arena_log_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_arena_log_db_user_arena_log_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_arena_log_db_user_arena_log_hero_descriptor_;
}

const db_user_arena_log_db_user_arena_log_hero& db_user_arena_log_db_user_arena_log_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_arena_log_db_user_arena_log_hero* db_user_arena_log_db_user_arena_log_hero::default_instance_ = NULL;

db_user_arena_log_db_user_arena_log_hero* db_user_arena_log_db_user_arena_log_hero::New() const {
  return new db_user_arena_log_db_user_arena_log_hero;
}

void db_user_arena_log_db_user_arena_log_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    quality_ = 0u;
    level_ = 0u;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_arena_log_db_user_arena_log_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // required uint32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // required uint32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_arena_log_db_user_arena_log_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quality(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_arena_log_db_user_arena_log_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quality(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_arena_log_db_user_arena_log_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_arena_log_db_user_arena_log_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_arena_log_db_user_arena_log_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_arena_log_db_user_arena_log_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_arena_log_db_user_arena_log_hero::MergeFrom(const db_user_arena_log_db_user_arena_log_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_arena_log_db_user_arena_log_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_arena_log_db_user_arena_log_hero::CopyFrom(const db_user_arena_log_db_user_arena_log_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_arena_log_db_user_arena_log_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void db_user_arena_log_db_user_arena_log_hero::Swap(db_user_arena_log_db_user_arena_log_hero* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(quality_, other->quality_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_arena_log_db_user_arena_log_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_arena_log_db_user_arena_log_hero_descriptor_;
  metadata.reflection = db_user_arena_log_db_user_arena_log_hero_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_user_arena_log::kIsAttackerWinFieldNumber;
const int db_user_arena_log::kTimeFieldNumber;
const int db_user_arena_log::kIsMeAttackerFieldNumber;
const int db_user_arena_log::kMeRankFieldNumber;
const int db_user_arena_log::kMatchUserIdFieldNumber;
const int db_user_arena_log::kMatchRankFieldNumber;
const int db_user_arena_log::kMatchPowerFieldNumber;
const int db_user_arena_log::kMatchNameFieldNumber;
const int db_user_arena_log::kMatchLevelFieldNumber;
const int db_user_arena_log::kMatchHerosFieldNumber;
#endif  // !_MSC_VER

db_user_arena_log::db_user_arena_log()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_arena_log::InitAsDefaultInstance() {
}

db_user_arena_log::db_user_arena_log(const db_user_arena_log& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_arena_log::SharedCtor() {
  _cached_size_ = 0;
  is_attacker_win_ = false;
  time_ = 0u;
  is_me_attacker_ = false;
  me_rank_ = 0u;
  match_user_id_ = 0u;
  match_rank_ = 0u;
  match_power_ = 0u;
  match_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  match_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_arena_log::~db_user_arena_log() {
  SharedDtor();
}

void db_user_arena_log::SharedDtor() {
  if (match_name_ != &::google::protobuf::internal::kEmptyString) {
    delete match_name_;
  }
  if (this != default_instance_) {
  }
}

void db_user_arena_log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_arena_log::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_arena_log_descriptor_;
}

const db_user_arena_log& db_user_arena_log::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_arena_log* db_user_arena_log::default_instance_ = NULL;

db_user_arena_log* db_user_arena_log::New() const {
  return new db_user_arena_log;
}

void db_user_arena_log::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_attacker_win_ = false;
    time_ = 0u;
    is_me_attacker_ = false;
    me_rank_ = 0u;
    match_user_id_ = 0u;
    match_rank_ = 0u;
    match_power_ = 0u;
    if (has_match_name()) {
      if (match_name_ != &::google::protobuf::internal::kEmptyString) {
        match_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    match_level_ = 0u;
  }
  match_heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_arena_log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_attacker_win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_win_)));
          set_has_is_attacker_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_me_attacker;
        break;
      }

      // required bool is_me_attacker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_me_attacker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_me_attacker_)));
          set_has_is_me_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_me_rank;
        break;
      }

      // required uint32 me_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_me_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &me_rank_)));
          set_has_me_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_match_user_id;
        break;
      }

      // required uint32 match_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_user_id_)));
          set_has_match_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_match_rank;
        break;
      }

      // required uint32 match_rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_rank_)));
          set_has_match_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_match_power;
        break;
      }

      // required uint32 match_power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_power_)));
          set_has_match_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_match_name;
        break;
      }

      // required string match_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->match_name().data(), this->match_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_match_level;
        break;
      }

      // required uint32 match_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_level_)));
          set_has_match_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_match_heros;
        break;
      }

      // repeated .db_user_arena_log.db_user_arena_log_hero match_heros = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_match_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_match_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_arena_log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_attacker_win = 1;
  if (has_is_attacker_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_attacker_win(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required bool is_me_attacker = 3;
  if (has_is_me_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_me_attacker(), output);
  }

  // required uint32 me_rank = 4;
  if (has_me_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->me_rank(), output);
  }

  // required uint32 match_user_id = 5;
  if (has_match_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->match_user_id(), output);
  }

  // required uint32 match_rank = 6;
  if (has_match_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->match_rank(), output);
  }

  // required uint32 match_power = 7;
  if (has_match_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->match_power(), output);
  }

  // required string match_name = 8;
  if (has_match_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_name().data(), this->match_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->match_name(), output);
  }

  // required uint32 match_level = 9;
  if (has_match_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->match_level(), output);
  }

  // repeated .db_user_arena_log.db_user_arena_log_hero match_heros = 10;
  for (int i = 0; i < this->match_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->match_heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_arena_log::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_attacker_win = 1;
  if (has_is_attacker_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_attacker_win(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // required bool is_me_attacker = 3;
  if (has_is_me_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_me_attacker(), target);
  }

  // required uint32 me_rank = 4;
  if (has_me_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->me_rank(), target);
  }

  // required uint32 match_user_id = 5;
  if (has_match_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->match_user_id(), target);
  }

  // required uint32 match_rank = 6;
  if (has_match_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->match_rank(), target);
  }

  // required uint32 match_power = 7;
  if (has_match_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->match_power(), target);
  }

  // required string match_name = 8;
  if (has_match_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_name().data(), this->match_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->match_name(), target);
  }

  // required uint32 match_level = 9;
  if (has_match_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->match_level(), target);
  }

  // repeated .db_user_arena_log.db_user_arena_log_hero match_heros = 10;
  for (int i = 0; i < this->match_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->match_heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_arena_log::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_attacker_win = 1;
    if (has_is_attacker_win()) {
      total_size += 1 + 1;
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required bool is_me_attacker = 3;
    if (has_is_me_attacker()) {
      total_size += 1 + 1;
    }

    // required uint32 me_rank = 4;
    if (has_me_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->me_rank());
    }

    // required uint32 match_user_id = 5;
    if (has_match_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_user_id());
    }

    // required uint32 match_rank = 6;
    if (has_match_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_rank());
    }

    // required uint32 match_power = 7;
    if (has_match_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_power());
    }

    // required string match_name = 8;
    if (has_match_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 match_level = 9;
    if (has_match_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_level());
    }

  }
  // repeated .db_user_arena_log.db_user_arena_log_hero match_heros = 10;
  total_size += 1 * this->match_heros_size();
  for (int i = 0; i < this->match_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->match_heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_arena_log::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_arena_log* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_arena_log*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_arena_log::MergeFrom(const db_user_arena_log& from) {
  GOOGLE_CHECK_NE(&from, this);
  match_heros_.MergeFrom(from.match_heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_attacker_win()) {
      set_is_attacker_win(from.is_attacker_win());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_is_me_attacker()) {
      set_is_me_attacker(from.is_me_attacker());
    }
    if (from.has_me_rank()) {
      set_me_rank(from.me_rank());
    }
    if (from.has_match_user_id()) {
      set_match_user_id(from.match_user_id());
    }
    if (from.has_match_rank()) {
      set_match_rank(from.match_rank());
    }
    if (from.has_match_power()) {
      set_match_power(from.match_power());
    }
    if (from.has_match_name()) {
      set_match_name(from.match_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_match_level()) {
      set_match_level(from.match_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_arena_log::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_arena_log::CopyFrom(const db_user_arena_log& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_arena_log::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  for (int i = 0; i < match_heros_size(); i++) {
    if (!this->match_heros(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_arena_log::Swap(db_user_arena_log* other) {
  if (other != this) {
    std::swap(is_attacker_win_, other->is_attacker_win_);
    std::swap(time_, other->time_);
    std::swap(is_me_attacker_, other->is_me_attacker_);
    std::swap(me_rank_, other->me_rank_);
    std::swap(match_user_id_, other->match_user_id_);
    std::swap(match_rank_, other->match_rank_);
    std::swap(match_power_, other->match_power_);
    std::swap(match_name_, other->match_name_);
    std::swap(match_level_, other->match_level_);
    match_heros_.Swap(&other->match_heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_arena_log::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_arena_log_descriptor_;
  metadata.reflection = db_user_arena_log_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_mission_event_array::kEventsFieldNumber;
#endif  // !_MSC_VER

db_user_mission_event_array::db_user_mission_event_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_mission_event_array::InitAsDefaultInstance() {
}

db_user_mission_event_array::db_user_mission_event_array(const db_user_mission_event_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_mission_event_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_mission_event_array::~db_user_mission_event_array() {
  SharedDtor();
}

void db_user_mission_event_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_mission_event_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_mission_event_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_mission_event_array_descriptor_;
}

const db_user_mission_event_array& db_user_mission_event_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_mission_event_array* db_user_mission_event_array::default_instance_ = NULL;

db_user_mission_event_array* db_user_mission_event_array::New() const {
  return new db_user_mission_event_array;
}

void db_user_mission_event_array::Clear() {
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_mission_event_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db_user_mission_event events = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_mission_event_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .db_user_mission_event events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_mission_event_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .db_user_mission_event events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_mission_event_array::ByteSize() const {
  int total_size = 0;

  // repeated .db_user_mission_event events = 1;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_mission_event_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_mission_event_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_mission_event_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_mission_event_array::MergeFrom(const db_user_mission_event_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_mission_event_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_mission_event_array::CopyFrom(const db_user_mission_event_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_mission_event_array::IsInitialized() const {

  for (int i = 0; i < events_size(); i++) {
    if (!this->events(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_mission_event_array::Swap(db_user_mission_event_array* other) {
  if (other != this) {
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_mission_event_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_mission_event_array_descriptor_;
  metadata.reflection = db_user_mission_event_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_mission_chain::kMissionChainIdFieldNumber;
const int db_user_mission_chain::kLastGetRewardMissionIdFieldNumber;
const int db_user_mission_chain::kLastGetRewardTimestampFieldNumber;
#endif  // !_MSC_VER

db_user_mission_chain::db_user_mission_chain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_mission_chain::InitAsDefaultInstance() {
}

db_user_mission_chain::db_user_mission_chain(const db_user_mission_chain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_mission_chain::SharedCtor() {
  _cached_size_ = 0;
  mission_chain_id_ = 0u;
  last_get_reward_mission_id_ = 0u;
  last_get_reward_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_mission_chain::~db_user_mission_chain() {
  SharedDtor();
}

void db_user_mission_chain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_mission_chain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_mission_chain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_mission_chain_descriptor_;
}

const db_user_mission_chain& db_user_mission_chain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_mission_chain* db_user_mission_chain::default_instance_ = NULL;

db_user_mission_chain* db_user_mission_chain::New() const {
  return new db_user_mission_chain;
}

void db_user_mission_chain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_chain_id_ = 0u;
    last_get_reward_mission_id_ = 0u;
    last_get_reward_timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_mission_chain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mission_chain_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_chain_id_)));
          set_has_mission_chain_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_get_reward_mission_id;
        break;
      }

      // required uint32 last_get_reward_mission_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_get_reward_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_get_reward_mission_id_)));
          set_has_last_get_reward_mission_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_get_reward_timestamp;
        break;
      }

      // required uint32 last_get_reward_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_get_reward_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_get_reward_timestamp_)));
          set_has_last_get_reward_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_mission_chain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mission_chain_id = 1;
  if (has_mission_chain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mission_chain_id(), output);
  }

  // required uint32 last_get_reward_mission_id = 2;
  if (has_last_get_reward_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_get_reward_mission_id(), output);
  }

  // required uint32 last_get_reward_timestamp = 3;
  if (has_last_get_reward_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_get_reward_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_mission_chain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mission_chain_id = 1;
  if (has_mission_chain_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mission_chain_id(), target);
  }

  // required uint32 last_get_reward_mission_id = 2;
  if (has_last_get_reward_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_get_reward_mission_id(), target);
  }

  // required uint32 last_get_reward_timestamp = 3;
  if (has_last_get_reward_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_get_reward_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_mission_chain::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mission_chain_id = 1;
    if (has_mission_chain_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_chain_id());
    }

    // required uint32 last_get_reward_mission_id = 2;
    if (has_last_get_reward_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_get_reward_mission_id());
    }

    // required uint32 last_get_reward_timestamp = 3;
    if (has_last_get_reward_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_get_reward_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_mission_chain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_mission_chain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_mission_chain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_mission_chain::MergeFrom(const db_user_mission_chain& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_chain_id()) {
      set_mission_chain_id(from.mission_chain_id());
    }
    if (from.has_last_get_reward_mission_id()) {
      set_last_get_reward_mission_id(from.last_get_reward_mission_id());
    }
    if (from.has_last_get_reward_timestamp()) {
      set_last_get_reward_timestamp(from.last_get_reward_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_mission_chain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_mission_chain::CopyFrom(const db_user_mission_chain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_mission_chain::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void db_user_mission_chain::Swap(db_user_mission_chain* other) {
  if (other != this) {
    std::swap(mission_chain_id_, other->mission_chain_id_);
    std::swap(last_get_reward_mission_id_, other->last_get_reward_mission_id_);
    std::swap(last_get_reward_timestamp_, other->last_get_reward_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_mission_chain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_mission_chain_descriptor_;
  metadata.reflection = db_user_mission_chain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_mission_chain_array::kChainsFieldNumber;
#endif  // !_MSC_VER

db_user_mission_chain_array::db_user_mission_chain_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_mission_chain_array::InitAsDefaultInstance() {
}

db_user_mission_chain_array::db_user_mission_chain_array(const db_user_mission_chain_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_mission_chain_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_mission_chain_array::~db_user_mission_chain_array() {
  SharedDtor();
}

void db_user_mission_chain_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_mission_chain_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_mission_chain_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_mission_chain_array_descriptor_;
}

const db_user_mission_chain_array& db_user_mission_chain_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_mission_chain_array* db_user_mission_chain_array::default_instance_ = NULL;

db_user_mission_chain_array* db_user_mission_chain_array::New() const {
  return new db_user_mission_chain_array;
}

void db_user_mission_chain_array::Clear() {
  chains_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_mission_chain_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db_user_mission_chain chains = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chains:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chains()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chains;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_mission_chain_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .db_user_mission_chain chains = 1;
  for (int i = 0; i < this->chains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chains(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_mission_chain_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .db_user_mission_chain chains = 1;
  for (int i = 0; i < this->chains_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chains(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_mission_chain_array::ByteSize() const {
  int total_size = 0;

  // repeated .db_user_mission_chain chains = 1;
  total_size += 1 * this->chains_size();
  for (int i = 0; i < this->chains_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chains(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_mission_chain_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_mission_chain_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_mission_chain_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_mission_chain_array::MergeFrom(const db_user_mission_chain_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  chains_.MergeFrom(from.chains_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_mission_chain_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_mission_chain_array::CopyFrom(const db_user_mission_chain_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_mission_chain_array::IsInitialized() const {

  for (int i = 0; i < chains_size(); i++) {
    if (!this->chains(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_mission_chain_array::Swap(db_user_mission_chain_array* other) {
  if (other != this) {
    chains_.Swap(&other->chains_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_mission_chain_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_mission_chain_array_descriptor_;
  metadata.reflection = db_user_mission_chain_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_arena::kRankFieldNumber;
const int db_user_arena::kScoreFieldNumber;
const int db_user_arena::kLastChallengeTimeFieldNumber;
const int db_user_arena::kLastDayChallengeNumFieldNumber;
const int db_user_arena::kHistoryHighestRankFieldNumber;
const int db_user_arena::kHerosFieldNumber;
const int db_user_arena::kLastTimeBuyArenaChallengeFieldNumber;
const int db_user_arena::kLastDayBuyArenaChallengeNumFieldNumber;
const int db_user_arena::kLogsFieldNumber;
#endif  // !_MSC_VER

db_user_arena::db_user_arena()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_arena::InitAsDefaultInstance() {
}

db_user_arena::db_user_arena(const db_user_arena& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_arena::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  score_ = 0u;
  last_challenge_time_ = 0u;
  last_day_challenge_num_ = 0u;
  history_highest_rank_ = 0u;
  last_time_buy_arena_challenge_ = 0u;
  last_day_buy_arena_challenge_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_arena::~db_user_arena() {
  SharedDtor();
}

void db_user_arena::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_arena::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_arena::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_arena_descriptor_;
}

const db_user_arena& db_user_arena::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_arena* db_user_arena::default_instance_ = NULL;

db_user_arena* db_user_arena::New() const {
  return new db_user_arena;
}

void db_user_arena::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    score_ = 0u;
    last_challenge_time_ = 0u;
    last_day_challenge_num_ = 0u;
    history_highest_rank_ = 0u;
    last_time_buy_arena_challenge_ = 0u;
    last_day_buy_arena_challenge_num_ = 0u;
  }
  heros_.Clear();
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_arena::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_challenge_time;
        break;
      }

      // required uint32 last_challenge_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_challenge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_challenge_time_)));
          set_has_last_challenge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_day_challenge_num;
        break;
      }

      // required uint32 last_day_challenge_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_challenge_num_)));
          set_has_last_day_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_history_highest_rank;
        break;
      }

      // required uint32 history_highest_rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_highest_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_highest_rank_)));
          set_has_history_highest_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heros;
        break;
      }

      // repeated uint32 heros = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heros;
        if (input->ExpectTag(56)) goto parse_last_time_buy_arena_challenge;
        break;
      }

      // required uint32 last_time_buy_arena_challenge = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time_buy_arena_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_buy_arena_challenge_)));
          set_has_last_time_buy_arena_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_day_buy_arena_challenge_num;
        break;
      }

      // required uint32 last_day_buy_arena_challenge_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_buy_arena_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_buy_arena_challenge_num_)));
          set_has_last_day_buy_arena_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_logs;
        break;
      }

      // repeated .db_user_arena_log logs = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_arena::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // required uint32 last_challenge_time = 3;
  if (has_last_challenge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_challenge_time(), output);
  }

  // required uint32 last_day_challenge_num = 4;
  if (has_last_day_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_day_challenge_num(), output);
  }

  // required uint32 history_highest_rank = 5;
  if (has_history_highest_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->history_highest_rank(), output);
  }

  // repeated uint32 heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->heros(i), output);
  }

  // required uint32 last_time_buy_arena_challenge = 7;
  if (has_last_time_buy_arena_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_time_buy_arena_challenge(), output);
  }

  // required uint32 last_day_buy_arena_challenge_num = 8;
  if (has_last_day_buy_arena_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_day_buy_arena_challenge_num(), output);
  }

  // repeated .db_user_arena_log logs = 9;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_arena::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // required uint32 last_challenge_time = 3;
  if (has_last_challenge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_challenge_time(), target);
  }

  // required uint32 last_day_challenge_num = 4;
  if (has_last_day_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_day_challenge_num(), target);
  }

  // required uint32 history_highest_rank = 5;
  if (has_history_highest_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->history_highest_rank(), target);
  }

  // repeated uint32 heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->heros(i), target);
  }

  // required uint32 last_time_buy_arena_challenge = 7;
  if (has_last_time_buy_arena_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_time_buy_arena_challenge(), target);
  }

  // required uint32 last_day_buy_arena_challenge_num = 8;
  if (has_last_day_buy_arena_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_day_buy_arena_challenge_num(), target);
  }

  // repeated .db_user_arena_log logs = 9;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_arena::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 last_challenge_time = 3;
    if (has_last_challenge_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_challenge_time());
    }

    // required uint32 last_day_challenge_num = 4;
    if (has_last_day_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_challenge_num());
    }

    // required uint32 history_highest_rank = 5;
    if (has_history_highest_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_highest_rank());
    }

    // required uint32 last_time_buy_arena_challenge = 7;
    if (has_last_time_buy_arena_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time_buy_arena_challenge());
    }

    // required uint32 last_day_buy_arena_challenge_num = 8;
    if (has_last_day_buy_arena_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_buy_arena_challenge_num());
    }

  }
  // repeated uint32 heros = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  // repeated .db_user_arena_log logs = 9;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_arena::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_arena* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_arena*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_arena::MergeFrom(const db_user_arena& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_last_challenge_time()) {
      set_last_challenge_time(from.last_challenge_time());
    }
    if (from.has_last_day_challenge_num()) {
      set_last_day_challenge_num(from.last_day_challenge_num());
    }
    if (from.has_history_highest_rank()) {
      set_history_highest_rank(from.history_highest_rank());
    }
    if (from.has_last_time_buy_arena_challenge()) {
      set_last_time_buy_arena_challenge(from.last_time_buy_arena_challenge());
    }
    if (from.has_last_day_buy_arena_challenge_num()) {
      set_last_day_buy_arena_challenge_num(from.last_day_buy_arena_challenge_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_arena::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_arena::CopyFrom(const db_user_arena& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_arena::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000df) != 0x000000df) return false;

  for (int i = 0; i < logs_size(); i++) {
    if (!this->logs(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_arena::Swap(db_user_arena* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(last_challenge_time_, other->last_challenge_time_);
    std::swap(last_day_challenge_num_, other->last_day_challenge_num_);
    std::swap(history_highest_rank_, other->history_highest_rank_);
    heros_.Swap(&other->heros_);
    std::swap(last_time_buy_arena_challenge_, other->last_time_buy_arena_challenge_);
    std::swap(last_day_buy_arena_challenge_num_, other->last_day_buy_arena_challenge_num_);
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_arena::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_arena_descriptor_;
  metadata.reflection = db_user_arena_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_base_info::kUserIdFieldNumber;
const int db_user_base_info::kNameFieldNumber;
const int db_user_base_info::kLevelFieldNumber;
const int db_user_base_info::kExpFieldNumber;
const int db_user_base_info::kVipFieldNumber;
const int db_user_base_info::kDiamondFieldNumber;
const int db_user_base_info::kGoldFieldNumber;
const int db_user_base_info::kHealthCurFieldNumber;
const int db_user_base_info::kHealthLastUpdateTimestampFieldNumber;
const int db_user_base_info::kSkillPointFieldNumber;
const int db_user_base_info::kSkillPointLastUpdateTimestampFieldNumber;
const int db_user_base_info::kInvokeGoldFreeLeftNumFieldNumber;
const int db_user_base_info::kInvokeGoldFreeUpdateTimestampFieldNumber;
const int db_user_base_info::kInvokeGoldNTotalNumFieldNumber;
const int db_user_base_info::kInvokeDiamondFreeLeftNumFieldNumber;
const int db_user_base_info::kInvokeDiamondFreeUpdateTimestampFieldNumber;
const int db_user_base_info::kInvokeDiamondNTotalNumFieldNumber;
const int db_user_base_info::kHeadIdFieldNumber;
const int db_user_base_info::kHeadFrameIdFieldNumber;
const int db_user_base_info::kFriendPointFieldNumber;
const int db_user_base_info::kSignatureFieldNumber;
const int db_user_base_info::kFightPowerFieldNumber;
const int db_user_base_info::kCrusadePointFieldNumber;
#endif  // !_MSC_VER

db_user_base_info::db_user_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_base_info::InitAsDefaultInstance() {
}

db_user_base_info::db_user_base_info(const db_user_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_base_info::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  exp_ = 0u;
  vip_ = 0u;
  diamond_ = 0u;
  gold_ = 0u;
  health_cur_ = 0u;
  health_last_update_timestamp_ = 0u;
  skill_point_ = 0u;
  skill_point_last_update_timestamp_ = 0u;
  invoke_gold_free_left_num_ = 0u;
  invoke_gold_free_update_timestamp_ = 0u;
  invoke_gold_n_total_num_ = 0u;
  invoke_diamond_free_left_num_ = 0u;
  invoke_diamond_free_update_timestamp_ = 0u;
  invoke_diamond_n_total_num_ = 0u;
  head_id_ = 0u;
  head_frame_id_ = 0u;
  friend_point_ = 0u;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_power_ = 0u;
  crusade_point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_base_info::~db_user_base_info() {
  SharedDtor();
}

void db_user_base_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void db_user_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_base_info_descriptor_;
}

const db_user_base_info& db_user_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_base_info* db_user_base_info::default_instance_ = NULL;

db_user_base_info* db_user_base_info::New() const {
  return new db_user_base_info;
}

void db_user_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    exp_ = 0u;
    vip_ = 0u;
    diamond_ = 0u;
    gold_ = 0u;
    health_cur_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    health_last_update_timestamp_ = 0u;
    skill_point_ = 0u;
    skill_point_last_update_timestamp_ = 0u;
    invoke_gold_free_left_num_ = 0u;
    invoke_gold_free_update_timestamp_ = 0u;
    invoke_gold_n_total_num_ = 0u;
    invoke_diamond_free_left_num_ = 0u;
    invoke_diamond_free_update_timestamp_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    invoke_diamond_n_total_num_ = 0u;
    head_id_ = 0u;
    head_frame_id_ = 0u;
    friend_point_ = 0u;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    fight_power_ = 0u;
    crusade_point_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip;
        break;
      }

      // required uint32 vip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diamond;
        break;
      }

      // required uint32 diamond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gold;
        break;
      }

      // required uint32 gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_health_cur;
        break;
      }

      // required uint32 health_cur = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_cur_)));
          set_has_health_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_health_last_update_timestamp;
        break;
      }

      // required uint32 health_last_update_timestamp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_last_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_last_update_timestamp_)));
          set_has_health_last_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_skill_point;
        break;
      }

      // required uint32 skill_point = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_skill_point_last_update_timestamp;
        break;
      }

      // required uint32 skill_point_last_update_timestamp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point_last_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_last_update_timestamp_)));
          set_has_skill_point_last_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_invoke_gold_free_left_num;
        break;
      }

      // required uint32 invoke_gold_free_left_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_gold_free_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_gold_free_left_num_)));
          set_has_invoke_gold_free_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_invoke_gold_free_update_timestamp;
        break;
      }

      // required uint32 invoke_gold_free_update_timestamp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_gold_free_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_gold_free_update_timestamp_)));
          set_has_invoke_gold_free_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_invoke_gold_n_total_num;
        break;
      }

      // required uint32 invoke_gold_n_total_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_gold_n_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_gold_n_total_num_)));
          set_has_invoke_gold_n_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_invoke_diamond_free_left_num;
        break;
      }

      // required uint32 invoke_diamond_free_left_num = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_diamond_free_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_diamond_free_left_num_)));
          set_has_invoke_diamond_free_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_invoke_diamond_free_update_timestamp;
        break;
      }

      // required uint32 invoke_diamond_free_update_timestamp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_diamond_free_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_diamond_free_update_timestamp_)));
          set_has_invoke_diamond_free_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_invoke_diamond_n_total_num;
        break;
      }

      // required uint32 invoke_diamond_n_total_num = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_diamond_n_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_diamond_n_total_num_)));
          set_has_invoke_diamond_n_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_head_id;
        break;
      }

      // required uint32 head_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_head_frame_id;
        break;
      }

      // required uint32 head_frame_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_frame_id_)));
          set_has_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_friend_point;
        break;
      }

      // required uint32 friend_point = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_point_)));
          set_has_friend_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_signature;
        break;
      }

      // required string signature = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_fight_power;
        break;
      }

      // required uint32 fight_power = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_crusade_point;
        break;
      }

      // required uint32 crusade_point = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crusade_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crusade_point_)));
          set_has_crusade_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // required uint32 vip = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip(), output);
  }

  // required uint32 diamond = 6;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->diamond(), output);
  }

  // required uint32 gold = 7;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gold(), output);
  }

  // required uint32 health_cur = 8;
  if (has_health_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->health_cur(), output);
  }

  // required uint32 health_last_update_timestamp = 9;
  if (has_health_last_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->health_last_update_timestamp(), output);
  }

  // required uint32 skill_point = 10;
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->skill_point(), output);
  }

  // required uint32 skill_point_last_update_timestamp = 11;
  if (has_skill_point_last_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->skill_point_last_update_timestamp(), output);
  }

  // required uint32 invoke_gold_free_left_num = 12;
  if (has_invoke_gold_free_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->invoke_gold_free_left_num(), output);
  }

  // required uint32 invoke_gold_free_update_timestamp = 13;
  if (has_invoke_gold_free_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->invoke_gold_free_update_timestamp(), output);
  }

  // required uint32 invoke_gold_n_total_num = 14;
  if (has_invoke_gold_n_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->invoke_gold_n_total_num(), output);
  }

  // required uint32 invoke_diamond_free_left_num = 15;
  if (has_invoke_diamond_free_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->invoke_diamond_free_left_num(), output);
  }

  // required uint32 invoke_diamond_free_update_timestamp = 16;
  if (has_invoke_diamond_free_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->invoke_diamond_free_update_timestamp(), output);
  }

  // required uint32 invoke_diamond_n_total_num = 17;
  if (has_invoke_diamond_n_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->invoke_diamond_n_total_num(), output);
  }

  // required uint32 head_id = 18;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->head_id(), output);
  }

  // required uint32 head_frame_id = 19;
  if (has_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->head_frame_id(), output);
  }

  // required uint32 friend_point = 20;
  if (has_friend_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->friend_point(), output);
  }

  // required string signature = 21;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->signature(), output);
  }

  // required uint32 fight_power = 22;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->fight_power(), output);
  }

  // required uint32 crusade_point = 23;
  if (has_crusade_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->crusade_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // required uint32 vip = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip(), target);
  }

  // required uint32 diamond = 6;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->diamond(), target);
  }

  // required uint32 gold = 7;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gold(), target);
  }

  // required uint32 health_cur = 8;
  if (has_health_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->health_cur(), target);
  }

  // required uint32 health_last_update_timestamp = 9;
  if (has_health_last_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->health_last_update_timestamp(), target);
  }

  // required uint32 skill_point = 10;
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->skill_point(), target);
  }

  // required uint32 skill_point_last_update_timestamp = 11;
  if (has_skill_point_last_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->skill_point_last_update_timestamp(), target);
  }

  // required uint32 invoke_gold_free_left_num = 12;
  if (has_invoke_gold_free_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->invoke_gold_free_left_num(), target);
  }

  // required uint32 invoke_gold_free_update_timestamp = 13;
  if (has_invoke_gold_free_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->invoke_gold_free_update_timestamp(), target);
  }

  // required uint32 invoke_gold_n_total_num = 14;
  if (has_invoke_gold_n_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->invoke_gold_n_total_num(), target);
  }

  // required uint32 invoke_diamond_free_left_num = 15;
  if (has_invoke_diamond_free_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->invoke_diamond_free_left_num(), target);
  }

  // required uint32 invoke_diamond_free_update_timestamp = 16;
  if (has_invoke_diamond_free_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->invoke_diamond_free_update_timestamp(), target);
  }

  // required uint32 invoke_diamond_n_total_num = 17;
  if (has_invoke_diamond_n_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->invoke_diamond_n_total_num(), target);
  }

  // required uint32 head_id = 18;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->head_id(), target);
  }

  // required uint32 head_frame_id = 19;
  if (has_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->head_frame_id(), target);
  }

  // required uint32 friend_point = 20;
  if (has_friend_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->friend_point(), target);
  }

  // required string signature = 21;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->signature(), target);
  }

  // required uint32 fight_power = 22;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->fight_power(), target);
  }

  // required uint32 crusade_point = 23;
  if (has_crusade_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->crusade_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 vip = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // required uint32 diamond = 6;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // required uint32 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // required uint32 health_cur = 8;
    if (has_health_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_cur());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 health_last_update_timestamp = 9;
    if (has_health_last_update_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_last_update_timestamp());
    }

    // required uint32 skill_point = 10;
    if (has_skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point());
    }

    // required uint32 skill_point_last_update_timestamp = 11;
    if (has_skill_point_last_update_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point_last_update_timestamp());
    }

    // required uint32 invoke_gold_free_left_num = 12;
    if (has_invoke_gold_free_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_gold_free_left_num());
    }

    // required uint32 invoke_gold_free_update_timestamp = 13;
    if (has_invoke_gold_free_update_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_gold_free_update_timestamp());
    }

    // required uint32 invoke_gold_n_total_num = 14;
    if (has_invoke_gold_n_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_gold_n_total_num());
    }

    // required uint32 invoke_diamond_free_left_num = 15;
    if (has_invoke_diamond_free_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_diamond_free_left_num());
    }

    // required uint32 invoke_diamond_free_update_timestamp = 16;
    if (has_invoke_diamond_free_update_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_diamond_free_update_timestamp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 invoke_diamond_n_total_num = 17;
    if (has_invoke_diamond_n_total_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_diamond_n_total_num());
    }

    // required uint32 head_id = 18;
    if (has_head_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // required uint32 head_frame_id = 19;
    if (has_head_frame_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_frame_id());
    }

    // required uint32 friend_point = 20;
    if (has_friend_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_point());
    }

    // required string signature = 21;
    if (has_signature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // required uint32 fight_power = 22;
    if (has_fight_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

    // required uint32 crusade_point = 23;
    if (has_crusade_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crusade_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_base_info::MergeFrom(const db_user_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_health_cur()) {
      set_health_cur(from.health_cur());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_health_last_update_timestamp()) {
      set_health_last_update_timestamp(from.health_last_update_timestamp());
    }
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
    if (from.has_skill_point_last_update_timestamp()) {
      set_skill_point_last_update_timestamp(from.skill_point_last_update_timestamp());
    }
    if (from.has_invoke_gold_free_left_num()) {
      set_invoke_gold_free_left_num(from.invoke_gold_free_left_num());
    }
    if (from.has_invoke_gold_free_update_timestamp()) {
      set_invoke_gold_free_update_timestamp(from.invoke_gold_free_update_timestamp());
    }
    if (from.has_invoke_gold_n_total_num()) {
      set_invoke_gold_n_total_num(from.invoke_gold_n_total_num());
    }
    if (from.has_invoke_diamond_free_left_num()) {
      set_invoke_diamond_free_left_num(from.invoke_diamond_free_left_num());
    }
    if (from.has_invoke_diamond_free_update_timestamp()) {
      set_invoke_diamond_free_update_timestamp(from.invoke_diamond_free_update_timestamp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_invoke_diamond_n_total_num()) {
      set_invoke_diamond_n_total_num(from.invoke_diamond_n_total_num());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_head_frame_id()) {
      set_head_frame_id(from.head_frame_id());
    }
    if (from.has_friend_point()) {
      set_friend_point(from.friend_point());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_crusade_point()) {
      set_crusade_point(from.crusade_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_base_info::CopyFrom(const db_user_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_base_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;

  return true;
}

void db_user_base_info::Swap(db_user_base_info* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(vip_, other->vip_);
    std::swap(diamond_, other->diamond_);
    std::swap(gold_, other->gold_);
    std::swap(health_cur_, other->health_cur_);
    std::swap(health_last_update_timestamp_, other->health_last_update_timestamp_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(skill_point_last_update_timestamp_, other->skill_point_last_update_timestamp_);
    std::swap(invoke_gold_free_left_num_, other->invoke_gold_free_left_num_);
    std::swap(invoke_gold_free_update_timestamp_, other->invoke_gold_free_update_timestamp_);
    std::swap(invoke_gold_n_total_num_, other->invoke_gold_n_total_num_);
    std::swap(invoke_diamond_free_left_num_, other->invoke_diamond_free_left_num_);
    std::swap(invoke_diamond_free_update_timestamp_, other->invoke_diamond_free_update_timestamp_);
    std::swap(invoke_diamond_n_total_num_, other->invoke_diamond_n_total_num_);
    std::swap(head_id_, other->head_id_);
    std::swap(head_frame_id_, other->head_frame_id_);
    std::swap(friend_point_, other->friend_point_);
    std::swap(signature_, other->signature_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(crusade_point_, other->crusade_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_base_info_descriptor_;
  metadata.reflection = db_user_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_sign::kSign1TimesFieldNumber;
const int db_user_sign::kSignNRewardStatusFieldNumber;
const int db_user_sign::kLastSignTimeFieldNumber;
const int db_user_sign::kAddSignedTimesFieldNumber;
#endif  // !_MSC_VER

db_user_sign::db_user_sign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_sign::InitAsDefaultInstance() {
}

db_user_sign::db_user_sign(const db_user_sign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_sign::SharedCtor() {
  _cached_size_ = 0;
  sign_1_times_ = 0u;
  sign_n_reward_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_sign_time_ = 0u;
  add_signed_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_sign::~db_user_sign() {
  SharedDtor();
}

void db_user_sign::SharedDtor() {
  if (sign_n_reward_status_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_n_reward_status_;
  }
  if (this != default_instance_) {
  }
}

void db_user_sign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_sign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_sign_descriptor_;
}

const db_user_sign& db_user_sign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_sign* db_user_sign::default_instance_ = NULL;

db_user_sign* db_user_sign::New() const {
  return new db_user_sign;
}

void db_user_sign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sign_1_times_ = 0u;
    if (has_sign_n_reward_status()) {
      if (sign_n_reward_status_ != &::google::protobuf::internal::kEmptyString) {
        sign_n_reward_status_->clear();
      }
    }
    last_sign_time_ = 0u;
    add_signed_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_sign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sign_1_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_1_times_)));
          set_has_sign_1_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sign_n_reward_status;
        break;
      }

      // required string sign_n_reward_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_n_reward_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_n_reward_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign_n_reward_status().data(), this->sign_n_reward_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_sign_time;
        break;
      }

      // required uint32 last_sign_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sign_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_sign_time_)));
          set_has_last_sign_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_signed_times;
        break;
      }

      // required uint32 add_signed_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_signed_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_signed_times_)));
          set_has_add_signed_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_sign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sign_1_times = 1;
  if (has_sign_1_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sign_1_times(), output);
  }

  // required string sign_n_reward_status = 2;
  if (has_sign_n_reward_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign_n_reward_status().data(), this->sign_n_reward_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sign_n_reward_status(), output);
  }

  // required uint32 last_sign_time = 3;
  if (has_last_sign_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_sign_time(), output);
  }

  // required uint32 add_signed_times = 4;
  if (has_add_signed_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add_signed_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_sign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sign_1_times = 1;
  if (has_sign_1_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sign_1_times(), target);
  }

  // required string sign_n_reward_status = 2;
  if (has_sign_n_reward_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign_n_reward_status().data(), this->sign_n_reward_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sign_n_reward_status(), target);
  }

  // required uint32 last_sign_time = 3;
  if (has_last_sign_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_sign_time(), target);
  }

  // required uint32 add_signed_times = 4;
  if (has_add_signed_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->add_signed_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_sign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sign_1_times = 1;
    if (has_sign_1_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_1_times());
    }

    // required string sign_n_reward_status = 2;
    if (has_sign_n_reward_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_n_reward_status());
    }

    // required uint32 last_sign_time = 3;
    if (has_last_sign_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_sign_time());
    }

    // required uint32 add_signed_times = 4;
    if (has_add_signed_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_signed_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_sign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_sign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_sign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_sign::MergeFrom(const db_user_sign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_1_times()) {
      set_sign_1_times(from.sign_1_times());
    }
    if (from.has_sign_n_reward_status()) {
      set_sign_n_reward_status(from.sign_n_reward_status());
    }
    if (from.has_last_sign_time()) {
      set_last_sign_time(from.last_sign_time());
    }
    if (from.has_add_signed_times()) {
      set_add_signed_times(from.add_signed_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_sign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_sign::CopyFrom(const db_user_sign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_sign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void db_user_sign::Swap(db_user_sign* other) {
  if (other != this) {
    std::swap(sign_1_times_, other->sign_1_times_);
    std::swap(sign_n_reward_status_, other->sign_n_reward_status_);
    std::swap(last_sign_time_, other->last_sign_time_);
    std::swap(add_signed_times_, other->add_signed_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_sign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_sign_descriptor_;
  metadata.reflection = db_user_sign_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_novice_guide_array::kGuideIdsFieldNumber;
#endif  // !_MSC_VER

db_user_novice_guide_array::db_user_novice_guide_array()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_novice_guide_array::InitAsDefaultInstance() {
}

db_user_novice_guide_array::db_user_novice_guide_array(const db_user_novice_guide_array& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_novice_guide_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_novice_guide_array::~db_user_novice_guide_array() {
  SharedDtor();
}

void db_user_novice_guide_array::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_novice_guide_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_novice_guide_array::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_novice_guide_array_descriptor_;
}

const db_user_novice_guide_array& db_user_novice_guide_array::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_novice_guide_array* db_user_novice_guide_array::default_instance_ = NULL;

db_user_novice_guide_array* db_user_novice_guide_array::New() const {
  return new db_user_novice_guide_array;
}

void db_user_novice_guide_array::Clear() {
  guide_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_novice_guide_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 guide_ids = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_guide_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_guide_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_guide_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_novice_guide_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 guide_ids = 14;
  for (int i = 0; i < this->guide_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->guide_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_novice_guide_array::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 guide_ids = 14;
  for (int i = 0; i < this->guide_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->guide_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_novice_guide_array::ByteSize() const {
  int total_size = 0;

  // repeated uint32 guide_ids = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->guide_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->guide_ids(i));
    }
    total_size += 1 * this->guide_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_novice_guide_array::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_novice_guide_array* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_novice_guide_array*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_novice_guide_array::MergeFrom(const db_user_novice_guide_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  guide_ids_.MergeFrom(from.guide_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_novice_guide_array::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_novice_guide_array::CopyFrom(const db_user_novice_guide_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_novice_guide_array::IsInitialized() const {

  return true;
}

void db_user_novice_guide_array::Swap(db_user_novice_guide_array* other) {
  if (other != this) {
    guide_ids_.Swap(&other->guide_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_novice_guide_array::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_novice_guide_array_descriptor_;
  metadata.reflection = db_user_novice_guide_array_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_friend_friend_info::kBaseInfoFieldNumber;
const int db_user_friend_friend_info::kFriendGiveTimestampFieldNumber;
const int db_user_friend_friend_info::kMeGiveTimestampFieldNumber;
#endif  // !_MSC_VER

db_user_friend_friend_info::db_user_friend_friend_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_friend_friend_info::InitAsDefaultInstance() {
  base_info_ = const_cast< ::friend_base_info*>(&::friend_base_info::default_instance());
}

db_user_friend_friend_info::db_user_friend_friend_info(const db_user_friend_friend_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_friend_friend_info::SharedCtor() {
  _cached_size_ = 0;
  base_info_ = NULL;
  friend_give_timestamp_ = 0u;
  me_give_timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_friend_friend_info::~db_user_friend_friend_info() {
  SharedDtor();
}

void db_user_friend_friend_info::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
  }
}

void db_user_friend_friend_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_friend_friend_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_friend_friend_info_descriptor_;
}

const db_user_friend_friend_info& db_user_friend_friend_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_friend_friend_info* db_user_friend_friend_info::default_instance_ = NULL;

db_user_friend_friend_info* db_user_friend_friend_info::New() const {
  return new db_user_friend_friend_info;
}

void db_user_friend_friend_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::friend_base_info::Clear();
    }
    friend_give_timestamp_ = 0u;
    me_give_timestamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_friend_friend_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .friend_base_info base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_give_timestamp;
        break;
      }

      // required uint32 friend_give_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_give_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_give_timestamp_)));
          set_has_friend_give_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_me_give_timestamp;
        break;
      }

      // required uint32 me_give_timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_me_give_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &me_give_timestamp_)));
          set_has_me_give_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_friend_friend_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .friend_base_info base_info = 1;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_info(), output);
  }

  // required uint32 friend_give_timestamp = 2;
  if (has_friend_give_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friend_give_timestamp(), output);
  }

  // required uint32 me_give_timestamp = 3;
  if (has_me_give_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->me_give_timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_friend_friend_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .friend_base_info base_info = 1;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_info(), target);
  }

  // required uint32 friend_give_timestamp = 2;
  if (has_friend_give_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friend_give_timestamp(), target);
  }

  // required uint32 me_give_timestamp = 3;
  if (has_me_give_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->me_give_timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_friend_friend_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .friend_base_info base_info = 1;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

    // required uint32 friend_give_timestamp = 2;
    if (has_friend_give_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_give_timestamp());
    }

    // required uint32 me_give_timestamp = 3;
    if (has_me_give_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->me_give_timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_friend_friend_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_friend_friend_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_friend_friend_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_friend_friend_info::MergeFrom(const db_user_friend_friend_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_info()) {
      mutable_base_info()->::friend_base_info::MergeFrom(from.base_info());
    }
    if (from.has_friend_give_timestamp()) {
      set_friend_give_timestamp(from.friend_give_timestamp());
    }
    if (from.has_me_give_timestamp()) {
      set_me_give_timestamp(from.me_give_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_friend_friend_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_friend_friend_info::CopyFrom(const db_user_friend_friend_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_friend_friend_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  return true;
}

void db_user_friend_friend_info::Swap(db_user_friend_friend_info* other) {
  if (other != this) {
    std::swap(base_info_, other->base_info_);
    std::swap(friend_give_timestamp_, other->friend_give_timestamp_);
    std::swap(me_give_timestamp_, other->me_give_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_friend_friend_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_friend_friend_info_descriptor_;
  metadata.reflection = db_user_friend_friend_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_user_friend::kFriendsFieldNumber;
const int db_user_friend::kAppliesFieldNumber;
const int db_user_friend::kConfirmsFieldNumber;
const int db_user_friend::kRecommendsFieldNumber;
#endif  // !_MSC_VER

db_user_friend::db_user_friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_friend::InitAsDefaultInstance() {
}

db_user_friend::db_user_friend(const db_user_friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_friend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_friend::~db_user_friend() {
  SharedDtor();
}

void db_user_friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_friend_descriptor_;
}

const db_user_friend& db_user_friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_friend* db_user_friend::default_instance_ = NULL;

db_user_friend* db_user_friend::New() const {
  return new db_user_friend;
}

void db_user_friend::Clear() {
  friends_.Clear();
  applies_.Clear();
  confirms_.Clear();
  recommends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db_user_friend.friend_info friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectTag(18)) goto parse_applies;
        break;
      }

      // repeated .friend_base_info applies = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_applies;
        if (input->ExpectTag(26)) goto parse_confirms;
        break;
      }

      // repeated .friend_base_info confirms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_confirms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_confirms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_confirms;
        if (input->ExpectTag(34)) goto parse_recommends;
        break;
      }

      // repeated .friend_base_info recommends = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recommends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .db_user_friend.friend_info friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  // repeated .friend_base_info applies = 2;
  for (int i = 0; i < this->applies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->applies(i), output);
  }

  // repeated .friend_base_info confirms = 3;
  for (int i = 0; i < this->confirms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->confirms(i), output);
  }

  // repeated .friend_base_info recommends = 4;
  for (int i = 0; i < this->recommends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recommends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .db_user_friend.friend_info friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }

  // repeated .friend_base_info applies = 2;
  for (int i = 0; i < this->applies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->applies(i), target);
  }

  // repeated .friend_base_info confirms = 3;
  for (int i = 0; i < this->confirms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->confirms(i), target);
  }

  // repeated .friend_base_info recommends = 4;
  for (int i = 0; i < this->recommends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recommends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_friend::ByteSize() const {
  int total_size = 0;

  // repeated .db_user_friend.friend_info friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  // repeated .friend_base_info applies = 2;
  total_size += 1 * this->applies_size();
  for (int i = 0; i < this->applies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applies(i));
  }

  // repeated .friend_base_info confirms = 3;
  total_size += 1 * this->confirms_size();
  for (int i = 0; i < this->confirms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->confirms(i));
  }

  // repeated .friend_base_info recommends = 4;
  total_size += 1 * this->recommends_size();
  for (int i = 0; i < this->recommends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_friend::MergeFrom(const db_user_friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  applies_.MergeFrom(from.applies_);
  confirms_.MergeFrom(from.confirms_);
  recommends_.MergeFrom(from.recommends_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_friend::CopyFrom(const db_user_friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_friend::IsInitialized() const {

  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  for (int i = 0; i < applies_size(); i++) {
    if (!this->applies(i).IsInitialized()) return false;
  }
  for (int i = 0; i < confirms_size(); i++) {
    if (!this->confirms(i).IsInitialized()) return false;
  }
  for (int i = 0; i < recommends_size(); i++) {
    if (!this->recommends(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_friend::Swap(db_user_friend* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    applies_.Swap(&other->applies_);
    confirms_.Swap(&other->confirms_);
    recommends_.Swap(&other->recommends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_friend_descriptor_;
  metadata.reflection = db_user_friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_crusade::kMeHerosFieldNumber;
const int db_user_crusade::kEnemyHerosFieldNumber;
const int db_user_crusade::kWaveFieldNumber;
#endif  // !_MSC_VER

db_user_crusade::db_user_crusade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_crusade::InitAsDefaultInstance() {
}

db_user_crusade::db_user_crusade(const db_user_crusade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_crusade::SharedCtor() {
  _cached_size_ = 0;
  wave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_crusade::~db_user_crusade() {
  SharedDtor();
}

void db_user_crusade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_crusade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_crusade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_crusade_descriptor_;
}

const db_user_crusade& db_user_crusade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_crusade* db_user_crusade::default_instance_ = NULL;

db_user_crusade* db_user_crusade::New() const {
  return new db_user_crusade;
}

void db_user_crusade::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    wave_ = 0u;
  }
  me_heros_.Clear();
  enemy_heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_crusade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .user_crusade.crusade_hero me_heros = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_me_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_me_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_me_heros;
        if (input->ExpectTag(18)) goto parse_enemy_heros;
        break;
      }

      // repeated .user_crusade.crusade_hero enemy_heros = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemy_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_enemy_heros;
        if (input->ExpectTag(24)) goto parse_wave;
        break;
      }

      // required uint32 wave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_crusade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .user_crusade.crusade_hero me_heros = 1;
  for (int i = 0; i < this->me_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->me_heros(i), output);
  }

  // repeated .user_crusade.crusade_hero enemy_heros = 2;
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enemy_heros(i), output);
  }

  // required uint32 wave = 3;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_crusade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .user_crusade.crusade_hero me_heros = 1;
  for (int i = 0; i < this->me_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->me_heros(i), target);
  }

  // repeated .user_crusade.crusade_hero enemy_heros = 2;
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enemy_heros(i), target);
  }

  // required uint32 wave = 3;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_crusade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 wave = 3;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave());
    }

  }
  // repeated .user_crusade.crusade_hero me_heros = 1;
  total_size += 1 * this->me_heros_size();
  for (int i = 0; i < this->me_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->me_heros(i));
  }

  // repeated .user_crusade.crusade_hero enemy_heros = 2;
  total_size += 1 * this->enemy_heros_size();
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemy_heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_crusade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_crusade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_crusade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_crusade::MergeFrom(const db_user_crusade& from) {
  GOOGLE_CHECK_NE(&from, this);
  me_heros_.MergeFrom(from.me_heros_);
  enemy_heros_.MergeFrom(from.enemy_heros_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_wave()) {
      set_wave(from.wave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_crusade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_crusade::CopyFrom(const db_user_crusade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_crusade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  for (int i = 0; i < me_heros_size(); i++) {
    if (!this->me_heros(i).IsInitialized()) return false;
  }
  for (int i = 0; i < enemy_heros_size(); i++) {
    if (!this->enemy_heros(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_crusade::Swap(db_user_crusade* other) {
  if (other != this) {
    me_heros_.Swap(&other->me_heros_);
    enemy_heros_.Swap(&other->enemy_heros_);
    std::swap(wave_, other->wave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_crusade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_crusade_descriptor_;
  metadata.reflection = db_user_crusade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_guild_info_struct_apply::kGuildIdFieldNumber;
const int db_user_guild_info_struct_apply::kTimeFieldNumber;
#endif  // !_MSC_VER

db_user_guild_info_struct_apply::db_user_guild_info_struct_apply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_guild_info_struct_apply::InitAsDefaultInstance() {
}

db_user_guild_info_struct_apply::db_user_guild_info_struct_apply(const db_user_guild_info_struct_apply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_guild_info_struct_apply::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_guild_info_struct_apply::~db_user_guild_info_struct_apply() {
  SharedDtor();
}

void db_user_guild_info_struct_apply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_guild_info_struct_apply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_guild_info_struct_apply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_guild_info_struct_apply_descriptor_;
}

const db_user_guild_info_struct_apply& db_user_guild_info_struct_apply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_guild_info_struct_apply* db_user_guild_info_struct_apply::default_instance_ = NULL;

db_user_guild_info_struct_apply* db_user_guild_info_struct_apply::New() const {
  return new db_user_guild_info_struct_apply;
}

void db_user_guild_info_struct_apply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_guild_info_struct_apply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_guild_info_struct_apply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_guild_info_struct_apply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_guild_info_struct_apply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_guild_info_struct_apply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_guild_info_struct_apply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_guild_info_struct_apply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_guild_info_struct_apply::MergeFrom(const db_user_guild_info_struct_apply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_guild_info_struct_apply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_guild_info_struct_apply::CopyFrom(const db_user_guild_info_struct_apply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_guild_info_struct_apply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void db_user_guild_info_struct_apply::Swap(db_user_guild_info_struct_apply* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_guild_info_struct_apply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_guild_info_struct_apply_descriptor_;
  metadata.reflection = db_user_guild_info_struct_apply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_user_guild_info_struct_boss_info_struct_dead_hero::kHeroIdFieldNumber;
const int db_user_guild_info_struct_boss_info_struct_dead_hero::kDeadTimeFieldNumber;
#endif  // !_MSC_VER

db_user_guild_info_struct_boss_info_struct_dead_hero::db_user_guild_info_struct_boss_info_struct_dead_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_guild_info_struct_boss_info_struct_dead_hero::InitAsDefaultInstance() {
}

db_user_guild_info_struct_boss_info_struct_dead_hero::db_user_guild_info_struct_boss_info_struct_dead_hero(const db_user_guild_info_struct_boss_info_struct_dead_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_guild_info_struct_boss_info_struct_dead_hero::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  dead_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_guild_info_struct_boss_info_struct_dead_hero::~db_user_guild_info_struct_boss_info_struct_dead_hero() {
  SharedDtor();
}

void db_user_guild_info_struct_boss_info_struct_dead_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_guild_info_struct_boss_info_struct_dead_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_guild_info_struct_boss_info_struct_dead_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_guild_info_struct_boss_info_struct_dead_hero_descriptor_;
}

const db_user_guild_info_struct_boss_info_struct_dead_hero& db_user_guild_info_struct_boss_info_struct_dead_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_guild_info_struct_boss_info_struct_dead_hero* db_user_guild_info_struct_boss_info_struct_dead_hero::default_instance_ = NULL;

db_user_guild_info_struct_boss_info_struct_dead_hero* db_user_guild_info_struct_boss_info_struct_dead_hero::New() const {
  return new db_user_guild_info_struct_boss_info_struct_dead_hero;
}

void db_user_guild_info_struct_boss_info_struct_dead_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    dead_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_guild_info_struct_boss_info_struct_dead_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dead_time;
        break;
      }

      // required uint32 dead_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_time_)));
          set_has_dead_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_guild_info_struct_boss_info_struct_dead_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // required uint32 dead_time = 2;
  if (has_dead_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dead_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_guild_info_struct_boss_info_struct_dead_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // required uint32 dead_time = 2;
  if (has_dead_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dead_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_guild_info_struct_boss_info_struct_dead_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 dead_time = 2;
    if (has_dead_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_guild_info_struct_boss_info_struct_dead_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_guild_info_struct_boss_info_struct_dead_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_guild_info_struct_boss_info_struct_dead_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_guild_info_struct_boss_info_struct_dead_hero::MergeFrom(const db_user_guild_info_struct_boss_info_struct_dead_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_dead_time()) {
      set_dead_time(from.dead_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_guild_info_struct_boss_info_struct_dead_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_guild_info_struct_boss_info_struct_dead_hero::CopyFrom(const db_user_guild_info_struct_boss_info_struct_dead_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_guild_info_struct_boss_info_struct_dead_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void db_user_guild_info_struct_boss_info_struct_dead_hero::Swap(db_user_guild_info_struct_boss_info_struct_dead_hero* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(dead_time_, other->dead_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_guild_info_struct_boss_info_struct_dead_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_guild_info_struct_boss_info_struct_dead_hero_descriptor_;
  metadata.reflection = db_user_guild_info_struct_boss_info_struct_dead_hero_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_user_guild_info_struct_boss_info::kBossPositionFieldNumber;
const int db_user_guild_info_struct_boss_info::kBossLoseHpFieldNumber;
const int db_user_guild_info_struct_boss_info::kLastResetTimeFieldNumber;
const int db_user_guild_info_struct_boss_info::kLastDayResetNumFieldNumber;
const int db_user_guild_info_struct_boss_info::kDeadHerosFieldNumber;
#endif  // !_MSC_VER

db_user_guild_info_struct_boss_info::db_user_guild_info_struct_boss_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_guild_info_struct_boss_info::InitAsDefaultInstance() {
}

db_user_guild_info_struct_boss_info::db_user_guild_info_struct_boss_info(const db_user_guild_info_struct_boss_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_guild_info_struct_boss_info::SharedCtor() {
  _cached_size_ = 0;
  boss_position_ = 0u;
  boss_lose_hp_ = 0u;
  last_reset_time_ = 0u;
  last_day_reset_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_guild_info_struct_boss_info::~db_user_guild_info_struct_boss_info() {
  SharedDtor();
}

void db_user_guild_info_struct_boss_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_guild_info_struct_boss_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_guild_info_struct_boss_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_guild_info_struct_boss_info_descriptor_;
}

const db_user_guild_info_struct_boss_info& db_user_guild_info_struct_boss_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_guild_info_struct_boss_info* db_user_guild_info_struct_boss_info::default_instance_ = NULL;

db_user_guild_info_struct_boss_info* db_user_guild_info_struct_boss_info::New() const {
  return new db_user_guild_info_struct_boss_info;
}

void db_user_guild_info_struct_boss_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boss_position_ = 0u;
    boss_lose_hp_ = 0u;
    last_reset_time_ = 0u;
    last_day_reset_num_ = 0u;
  }
  dead_heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_guild_info_struct_boss_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 boss_position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_position_)));
          set_has_boss_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boss_lose_hp;
        break;
      }

      // required uint32 boss_lose_hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_lose_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_lose_hp_)));
          set_has_boss_lose_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_reset_time;
        break;
      }

      // required uint32 last_reset_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_reset_time_)));
          set_has_last_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_day_reset_num;
        break;
      }

      // required uint32 last_day_reset_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_reset_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_reset_num_)));
          set_has_last_day_reset_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dead_heros;
        break;
      }

      // repeated .db_user_guild_info.struct_boss_info.struct_dead_hero dead_heros = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dead_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dead_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dead_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_guild_info_struct_boss_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 boss_position = 1;
  if (has_boss_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boss_position(), output);
  }

  // required uint32 boss_lose_hp = 2;
  if (has_boss_lose_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boss_lose_hp(), output);
  }

  // required uint32 last_reset_time = 3;
  if (has_last_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_reset_time(), output);
  }

  // required uint32 last_day_reset_num = 4;
  if (has_last_day_reset_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_day_reset_num(), output);
  }

  // repeated .db_user_guild_info.struct_boss_info.struct_dead_hero dead_heros = 5;
  for (int i = 0; i < this->dead_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dead_heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_guild_info_struct_boss_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 boss_position = 1;
  if (has_boss_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boss_position(), target);
  }

  // required uint32 boss_lose_hp = 2;
  if (has_boss_lose_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boss_lose_hp(), target);
  }

  // required uint32 last_reset_time = 3;
  if (has_last_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_reset_time(), target);
  }

  // required uint32 last_day_reset_num = 4;
  if (has_last_day_reset_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_day_reset_num(), target);
  }

  // repeated .db_user_guild_info.struct_boss_info.struct_dead_hero dead_heros = 5;
  for (int i = 0; i < this->dead_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dead_heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_guild_info_struct_boss_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 boss_position = 1;
    if (has_boss_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_position());
    }

    // required uint32 boss_lose_hp = 2;
    if (has_boss_lose_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_lose_hp());
    }

    // required uint32 last_reset_time = 3;
    if (has_last_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_reset_time());
    }

    // required uint32 last_day_reset_num = 4;
    if (has_last_day_reset_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_reset_num());
    }

  }
  // repeated .db_user_guild_info.struct_boss_info.struct_dead_hero dead_heros = 5;
  total_size += 1 * this->dead_heros_size();
  for (int i = 0; i < this->dead_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dead_heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_guild_info_struct_boss_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_guild_info_struct_boss_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_guild_info_struct_boss_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_guild_info_struct_boss_info::MergeFrom(const db_user_guild_info_struct_boss_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  dead_heros_.MergeFrom(from.dead_heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_position()) {
      set_boss_position(from.boss_position());
    }
    if (from.has_boss_lose_hp()) {
      set_boss_lose_hp(from.boss_lose_hp());
    }
    if (from.has_last_reset_time()) {
      set_last_reset_time(from.last_reset_time());
    }
    if (from.has_last_day_reset_num()) {
      set_last_day_reset_num(from.last_day_reset_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_guild_info_struct_boss_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_guild_info_struct_boss_info::CopyFrom(const db_user_guild_info_struct_boss_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_guild_info_struct_boss_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < dead_heros_size(); i++) {
    if (!this->dead_heros(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_guild_info_struct_boss_info::Swap(db_user_guild_info_struct_boss_info* other) {
  if (other != this) {
    std::swap(boss_position_, other->boss_position_);
    std::swap(boss_lose_hp_, other->boss_lose_hp_);
    std::swap(last_reset_time_, other->last_reset_time_);
    std::swap(last_day_reset_num_, other->last_day_reset_num_);
    dead_heros_.Swap(&other->dead_heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_guild_info_struct_boss_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_guild_info_struct_boss_info_descriptor_;
  metadata.reflection = db_user_guild_info_struct_boss_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int db_user_guild_info::kGuildIdFieldNumber;
const int db_user_guild_info::kPositionFieldNumber;
const int db_user_guild_info::kLeaveTimeFieldNumber;
const int db_user_guild_info::kCoinFieldNumber;
const int db_user_guild_info::kApplysFieldNumber;
const int db_user_guild_info::kBossesFieldNumber;
#endif  // !_MSC_VER

db_user_guild_info::db_user_guild_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_guild_info::InitAsDefaultInstance() {
}

db_user_guild_info::db_user_guild_info(const db_user_guild_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_guild_info::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  position_ = 0;
  leave_time_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_guild_info::~db_user_guild_info() {
  SharedDtor();
}

void db_user_guild_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void db_user_guild_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_guild_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_guild_info_descriptor_;
}

const db_user_guild_info& db_user_guild_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_guild_info* db_user_guild_info::default_instance_ = NULL;

db_user_guild_info* db_user_guild_info::New() const {
  return new db_user_guild_info;
}

void db_user_guild_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0u;
    position_ = 0;
    leave_time_ = 0u;
    coin_ = 0u;
  }
  applys_.Clear();
  bosses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_guild_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required .e_guild_position position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_guild_position_IsValid(value)) {
            set_position(static_cast< ::e_guild_position >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leave_time;
        break;
      }

      // required uint32 leave_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leave_time_)));
          set_has_leave_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_coin;
        break;
      }

      // required uint32 coin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_applys;
        break;
      }

      // repeated .db_user_guild_info.struct_apply applys = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_applys;
        if (input->ExpectTag(50)) goto parse_bosses;
        break;
      }

      // repeated .db_user_guild_info.struct_boss_info bosses = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bosses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bosses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bosses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_guild_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // required .e_guild_position position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->position(), output);
  }

  // required uint32 leave_time = 3;
  if (has_leave_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->leave_time(), output);
  }

  // required uint32 coin = 4;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->coin(), output);
  }

  // repeated .db_user_guild_info.struct_apply applys = 5;
  for (int i = 0; i < this->applys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->applys(i), output);
  }

  // repeated .db_user_guild_info.struct_boss_info bosses = 6;
  for (int i = 0; i < this->bosses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bosses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_guild_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // required .e_guild_position position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->position(), target);
  }

  // required uint32 leave_time = 3;
  if (has_leave_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->leave_time(), target);
  }

  // required uint32 coin = 4;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->coin(), target);
  }

  // repeated .db_user_guild_info.struct_apply applys = 5;
  for (int i = 0; i < this->applys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->applys(i), target);
  }

  // repeated .db_user_guild_info.struct_boss_info bosses = 6;
  for (int i = 0; i < this->bosses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bosses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_guild_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // required .e_guild_position position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }

    // required uint32 leave_time = 3;
    if (has_leave_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leave_time());
    }

    // required uint32 coin = 4;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  // repeated .db_user_guild_info.struct_apply applys = 5;
  total_size += 1 * this->applys_size();
  for (int i = 0; i < this->applys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applys(i));
  }

  // repeated .db_user_guild_info.struct_boss_info bosses = 6;
  total_size += 1 * this->bosses_size();
  for (int i = 0; i < this->bosses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bosses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_guild_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_guild_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_guild_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_guild_info::MergeFrom(const db_user_guild_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  applys_.MergeFrom(from.applys_);
  bosses_.MergeFrom(from.bosses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_leave_time()) {
      set_leave_time(from.leave_time());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_guild_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_guild_info::CopyFrom(const db_user_guild_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_guild_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < applys_size(); i++) {
    if (!this->applys(i).IsInitialized()) return false;
  }
  for (int i = 0; i < bosses_size(); i++) {
    if (!this->bosses(i).IsInitialized()) return false;
  }
  return true;
}

void db_user_guild_info::Swap(db_user_guild_info* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(position_, other->position_);
    std::swap(leave_time_, other->leave_time_);
    std::swap(coin_, other->coin_);
    applys_.Swap(&other->applys_);
    bosses_.Swap(&other->bosses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_guild_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_guild_info_descriptor_;
  metadata.reflection = db_user_guild_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int db_user_info::kUserBaseInfoFieldNumber;
const int db_user_info::kSubTasksFieldNumber;
const int db_user_info::kHerosFieldNumber;
const int db_user_info::kItemsFieldNumber;
const int db_user_info::kMailsReceivedFieldNumber;
const int db_user_info::kMailsUnreceivedFieldNumber;
const int db_user_info::kShopsFieldNumber;
const int db_user_info::kBuyItemsFieldNumber;
const int db_user_info::kMissionEventsFieldNumber;
const int db_user_info::kMissionChainsFieldNumber;
const int db_user_info::kArenaFieldNumber;
const int db_user_info::kSignFieldNumber;
const int db_user_info::kGuideFieldNumber;
const int db_user_info::kUserCrusadeFieldNumber;
const int db_user_info::kUserFriendFieldNumber;
const int db_user_info::kGuildFieldNumber;
#endif  // !_MSC_VER

db_user_info::db_user_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void db_user_info::InitAsDefaultInstance() {
  user_base_info_ = const_cast< ::db_user_base_info*>(&::db_user_base_info::default_instance());
  sub_tasks_ = const_cast< ::db_user_sub_task_array*>(&::db_user_sub_task_array::default_instance());
  heros_ = const_cast< ::db_user_hero_array*>(&::db_user_hero_array::default_instance());
  items_ = const_cast< ::struct_game_element_array*>(&::struct_game_element_array::default_instance());
  mails_received_ = const_cast< ::db_user_mail_array*>(&::db_user_mail_array::default_instance());
  mails_unreceived_ = const_cast< ::db_user_mail_array*>(&::db_user_mail_array::default_instance());
  shops_ = const_cast< ::db_user_shop_array*>(&::db_user_shop_array::default_instance());
  buy_items_ = const_cast< ::db_user_shop_buy_array*>(&::db_user_shop_buy_array::default_instance());
  mission_events_ = const_cast< ::db_user_mission_event_array*>(&::db_user_mission_event_array::default_instance());
  mission_chains_ = const_cast< ::db_user_mission_chain_array*>(&::db_user_mission_chain_array::default_instance());
  arena_ = const_cast< ::db_user_arena*>(&::db_user_arena::default_instance());
  sign_ = const_cast< ::db_user_sign*>(&::db_user_sign::default_instance());
  guide_ = const_cast< ::db_user_novice_guide_array*>(&::db_user_novice_guide_array::default_instance());
  user_crusade_ = const_cast< ::db_user_crusade*>(&::db_user_crusade::default_instance());
  user_friend_ = const_cast< ::db_user_friend*>(&::db_user_friend::default_instance());
  guild_ = const_cast< ::db_user_guild_info*>(&::db_user_guild_info::default_instance());
}

db_user_info::db_user_info(const db_user_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void db_user_info::SharedCtor() {
  _cached_size_ = 0;
  user_base_info_ = NULL;
  sub_tasks_ = NULL;
  heros_ = NULL;
  items_ = NULL;
  mails_received_ = NULL;
  mails_unreceived_ = NULL;
  shops_ = NULL;
  buy_items_ = NULL;
  mission_events_ = NULL;
  mission_chains_ = NULL;
  arena_ = NULL;
  sign_ = NULL;
  guide_ = NULL;
  user_crusade_ = NULL;
  user_friend_ = NULL;
  guild_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

db_user_info::~db_user_info() {
  SharedDtor();
}

void db_user_info::SharedDtor() {
  if (this != default_instance_) {
    delete user_base_info_;
    delete sub_tasks_;
    delete heros_;
    delete items_;
    delete mails_received_;
    delete mails_unreceived_;
    delete shops_;
    delete buy_items_;
    delete mission_events_;
    delete mission_chains_;
    delete arena_;
    delete sign_;
    delete guide_;
    delete user_crusade_;
    delete user_friend_;
    delete guild_;
  }
}

void db_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* db_user_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return db_user_info_descriptor_;
}

const db_user_info& db_user_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

db_user_info* db_user_info::default_instance_ = NULL;

db_user_info* db_user_info::New() const {
  return new db_user_info;
}

void db_user_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_base_info()) {
      if (user_base_info_ != NULL) user_base_info_->::db_user_base_info::Clear();
    }
    if (has_sub_tasks()) {
      if (sub_tasks_ != NULL) sub_tasks_->::db_user_sub_task_array::Clear();
    }
    if (has_heros()) {
      if (heros_ != NULL) heros_->::db_user_hero_array::Clear();
    }
    if (has_items()) {
      if (items_ != NULL) items_->::struct_game_element_array::Clear();
    }
    if (has_mails_received()) {
      if (mails_received_ != NULL) mails_received_->::db_user_mail_array::Clear();
    }
    if (has_mails_unreceived()) {
      if (mails_unreceived_ != NULL) mails_unreceived_->::db_user_mail_array::Clear();
    }
    if (has_shops()) {
      if (shops_ != NULL) shops_->::db_user_shop_array::Clear();
    }
    if (has_buy_items()) {
      if (buy_items_ != NULL) buy_items_->::db_user_shop_buy_array::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_mission_events()) {
      if (mission_events_ != NULL) mission_events_->::db_user_mission_event_array::Clear();
    }
    if (has_mission_chains()) {
      if (mission_chains_ != NULL) mission_chains_->::db_user_mission_chain_array::Clear();
    }
    if (has_arena()) {
      if (arena_ != NULL) arena_->::db_user_arena::Clear();
    }
    if (has_sign()) {
      if (sign_ != NULL) sign_->::db_user_sign::Clear();
    }
    if (has_guide()) {
      if (guide_ != NULL) guide_->::db_user_novice_guide_array::Clear();
    }
    if (has_user_crusade()) {
      if (user_crusade_ != NULL) user_crusade_->::db_user_crusade::Clear();
    }
    if (has_user_friend()) {
      if (user_friend_ != NULL) user_friend_->::db_user_friend::Clear();
    }
    if (has_guild()) {
      if (guild_ != NULL) guild_->::db_user_guild_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool db_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .db_user_base_info user_base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sub_tasks;
        break;
      }

      // optional .db_user_sub_task_array sub_tasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_heros;
        break;
      }

      // optional .db_user_hero_array heros = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // optional .struct_game_element_array items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mails_received;
        break;
      }

      // optional .db_user_mail_array mails_received = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails_received:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mails_received()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mails_unreceived;
        break;
      }

      // optional .db_user_mail_array mails_unreceived = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails_unreceived:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mails_unreceived()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_shops;
        break;
      }

      // optional .db_user_shop_array shops = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_buy_items;
        break;
      }

      // optional .db_user_shop_buy_array buy_items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buy_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mission_events;
        break;
      }

      // optional .db_user_mission_event_array mission_events = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_mission_chains;
        break;
      }

      // optional .db_user_mission_chain_array mission_chains = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission_chains:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_chains()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_arena;
        break;
      }

      // optional .db_user_arena arena = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sign;
        break;
      }

      // optional .db_user_sign sign = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_guide;
        break;
      }

      // optional .db_user_novice_guide_array guide = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_user_crusade;
        break;
      }

      // optional .db_user_crusade user_crusade = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_crusade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_crusade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_user_friend;
        break;
      }

      // optional .db_user_friend user_friend = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_friend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_guild;
        break;
      }

      // optional .db_user_guild_info guild = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void db_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .db_user_base_info user_base_info = 1;
  if (has_user_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_base_info(), output);
  }

  // optional .db_user_sub_task_array sub_tasks = 2;
  if (has_sub_tasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sub_tasks(), output);
  }

  // optional .db_user_hero_array heros = 3;
  if (has_heros()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->heros(), output);
  }

  // optional .struct_game_element_array items = 4;
  if (has_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(), output);
  }

  // optional .db_user_mail_array mails_received = 5;
  if (has_mails_received()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mails_received(), output);
  }

  // optional .db_user_mail_array mails_unreceived = 6;
  if (has_mails_unreceived()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mails_unreceived(), output);
  }

  // optional .db_user_shop_array shops = 7;
  if (has_shops()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->shops(), output);
  }

  // optional .db_user_shop_buy_array buy_items = 8;
  if (has_buy_items()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->buy_items(), output);
  }

  // optional .db_user_mission_event_array mission_events = 10;
  if (has_mission_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mission_events(), output);
  }

  // optional .db_user_mission_chain_array mission_chains = 11;
  if (has_mission_chains()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->mission_chains(), output);
  }

  // optional .db_user_arena arena = 12;
  if (has_arena()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->arena(), output);
  }

  // optional .db_user_sign sign = 13;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->sign(), output);
  }

  // optional .db_user_novice_guide_array guide = 14;
  if (has_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->guide(), output);
  }

  // optional .db_user_crusade user_crusade = 15;
  if (has_user_crusade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->user_crusade(), output);
  }

  // optional .db_user_friend user_friend = 16;
  if (has_user_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->user_friend(), output);
  }

  // optional .db_user_guild_info guild = 17;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->guild(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* db_user_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .db_user_base_info user_base_info = 1;
  if (has_user_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_base_info(), target);
  }

  // optional .db_user_sub_task_array sub_tasks = 2;
  if (has_sub_tasks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sub_tasks(), target);
  }

  // optional .db_user_hero_array heros = 3;
  if (has_heros()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->heros(), target);
  }

  // optional .struct_game_element_array items = 4;
  if (has_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(), target);
  }

  // optional .db_user_mail_array mails_received = 5;
  if (has_mails_received()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mails_received(), target);
  }

  // optional .db_user_mail_array mails_unreceived = 6;
  if (has_mails_unreceived()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mails_unreceived(), target);
  }

  // optional .db_user_shop_array shops = 7;
  if (has_shops()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->shops(), target);
  }

  // optional .db_user_shop_buy_array buy_items = 8;
  if (has_buy_items()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->buy_items(), target);
  }

  // optional .db_user_mission_event_array mission_events = 10;
  if (has_mission_events()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mission_events(), target);
  }

  // optional .db_user_mission_chain_array mission_chains = 11;
  if (has_mission_chains()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->mission_chains(), target);
  }

  // optional .db_user_arena arena = 12;
  if (has_arena()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->arena(), target);
  }

  // optional .db_user_sign sign = 13;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->sign(), target);
  }

  // optional .db_user_novice_guide_array guide = 14;
  if (has_guide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->guide(), target);
  }

  // optional .db_user_crusade user_crusade = 15;
  if (has_user_crusade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->user_crusade(), target);
  }

  // optional .db_user_friend user_friend = 16;
  if (has_user_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->user_friend(), target);
  }

  // optional .db_user_guild_info guild = 17;
  if (has_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->guild(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int db_user_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .db_user_base_info user_base_info = 1;
    if (has_user_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_base_info());
    }

    // optional .db_user_sub_task_array sub_tasks = 2;
    if (has_sub_tasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sub_tasks());
    }

    // optional .db_user_hero_array heros = 3;
    if (has_heros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heros());
    }

    // optional .struct_game_element_array items = 4;
    if (has_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items());
    }

    // optional .db_user_mail_array mails_received = 5;
    if (has_mails_received()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mails_received());
    }

    // optional .db_user_mail_array mails_unreceived = 6;
    if (has_mails_unreceived()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mails_unreceived());
    }

    // optional .db_user_shop_array shops = 7;
    if (has_shops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shops());
    }

    // optional .db_user_shop_buy_array buy_items = 8;
    if (has_buy_items()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buy_items());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .db_user_mission_event_array mission_events = 10;
    if (has_mission_events()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_events());
    }

    // optional .db_user_mission_chain_array mission_chains = 11;
    if (has_mission_chains()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_chains());
    }

    // optional .db_user_arena arena = 12;
    if (has_arena()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena());
    }

    // optional .db_user_sign sign = 13;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign());
    }

    // optional .db_user_novice_guide_array guide = 14;
    if (has_guide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guide());
    }

    // optional .db_user_crusade user_crusade = 15;
    if (has_user_crusade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_crusade());
    }

    // optional .db_user_friend user_friend = 16;
    if (has_user_friend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_friend());
    }

    // optional .db_user_guild_info guild = 17;
    if (has_guild()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void db_user_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const db_user_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const db_user_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void db_user_info::MergeFrom(const db_user_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_base_info()) {
      mutable_user_base_info()->::db_user_base_info::MergeFrom(from.user_base_info());
    }
    if (from.has_sub_tasks()) {
      mutable_sub_tasks()->::db_user_sub_task_array::MergeFrom(from.sub_tasks());
    }
    if (from.has_heros()) {
      mutable_heros()->::db_user_hero_array::MergeFrom(from.heros());
    }
    if (from.has_items()) {
      mutable_items()->::struct_game_element_array::MergeFrom(from.items());
    }
    if (from.has_mails_received()) {
      mutable_mails_received()->::db_user_mail_array::MergeFrom(from.mails_received());
    }
    if (from.has_mails_unreceived()) {
      mutable_mails_unreceived()->::db_user_mail_array::MergeFrom(from.mails_unreceived());
    }
    if (from.has_shops()) {
      mutable_shops()->::db_user_shop_array::MergeFrom(from.shops());
    }
    if (from.has_buy_items()) {
      mutable_buy_items()->::db_user_shop_buy_array::MergeFrom(from.buy_items());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mission_events()) {
      mutable_mission_events()->::db_user_mission_event_array::MergeFrom(from.mission_events());
    }
    if (from.has_mission_chains()) {
      mutable_mission_chains()->::db_user_mission_chain_array::MergeFrom(from.mission_chains());
    }
    if (from.has_arena()) {
      mutable_arena()->::db_user_arena::MergeFrom(from.arena());
    }
    if (from.has_sign()) {
      mutable_sign()->::db_user_sign::MergeFrom(from.sign());
    }
    if (from.has_guide()) {
      mutable_guide()->::db_user_novice_guide_array::MergeFrom(from.guide());
    }
    if (from.has_user_crusade()) {
      mutable_user_crusade()->::db_user_crusade::MergeFrom(from.user_crusade());
    }
    if (from.has_user_friend()) {
      mutable_user_friend()->::db_user_friend::MergeFrom(from.user_friend());
    }
    if (from.has_guild()) {
      mutable_guild()->::db_user_guild_info::MergeFrom(from.guild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void db_user_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_user_info::CopyFrom(const db_user_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_user_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_base_info()) {
    if (!this->user_base_info().IsInitialized()) return false;
  }
  if (has_sub_tasks()) {
    if (!this->sub_tasks().IsInitialized()) return false;
  }
  if (has_heros()) {
    if (!this->heros().IsInitialized()) return false;
  }
  if (has_items()) {
    if (!this->items().IsInitialized()) return false;
  }
  if (has_mails_received()) {
    if (!this->mails_received().IsInitialized()) return false;
  }
  if (has_mails_unreceived()) {
    if (!this->mails_unreceived().IsInitialized()) return false;
  }
  if (has_shops()) {
    if (!this->shops().IsInitialized()) return false;
  }
  if (has_buy_items()) {
    if (!this->buy_items().IsInitialized()) return false;
  }
  if (has_mission_events()) {
    if (!this->mission_events().IsInitialized()) return false;
  }
  if (has_mission_chains()) {
    if (!this->mission_chains().IsInitialized()) return false;
  }
  if (has_arena()) {
    if (!this->arena().IsInitialized()) return false;
  }
  if (has_sign()) {
    if (!this->sign().IsInitialized()) return false;
  }
  if (has_user_crusade()) {
    if (!this->user_crusade().IsInitialized()) return false;
  }
  if (has_user_friend()) {
    if (!this->user_friend().IsInitialized()) return false;
  }
  if (has_guild()) {
    if (!this->guild().IsInitialized()) return false;
  }
  return true;
}

void db_user_info::Swap(db_user_info* other) {
  if (other != this) {
    std::swap(user_base_info_, other->user_base_info_);
    std::swap(sub_tasks_, other->sub_tasks_);
    std::swap(heros_, other->heros_);
    std::swap(items_, other->items_);
    std::swap(mails_received_, other->mails_received_);
    std::swap(mails_unreceived_, other->mails_unreceived_);
    std::swap(shops_, other->shops_);
    std::swap(buy_items_, other->buy_items_);
    std::swap(mission_events_, other->mission_events_);
    std::swap(mission_chains_, other->mission_chains_);
    std::swap(arena_, other->arena_);
    std::swap(sign_, other->sign_);
    std::swap(guide_, other->guide_);
    std::swap(user_crusade_, other->user_crusade_);
    std::swap(user_friend_, other->user_friend_);
    std::swap(guild_, other->guild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata db_user_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = db_user_info_descriptor_;
  metadata.reflection = db_user_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_dbs_user_info_req::kUserIdFieldNumber;
const int gs_dbs_user_info_req::kUserConnectIdFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_req::gs_dbs_user_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_req::InitAsDefaultInstance() {
}

gs_dbs_user_info_req::gs_dbs_user_info_req(const gs_dbs_user_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_req::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  user_connect_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_req::~gs_dbs_user_info_req() {
  SharedDtor();
}

void gs_dbs_user_info_req::SharedDtor() {
  if (user_connect_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_connect_id_;
  }
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_req_descriptor_;
}

const gs_dbs_user_info_req& gs_dbs_user_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_req* gs_dbs_user_info_req::default_instance_ = NULL;

gs_dbs_user_info_req* gs_dbs_user_info_req::New() const {
  return new gs_dbs_user_info_req;
}

void gs_dbs_user_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_user_connect_id()) {
      if (user_connect_id_ != &::google::protobuf::internal::kEmptyString) {
        user_connect_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_connect_id;
        break;
      }

      // required bytes user_connect_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_connect_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_connect_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required bytes user_connect_id = 2;
  if (has_user_connect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->user_connect_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required bytes user_connect_id = 2;
  if (has_user_connect_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_connect_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required bytes user_connect_id = 2;
    if (has_user_connect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_connect_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_req::MergeFrom(const gs_dbs_user_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_connect_id()) {
      set_user_connect_id(from.user_connect_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_req::CopyFrom(const gs_dbs_user_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gs_dbs_user_info_req::Swap(gs_dbs_user_info_req* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_connect_id_, other->user_connect_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_req_descriptor_;
  metadata.reflection = gs_dbs_user_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dbs_gs_user_info_res::kErrorCodeFieldNumber;
const int dbs_gs_user_info_res::kUserIdFieldNumber;
const int dbs_gs_user_info_res::kUserConnectIdFieldNumber;
const int dbs_gs_user_info_res::kUserInfoFieldNumber;
#endif  // !_MSC_VER

dbs_gs_user_info_res::dbs_gs_user_info_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_user_info_res::InitAsDefaultInstance() {
  user_info_ = const_cast< ::db_user_info*>(&::db_user_info::default_instance());
}

dbs_gs_user_info_res::dbs_gs_user_info_res(const dbs_gs_user_info_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_user_info_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  user_id_ = 0u;
  user_connect_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_user_info_res::~dbs_gs_user_info_res() {
  SharedDtor();
}

void dbs_gs_user_info_res::SharedDtor() {
  if (user_connect_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_connect_id_;
  }
  if (this != default_instance_) {
    delete user_info_;
  }
}

void dbs_gs_user_info_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_user_info_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_user_info_res_descriptor_;
}

const dbs_gs_user_info_res& dbs_gs_user_info_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_user_info_res* dbs_gs_user_info_res::default_instance_ = NULL;

dbs_gs_user_info_res* dbs_gs_user_info_res::New() const {
  return new dbs_gs_user_info_res;
}

void dbs_gs_user_info_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    user_id_ = 0u;
    if (has_user_connect_id()) {
      if (user_connect_id_ != &::google::protobuf::internal::kEmptyString) {
        user_connect_id_->clear();
      }
    }
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::db_user_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_user_info_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_connect_id;
        break;
      }

      // required bytes user_connect_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_connect_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_connect_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_info;
        break;
      }

      // optional .db_user_info user_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_user_info_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required bytes user_connect_id = 3;
  if (has_user_connect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->user_connect_id(), output);
  }

  // optional .db_user_info user_info = 4;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_user_info_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required bytes user_connect_id = 3;
  if (has_user_connect_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->user_connect_id(), target);
  }

  // optional .db_user_info user_info = 4;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_user_info_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required bytes user_connect_id = 3;
    if (has_user_connect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_connect_id());
    }

    // optional .db_user_info user_info = 4;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_user_info_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_user_info_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_user_info_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_user_info_res::MergeFrom(const dbs_gs_user_info_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_connect_id()) {
      set_user_connect_id(from.user_connect_id());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::db_user_info::MergeFrom(from.user_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_user_info_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_user_info_res::CopyFrom(const dbs_gs_user_info_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_user_info_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  return true;
}

void dbs_gs_user_info_res::Swap(dbs_gs_user_info_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_connect_id_, other->user_connect_id_);
    std::swap(user_info_, other->user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_user_info_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_user_info_res_descriptor_;
  metadata.reflection = dbs_gs_user_info_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_dbs_user_info_new_create_req::kUserInfoFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_new_create_req::gs_dbs_user_info_new_create_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_new_create_req::InitAsDefaultInstance() {
  user_info_ = const_cast< ::db_user_info*>(&::db_user_info::default_instance());
}

gs_dbs_user_info_new_create_req::gs_dbs_user_info_new_create_req(const gs_dbs_user_info_new_create_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_new_create_req::SharedCtor() {
  _cached_size_ = 0;
  user_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_new_create_req::~gs_dbs_user_info_new_create_req() {
  SharedDtor();
}

void gs_dbs_user_info_new_create_req::SharedDtor() {
  if (this != default_instance_) {
    delete user_info_;
  }
}

void gs_dbs_user_info_new_create_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_new_create_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_new_create_req_descriptor_;
}

const gs_dbs_user_info_new_create_req& gs_dbs_user_info_new_create_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_new_create_req* gs_dbs_user_info_new_create_req::default_instance_ = NULL;

gs_dbs_user_info_new_create_req* gs_dbs_user_info_new_create_req::New() const {
  return new gs_dbs_user_info_new_create_req;
}

void gs_dbs_user_info_new_create_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::db_user_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_new_create_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .db_user_info user_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_new_create_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .db_user_info user_info = 1;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_new_create_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .db_user_info user_info = 1;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_new_create_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .db_user_info user_info = 1;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_new_create_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_new_create_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_new_create_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_new_create_req::MergeFrom(const gs_dbs_user_info_new_create_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_info()) {
      mutable_user_info()->::db_user_info::MergeFrom(from.user_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_new_create_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_new_create_req::CopyFrom(const gs_dbs_user_info_new_create_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_new_create_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user_info()) {
    if (!this->user_info().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_info_new_create_req::Swap(gs_dbs_user_info_new_create_req* other) {
  if (other != this) {
    std::swap(user_info_, other->user_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_new_create_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_new_create_req_descriptor_;
  metadata.reflection = gs_dbs_user_info_new_create_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dbs_gs_user_info_new_create_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

dbs_gs_user_info_new_create_res::dbs_gs_user_info_new_create_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_user_info_new_create_res::InitAsDefaultInstance() {
}

dbs_gs_user_info_new_create_res::dbs_gs_user_info_new_create_res(const dbs_gs_user_info_new_create_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_user_info_new_create_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_user_info_new_create_res::~dbs_gs_user_info_new_create_res() {
  SharedDtor();
}

void dbs_gs_user_info_new_create_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dbs_gs_user_info_new_create_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_user_info_new_create_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_user_info_new_create_res_descriptor_;
}

const dbs_gs_user_info_new_create_res& dbs_gs_user_info_new_create_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_user_info_new_create_res* dbs_gs_user_info_new_create_res::default_instance_ = NULL;

dbs_gs_user_info_new_create_res* dbs_gs_user_info_new_create_res::New() const {
  return new dbs_gs_user_info_new_create_res;
}

void dbs_gs_user_info_new_create_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_user_info_new_create_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_user_info_new_create_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_user_info_new_create_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_user_info_new_create_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_user_info_new_create_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_user_info_new_create_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_user_info_new_create_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_user_info_new_create_res::MergeFrom(const dbs_gs_user_info_new_create_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_user_info_new_create_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_user_info_new_create_res::CopyFrom(const dbs_gs_user_info_new_create_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_user_info_new_create_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void dbs_gs_user_info_new_create_res::Swap(dbs_gs_user_info_new_create_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_user_info_new_create_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_user_info_new_create_res_descriptor_;
  metadata.reflection = dbs_gs_user_info_new_create_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* gs_dbs_user_info_op_req_EOPType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_EOPType_descriptor_;
}
bool gs_dbs_user_info_op_req_EOPType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_dbs_user_info_op_req_EOPType gs_dbs_user_info_op_req::Add_Or_Update;
const gs_dbs_user_info_op_req_EOPType gs_dbs_user_info_op_req::Delete;
const gs_dbs_user_info_op_req_EOPType gs_dbs_user_info_op_req::Add;
const gs_dbs_user_info_op_req_EOPType gs_dbs_user_info_op_req::Update;
const gs_dbs_user_info_op_req_EOPType gs_dbs_user_info_op_req::EOPType_MIN;
const gs_dbs_user_info_op_req_EOPType gs_dbs_user_info_op_req::EOPType_MAX;
const int gs_dbs_user_info_op_req::EOPType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_base_info::kOpTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kNameFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kLevelFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kExpFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kVipFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kDiamondFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kGoldFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kHealthCurFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kHealthLastUpdateTimestampFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kSkillPointFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kSkillPointUpdateTimestampFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kInvokeGoldFreeLeftNumFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kInvokeGoldFreeUpdateTimestampFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kInvokeGoldNTotalNumFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kInvokeDiamondFreeLeftNumFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kInvokeDiamondFreeUpdateTimestampFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kInvokeDiamondNTotalNumFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kHeadIdFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kHeadFrameIdFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kFriendPointFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kSignatureFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kFightPowerFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_base_info::kCrusadePointFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_base_info::gs_dbs_user_info_op_req_struct_op_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_base_info::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_op_base_info::gs_dbs_user_info_op_req_struct_op_base_info(const gs_dbs_user_info_op_req_struct_op_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_base_info::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  exp_ = 0u;
  vip_ = 0u;
  diamond_ = 0u;
  gold_ = 0u;
  health_cur_ = 0u;
  health_last_update_timestamp_ = 0u;
  skill_point_ = 0u;
  skill_point_update_timestamp_ = 0u;
  invoke_gold_free_left_num_ = 0u;
  invoke_gold_free_update_timestamp_ = 0u;
  invoke_gold_n_total_num_ = 0u;
  invoke_diamond_free_left_num_ = 0u;
  invoke_diamond_free_update_timestamp_ = 0u;
  invoke_diamond_n_total_num_ = 0u;
  head_id_ = 0u;
  head_frame_id_ = 0u;
  friend_point_ = 0u;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_power_ = 0u;
  crusade_point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_base_info::~gs_dbs_user_info_op_req_struct_op_base_info() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_base_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_op_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_base_info_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_base_info& gs_dbs_user_info_op_req_struct_op_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_base_info* gs_dbs_user_info_op_req_struct_op_base_info::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_base_info* gs_dbs_user_info_op_req_struct_op_base_info::New() const {
  return new gs_dbs_user_info_op_req_struct_op_base_info;
}

void gs_dbs_user_info_op_req_struct_op_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    exp_ = 0u;
    vip_ = 0u;
    diamond_ = 0u;
    gold_ = 0u;
    health_cur_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    health_last_update_timestamp_ = 0u;
    skill_point_ = 0u;
    skill_point_update_timestamp_ = 0u;
    invoke_gold_free_left_num_ = 0u;
    invoke_gold_free_update_timestamp_ = 0u;
    invoke_gold_n_total_num_ = 0u;
    invoke_diamond_free_left_num_ = 0u;
    invoke_diamond_free_update_timestamp_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    invoke_diamond_n_total_num_ = 0u;
    head_id_ = 0u;
    head_frame_id_ = 0u;
    friend_point_ = 0u;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    fight_power_ = 0u;
    crusade_point_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_info_op_req_EOPType_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_user_info_op_req_EOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vip;
        break;
      }

      // optional uint32 vip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_health_cur;
        break;
      }

      // optional uint32 health_cur = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_cur_)));
          set_has_health_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_health_last_update_timestamp;
        break;
      }

      // optional uint32 health_last_update_timestamp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health_last_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_last_update_timestamp_)));
          set_has_health_last_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_skill_point;
        break;
      }

      // optional uint32 skill_point = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_skill_point_update_timestamp;
        break;
      }

      // optional uint32 skill_point_update_timestamp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_point_update_timestamp_)));
          set_has_skill_point_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_invoke_gold_free_left_num;
        break;
      }

      // optional uint32 invoke_gold_free_left_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_gold_free_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_gold_free_left_num_)));
          set_has_invoke_gold_free_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_invoke_gold_free_update_timestamp;
        break;
      }

      // optional uint32 invoke_gold_free_update_timestamp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_gold_free_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_gold_free_update_timestamp_)));
          set_has_invoke_gold_free_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_invoke_gold_n_total_num;
        break;
      }

      // optional uint32 invoke_gold_n_total_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_gold_n_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_gold_n_total_num_)));
          set_has_invoke_gold_n_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_invoke_diamond_free_left_num;
        break;
      }

      // optional uint32 invoke_diamond_free_left_num = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_diamond_free_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_diamond_free_left_num_)));
          set_has_invoke_diamond_free_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_invoke_diamond_free_update_timestamp;
        break;
      }

      // optional uint32 invoke_diamond_free_update_timestamp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_diamond_free_update_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_diamond_free_update_timestamp_)));
          set_has_invoke_diamond_free_update_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_invoke_diamond_n_total_num;
        break;
      }

      // optional uint32 invoke_diamond_n_total_num = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invoke_diamond_n_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invoke_diamond_n_total_num_)));
          set_has_invoke_diamond_n_total_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_head_id;
        break;
      }

      // optional uint32 head_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_head_frame_id;
        break;
      }

      // optional uint32 head_frame_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_frame_id_)));
          set_has_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_friend_point;
        break;
      }

      // optional uint32 friend_point = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_point_)));
          set_has_friend_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_signature;
        break;
      }

      // optional string signature = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_fight_power;
        break;
      }

      // optional uint32 fight_power = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_crusade_point;
        break;
      }

      // optional uint32 crusade_point = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crusade_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crusade_point_)));
          set_has_crusade_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 vip = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip(), output);
  }

  // optional uint32 diamond = 6;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->diamond(), output);
  }

  // optional uint32 gold = 7;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gold(), output);
  }

  // optional uint32 health_cur = 8;
  if (has_health_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->health_cur(), output);
  }

  // optional uint32 health_last_update_timestamp = 9;
  if (has_health_last_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->health_last_update_timestamp(), output);
  }

  // optional uint32 skill_point = 10;
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->skill_point(), output);
  }

  // optional uint32 skill_point_update_timestamp = 11;
  if (has_skill_point_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->skill_point_update_timestamp(), output);
  }

  // optional uint32 invoke_gold_free_left_num = 12;
  if (has_invoke_gold_free_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->invoke_gold_free_left_num(), output);
  }

  // optional uint32 invoke_gold_free_update_timestamp = 13;
  if (has_invoke_gold_free_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->invoke_gold_free_update_timestamp(), output);
  }

  // optional uint32 invoke_gold_n_total_num = 14;
  if (has_invoke_gold_n_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->invoke_gold_n_total_num(), output);
  }

  // optional uint32 invoke_diamond_free_left_num = 15;
  if (has_invoke_diamond_free_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->invoke_diamond_free_left_num(), output);
  }

  // optional uint32 invoke_diamond_free_update_timestamp = 16;
  if (has_invoke_diamond_free_update_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->invoke_diamond_free_update_timestamp(), output);
  }

  // optional uint32 invoke_diamond_n_total_num = 17;
  if (has_invoke_diamond_n_total_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->invoke_diamond_n_total_num(), output);
  }

  // optional uint32 head_id = 18;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->head_id(), output);
  }

  // optional uint32 head_frame_id = 19;
  if (has_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->head_frame_id(), output);
  }

  // optional uint32 friend_point = 20;
  if (has_friend_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->friend_point(), output);
  }

  // optional string signature = 21;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->signature(), output);
  }

  // optional uint32 fight_power = 22;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->fight_power(), output);
  }

  // optional uint32 crusade_point = 23;
  if (has_crusade_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->crusade_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // optional uint32 vip = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip(), target);
  }

  // optional uint32 diamond = 6;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->diamond(), target);
  }

  // optional uint32 gold = 7;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gold(), target);
  }

  // optional uint32 health_cur = 8;
  if (has_health_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->health_cur(), target);
  }

  // optional uint32 health_last_update_timestamp = 9;
  if (has_health_last_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->health_last_update_timestamp(), target);
  }

  // optional uint32 skill_point = 10;
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->skill_point(), target);
  }

  // optional uint32 skill_point_update_timestamp = 11;
  if (has_skill_point_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->skill_point_update_timestamp(), target);
  }

  // optional uint32 invoke_gold_free_left_num = 12;
  if (has_invoke_gold_free_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->invoke_gold_free_left_num(), target);
  }

  // optional uint32 invoke_gold_free_update_timestamp = 13;
  if (has_invoke_gold_free_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->invoke_gold_free_update_timestamp(), target);
  }

  // optional uint32 invoke_gold_n_total_num = 14;
  if (has_invoke_gold_n_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->invoke_gold_n_total_num(), target);
  }

  // optional uint32 invoke_diamond_free_left_num = 15;
  if (has_invoke_diamond_free_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->invoke_diamond_free_left_num(), target);
  }

  // optional uint32 invoke_diamond_free_update_timestamp = 16;
  if (has_invoke_diamond_free_update_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->invoke_diamond_free_update_timestamp(), target);
  }

  // optional uint32 invoke_diamond_n_total_num = 17;
  if (has_invoke_diamond_n_total_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->invoke_diamond_n_total_num(), target);
  }

  // optional uint32 head_id = 18;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->head_id(), target);
  }

  // optional uint32 head_frame_id = 19;
  if (has_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->head_frame_id(), target);
  }

  // optional uint32 friend_point = 20;
  if (has_friend_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->friend_point(), target);
  }

  // optional string signature = 21;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->signature(), target);
  }

  // optional uint32 fight_power = 22;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->fight_power(), target);
  }

  // optional uint32 crusade_point = 23;
  if (has_crusade_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->crusade_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 vip = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // optional uint32 diamond = 6;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint32 gold = 7;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 health_cur = 8;
    if (has_health_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_cur());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 health_last_update_timestamp = 9;
    if (has_health_last_update_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_last_update_timestamp());
    }

    // optional uint32 skill_point = 10;
    if (has_skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point());
    }

    // optional uint32 skill_point_update_timestamp = 11;
    if (has_skill_point_update_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_point_update_timestamp());
    }

    // optional uint32 invoke_gold_free_left_num = 12;
    if (has_invoke_gold_free_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_gold_free_left_num());
    }

    // optional uint32 invoke_gold_free_update_timestamp = 13;
    if (has_invoke_gold_free_update_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_gold_free_update_timestamp());
    }

    // optional uint32 invoke_gold_n_total_num = 14;
    if (has_invoke_gold_n_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_gold_n_total_num());
    }

    // optional uint32 invoke_diamond_free_left_num = 15;
    if (has_invoke_diamond_free_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_diamond_free_left_num());
    }

    // optional uint32 invoke_diamond_free_update_timestamp = 16;
    if (has_invoke_diamond_free_update_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_diamond_free_update_timestamp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 invoke_diamond_n_total_num = 17;
    if (has_invoke_diamond_n_total_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invoke_diamond_n_total_num());
    }

    // optional uint32 head_id = 18;
    if (has_head_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // optional uint32 head_frame_id = 19;
    if (has_head_frame_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_frame_id());
    }

    // optional uint32 friend_point = 20;
    if (has_friend_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_point());
    }

    // optional string signature = 21;
    if (has_signature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // optional uint32 fight_power = 22;
    if (has_fight_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

    // optional uint32 crusade_point = 23;
    if (has_crusade_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crusade_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_base_info::MergeFrom(const gs_dbs_user_info_op_req_struct_op_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_health_cur()) {
      set_health_cur(from.health_cur());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_health_last_update_timestamp()) {
      set_health_last_update_timestamp(from.health_last_update_timestamp());
    }
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
    if (from.has_skill_point_update_timestamp()) {
      set_skill_point_update_timestamp(from.skill_point_update_timestamp());
    }
    if (from.has_invoke_gold_free_left_num()) {
      set_invoke_gold_free_left_num(from.invoke_gold_free_left_num());
    }
    if (from.has_invoke_gold_free_update_timestamp()) {
      set_invoke_gold_free_update_timestamp(from.invoke_gold_free_update_timestamp());
    }
    if (from.has_invoke_gold_n_total_num()) {
      set_invoke_gold_n_total_num(from.invoke_gold_n_total_num());
    }
    if (from.has_invoke_diamond_free_left_num()) {
      set_invoke_diamond_free_left_num(from.invoke_diamond_free_left_num());
    }
    if (from.has_invoke_diamond_free_update_timestamp()) {
      set_invoke_diamond_free_update_timestamp(from.invoke_diamond_free_update_timestamp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_invoke_diamond_n_total_num()) {
      set_invoke_diamond_n_total_num(from.invoke_diamond_n_total_num());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_head_frame_id()) {
      set_head_frame_id(from.head_frame_id());
    }
    if (from.has_friend_point()) {
      set_friend_point(from.friend_point());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_crusade_point()) {
      set_crusade_point(from.crusade_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_base_info::CopyFrom(const gs_dbs_user_info_op_req_struct_op_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_base_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_dbs_user_info_op_req_struct_op_base_info::Swap(gs_dbs_user_info_op_req_struct_op_base_info* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(vip_, other->vip_);
    std::swap(diamond_, other->diamond_);
    std::swap(gold_, other->gold_);
    std::swap(health_cur_, other->health_cur_);
    std::swap(health_last_update_timestamp_, other->health_last_update_timestamp_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(skill_point_update_timestamp_, other->skill_point_update_timestamp_);
    std::swap(invoke_gold_free_left_num_, other->invoke_gold_free_left_num_);
    std::swap(invoke_gold_free_update_timestamp_, other->invoke_gold_free_update_timestamp_);
    std::swap(invoke_gold_n_total_num_, other->invoke_gold_n_total_num_);
    std::swap(invoke_diamond_free_left_num_, other->invoke_diamond_free_left_num_);
    std::swap(invoke_diamond_free_update_timestamp_, other->invoke_diamond_free_update_timestamp_);
    std::swap(invoke_diamond_n_total_num_, other->invoke_diamond_n_total_num_);
    std::swap(head_id_, other->head_id_);
    std::swap(head_frame_id_, other->head_frame_id_);
    std::swap(friend_point_, other->friend_point_);
    std::swap(signature_, other->signature_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(crusade_point_, other->crusade_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_base_info_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_base_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_sub_task::kOpTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_sub_task::kSubTaskIdFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_sub_task::kStarFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_sub_task::kLastEnterTimestampFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_sub_task::kLastDayEnterNumFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_sub_task::kTotalEnterNumFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_sub_task::kLastResetTimeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_sub_task::kLastDayResetNumFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_sub_task::gs_dbs_user_info_op_req_struct_op_sub_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_sub_task::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_op_sub_task::gs_dbs_user_info_op_req_struct_op_sub_task(const gs_dbs_user_info_op_req_struct_op_sub_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_sub_task::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  sub_task_id_ = 0u;
  star_ = 0u;
  last_enter_timestamp_ = 0u;
  last_day_enter_num_ = 0u;
  total_enter_num_ = 0u;
  last_reset_time_ = 0u;
  last_day_reset_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_sub_task::~gs_dbs_user_info_op_req_struct_op_sub_task() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_sub_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_op_sub_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_sub_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_sub_task_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_sub_task& gs_dbs_user_info_op_req_struct_op_sub_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_sub_task* gs_dbs_user_info_op_req_struct_op_sub_task::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_sub_task* gs_dbs_user_info_op_req_struct_op_sub_task::New() const {
  return new gs_dbs_user_info_op_req_struct_op_sub_task;
}

void gs_dbs_user_info_op_req_struct_op_sub_task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    sub_task_id_ = 0u;
    star_ = 0u;
    last_enter_timestamp_ = 0u;
    last_day_enter_num_ = 0u;
    total_enter_num_ = 0u;
    last_reset_time_ = 0u;
    last_day_reset_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_sub_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_info_op_req_EOPType_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_user_info_op_req_EOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sub_task_id;
        break;
      }

      // required uint32 sub_task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_task_id_)));
          set_has_sub_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional uint32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_enter_timestamp;
        break;
      }

      // optional uint32 last_enter_timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_enter_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_enter_timestamp_)));
          set_has_last_enter_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_day_enter_num;
        break;
      }

      // optional uint32 last_day_enter_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_enter_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_enter_num_)));
          set_has_last_day_enter_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_enter_num;
        break;
      }

      // optional uint32 total_enter_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_enter_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_enter_num_)));
          set_has_total_enter_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_reset_time;
        break;
      }

      // optional uint32 last_reset_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_reset_time_)));
          set_has_last_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_day_reset_num;
        break;
      }

      // optional uint32 last_day_reset_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_reset_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_reset_num_)));
          set_has_last_day_reset_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_sub_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // required uint32 sub_task_id = 2;
  if (has_sub_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sub_task_id(), output);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  // optional uint32 last_enter_timestamp = 4;
  if (has_last_enter_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_enter_timestamp(), output);
  }

  // optional uint32 last_day_enter_num = 5;
  if (has_last_day_enter_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_day_enter_num(), output);
  }

  // optional uint32 total_enter_num = 6;
  if (has_total_enter_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_enter_num(), output);
  }

  // optional uint32 last_reset_time = 7;
  if (has_last_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_reset_time(), output);
  }

  // optional uint32 last_day_reset_num = 8;
  if (has_last_day_reset_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_day_reset_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_sub_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // required uint32 sub_task_id = 2;
  if (has_sub_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sub_task_id(), target);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }

  // optional uint32 last_enter_timestamp = 4;
  if (has_last_enter_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_enter_timestamp(), target);
  }

  // optional uint32 last_day_enter_num = 5;
  if (has_last_day_enter_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_day_enter_num(), target);
  }

  // optional uint32 total_enter_num = 6;
  if (has_total_enter_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_enter_num(), target);
  }

  // optional uint32 last_reset_time = 7;
  if (has_last_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_reset_time(), target);
  }

  // optional uint32 last_day_reset_num = 8;
  if (has_last_day_reset_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_day_reset_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_sub_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // required uint32 sub_task_id = 2;
    if (has_sub_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_task_id());
    }

    // optional uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 last_enter_timestamp = 4;
    if (has_last_enter_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_enter_timestamp());
    }

    // optional uint32 last_day_enter_num = 5;
    if (has_last_day_enter_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_enter_num());
    }

    // optional uint32 total_enter_num = 6;
    if (has_total_enter_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_enter_num());
    }

    // optional uint32 last_reset_time = 7;
    if (has_last_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_reset_time());
    }

    // optional uint32 last_day_reset_num = 8;
    if (has_last_day_reset_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_reset_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_sub_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_sub_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_sub_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_sub_task::MergeFrom(const gs_dbs_user_info_op_req_struct_op_sub_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_sub_task_id()) {
      set_sub_task_id(from.sub_task_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_last_enter_timestamp()) {
      set_last_enter_timestamp(from.last_enter_timestamp());
    }
    if (from.has_last_day_enter_num()) {
      set_last_day_enter_num(from.last_day_enter_num());
    }
    if (from.has_total_enter_num()) {
      set_total_enter_num(from.total_enter_num());
    }
    if (from.has_last_reset_time()) {
      set_last_reset_time(from.last_reset_time());
    }
    if (from.has_last_day_reset_num()) {
      set_last_day_reset_num(from.last_day_reset_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_sub_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_sub_task::CopyFrom(const gs_dbs_user_info_op_req_struct_op_sub_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_sub_task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gs_dbs_user_info_op_req_struct_op_sub_task::Swap(gs_dbs_user_info_op_req_struct_op_sub_task* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(sub_task_id_, other->sub_task_id_);
    std::swap(star_, other->star_);
    std::swap(last_enter_timestamp_, other->last_enter_timestamp_);
    std::swap(last_day_enter_num_, other->last_day_enter_num_);
    std::swap(total_enter_num_, other->total_enter_num_);
    std::swap(last_reset_time_, other->last_reset_time_);
    std::swap(last_day_reset_num_, other->last_day_reset_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_sub_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_sub_task_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_sub_task_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_mail::kMailIdFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_mail::kOpTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_mail::kMailFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_mail::gs_dbs_user_info_op_req_struct_op_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_mail::InitAsDefaultInstance() {
  mail_ = const_cast< ::db_user_mail*>(&::db_user_mail::default_instance());
}

gs_dbs_user_info_op_req_struct_op_mail::gs_dbs_user_info_op_req_struct_op_mail(const gs_dbs_user_info_op_req_struct_op_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_mail::SharedCtor() {
  _cached_size_ = 0;
  mail_id_ = 0u;
  op_type_ = 1;
  mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_mail::~gs_dbs_user_info_op_req_struct_op_mail() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_mail::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void gs_dbs_user_info_op_req_struct_op_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_mail_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_mail& gs_dbs_user_info_op_req_struct_op_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_mail* gs_dbs_user_info_op_req_struct_op_mail::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_mail* gs_dbs_user_info_op_req_struct_op_mail::New() const {
  return new gs_dbs_user_info_op_req_struct_op_mail;
}

void gs_dbs_user_info_op_req_struct_op_mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mail_id_ = 0u;
    op_type_ = 1;
    if (has_mail()) {
      if (mail_ != NULL) mail_->::db_user_mail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mail_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op_type;
        break;
      }

      // required .gs_dbs_user_info_op_req.EOPType op_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_info_op_req_EOPType_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_user_info_op_req_EOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mail;
        break;
      }

      // optional .db_user_mail mail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mail_id = 1;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mail_id(), output);
  }

  // required .gs_dbs_user_info_op_req.EOPType op_type = 2;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->op_type(), output);
  }

  // optional .db_user_mail mail = 3;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mail_id = 1;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mail_id(), target);
  }

  // required .gs_dbs_user_info_op_req.EOPType op_type = 2;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->op_type(), target);
  }

  // optional .db_user_mail mail = 3;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mail_id = 1;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mail_id());
    }

    // required .gs_dbs_user_info_op_req.EOPType op_type = 2;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional .db_user_mail mail = 3;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_mail::MergeFrom(const gs_dbs_user_info_op_req_struct_op_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_mail()) {
      mutable_mail()->::db_user_mail::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_mail::CopyFrom(const gs_dbs_user_info_op_req_struct_op_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_info_op_req_struct_op_mail::Swap(gs_dbs_user_info_op_req_struct_op_mail* other) {
  if (other != this) {
    std::swap(mail_id_, other->mail_id_);
    std::swap(op_type_, other->op_type_);
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_mail_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_mail_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_new_hero::kHeroFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_new_hero::gs_dbs_user_info_op_req_struct_new_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_new_hero::InitAsDefaultInstance() {
  hero_ = const_cast< ::db_user_hero*>(&::db_user_hero::default_instance());
}

gs_dbs_user_info_op_req_struct_new_hero::gs_dbs_user_info_op_req_struct_new_hero(const gs_dbs_user_info_op_req_struct_new_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_new_hero::SharedCtor() {
  _cached_size_ = 0;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_new_hero::~gs_dbs_user_info_op_req_struct_new_hero() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_new_hero::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
  }
}

void gs_dbs_user_info_op_req_struct_new_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_new_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_new_hero_descriptor_;
}

const gs_dbs_user_info_op_req_struct_new_hero& gs_dbs_user_info_op_req_struct_new_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_new_hero* gs_dbs_user_info_op_req_struct_new_hero::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_new_hero* gs_dbs_user_info_op_req_struct_new_hero::New() const {
  return new gs_dbs_user_info_op_req_struct_new_hero;
}

void gs_dbs_user_info_op_req_struct_new_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero()) {
      if (hero_ != NULL) hero_->::db_user_hero::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_new_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .db_user_hero hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_new_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .db_user_hero hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_new_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .db_user_hero hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_new_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .db_user_hero hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_new_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_new_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_new_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_new_hero::MergeFrom(const gs_dbs_user_info_op_req_struct_new_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      mutable_hero()->::db_user_hero::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_new_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_new_hero::CopyFrom(const gs_dbs_user_info_op_req_struct_new_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_new_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_info_op_req_struct_new_hero::Swap(gs_dbs_user_info_op_req_struct_new_hero* other) {
  if (other != this) {
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_new_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_new_hero_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_new_hero_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_hero_base::kOpTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_hero_base::kHeroIdFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_hero_base::kStarFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_hero_base::kQualityFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_hero_base::kLevelFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_hero_base::kCurExpFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_hero_base::gs_dbs_user_info_op_req_struct_op_hero_base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_hero_base::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_op_hero_base::gs_dbs_user_info_op_req_struct_op_hero_base(const gs_dbs_user_info_op_req_struct_op_hero_base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_hero_base::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  hero_id_ = 0u;
  star_ = 0u;
  quality_ = 0u;
  level_ = 0u;
  cur_exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_hero_base::~gs_dbs_user_info_op_req_struct_op_hero_base() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_hero_base::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_op_hero_base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_hero_base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_hero_base_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_hero_base& gs_dbs_user_info_op_req_struct_op_hero_base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_hero_base* gs_dbs_user_info_op_req_struct_op_hero_base::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_hero_base* gs_dbs_user_info_op_req_struct_op_hero_base::New() const {
  return new gs_dbs_user_info_op_req_struct_op_hero_base;
}

void gs_dbs_user_info_op_req_struct_op_hero_base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    hero_id_ = 0u;
    star_ = 0u;
    quality_ = 0u;
    level_ = 0u;
    cur_exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_hero_base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_info_op_req_EOPType_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_user_info_op_req_EOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional uint32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_exp;
        break;
      }

      // optional uint32 cur_exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_exp_)));
          set_has_cur_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_hero_base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  // optional uint32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quality(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 cur_exp = 6;
  if (has_cur_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cur_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_hero_base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }

  // optional uint32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quality(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 cur_exp = 6;
  if (has_cur_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cur_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_hero_base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // required uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 cur_exp = 6;
    if (has_cur_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_hero_base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_hero_base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_hero_base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_hero_base::MergeFrom(const gs_dbs_user_info_op_req_struct_op_hero_base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cur_exp()) {
      set_cur_exp(from.cur_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_hero_base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_hero_base::CopyFrom(const gs_dbs_user_info_op_req_struct_op_hero_base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_hero_base::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gs_dbs_user_info_op_req_struct_op_hero_base::Swap(gs_dbs_user_info_op_req_struct_op_hero_base* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(star_, other->star_);
    std::swap(quality_, other->quality_);
    std::swap(level_, other->level_);
    std::swap(cur_exp_, other->cur_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_hero_base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_hero_base_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_hero_base_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_hero_equip::kOpTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_hero_equip::kHeroIdFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_hero_equip::kEquipIdFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_hero_equip::kLevelFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_hero_equip::kEvolutionEquipIdFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_hero_equip::gs_dbs_user_info_op_req_struct_op_hero_equip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_hero_equip::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_op_hero_equip::gs_dbs_user_info_op_req_struct_op_hero_equip(const gs_dbs_user_info_op_req_struct_op_hero_equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_hero_equip::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  hero_id_ = 0u;
  equip_id_ = 0u;
  level_ = 0u;
  evolution_equip_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_hero_equip::~gs_dbs_user_info_op_req_struct_op_hero_equip() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_hero_equip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_op_hero_equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_hero_equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_hero_equip_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_hero_equip& gs_dbs_user_info_op_req_struct_op_hero_equip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_hero_equip* gs_dbs_user_info_op_req_struct_op_hero_equip::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_hero_equip* gs_dbs_user_info_op_req_struct_op_hero_equip::New() const {
  return new gs_dbs_user_info_op_req_struct_op_hero_equip;
}

void gs_dbs_user_info_op_req_struct_op_hero_equip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    hero_id_ = 0u;
    equip_id_ = 0u;
    level_ = 0u;
    evolution_equip_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_hero_equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_info_op_req_EOPType_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_user_info_op_req_EOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_id;
        break;
      }

      // required uint32 equip_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_evolution_equip_id;
        break;
      }

      // optional uint32 evolution_equip_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evolution_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolution_equip_id_)));
          set_has_evolution_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_hero_equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // required uint32 equip_id = 3;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equip_id(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 evolution_equip_id = 5;
  if (has_evolution_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->evolution_equip_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_hero_equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // required uint32 equip_id = 3;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->equip_id(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 evolution_equip_id = 5;
  if (has_evolution_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->evolution_equip_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_hero_equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // required uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required uint32 equip_id = 3;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_id());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 evolution_equip_id = 5;
    if (has_evolution_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolution_equip_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_hero_equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_hero_equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_hero_equip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_hero_equip::MergeFrom(const gs_dbs_user_info_op_req_struct_op_hero_equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_evolution_equip_id()) {
      set_evolution_equip_id(from.evolution_equip_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_hero_equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_hero_equip::CopyFrom(const gs_dbs_user_info_op_req_struct_op_hero_equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_hero_equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void gs_dbs_user_info_op_req_struct_op_hero_equip::Swap(gs_dbs_user_info_op_req_struct_op_hero_equip* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(equip_id_, other->equip_id_);
    std::swap(level_, other->level_);
    std::swap(evolution_equip_id_, other->evolution_equip_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_hero_equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_hero_equip_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_hero_equip_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_hero_skill::kOpTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_hero_skill::kHeroIdFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_hero_skill::kTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_hero_skill::kLevelFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_hero_skill::gs_dbs_user_info_op_req_struct_op_hero_skill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_hero_skill::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_op_hero_skill::gs_dbs_user_info_op_req_struct_op_hero_skill(const gs_dbs_user_info_op_req_struct_op_hero_skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_hero_skill::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  hero_id_ = 0u;
  type_ = 1;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_hero_skill::~gs_dbs_user_info_op_req_struct_op_hero_skill() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_hero_skill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_op_hero_skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_hero_skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_hero_skill_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_hero_skill& gs_dbs_user_info_op_req_struct_op_hero_skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_hero_skill* gs_dbs_user_info_op_req_struct_op_hero_skill::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_hero_skill* gs_dbs_user_info_op_req_struct_op_hero_skill::New() const {
  return new gs_dbs_user_info_op_req_struct_op_hero_skill;
}

void gs_dbs_user_info_op_req_struct_op_hero_skill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    hero_id_ = 0u;
    type_ = 1;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_hero_skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_info_op_req_EOPType_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_user_info_op_req_EOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint32 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .user_hero_skill.e_skill_type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_hero_skill_e_skill_type_IsValid(value)) {
            set_type(static_cast< ::user_hero_skill_e_skill_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_hero_skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // required .user_hero_skill.e_skill_type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_hero_skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // required uint32 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // required .user_hero_skill.e_skill_type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_hero_skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // required uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // required .user_hero_skill.e_skill_type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_hero_skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_hero_skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_hero_skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_hero_skill::MergeFrom(const gs_dbs_user_info_op_req_struct_op_hero_skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_hero_skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_hero_skill::CopyFrom(const gs_dbs_user_info_op_req_struct_op_hero_skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_hero_skill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void gs_dbs_user_info_op_req_struct_op_hero_skill::Swap(gs_dbs_user_info_op_req_struct_op_hero_skill* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_hero_skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_hero_skill_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_hero_skill_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType_descriptor_;
}
bool gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType gs_dbs_user_info_op_req_struct_op_shop::min;
const gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType gs_dbs_user_info_op_req_struct_op_shop::CREATE;
const gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType gs_dbs_user_info_op_req_struct_op_shop::AUTO_REFRESH;
const gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType gs_dbs_user_info_op_req_struct_op_shop::MANUAL_REFRESH;
const gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType gs_dbs_user_info_op_req_struct_op_shop::RANDOM_REFRESH;
const gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType gs_dbs_user_info_op_req_struct_op_shop::max;
const gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType gs_dbs_user_info_op_req_struct_op_shop::ESHOPOPType_MIN;
const gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType gs_dbs_user_info_op_req_struct_op_shop::ESHOPOPType_MAX;
const int gs_dbs_user_info_op_req_struct_op_shop::ESHOPOPType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_shop::kShopOpTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_shop::kShopFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_shop::gs_dbs_user_info_op_req_struct_op_shop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_shop::InitAsDefaultInstance() {
  shop_ = const_cast< ::db_user_shop*>(&::db_user_shop::default_instance());
}

gs_dbs_user_info_op_req_struct_op_shop::gs_dbs_user_info_op_req_struct_op_shop(const gs_dbs_user_info_op_req_struct_op_shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_shop::SharedCtor() {
  _cached_size_ = 0;
  shop_op_type_ = 0;
  shop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_shop::~gs_dbs_user_info_op_req_struct_op_shop() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_shop::SharedDtor() {
  if (this != default_instance_) {
    delete shop_;
  }
}

void gs_dbs_user_info_op_req_struct_op_shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_shop_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_shop& gs_dbs_user_info_op_req_struct_op_shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_shop* gs_dbs_user_info_op_req_struct_op_shop::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_shop* gs_dbs_user_info_op_req_struct_op_shop::New() const {
  return new gs_dbs_user_info_op_req_struct_op_shop;
}

void gs_dbs_user_info_op_req_struct_op_shop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_op_type_ = 0;
    if (has_shop()) {
      if (shop_ != NULL) shop_->::db_user_shop::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_user_info_op_req.struct_op_shop.ESHOPOPType shop_op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType_IsValid(value)) {
            set_shop_op_type(static_cast< ::gs_dbs_user_info_op_req_struct_op_shop_ESHOPOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shop;
        break;
      }

      // required .db_user_shop shop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_user_info_op_req.struct_op_shop.ESHOPOPType shop_op_type = 1;
  if (has_shop_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shop_op_type(), output);
  }

  // required .db_user_shop shop = 2;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_user_info_op_req.struct_op_shop.ESHOPOPType shop_op_type = 1;
  if (has_shop_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shop_op_type(), target);
  }

  // required .db_user_shop shop = 2;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_shop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_user_info_op_req.struct_op_shop.ESHOPOPType shop_op_type = 1;
    if (has_shop_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shop_op_type());
    }

    // required .db_user_shop shop = 2;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_shop::MergeFrom(const gs_dbs_user_info_op_req_struct_op_shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_op_type()) {
      set_shop_op_type(from.shop_op_type());
    }
    if (from.has_shop()) {
      mutable_shop()->::db_user_shop::MergeFrom(from.shop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_shop::CopyFrom(const gs_dbs_user_info_op_req_struct_op_shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_shop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_shop()) {
    if (!this->shop().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_info_op_req_struct_op_shop::Swap(gs_dbs_user_info_op_req_struct_op_shop* other) {
  if (other != this) {
    std::swap(shop_op_type_, other->shop_op_type_);
    std::swap(shop_, other->shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_shop_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_shop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_shop_item::kShopTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_shop_item::kItemFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_shop_item::gs_dbs_user_info_op_req_struct_op_shop_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_shop_item::InitAsDefaultInstance() {
  item_ = const_cast< ::db_user_shop_item*>(&::db_user_shop_item::default_instance());
}

gs_dbs_user_info_op_req_struct_op_shop_item::gs_dbs_user_info_op_req_struct_op_shop_item(const gs_dbs_user_info_op_req_struct_op_shop_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_shop_item::SharedCtor() {
  _cached_size_ = 0;
  shop_type_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_shop_item::~gs_dbs_user_info_op_req_struct_op_shop_item() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_shop_item::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void gs_dbs_user_info_op_req_struct_op_shop_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_shop_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_shop_item_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_shop_item& gs_dbs_user_info_op_req_struct_op_shop_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_shop_item* gs_dbs_user_info_op_req_struct_op_shop_item::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_shop_item* gs_dbs_user_info_op_req_struct_op_shop_item::New() const {
  return new gs_dbs_user_info_op_req_struct_op_shop_item;
}

void gs_dbs_user_info_op_req_struct_op_shop_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_type_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::db_user_shop_item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_shop_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .user_shop.ESHOPTYPE shop_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user_shop_ESHOPTYPE_IsValid(value)) {
            set_shop_type(static_cast< ::user_shop_ESHOPTYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // required .db_user_shop_item item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_shop_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .user_shop.ESHOPTYPE shop_type = 1;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shop_type(), output);
  }

  // required .db_user_shop_item item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_shop_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .user_shop.ESHOPTYPE shop_type = 1;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shop_type(), target);
  }

  // required .db_user_shop_item item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_shop_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .user_shop.ESHOPTYPE shop_type = 1;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shop_type());
    }

    // required .db_user_shop_item item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_shop_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_shop_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_shop_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_shop_item::MergeFrom(const gs_dbs_user_info_op_req_struct_op_shop_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
    if (from.has_item()) {
      mutable_item()->::db_user_shop_item::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_shop_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_shop_item::CopyFrom(const gs_dbs_user_info_op_req_struct_op_shop_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_shop_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_info_op_req_struct_op_shop_item::Swap(gs_dbs_user_info_op_req_struct_op_shop_item* other) {
  if (other != this) {
    std::swap(shop_type_, other->shop_type_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_shop_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_shop_item_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_shop_item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_mission::kMissionEventFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_mission::kMissionChainFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_mission::gs_dbs_user_info_op_req_struct_op_mission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_mission::InitAsDefaultInstance() {
  mission_event_ = const_cast< ::db_user_mission_event*>(&::db_user_mission_event::default_instance());
  mission_chain_ = const_cast< ::db_user_mission_chain*>(&::db_user_mission_chain::default_instance());
}

gs_dbs_user_info_op_req_struct_op_mission::gs_dbs_user_info_op_req_struct_op_mission(const gs_dbs_user_info_op_req_struct_op_mission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_mission::SharedCtor() {
  _cached_size_ = 0;
  mission_event_ = NULL;
  mission_chain_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_mission::~gs_dbs_user_info_op_req_struct_op_mission() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_mission::SharedDtor() {
  if (this != default_instance_) {
    delete mission_event_;
    delete mission_chain_;
  }
}

void gs_dbs_user_info_op_req_struct_op_mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_mission_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_mission& gs_dbs_user_info_op_req_struct_op_mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_mission* gs_dbs_user_info_op_req_struct_op_mission::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_mission* gs_dbs_user_info_op_req_struct_op_mission::New() const {
  return new gs_dbs_user_info_op_req_struct_op_mission;
}

void gs_dbs_user_info_op_req_struct_op_mission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mission_event()) {
      if (mission_event_ != NULL) mission_event_->::db_user_mission_event::Clear();
    }
    if (has_mission_chain()) {
      if (mission_chain_ != NULL) mission_chain_->::db_user_mission_chain::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .db_user_mission_event mission_event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mission_chain;
        break;
      }

      // optional .db_user_mission_chain mission_chain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission_chain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission_chain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .db_user_mission_event mission_event = 1;
  if (has_mission_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission_event(), output);
  }

  // optional .db_user_mission_chain mission_chain = 2;
  if (has_mission_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mission_chain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_mission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .db_user_mission_event mission_event = 1;
  if (has_mission_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mission_event(), target);
  }

  // optional .db_user_mission_chain mission_chain = 2;
  if (has_mission_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mission_chain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_mission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .db_user_mission_event mission_event = 1;
    if (has_mission_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_event());
    }

    // optional .db_user_mission_chain mission_chain = 2;
    if (has_mission_chain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_chain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_mission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_mission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_mission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_mission::MergeFrom(const gs_dbs_user_info_op_req_struct_op_mission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_event()) {
      mutable_mission_event()->::db_user_mission_event::MergeFrom(from.mission_event());
    }
    if (from.has_mission_chain()) {
      mutable_mission_chain()->::db_user_mission_chain::MergeFrom(from.mission_chain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_mission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_mission::CopyFrom(const gs_dbs_user_info_op_req_struct_op_mission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_mission::IsInitialized() const {

  if (has_mission_event()) {
    if (!this->mission_event().IsInitialized()) return false;
  }
  if (has_mission_chain()) {
    if (!this->mission_chain().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_info_op_req_struct_op_mission::Swap(gs_dbs_user_info_op_req_struct_op_mission* other) {
  if (other != this) {
    std::swap(mission_event_, other->mission_event_);
    std::swap(mission_chain_, other->mission_chain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_mission_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_mission_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_new_arena::kRankFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_arena::kScoreFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_arena::kLastChallengeTimeFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_arena::kLastDayChallengeNumFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_arena::kHistoryHighestRankFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_arena::kHerosFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_arena::kLastTimeBuyArenaChallengeFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_arena::kLastDayBuyArenaChallengeNumFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_new_arena::gs_dbs_user_info_op_req_struct_new_arena()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_new_arena::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_new_arena::gs_dbs_user_info_op_req_struct_new_arena(const gs_dbs_user_info_op_req_struct_new_arena& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_new_arena::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  score_ = 0u;
  last_challenge_time_ = 0u;
  last_day_challenge_num_ = 0u;
  history_highest_rank_ = 0u;
  last_time_buy_arena_challenge_ = 0u;
  last_day_buy_arena_challenge_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_new_arena::~gs_dbs_user_info_op_req_struct_new_arena() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_new_arena::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_new_arena::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_new_arena::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_new_arena_descriptor_;
}

const gs_dbs_user_info_op_req_struct_new_arena& gs_dbs_user_info_op_req_struct_new_arena::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_new_arena* gs_dbs_user_info_op_req_struct_new_arena::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_new_arena* gs_dbs_user_info_op_req_struct_new_arena::New() const {
  return new gs_dbs_user_info_op_req_struct_new_arena;
}

void gs_dbs_user_info_op_req_struct_new_arena::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    score_ = 0u;
    last_challenge_time_ = 0u;
    last_day_challenge_num_ = 0u;
    history_highest_rank_ = 0u;
    last_time_buy_arena_challenge_ = 0u;
    last_day_buy_arena_challenge_num_ = 0u;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_new_arena::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_challenge_time;
        break;
      }

      // required uint32 last_challenge_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_challenge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_challenge_time_)));
          set_has_last_challenge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_day_challenge_num;
        break;
      }

      // required uint32 last_day_challenge_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_challenge_num_)));
          set_has_last_day_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_history_highest_rank;
        break;
      }

      // required uint32 history_highest_rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_highest_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_highest_rank_)));
          set_has_history_highest_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heros;
        break;
      }

      // repeated uint32 heros = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heros;
        if (input->ExpectTag(56)) goto parse_last_time_buy_arena_challenge;
        break;
      }

      // required uint32 last_time_buy_arena_challenge = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time_buy_arena_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_buy_arena_challenge_)));
          set_has_last_time_buy_arena_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_day_buy_arena_challenge_num;
        break;
      }

      // required uint32 last_day_buy_arena_challenge_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_buy_arena_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_buy_arena_challenge_num_)));
          set_has_last_day_buy_arena_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_new_arena::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // required uint32 last_challenge_time = 3;
  if (has_last_challenge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_challenge_time(), output);
  }

  // required uint32 last_day_challenge_num = 4;
  if (has_last_day_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_day_challenge_num(), output);
  }

  // required uint32 history_highest_rank = 5;
  if (has_history_highest_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->history_highest_rank(), output);
  }

  // repeated uint32 heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->heros(i), output);
  }

  // required uint32 last_time_buy_arena_challenge = 7;
  if (has_last_time_buy_arena_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_time_buy_arena_challenge(), output);
  }

  // required uint32 last_day_buy_arena_challenge_num = 8;
  if (has_last_day_buy_arena_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_day_buy_arena_challenge_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_new_arena::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // required uint32 last_challenge_time = 3;
  if (has_last_challenge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_challenge_time(), target);
  }

  // required uint32 last_day_challenge_num = 4;
  if (has_last_day_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_day_challenge_num(), target);
  }

  // required uint32 history_highest_rank = 5;
  if (has_history_highest_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->history_highest_rank(), target);
  }

  // repeated uint32 heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->heros(i), target);
  }

  // required uint32 last_time_buy_arena_challenge = 7;
  if (has_last_time_buy_arena_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_time_buy_arena_challenge(), target);
  }

  // required uint32 last_day_buy_arena_challenge_num = 8;
  if (has_last_day_buy_arena_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_day_buy_arena_challenge_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_new_arena::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 last_challenge_time = 3;
    if (has_last_challenge_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_challenge_time());
    }

    // required uint32 last_day_challenge_num = 4;
    if (has_last_day_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_challenge_num());
    }

    // required uint32 history_highest_rank = 5;
    if (has_history_highest_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_highest_rank());
    }

    // required uint32 last_time_buy_arena_challenge = 7;
    if (has_last_time_buy_arena_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time_buy_arena_challenge());
    }

    // required uint32 last_day_buy_arena_challenge_num = 8;
    if (has_last_day_buy_arena_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_buy_arena_challenge_num());
    }

  }
  // repeated uint32 heros = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_new_arena::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_new_arena* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_new_arena*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_new_arena::MergeFrom(const gs_dbs_user_info_op_req_struct_new_arena& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_last_challenge_time()) {
      set_last_challenge_time(from.last_challenge_time());
    }
    if (from.has_last_day_challenge_num()) {
      set_last_day_challenge_num(from.last_day_challenge_num());
    }
    if (from.has_history_highest_rank()) {
      set_history_highest_rank(from.history_highest_rank());
    }
    if (from.has_last_time_buy_arena_challenge()) {
      set_last_time_buy_arena_challenge(from.last_time_buy_arena_challenge());
    }
    if (from.has_last_day_buy_arena_challenge_num()) {
      set_last_day_buy_arena_challenge_num(from.last_day_buy_arena_challenge_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_new_arena::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_new_arena::CopyFrom(const gs_dbs_user_info_op_req_struct_new_arena& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_new_arena::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000df) != 0x000000df) return false;

  return true;
}

void gs_dbs_user_info_op_req_struct_new_arena::Swap(gs_dbs_user_info_op_req_struct_new_arena* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(last_challenge_time_, other->last_challenge_time_);
    std::swap(last_day_challenge_num_, other->last_day_challenge_num_);
    std::swap(history_highest_rank_, other->history_highest_rank_);
    heros_.Swap(&other->heros_);
    std::swap(last_time_buy_arena_challenge_, other->last_time_buy_arena_challenge_);
    std::swap(last_day_buy_arena_challenge_num_, other->last_day_buy_arena_challenge_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_new_arena::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_new_arena_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_new_arena_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_arena::kOpTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena::kRankFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena::kScoreFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena::kLastChallengeTimeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena::kLastDayChallengeNumFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena::kHistoryHighestRankFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena::kHerosFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena::kLastTimeBuyArenaChallengeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena::kLastDayBuyArenaChallengeNumFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_arena::gs_dbs_user_info_op_req_struct_op_arena()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_arena::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_op_arena::gs_dbs_user_info_op_req_struct_op_arena(const gs_dbs_user_info_op_req_struct_op_arena& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_arena::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  rank_ = 0u;
  score_ = 0u;
  last_challenge_time_ = 0u;
  last_day_challenge_num_ = 0u;
  history_highest_rank_ = 0u;
  last_time_buy_arena_challenge_ = 0u;
  last_day_buy_arena_challenge_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_arena::~gs_dbs_user_info_op_req_struct_op_arena() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_arena::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_op_arena::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_arena::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_arena_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_arena& gs_dbs_user_info_op_req_struct_op_arena::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_arena* gs_dbs_user_info_op_req_struct_op_arena::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_arena* gs_dbs_user_info_op_req_struct_op_arena::New() const {
  return new gs_dbs_user_info_op_req_struct_op_arena;
}

void gs_dbs_user_info_op_req_struct_op_arena::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    rank_ = 0u;
    score_ = 0u;
    last_challenge_time_ = 0u;
    last_day_challenge_num_ = 0u;
    history_highest_rank_ = 0u;
    last_time_buy_arena_challenge_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_day_buy_arena_challenge_num_ = 0u;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_arena::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_info_op_req_EOPType_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_user_info_op_req_EOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional uint32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_challenge_time;
        break;
      }

      // optional uint32 last_challenge_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_challenge_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_challenge_time_)));
          set_has_last_challenge_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_day_challenge_num;
        break;
      }

      // optional uint32 last_day_challenge_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_challenge_num_)));
          set_has_last_day_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_history_highest_rank;
        break;
      }

      // optional uint32 history_highest_rank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_highest_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_highest_rank_)));
          set_has_history_highest_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_heros;
        break;
      }

      // repeated uint32 heros = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_heros;
        if (input->ExpectTag(64)) goto parse_last_time_buy_arena_challenge;
        break;
      }

      // optional uint32 last_time_buy_arena_challenge = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time_buy_arena_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_buy_arena_challenge_)));
          set_has_last_time_buy_arena_challenge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_day_buy_arena_challenge_num;
        break;
      }

      // optional uint32 last_day_buy_arena_challenge_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_buy_arena_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_buy_arena_challenge_num_)));
          set_has_last_day_buy_arena_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_arena::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // optional uint32 last_challenge_time = 4;
  if (has_last_challenge_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_challenge_time(), output);
  }

  // optional uint32 last_day_challenge_num = 5;
  if (has_last_day_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_day_challenge_num(), output);
  }

  // optional uint32 history_highest_rank = 6;
  if (has_history_highest_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->history_highest_rank(), output);
  }

  // repeated uint32 heros = 7;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->heros(i), output);
  }

  // optional uint32 last_time_buy_arena_challenge = 8;
  if (has_last_time_buy_arena_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_time_buy_arena_challenge(), output);
  }

  // optional uint32 last_day_buy_arena_challenge_num = 9;
  if (has_last_day_buy_arena_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->last_day_buy_arena_challenge_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_arena::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // optional uint32 last_challenge_time = 4;
  if (has_last_challenge_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_challenge_time(), target);
  }

  // optional uint32 last_day_challenge_num = 5;
  if (has_last_day_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_day_challenge_num(), target);
  }

  // optional uint32 history_highest_rank = 6;
  if (has_history_highest_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->history_highest_rank(), target);
  }

  // repeated uint32 heros = 7;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->heros(i), target);
  }

  // optional uint32 last_time_buy_arena_challenge = 8;
  if (has_last_time_buy_arena_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_time_buy_arena_challenge(), target);
  }

  // optional uint32 last_day_buy_arena_challenge_num = 9;
  if (has_last_day_buy_arena_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->last_day_buy_arena_challenge_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_arena::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 last_challenge_time = 4;
    if (has_last_challenge_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_challenge_time());
    }

    // optional uint32 last_day_challenge_num = 5;
    if (has_last_day_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_challenge_num());
    }

    // optional uint32 history_highest_rank = 6;
    if (has_history_highest_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_highest_rank());
    }

    // optional uint32 last_time_buy_arena_challenge = 8;
    if (has_last_time_buy_arena_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time_buy_arena_challenge());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 last_day_buy_arena_challenge_num = 9;
    if (has_last_day_buy_arena_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_buy_arena_challenge_num());
    }

  }
  // repeated uint32 heros = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_arena::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_arena* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_arena*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_arena::MergeFrom(const gs_dbs_user_info_op_req_struct_op_arena& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_last_challenge_time()) {
      set_last_challenge_time(from.last_challenge_time());
    }
    if (from.has_last_day_challenge_num()) {
      set_last_day_challenge_num(from.last_day_challenge_num());
    }
    if (from.has_history_highest_rank()) {
      set_history_highest_rank(from.history_highest_rank());
    }
    if (from.has_last_time_buy_arena_challenge()) {
      set_last_time_buy_arena_challenge(from.last_time_buy_arena_challenge());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_day_buy_arena_challenge_num()) {
      set_last_day_buy_arena_challenge_num(from.last_day_buy_arena_challenge_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_arena::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_arena::CopyFrom(const gs_dbs_user_info_op_req_struct_op_arena& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_arena::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_dbs_user_info_op_req_struct_op_arena::Swap(gs_dbs_user_info_op_req_struct_op_arena* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(last_challenge_time_, other->last_challenge_time_);
    std::swap(last_day_challenge_num_, other->last_day_challenge_num_);
    std::swap(history_highest_rank_, other->history_highest_rank_);
    heros_.Swap(&other->heros_);
    std::swap(last_time_buy_arena_challenge_, other->last_time_buy_arena_challenge_);
    std::swap(last_day_buy_arena_challenge_num_, other->last_day_buy_arena_challenge_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_arena::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_arena_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_arena_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_clear_arena_team::gs_dbs_user_info_op_req_struct_clear_arena_team()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_clear_arena_team::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_clear_arena_team::gs_dbs_user_info_op_req_struct_clear_arena_team(const gs_dbs_user_info_op_req_struct_clear_arena_team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_clear_arena_team::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_clear_arena_team::~gs_dbs_user_info_op_req_struct_clear_arena_team() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_clear_arena_team::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_clear_arena_team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_clear_arena_team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_clear_arena_team_descriptor_;
}

const gs_dbs_user_info_op_req_struct_clear_arena_team& gs_dbs_user_info_op_req_struct_clear_arena_team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_clear_arena_team* gs_dbs_user_info_op_req_struct_clear_arena_team::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_clear_arena_team* gs_dbs_user_info_op_req_struct_clear_arena_team::New() const {
  return new gs_dbs_user_info_op_req_struct_clear_arena_team;
}

void gs_dbs_user_info_op_req_struct_clear_arena_team::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_clear_arena_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_clear_arena_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_clear_arena_team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_clear_arena_team::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_clear_arena_team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_clear_arena_team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_clear_arena_team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_clear_arena_team::MergeFrom(const gs_dbs_user_info_op_req_struct_clear_arena_team& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_clear_arena_team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_clear_arena_team::CopyFrom(const gs_dbs_user_info_op_req_struct_clear_arena_team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_clear_arena_team::IsInitialized() const {

  return true;
}

void gs_dbs_user_info_op_req_struct_clear_arena_team::Swap(gs_dbs_user_info_op_req_struct_clear_arena_team* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_clear_arena_team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_clear_arena_team_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_clear_arena_team_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kAttackerUserIdFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kAttackerRankFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kAttackerPowerFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kAttackerNameFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kAttackerLevelFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kAttackerHerosFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kDefenderUserIdFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kDefenderRankFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kDefenderPowerFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kDefenderNameFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kDefenderLevelFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kDefenderHerosFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kIsWinFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kTimeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_arena_challenge::kScoreFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_arena_challenge::gs_dbs_user_info_op_req_struct_op_arena_challenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_arena_challenge::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_op_arena_challenge::gs_dbs_user_info_op_req_struct_op_arena_challenge(const gs_dbs_user_info_op_req_struct_op_arena_challenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_arena_challenge::SharedCtor() {
  _cached_size_ = 0;
  attacker_user_id_ = 0u;
  attacker_rank_ = 0u;
  attacker_power_ = 0u;
  attacker_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attacker_level_ = 0u;
  defender_user_id_ = 0u;
  defender_rank_ = 0u;
  defender_power_ = 0u;
  defender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defender_level_ = 0u;
  is_win_ = 0u;
  time_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_arena_challenge::~gs_dbs_user_info_op_req_struct_op_arena_challenge() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_arena_challenge::SharedDtor() {
  if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
    delete attacker_name_;
  }
  if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete defender_name_;
  }
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_op_arena_challenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_arena_challenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_arena_challenge_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_arena_challenge& gs_dbs_user_info_op_req_struct_op_arena_challenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_arena_challenge* gs_dbs_user_info_op_req_struct_op_arena_challenge::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_arena_challenge* gs_dbs_user_info_op_req_struct_op_arena_challenge::New() const {
  return new gs_dbs_user_info_op_req_struct_op_arena_challenge;
}

void gs_dbs_user_info_op_req_struct_op_arena_challenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attacker_user_id_ = 0u;
    attacker_rank_ = 0u;
    attacker_power_ = 0u;
    if (has_attacker_name()) {
      if (attacker_name_ != &::google::protobuf::internal::kEmptyString) {
        attacker_name_->clear();
      }
    }
    attacker_level_ = 0u;
    defender_user_id_ = 0u;
    defender_rank_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    defender_power_ = 0u;
    if (has_defender_name()) {
      if (defender_name_ != &::google::protobuf::internal::kEmptyString) {
        defender_name_->clear();
      }
    }
    defender_level_ = 0u;
    is_win_ = 0u;
    time_ = 0u;
    score_ = 0u;
  }
  attacker_heros_.Clear();
  defender_heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_arena_challenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attacker_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_user_id_)));
          set_has_attacker_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attacker_rank;
        break;
      }

      // required uint32 attacker_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_rank_)));
          set_has_attacker_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attacker_power;
        break;
      }

      // required uint32 attacker_power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_power_)));
          set_has_attacker_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attacker_name;
        break;
      }

      // required string attacker_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attacker_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attacker_name().data(), this->attacker_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_attacker_level;
        break;
      }

      // required uint32 attacker_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_level_)));
          set_has_attacker_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attacker_heros;
        break;
      }

      // repeated .db_user_arena_log.db_user_arena_log_hero attacker_heros = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attacker_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attacker_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_attacker_heros;
        if (input->ExpectTag(56)) goto parse_defender_user_id;
        break;
      }

      // required uint32 defender_user_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defender_user_id_)));
          set_has_defender_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_defender_rank;
        break;
      }

      // required uint32 defender_rank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defender_rank_)));
          set_has_defender_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_defender_power;
        break;
      }

      // required uint32 defender_power = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defender_power_)));
          set_has_defender_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_defender_name;
        break;
      }

      // required string defender_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defender_name().data(), this->defender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_defender_level;
        break;
      }

      // required uint32 defender_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defender_level_)));
          set_has_defender_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_defender_heros;
        break;
      }

      // repeated .db_user_arena_log.db_user_arena_log_hero defender_heros = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defender_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_defender_heros;
        if (input->ExpectTag(104)) goto parse_is_win;
        break;
      }

      // required uint32 is_win = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_time;
        break;
      }

      // required uint32 time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_score;
        break;
      }

      // optional uint32 score = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_arena_challenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attacker_user_id = 1;
  if (has_attacker_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attacker_user_id(), output);
  }

  // required uint32 attacker_rank = 2;
  if (has_attacker_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attacker_rank(), output);
  }

  // required uint32 attacker_power = 3;
  if (has_attacker_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attacker_power(), output);
  }

  // required string attacker_name = 4;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attacker_name().data(), this->attacker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->attacker_name(), output);
  }

  // required uint32 attacker_level = 5;
  if (has_attacker_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attacker_level(), output);
  }

  // repeated .db_user_arena_log.db_user_arena_log_hero attacker_heros = 6;
  for (int i = 0; i < this->attacker_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attacker_heros(i), output);
  }

  // required uint32 defender_user_id = 7;
  if (has_defender_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->defender_user_id(), output);
  }

  // required uint32 defender_rank = 8;
  if (has_defender_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->defender_rank(), output);
  }

  // required uint32 defender_power = 9;
  if (has_defender_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->defender_power(), output);
  }

  // required string defender_name = 10;
  if (has_defender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defender_name().data(), this->defender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->defender_name(), output);
  }

  // required uint32 defender_level = 11;
  if (has_defender_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->defender_level(), output);
  }

  // repeated .db_user_arena_log.db_user_arena_log_hero defender_heros = 12;
  for (int i = 0; i < this->defender_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->defender_heros(i), output);
  }

  // required uint32 is_win = 13;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->is_win(), output);
  }

  // required uint32 time = 14;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->time(), output);
  }

  // optional uint32 score = 15;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_arena_challenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attacker_user_id = 1;
  if (has_attacker_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attacker_user_id(), target);
  }

  // required uint32 attacker_rank = 2;
  if (has_attacker_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attacker_rank(), target);
  }

  // required uint32 attacker_power = 3;
  if (has_attacker_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attacker_power(), target);
  }

  // required string attacker_name = 4;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attacker_name().data(), this->attacker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->attacker_name(), target);
  }

  // required uint32 attacker_level = 5;
  if (has_attacker_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attacker_level(), target);
  }

  // repeated .db_user_arena_log.db_user_arena_log_hero attacker_heros = 6;
  for (int i = 0; i < this->attacker_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attacker_heros(i), target);
  }

  // required uint32 defender_user_id = 7;
  if (has_defender_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->defender_user_id(), target);
  }

  // required uint32 defender_rank = 8;
  if (has_defender_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->defender_rank(), target);
  }

  // required uint32 defender_power = 9;
  if (has_defender_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->defender_power(), target);
  }

  // required string defender_name = 10;
  if (has_defender_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defender_name().data(), this->defender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->defender_name(), target);
  }

  // required uint32 defender_level = 11;
  if (has_defender_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->defender_level(), target);
  }

  // repeated .db_user_arena_log.db_user_arena_log_hero defender_heros = 12;
  for (int i = 0; i < this->defender_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->defender_heros(i), target);
  }

  // required uint32 is_win = 13;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->is_win(), target);
  }

  // required uint32 time = 14;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->time(), target);
  }

  // optional uint32 score = 15;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_arena_challenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attacker_user_id = 1;
    if (has_attacker_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_user_id());
    }

    // required uint32 attacker_rank = 2;
    if (has_attacker_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_rank());
    }

    // required uint32 attacker_power = 3;
    if (has_attacker_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_power());
    }

    // required string attacker_name = 4;
    if (has_attacker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attacker_name());
    }

    // required uint32 attacker_level = 5;
    if (has_attacker_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_level());
    }

    // required uint32 defender_user_id = 7;
    if (has_defender_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defender_user_id());
    }

    // required uint32 defender_rank = 8;
    if (has_defender_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defender_rank());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 defender_power = 9;
    if (has_defender_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defender_power());
    }

    // required string defender_name = 10;
    if (has_defender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defender_name());
    }

    // required uint32 defender_level = 11;
    if (has_defender_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defender_level());
    }

    // required uint32 is_win = 13;
    if (has_is_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_win());
    }

    // required uint32 time = 14;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 score = 15;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  // repeated .db_user_arena_log.db_user_arena_log_hero attacker_heros = 6;
  total_size += 1 * this->attacker_heros_size();
  for (int i = 0; i < this->attacker_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attacker_heros(i));
  }

  // repeated .db_user_arena_log.db_user_arena_log_hero defender_heros = 12;
  total_size += 1 * this->defender_heros_size();
  for (int i = 0; i < this->defender_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defender_heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_arena_challenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_arena_challenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_arena_challenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_arena_challenge::MergeFrom(const gs_dbs_user_info_op_req_struct_op_arena_challenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  attacker_heros_.MergeFrom(from.attacker_heros_);
  defender_heros_.MergeFrom(from.defender_heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacker_user_id()) {
      set_attacker_user_id(from.attacker_user_id());
    }
    if (from.has_attacker_rank()) {
      set_attacker_rank(from.attacker_rank());
    }
    if (from.has_attacker_power()) {
      set_attacker_power(from.attacker_power());
    }
    if (from.has_attacker_name()) {
      set_attacker_name(from.attacker_name());
    }
    if (from.has_attacker_level()) {
      set_attacker_level(from.attacker_level());
    }
    if (from.has_defender_user_id()) {
      set_defender_user_id(from.defender_user_id());
    }
    if (from.has_defender_rank()) {
      set_defender_rank(from.defender_rank());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defender_power()) {
      set_defender_power(from.defender_power());
    }
    if (from.has_defender_name()) {
      set_defender_name(from.defender_name());
    }
    if (from.has_defender_level()) {
      set_defender_level(from.defender_level());
    }
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_arena_challenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_arena_challenge::CopyFrom(const gs_dbs_user_info_op_req_struct_op_arena_challenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_arena_challenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x000037df) != 0x000037df) return false;

  for (int i = 0; i < attacker_heros_size(); i++) {
    if (!this->attacker_heros(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defender_heros_size(); i++) {
    if (!this->defender_heros(i).IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_info_op_req_struct_op_arena_challenge::Swap(gs_dbs_user_info_op_req_struct_op_arena_challenge* other) {
  if (other != this) {
    std::swap(attacker_user_id_, other->attacker_user_id_);
    std::swap(attacker_rank_, other->attacker_rank_);
    std::swap(attacker_power_, other->attacker_power_);
    std::swap(attacker_name_, other->attacker_name_);
    std::swap(attacker_level_, other->attacker_level_);
    attacker_heros_.Swap(&other->attacker_heros_);
    std::swap(defender_user_id_, other->defender_user_id_);
    std::swap(defender_rank_, other->defender_rank_);
    std::swap(defender_power_, other->defender_power_);
    std::swap(defender_name_, other->defender_name_);
    std::swap(defender_level_, other->defender_level_);
    defender_heros_.Swap(&other->defender_heros_);
    std::swap(is_win_, other->is_win_);
    std::swap(time_, other->time_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_arena_challenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_arena_challenge_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_arena_challenge_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_sign::kOpTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_sign::kSign1TimesFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_sign::kSignNRewardStatusFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_sign::kLastSignTimeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_sign::kAddSignedTimesFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_sign::gs_dbs_user_info_op_req_struct_op_sign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_sign::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_op_sign::gs_dbs_user_info_op_req_struct_op_sign(const gs_dbs_user_info_op_req_struct_op_sign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_sign::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  sign_1_times_ = 0u;
  sign_n_reward_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_sign_time_ = 0u;
  add_signed_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_sign::~gs_dbs_user_info_op_req_struct_op_sign() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_sign::SharedDtor() {
  if (sign_n_reward_status_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_n_reward_status_;
  }
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_op_sign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_sign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_sign_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_sign& gs_dbs_user_info_op_req_struct_op_sign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_sign* gs_dbs_user_info_op_req_struct_op_sign::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_sign* gs_dbs_user_info_op_req_struct_op_sign::New() const {
  return new gs_dbs_user_info_op_req_struct_op_sign;
}

void gs_dbs_user_info_op_req_struct_op_sign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    sign_1_times_ = 0u;
    if (has_sign_n_reward_status()) {
      if (sign_n_reward_status_ != &::google::protobuf::internal::kEmptyString) {
        sign_n_reward_status_->clear();
      }
    }
    last_sign_time_ = 0u;
    add_signed_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_sign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_info_op_req_EOPType_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_user_info_op_req_EOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sign_1_times;
        break;
      }

      // optional uint32 sign_1_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sign_1_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_1_times_)));
          set_has_sign_1_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sign_n_reward_status;
        break;
      }

      // optional string sign_n_reward_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_n_reward_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_n_reward_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign_n_reward_status().data(), this->sign_n_reward_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_sign_time;
        break;
      }

      // optional uint32 last_sign_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sign_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_sign_time_)));
          set_has_last_sign_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_add_signed_times;
        break;
      }

      // optional uint32 add_signed_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_signed_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_signed_times_)));
          set_has_add_signed_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_sign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional uint32 sign_1_times = 2;
  if (has_sign_1_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sign_1_times(), output);
  }

  // optional string sign_n_reward_status = 3;
  if (has_sign_n_reward_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign_n_reward_status().data(), this->sign_n_reward_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sign_n_reward_status(), output);
  }

  // optional uint32 last_sign_time = 4;
  if (has_last_sign_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_sign_time(), output);
  }

  // optional uint32 add_signed_times = 5;
  if (has_add_signed_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->add_signed_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_sign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional uint32 sign_1_times = 2;
  if (has_sign_1_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sign_1_times(), target);
  }

  // optional string sign_n_reward_status = 3;
  if (has_sign_n_reward_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign_n_reward_status().data(), this->sign_n_reward_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sign_n_reward_status(), target);
  }

  // optional uint32 last_sign_time = 4;
  if (has_last_sign_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_sign_time(), target);
  }

  // optional uint32 add_signed_times = 5;
  if (has_add_signed_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->add_signed_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_sign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional uint32 sign_1_times = 2;
    if (has_sign_1_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_1_times());
    }

    // optional string sign_n_reward_status = 3;
    if (has_sign_n_reward_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_n_reward_status());
    }

    // optional uint32 last_sign_time = 4;
    if (has_last_sign_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_sign_time());
    }

    // optional uint32 add_signed_times = 5;
    if (has_add_signed_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_signed_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_sign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_sign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_sign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_sign::MergeFrom(const gs_dbs_user_info_op_req_struct_op_sign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_sign_1_times()) {
      set_sign_1_times(from.sign_1_times());
    }
    if (from.has_sign_n_reward_status()) {
      set_sign_n_reward_status(from.sign_n_reward_status());
    }
    if (from.has_last_sign_time()) {
      set_last_sign_time(from.last_sign_time());
    }
    if (from.has_add_signed_times()) {
      set_add_signed_times(from.add_signed_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_sign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_sign::CopyFrom(const gs_dbs_user_info_op_req_struct_op_sign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_sign::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_dbs_user_info_op_req_struct_op_sign::Swap(gs_dbs_user_info_op_req_struct_op_sign* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(sign_1_times_, other->sign_1_times_);
    std::swap(sign_n_reward_status_, other->sign_n_reward_status_);
    std::swap(last_sign_time_, other->last_sign_time_);
    std::swap(add_signed_times_, other->add_signed_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_sign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_sign_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_sign_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_new_sign::kSign1TimesFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_sign::kSignNRewardStatusFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_sign::kLastSignTimeFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_sign::kAddSignedTimesFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_new_sign::gs_dbs_user_info_op_req_struct_new_sign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_new_sign::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_new_sign::gs_dbs_user_info_op_req_struct_new_sign(const gs_dbs_user_info_op_req_struct_new_sign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_new_sign::SharedCtor() {
  _cached_size_ = 0;
  sign_1_times_ = 0u;
  sign_n_reward_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_sign_time_ = 0u;
  add_signed_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_new_sign::~gs_dbs_user_info_op_req_struct_new_sign() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_new_sign::SharedDtor() {
  if (sign_n_reward_status_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_n_reward_status_;
  }
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_new_sign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_new_sign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_new_sign_descriptor_;
}

const gs_dbs_user_info_op_req_struct_new_sign& gs_dbs_user_info_op_req_struct_new_sign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_new_sign* gs_dbs_user_info_op_req_struct_new_sign::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_new_sign* gs_dbs_user_info_op_req_struct_new_sign::New() const {
  return new gs_dbs_user_info_op_req_struct_new_sign;
}

void gs_dbs_user_info_op_req_struct_new_sign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sign_1_times_ = 0u;
    if (has_sign_n_reward_status()) {
      if (sign_n_reward_status_ != &::google::protobuf::internal::kEmptyString) {
        sign_n_reward_status_->clear();
      }
    }
    last_sign_time_ = 0u;
    add_signed_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_new_sign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sign_1_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_1_times_)));
          set_has_sign_1_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sign_n_reward_status;
        break;
      }

      // required string sign_n_reward_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_n_reward_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign_n_reward_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign_n_reward_status().data(), this->sign_n_reward_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_sign_time;
        break;
      }

      // required uint32 last_sign_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sign_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_sign_time_)));
          set_has_last_sign_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_signed_times;
        break;
      }

      // required uint32 add_signed_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_signed_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_signed_times_)));
          set_has_add_signed_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_new_sign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sign_1_times = 1;
  if (has_sign_1_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sign_1_times(), output);
  }

  // required string sign_n_reward_status = 2;
  if (has_sign_n_reward_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign_n_reward_status().data(), this->sign_n_reward_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sign_n_reward_status(), output);
  }

  // required uint32 last_sign_time = 3;
  if (has_last_sign_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_sign_time(), output);
  }

  // required uint32 add_signed_times = 4;
  if (has_add_signed_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add_signed_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_new_sign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sign_1_times = 1;
  if (has_sign_1_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sign_1_times(), target);
  }

  // required string sign_n_reward_status = 2;
  if (has_sign_n_reward_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign_n_reward_status().data(), this->sign_n_reward_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sign_n_reward_status(), target);
  }

  // required uint32 last_sign_time = 3;
  if (has_last_sign_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_sign_time(), target);
  }

  // required uint32 add_signed_times = 4;
  if (has_add_signed_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->add_signed_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_new_sign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sign_1_times = 1;
    if (has_sign_1_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_1_times());
    }

    // required string sign_n_reward_status = 2;
    if (has_sign_n_reward_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign_n_reward_status());
    }

    // required uint32 last_sign_time = 3;
    if (has_last_sign_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_sign_time());
    }

    // required uint32 add_signed_times = 4;
    if (has_add_signed_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_signed_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_new_sign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_new_sign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_new_sign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_new_sign::MergeFrom(const gs_dbs_user_info_op_req_struct_new_sign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_1_times()) {
      set_sign_1_times(from.sign_1_times());
    }
    if (from.has_sign_n_reward_status()) {
      set_sign_n_reward_status(from.sign_n_reward_status());
    }
    if (from.has_last_sign_time()) {
      set_last_sign_time(from.last_sign_time());
    }
    if (from.has_add_signed_times()) {
      set_add_signed_times(from.add_signed_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_new_sign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_new_sign::CopyFrom(const gs_dbs_user_info_op_req_struct_new_sign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_new_sign::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void gs_dbs_user_info_op_req_struct_new_sign::Swap(gs_dbs_user_info_op_req_struct_new_sign* other) {
  if (other != this) {
    std::swap(sign_1_times_, other->sign_1_times_);
    std::swap(sign_n_reward_status_, other->sign_n_reward_status_);
    std::swap(last_sign_time_, other->last_sign_time_);
    std::swap(add_signed_times_, other->add_signed_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_new_sign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_new_sign_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_new_sign_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_novice_guide::kOpTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_novice_guide::kGuideIdFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_novice_guide::gs_dbs_user_info_op_req_struct_op_novice_guide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_novice_guide::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_op_novice_guide::gs_dbs_user_info_op_req_struct_op_novice_guide(const gs_dbs_user_info_op_req_struct_op_novice_guide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_novice_guide::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  guide_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_novice_guide::~gs_dbs_user_info_op_req_struct_op_novice_guide() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_novice_guide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_op_novice_guide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_novice_guide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_novice_guide_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_novice_guide& gs_dbs_user_info_op_req_struct_op_novice_guide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_novice_guide* gs_dbs_user_info_op_req_struct_op_novice_guide::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_novice_guide* gs_dbs_user_info_op_req_struct_op_novice_guide::New() const {
  return new gs_dbs_user_info_op_req_struct_op_novice_guide;
}

void gs_dbs_user_info_op_req_struct_op_novice_guide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    guide_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_novice_guide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_info_op_req_EOPType_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_user_info_op_req_EOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guide_id;
        break;
      }

      // required uint32 guide_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guide_id_)));
          set_has_guide_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_novice_guide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // required uint32 guide_id = 2;
  if (has_guide_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guide_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_novice_guide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // required uint32 guide_id = 2;
  if (has_guide_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guide_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_novice_guide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_user_info_op_req.EOPType op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // required uint32 guide_id = 2;
    if (has_guide_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guide_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_novice_guide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_novice_guide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_novice_guide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_novice_guide::MergeFrom(const gs_dbs_user_info_op_req_struct_op_novice_guide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_guide_id()) {
      set_guide_id(from.guide_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_novice_guide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_novice_guide::CopyFrom(const gs_dbs_user_info_op_req_struct_op_novice_guide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_novice_guide::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gs_dbs_user_info_op_req_struct_op_novice_guide::Swap(gs_dbs_user_info_op_req_struct_op_novice_guide* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(guide_id_, other->guide_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_novice_guide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_novice_guide_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_novice_guide_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_new_user_statis::kLevelFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_user_statis::kFightPowerFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_user_statis::kVipFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_user_statis::kOccurTimeFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_user_statis::kEventTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_new_user_statis::kCurIdFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_new_user_statis::gs_dbs_user_info_op_req_struct_new_user_statis()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_new_user_statis::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_new_user_statis::gs_dbs_user_info_op_req_struct_new_user_statis(const gs_dbs_user_info_op_req_struct_new_user_statis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_new_user_statis::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  fight_power_ = 0u;
  vip_ = 0u;
  occur_time_ = 0u;
  event_type_ = 0u;
  cur_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_new_user_statis::~gs_dbs_user_info_op_req_struct_new_user_statis() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_new_user_statis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_new_user_statis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_new_user_statis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_new_user_statis_descriptor_;
}

const gs_dbs_user_info_op_req_struct_new_user_statis& gs_dbs_user_info_op_req_struct_new_user_statis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_new_user_statis* gs_dbs_user_info_op_req_struct_new_user_statis::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_new_user_statis* gs_dbs_user_info_op_req_struct_new_user_statis::New() const {
  return new gs_dbs_user_info_op_req_struct_new_user_statis;
}

void gs_dbs_user_info_op_req_struct_new_user_statis::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    fight_power_ = 0u;
    vip_ = 0u;
    occur_time_ = 0u;
    event_type_ = 0u;
    cur_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_new_user_statis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight_power;
        break;
      }

      // optional uint32 fight_power = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vip;
        break;
      }

      // required uint32 vip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_occur_time;
        break;
      }

      // required uint32 occur_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occur_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occur_time_)));
          set_has_occur_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event_type;
        break;
      }

      // required uint32 event_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_id;
        break;
      }

      // required uint32 cur_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_id_)));
          set_has_cur_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_new_user_statis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 fight_power = 2;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fight_power(), output);
  }

  // required uint32 vip = 3;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vip(), output);
  }

  // required uint32 occur_time = 4;
  if (has_occur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->occur_time(), output);
  }

  // required uint32 event_type = 5;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_type(), output);
  }

  // required uint32 cur_id = 6;
  if (has_cur_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cur_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_new_user_statis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 fight_power = 2;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fight_power(), target);
  }

  // required uint32 vip = 3;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vip(), target);
  }

  // required uint32 occur_time = 4;
  if (has_occur_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->occur_time(), target);
  }

  // required uint32 event_type = 5;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_type(), target);
  }

  // required uint32 cur_id = 6;
  if (has_cur_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cur_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_new_user_statis::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 fight_power = 2;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

    // required uint32 vip = 3;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // required uint32 occur_time = 4;
    if (has_occur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occur_time());
    }

    // required uint32 event_type = 5;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

    // required uint32 cur_id = 6;
    if (has_cur_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_new_user_statis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_new_user_statis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_new_user_statis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_new_user_statis::MergeFrom(const gs_dbs_user_info_op_req_struct_new_user_statis& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_occur_time()) {
      set_occur_time(from.occur_time());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_cur_id()) {
      set_cur_id(from.cur_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_new_user_statis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_new_user_statis::CopyFrom(const gs_dbs_user_info_op_req_struct_new_user_statis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_new_user_statis::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;

  return true;
}

void gs_dbs_user_info_op_req_struct_new_user_statis::Swap(gs_dbs_user_info_op_req_struct_new_user_statis* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(vip_, other->vip_);
    std::swap(occur_time_, other->occur_time_);
    std::swap(event_type_, other->event_type_);
    std::swap(cur_id_, other->cur_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_new_user_statis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_new_user_statis_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_new_user_statis_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_new_mail::kMailFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_new_mail::gs_dbs_user_info_op_req_struct_new_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_new_mail::InitAsDefaultInstance() {
  mail_ = const_cast< ::db_user_mail*>(&::db_user_mail::default_instance());
}

gs_dbs_user_info_op_req_struct_new_mail::gs_dbs_user_info_op_req_struct_new_mail(const gs_dbs_user_info_op_req_struct_new_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_new_mail::SharedCtor() {
  _cached_size_ = 0;
  mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_new_mail::~gs_dbs_user_info_op_req_struct_new_mail() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_new_mail::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void gs_dbs_user_info_op_req_struct_new_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_new_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_new_mail_descriptor_;
}

const gs_dbs_user_info_op_req_struct_new_mail& gs_dbs_user_info_op_req_struct_new_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_new_mail* gs_dbs_user_info_op_req_struct_new_mail::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_new_mail* gs_dbs_user_info_op_req_struct_new_mail::New() const {
  return new gs_dbs_user_info_op_req_struct_new_mail;
}

void gs_dbs_user_info_op_req_struct_new_mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mail()) {
      if (mail_ != NULL) mail_->::db_user_mail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_new_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .db_user_mail mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_new_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .db_user_mail mail = 1;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_new_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .db_user_mail mail = 1;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_new_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .db_user_mail mail = 1;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_new_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_new_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_new_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_new_mail::MergeFrom(const gs_dbs_user_info_op_req_struct_new_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail()) {
      mutable_mail()->::db_user_mail::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_new_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_new_mail::CopyFrom(const gs_dbs_user_info_op_req_struct_new_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_new_mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_info_op_req_struct_new_mail::Swap(gs_dbs_user_info_op_req_struct_new_mail* other) {
  if (other != this) {
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_new_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_new_mail_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_new_mail_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE_descriptor_;
}
bool gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::GET_ELEMENT1;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::GET_ELEMENTN;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::GIVE_ELEMENT1;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::GIVE_ELEMENTN;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::GIVE_UP_APPLY1;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::GIVE_UP_APPLYN;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::AFFIRM_AGREE1;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::AFFIRM_AGREEN;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::AFFIRM_REFUSE1;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::AFFIRM_REFUSEN;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::ADD_FRIEND_GS_ONLINE;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::DEL_FRIEND;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::DEL_RECOMMEND_FRIEND;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::OP_TYPE_MIN;
const gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE gs_dbs_user_info_op_req_struct_op_friend::OP_TYPE_MAX;
const int gs_dbs_user_info_op_req_struct_op_friend::OP_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_friend::kOpTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_friend::kFriendIdFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_friend::kBaseInfoFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_friend::gs_dbs_user_info_op_req_struct_op_friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_friend::InitAsDefaultInstance() {
  base_info_ = const_cast< ::friend_base_info*>(&::friend_base_info::default_instance());
}

gs_dbs_user_info_op_req_struct_op_friend::gs_dbs_user_info_op_req_struct_op_friend(const gs_dbs_user_info_op_req_struct_op_friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_friend::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  friend_id_ = 0u;
  base_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_friend::~gs_dbs_user_info_op_req_struct_op_friend() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_friend::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
  }
}

void gs_dbs_user_info_op_req_struct_op_friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_friend_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_friend& gs_dbs_user_info_op_req_struct_op_friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_friend* gs_dbs_user_info_op_req_struct_op_friend::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_friend* gs_dbs_user_info_op_req_struct_op_friend::New() const {
  return new gs_dbs_user_info_op_req_struct_op_friend;
}

void gs_dbs_user_info_op_req_struct_op_friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    friend_id_ = 0u;
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::friend_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_user_info_op_req.struct_op_friend.OP_TYPE op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_user_info_op_req_struct_op_friend_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_friend_id;
        break;
      }

      // optional uint32 friend_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_base_info;
        break;
      }

      // optional .friend_base_info base_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_user_info_op_req.struct_op_friend.OP_TYPE op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional uint32 friend_id = 2;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->friend_id(), output);
  }

  // optional .friend_base_info base_info = 3;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_user_info_op_req.struct_op_friend.OP_TYPE op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional uint32 friend_id = 2;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->friend_id(), target);
  }

  // optional .friend_base_info base_info = 3;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_user_info_op_req.struct_op_friend.OP_TYPE op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional uint32 friend_id = 2;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_id());
    }

    // optional .friend_base_info base_info = 3;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_friend::MergeFrom(const gs_dbs_user_info_op_req_struct_op_friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_base_info()) {
      mutable_base_info()->::friend_base_info::MergeFrom(from.base_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_friend::CopyFrom(const gs_dbs_user_info_op_req_struct_op_friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_info_op_req_struct_op_friend::Swap(gs_dbs_user_info_op_req_struct_op_friend* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(base_info_, other->base_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_friend_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_friend_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* gs_dbs_user_info_op_req_struct_op_crusade_CRUSADE_OP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_crusade_CRUSADE_OP_TYPE_descriptor_;
}
bool gs_dbs_user_info_op_req_struct_op_crusade_CRUSADE_OP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_dbs_user_info_op_req_struct_op_crusade_CRUSADE_OP_TYPE gs_dbs_user_info_op_req_struct_op_crusade::CRUSADE_END;
const gs_dbs_user_info_op_req_struct_op_crusade_CRUSADE_OP_TYPE gs_dbs_user_info_op_req_struct_op_crusade::HERO_LIFE;
const gs_dbs_user_info_op_req_struct_op_crusade_CRUSADE_OP_TYPE gs_dbs_user_info_op_req_struct_op_crusade::RESET;
const gs_dbs_user_info_op_req_struct_op_crusade_CRUSADE_OP_TYPE gs_dbs_user_info_op_req_struct_op_crusade::CRUSADE_OP_TYPE_MIN;
const gs_dbs_user_info_op_req_struct_op_crusade_CRUSADE_OP_TYPE gs_dbs_user_info_op_req_struct_op_crusade::CRUSADE_OP_TYPE_MAX;
const int gs_dbs_user_info_op_req_struct_op_crusade::CRUSADE_OP_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::kMeHerosFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::kEnemyHerosFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::kWaveFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::gs_dbs_user_info_op_req_struct_op_crusade_crusade_end()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::InitAsDefaultInstance() {
}

gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::gs_dbs_user_info_op_req_struct_op_crusade_crusade_end(const gs_dbs_user_info_op_req_struct_op_crusade_crusade_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::SharedCtor() {
  _cached_size_ = 0;
  wave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::~gs_dbs_user_info_op_req_struct_op_crusade_crusade_end() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_crusade_crusade_end_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_crusade_crusade_end& gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_crusade_crusade_end* gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_crusade_crusade_end* gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::New() const {
  return new gs_dbs_user_info_op_req_struct_op_crusade_crusade_end;
}

void gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    wave_ = 0u;
  }
  me_heros_.Clear();
  enemy_heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .user_crusade.crusade_hero me_heros = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_me_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_me_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_me_heros;
        if (input->ExpectTag(26)) goto parse_enemy_heros;
        break;
      }

      // repeated .user_crusade.crusade_hero enemy_heros = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemy_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_enemy_heros;
        if (input->ExpectTag(32)) goto parse_wave;
        break;
      }

      // required uint32 wave = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .user_crusade.crusade_hero me_heros = 2;
  for (int i = 0; i < this->me_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->me_heros(i), output);
  }

  // repeated .user_crusade.crusade_hero enemy_heros = 3;
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enemy_heros(i), output);
  }

  // required uint32 wave = 4;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wave(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .user_crusade.crusade_hero me_heros = 2;
  for (int i = 0; i < this->me_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->me_heros(i), target);
  }

  // repeated .user_crusade.crusade_hero enemy_heros = 3;
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enemy_heros(i), target);
  }

  // required uint32 wave = 4;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wave(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 wave = 4;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave());
    }

  }
  // repeated .user_crusade.crusade_hero me_heros = 2;
  total_size += 1 * this->me_heros_size();
  for (int i = 0; i < this->me_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->me_heros(i));
  }

  // repeated .user_crusade.crusade_hero enemy_heros = 3;
  total_size += 1 * this->enemy_heros_size();
  for (int i = 0; i < this->enemy_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemy_heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_crusade_crusade_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_crusade_crusade_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::MergeFrom(const gs_dbs_user_info_op_req_struct_op_crusade_crusade_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  me_heros_.MergeFrom(from.me_heros_);
  enemy_heros_.MergeFrom(from.enemy_heros_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_wave()) {
      set_wave(from.wave());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::CopyFrom(const gs_dbs_user_info_op_req_struct_op_crusade_crusade_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  for (int i = 0; i < me_heros_size(); i++) {
    if (!this->me_heros(i).IsInitialized()) return false;
  }
  for (int i = 0; i < enemy_heros_size(); i++) {
    if (!this->enemy_heros(i).IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::Swap(gs_dbs_user_info_op_req_struct_op_crusade_crusade_end* other) {
  if (other != this) {
    me_heros_.Swap(&other->me_heros_);
    enemy_heros_.Swap(&other->enemy_heros_);
    std::swap(wave_, other->wave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_crusade_crusade_end_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_crusade_crusade_end_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req_struct_op_crusade::kOpTypeFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_crusade::kEndFieldNumber;
const int gs_dbs_user_info_op_req_struct_op_crusade::kHeroIdFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req_struct_op_crusade::gs_dbs_user_info_op_req_struct_op_crusade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req_struct_op_crusade::InitAsDefaultInstance() {
  end_ = const_cast< ::gs_dbs_user_info_op_req_struct_op_crusade_crusade_end*>(&::gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::default_instance());
}

gs_dbs_user_info_op_req_struct_op_crusade::gs_dbs_user_info_op_req_struct_op_crusade(const gs_dbs_user_info_op_req_struct_op_crusade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_crusade::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  end_ = NULL;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req_struct_op_crusade::~gs_dbs_user_info_op_req_struct_op_crusade() {
  SharedDtor();
}

void gs_dbs_user_info_op_req_struct_op_crusade::SharedDtor() {
  if (this != default_instance_) {
    delete end_;
  }
}

void gs_dbs_user_info_op_req_struct_op_crusade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req_struct_op_crusade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_struct_op_crusade_descriptor_;
}

const gs_dbs_user_info_op_req_struct_op_crusade& gs_dbs_user_info_op_req_struct_op_crusade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req_struct_op_crusade* gs_dbs_user_info_op_req_struct_op_crusade::default_instance_ = NULL;

gs_dbs_user_info_op_req_struct_op_crusade* gs_dbs_user_info_op_req_struct_op_crusade::New() const {
  return new gs_dbs_user_info_op_req_struct_op_crusade;
}

void gs_dbs_user_info_op_req_struct_op_crusade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    if (has_end()) {
      if (end_ != NULL) end_->::gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::Clear();
    }
    hero_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req_struct_op_crusade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_user_info_op_req.struct_op_crusade.CRUSADE_OP_TYPE op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_info_op_req_struct_op_crusade_CRUSADE_OP_TYPE_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_user_info_op_req_struct_op_crusade_CRUSADE_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_op_crusade.crusade_end end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req_struct_op_crusade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_user_info_op_req.struct_op_crusade.CRUSADE_OP_TYPE op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_crusade.crusade_end end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->end(), output);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req_struct_op_crusade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_user_info_op_req.struct_op_crusade.CRUSADE_OP_TYPE op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_crusade.crusade_end end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->end(), target);
  }

  // optional uint32 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req_struct_op_crusade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_user_info_op_req.struct_op_crusade.CRUSADE_OP_TYPE op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional .gs_dbs_user_info_op_req.struct_op_crusade.crusade_end end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req_struct_op_crusade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req_struct_op_crusade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req_struct_op_crusade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req_struct_op_crusade::MergeFrom(const gs_dbs_user_info_op_req_struct_op_crusade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_end()) {
      mutable_end()->::gs_dbs_user_info_op_req_struct_op_crusade_crusade_end::MergeFrom(from.end());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req_struct_op_crusade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req_struct_op_crusade::CopyFrom(const gs_dbs_user_info_op_req_struct_op_crusade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req_struct_op_crusade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_info_op_req_struct_op_crusade::Swap(gs_dbs_user_info_op_req_struct_op_crusade* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(end_, other->end_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req_struct_op_crusade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_struct_op_crusade_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_struct_op_crusade_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_user_info_op_req::kUserIdFieldNumber;
const int gs_dbs_user_info_op_req::kBaseInfoFieldNumber;
const int gs_dbs_user_info_op_req::kSubTaskFieldNumber;
const int gs_dbs_user_info_op_req::kNewHerosFieldNumber;
const int gs_dbs_user_info_op_req::kHerosBaseFieldNumber;
const int gs_dbs_user_info_op_req::kHeroEquipsFieldNumber;
const int gs_dbs_user_info_op_req::kHeroSkillsFieldNumber;
const int gs_dbs_user_info_op_req::kItemsFieldNumber;
const int gs_dbs_user_info_op_req::kOpMailsFieldNumber;
const int gs_dbs_user_info_op_req::kShopsFieldNumber;
const int gs_dbs_user_info_op_req::kShopItemsFieldNumber;
const int gs_dbs_user_info_op_req::kBuyItemsFieldNumber;
const int gs_dbs_user_info_op_req::kNewArenaFieldNumber;
const int gs_dbs_user_info_op_req::kOpArenaFieldNumber;
const int gs_dbs_user_info_op_req::kClearArenaTeamFieldNumber;
const int gs_dbs_user_info_op_req::kArenaChallengeFieldNumber;
const int gs_dbs_user_info_op_req::kMissionsFieldNumber;
const int gs_dbs_user_info_op_req::kSignFieldNumber;
const int gs_dbs_user_info_op_req::kNewSignFieldNumber;
const int gs_dbs_user_info_op_req::kNoviceGuideFieldNumber;
const int gs_dbs_user_info_op_req::kNewUserStatisFieldNumber;
const int gs_dbs_user_info_op_req::kNewMailFieldNumber;
const int gs_dbs_user_info_op_req::kOpFriendsFieldNumber;
const int gs_dbs_user_info_op_req::kOpCrusadeFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_info_op_req::gs_dbs_user_info_op_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_info_op_req::InitAsDefaultInstance() {
  base_info_ = const_cast< ::gs_dbs_user_info_op_req_struct_op_base_info*>(&::gs_dbs_user_info_op_req_struct_op_base_info::default_instance());
  sub_task_ = const_cast< ::gs_dbs_user_info_op_req_struct_op_sub_task*>(&::gs_dbs_user_info_op_req_struct_op_sub_task::default_instance());
  new_arena_ = const_cast< ::gs_dbs_user_info_op_req_struct_new_arena*>(&::gs_dbs_user_info_op_req_struct_new_arena::default_instance());
  op_arena_ = const_cast< ::gs_dbs_user_info_op_req_struct_op_arena*>(&::gs_dbs_user_info_op_req_struct_op_arena::default_instance());
  clear_arena_team_ = const_cast< ::gs_dbs_user_info_op_req_struct_clear_arena_team*>(&::gs_dbs_user_info_op_req_struct_clear_arena_team::default_instance());
  arena_challenge_ = const_cast< ::gs_dbs_user_info_op_req_struct_op_arena_challenge*>(&::gs_dbs_user_info_op_req_struct_op_arena_challenge::default_instance());
  sign_ = const_cast< ::gs_dbs_user_info_op_req_struct_op_sign*>(&::gs_dbs_user_info_op_req_struct_op_sign::default_instance());
  new_sign_ = const_cast< ::gs_dbs_user_info_op_req_struct_new_sign*>(&::gs_dbs_user_info_op_req_struct_new_sign::default_instance());
  novice_guide_ = const_cast< ::gs_dbs_user_info_op_req_struct_op_novice_guide*>(&::gs_dbs_user_info_op_req_struct_op_novice_guide::default_instance());
  new_user_statis_ = const_cast< ::gs_dbs_user_info_op_req_struct_new_user_statis*>(&::gs_dbs_user_info_op_req_struct_new_user_statis::default_instance());
  new_mail_ = const_cast< ::gs_dbs_user_info_op_req_struct_new_mail*>(&::gs_dbs_user_info_op_req_struct_new_mail::default_instance());
  op_crusade_ = const_cast< ::gs_dbs_user_info_op_req_struct_op_crusade*>(&::gs_dbs_user_info_op_req_struct_op_crusade::default_instance());
}

gs_dbs_user_info_op_req::gs_dbs_user_info_op_req(const gs_dbs_user_info_op_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  base_info_ = NULL;
  sub_task_ = NULL;
  new_arena_ = NULL;
  op_arena_ = NULL;
  clear_arena_team_ = NULL;
  arena_challenge_ = NULL;
  sign_ = NULL;
  new_sign_ = NULL;
  novice_guide_ = NULL;
  new_user_statis_ = NULL;
  new_mail_ = NULL;
  op_crusade_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_info_op_req::~gs_dbs_user_info_op_req() {
  SharedDtor();
}

void gs_dbs_user_info_op_req::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
    delete sub_task_;
    delete new_arena_;
    delete op_arena_;
    delete clear_arena_team_;
    delete arena_challenge_;
    delete sign_;
    delete new_sign_;
    delete novice_guide_;
    delete new_user_statis_;
    delete new_mail_;
    delete op_crusade_;
  }
}

void gs_dbs_user_info_op_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_info_op_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_info_op_req_descriptor_;
}

const gs_dbs_user_info_op_req& gs_dbs_user_info_op_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_info_op_req* gs_dbs_user_info_op_req::default_instance_ = NULL;

gs_dbs_user_info_op_req* gs_dbs_user_info_op_req::New() const {
  return new gs_dbs_user_info_op_req;
}

void gs_dbs_user_info_op_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::gs_dbs_user_info_op_req_struct_op_base_info::Clear();
    }
    if (has_sub_task()) {
      if (sub_task_ != NULL) sub_task_->::gs_dbs_user_info_op_req_struct_op_sub_task::Clear();
    }
  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (has_new_arena()) {
      if (new_arena_ != NULL) new_arena_->::gs_dbs_user_info_op_req_struct_new_arena::Clear();
    }
    if (has_op_arena()) {
      if (op_arena_ != NULL) op_arena_->::gs_dbs_user_info_op_req_struct_op_arena::Clear();
    }
    if (has_clear_arena_team()) {
      if (clear_arena_team_ != NULL) clear_arena_team_->::gs_dbs_user_info_op_req_struct_clear_arena_team::Clear();
    }
    if (has_arena_challenge()) {
      if (arena_challenge_ != NULL) arena_challenge_->::gs_dbs_user_info_op_req_struct_op_arena_challenge::Clear();
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (has_sign()) {
      if (sign_ != NULL) sign_->::gs_dbs_user_info_op_req_struct_op_sign::Clear();
    }
    if (has_new_sign()) {
      if (new_sign_ != NULL) new_sign_->::gs_dbs_user_info_op_req_struct_new_sign::Clear();
    }
    if (has_novice_guide()) {
      if (novice_guide_ != NULL) novice_guide_->::gs_dbs_user_info_op_req_struct_op_novice_guide::Clear();
    }
    if (has_new_user_statis()) {
      if (new_user_statis_ != NULL) new_user_statis_->::gs_dbs_user_info_op_req_struct_new_user_statis::Clear();
    }
    if (has_new_mail()) {
      if (new_mail_ != NULL) new_mail_->::gs_dbs_user_info_op_req_struct_new_mail::Clear();
    }
    if (has_op_crusade()) {
      if (op_crusade_ != NULL) op_crusade_->::gs_dbs_user_info_op_req_struct_op_crusade::Clear();
    }
  }
  new_heros_.Clear();
  heros_base_.Clear();
  hero_equips_.Clear();
  hero_skills_.Clear();
  items_.Clear();
  op_mails_.Clear();
  shops_.Clear();
  shop_items_.Clear();
  buy_items_.Clear();
  missions_.Clear();
  op_friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_info_op_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base_info;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_op_base_info base_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sub_task;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_op_sub_task sub_task = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_heros;
        break;
      }

      // repeated .gs_dbs_user_info_op_req.struct_new_hero new_heros = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_heros;
        if (input->ExpectTag(42)) goto parse_heros_base;
        break;
      }

      // repeated .gs_dbs_user_info_op_req.struct_op_hero_base heros_base = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_heros_base;
        if (input->ExpectTag(50)) goto parse_hero_equips;
        break;
      }

      // repeated .gs_dbs_user_info_op_req.struct_op_hero_equip hero_equips = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hero_equips;
        if (input->ExpectTag(58)) goto parse_hero_skills;
        break;
      }

      // repeated .gs_dbs_user_info_op_req.struct_op_hero_skill hero_skills = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_hero_skills;
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }

      // repeated .struct_game_element items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        if (input->ExpectTag(74)) goto parse_op_mails;
        break;
      }

      // repeated .gs_dbs_user_info_op_req.struct_op_mail op_mails = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_op_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_op_mails;
        if (input->ExpectTag(82)) goto parse_shops;
        break;
      }

      // repeated .gs_dbs_user_info_op_req.struct_op_shop shops = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_shops;
        if (input->ExpectTag(90)) goto parse_shop_items;
        break;
      }

      // repeated .gs_dbs_user_info_op_req.struct_op_shop_item shop_items = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_shop_items;
        if (input->ExpectTag(98)) goto parse_buy_items;
        break;
      }

      // repeated .db_user_shop_buy buy_items = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_buy_items;
        if (input->ExpectTag(106)) goto parse_new_arena;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_new_arena new_arena = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_arena:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_arena()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_op_arena;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_op_arena op_arena = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_arena:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_arena()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_clear_arena_team;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_clear_arena_team clear_arena_team = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clear_arena_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_arena_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_arena_challenge;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_op_arena_challenge arena_challenge = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_challenge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena_challenge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_missions;
        break;
      }

      // repeated .gs_dbs_user_info_op_req.struct_op_mission missions = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_missions;
        if (input->ExpectTag(146)) goto parse_sign;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_op_sign sign = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_new_sign;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_new_sign new_sign = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_novice_guide;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_op_novice_guide novice_guide = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_novice_guide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_novice_guide()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_new_user_statis;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_new_user_statis new_user_statis = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_user_statis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_user_statis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_new_mail;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_new_mail new_mail = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_op_friends;
        break;
      }

      // repeated .gs_dbs_user_info_op_req.struct_op_friend op_friends = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_op_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_op_friends;
        if (input->ExpectTag(194)) goto parse_op_crusade;
        break;
      }

      // optional .gs_dbs_user_info_op_req.struct_op_crusade op_crusade = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_crusade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_crusade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_info_op_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_base_info base_info = 2;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base_info(), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_sub_task sub_task = 3;
  if (has_sub_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sub_task(), output);
  }

  // repeated .gs_dbs_user_info_op_req.struct_new_hero new_heros = 4;
  for (int i = 0; i < this->new_heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_heros(i), output);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_hero_base heros_base = 5;
  for (int i = 0; i < this->heros_base_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->heros_base(i), output);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_hero_equip hero_equips = 6;
  for (int i = 0; i < this->hero_equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->hero_equips(i), output);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_hero_skill hero_skills = 7;
  for (int i = 0; i < this->hero_skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->hero_skills(i), output);
  }

  // repeated .struct_game_element items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->items(i), output);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_mail op_mails = 9;
  for (int i = 0; i < this->op_mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->op_mails(i), output);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_shop shops = 10;
  for (int i = 0; i < this->shops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->shops(i), output);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_shop_item shop_items = 11;
  for (int i = 0; i < this->shop_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->shop_items(i), output);
  }

  // repeated .db_user_shop_buy buy_items = 12;
  for (int i = 0; i < this->buy_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->buy_items(i), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_new_arena new_arena = 13;
  if (has_new_arena()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->new_arena(), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_arena op_arena = 14;
  if (has_op_arena()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->op_arena(), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_clear_arena_team clear_arena_team = 15;
  if (has_clear_arena_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->clear_arena_team(), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_arena_challenge arena_challenge = 16;
  if (has_arena_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->arena_challenge(), output);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_mission missions = 17;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->missions(i), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_sign sign = 18;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->sign(), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_new_sign new_sign = 19;
  if (has_new_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->new_sign(), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_novice_guide novice_guide = 20;
  if (has_novice_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->novice_guide(), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_new_user_statis new_user_statis = 21;
  if (has_new_user_statis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->new_user_statis(), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_new_mail new_mail = 22;
  if (has_new_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->new_mail(), output);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_friend op_friends = 23;
  for (int i = 0; i < this->op_friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->op_friends(i), output);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_crusade op_crusade = 24;
  if (has_op_crusade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->op_crusade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_info_op_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_base_info base_info = 2;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base_info(), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_sub_task sub_task = 3;
  if (has_sub_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sub_task(), target);
  }

  // repeated .gs_dbs_user_info_op_req.struct_new_hero new_heros = 4;
  for (int i = 0; i < this->new_heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_heros(i), target);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_hero_base heros_base = 5;
  for (int i = 0; i < this->heros_base_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->heros_base(i), target);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_hero_equip hero_equips = 6;
  for (int i = 0; i < this->hero_equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->hero_equips(i), target);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_hero_skill hero_skills = 7;
  for (int i = 0; i < this->hero_skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->hero_skills(i), target);
  }

  // repeated .struct_game_element items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->items(i), target);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_mail op_mails = 9;
  for (int i = 0; i < this->op_mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->op_mails(i), target);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_shop shops = 10;
  for (int i = 0; i < this->shops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->shops(i), target);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_shop_item shop_items = 11;
  for (int i = 0; i < this->shop_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->shop_items(i), target);
  }

  // repeated .db_user_shop_buy buy_items = 12;
  for (int i = 0; i < this->buy_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->buy_items(i), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_new_arena new_arena = 13;
  if (has_new_arena()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->new_arena(), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_arena op_arena = 14;
  if (has_op_arena()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->op_arena(), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_clear_arena_team clear_arena_team = 15;
  if (has_clear_arena_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->clear_arena_team(), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_arena_challenge arena_challenge = 16;
  if (has_arena_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->arena_challenge(), target);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_mission missions = 17;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->missions(i), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_sign sign = 18;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->sign(), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_new_sign new_sign = 19;
  if (has_new_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->new_sign(), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_novice_guide novice_guide = 20;
  if (has_novice_guide()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->novice_guide(), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_new_user_statis new_user_statis = 21;
  if (has_new_user_statis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->new_user_statis(), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_new_mail new_mail = 22;
  if (has_new_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->new_mail(), target);
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_friend op_friends = 23;
  for (int i = 0; i < this->op_friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->op_friends(i), target);
  }

  // optional .gs_dbs_user_info_op_req.struct_op_crusade op_crusade = 24;
  if (has_op_crusade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->op_crusade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_info_op_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional .gs_dbs_user_info_op_req.struct_op_base_info base_info = 2;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

    // optional .gs_dbs_user_info_op_req.struct_op_sub_task sub_task = 3;
    if (has_sub_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sub_task());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional .gs_dbs_user_info_op_req.struct_new_arena new_arena = 13;
    if (has_new_arena()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_arena());
    }

    // optional .gs_dbs_user_info_op_req.struct_op_arena op_arena = 14;
    if (has_op_arena()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op_arena());
    }

    // optional .gs_dbs_user_info_op_req.struct_clear_arena_team clear_arena_team = 15;
    if (has_clear_arena_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clear_arena_team());
    }

    // optional .gs_dbs_user_info_op_req.struct_op_arena_challenge arena_challenge = 16;
    if (has_arena_challenge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena_challenge());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional .gs_dbs_user_info_op_req.struct_op_sign sign = 18;
    if (has_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign());
    }

    // optional .gs_dbs_user_info_op_req.struct_new_sign new_sign = 19;
    if (has_new_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_sign());
    }

    // optional .gs_dbs_user_info_op_req.struct_op_novice_guide novice_guide = 20;
    if (has_novice_guide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->novice_guide());
    }

    // optional .gs_dbs_user_info_op_req.struct_new_user_statis new_user_statis = 21;
    if (has_new_user_statis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_user_statis());
    }

    // optional .gs_dbs_user_info_op_req.struct_new_mail new_mail = 22;
    if (has_new_mail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_mail());
    }

    // optional .gs_dbs_user_info_op_req.struct_op_crusade op_crusade = 24;
    if (has_op_crusade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op_crusade());
    }

  }
  // repeated .gs_dbs_user_info_op_req.struct_new_hero new_heros = 4;
  total_size += 1 * this->new_heros_size();
  for (int i = 0; i < this->new_heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->new_heros(i));
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_hero_base heros_base = 5;
  total_size += 1 * this->heros_base_size();
  for (int i = 0; i < this->heros_base_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros_base(i));
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_hero_equip hero_equips = 6;
  total_size += 1 * this->hero_equips_size();
  for (int i = 0; i < this->hero_equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_equips(i));
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_hero_skill hero_skills = 7;
  total_size += 1 * this->hero_skills_size();
  for (int i = 0; i < this->hero_skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_skills(i));
  }

  // repeated .struct_game_element items = 8;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_mail op_mails = 9;
  total_size += 1 * this->op_mails_size();
  for (int i = 0; i < this->op_mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->op_mails(i));
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_shop shops = 10;
  total_size += 1 * this->shops_size();
  for (int i = 0; i < this->shops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shops(i));
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_shop_item shop_items = 11;
  total_size += 1 * this->shop_items_size();
  for (int i = 0; i < this->shop_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop_items(i));
  }

  // repeated .db_user_shop_buy buy_items = 12;
  total_size += 1 * this->buy_items_size();
  for (int i = 0; i < this->buy_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_items(i));
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_mission missions = 17;
  total_size += 2 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }

  // repeated .gs_dbs_user_info_op_req.struct_op_friend op_friends = 23;
  total_size += 2 * this->op_friends_size();
  for (int i = 0; i < this->op_friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->op_friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_info_op_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_info_op_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_info_op_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_info_op_req::MergeFrom(const gs_dbs_user_info_op_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  new_heros_.MergeFrom(from.new_heros_);
  heros_base_.MergeFrom(from.heros_base_);
  hero_equips_.MergeFrom(from.hero_equips_);
  hero_skills_.MergeFrom(from.hero_skills_);
  items_.MergeFrom(from.items_);
  op_mails_.MergeFrom(from.op_mails_);
  shops_.MergeFrom(from.shops_);
  shop_items_.MergeFrom(from.shop_items_);
  buy_items_.MergeFrom(from.buy_items_);
  missions_.MergeFrom(from.missions_);
  op_friends_.MergeFrom(from.op_friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_base_info()) {
      mutable_base_info()->::gs_dbs_user_info_op_req_struct_op_base_info::MergeFrom(from.base_info());
    }
    if (from.has_sub_task()) {
      mutable_sub_task()->::gs_dbs_user_info_op_req_struct_op_sub_task::MergeFrom(from.sub_task());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_new_arena()) {
      mutable_new_arena()->::gs_dbs_user_info_op_req_struct_new_arena::MergeFrom(from.new_arena());
    }
    if (from.has_op_arena()) {
      mutable_op_arena()->::gs_dbs_user_info_op_req_struct_op_arena::MergeFrom(from.op_arena());
    }
    if (from.has_clear_arena_team()) {
      mutable_clear_arena_team()->::gs_dbs_user_info_op_req_struct_clear_arena_team::MergeFrom(from.clear_arena_team());
    }
    if (from.has_arena_challenge()) {
      mutable_arena_challenge()->::gs_dbs_user_info_op_req_struct_op_arena_challenge::MergeFrom(from.arena_challenge());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_sign()) {
      mutable_sign()->::gs_dbs_user_info_op_req_struct_op_sign::MergeFrom(from.sign());
    }
    if (from.has_new_sign()) {
      mutable_new_sign()->::gs_dbs_user_info_op_req_struct_new_sign::MergeFrom(from.new_sign());
    }
    if (from.has_novice_guide()) {
      mutable_novice_guide()->::gs_dbs_user_info_op_req_struct_op_novice_guide::MergeFrom(from.novice_guide());
    }
    if (from.has_new_user_statis()) {
      mutable_new_user_statis()->::gs_dbs_user_info_op_req_struct_new_user_statis::MergeFrom(from.new_user_statis());
    }
    if (from.has_new_mail()) {
      mutable_new_mail()->::gs_dbs_user_info_op_req_struct_new_mail::MergeFrom(from.new_mail());
    }
    if (from.has_op_crusade()) {
      mutable_op_crusade()->::gs_dbs_user_info_op_req_struct_op_crusade::MergeFrom(from.op_crusade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_info_op_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_info_op_req::CopyFrom(const gs_dbs_user_info_op_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_info_op_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  if (has_sub_task()) {
    if (!this->sub_task().IsInitialized()) return false;
  }
  for (int i = 0; i < new_heros_size(); i++) {
    if (!this->new_heros(i).IsInitialized()) return false;
  }
  for (int i = 0; i < heros_base_size(); i++) {
    if (!this->heros_base(i).IsInitialized()) return false;
  }
  for (int i = 0; i < hero_equips_size(); i++) {
    if (!this->hero_equips(i).IsInitialized()) return false;
  }
  for (int i = 0; i < hero_skills_size(); i++) {
    if (!this->hero_skills(i).IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < op_mails_size(); i++) {
    if (!this->op_mails(i).IsInitialized()) return false;
  }
  for (int i = 0; i < shops_size(); i++) {
    if (!this->shops(i).IsInitialized()) return false;
  }
  for (int i = 0; i < shop_items_size(); i++) {
    if (!this->shop_items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < buy_items_size(); i++) {
    if (!this->buy_items(i).IsInitialized()) return false;
  }
  if (has_new_arena()) {
    if (!this->new_arena().IsInitialized()) return false;
  }
  if (has_op_arena()) {
    if (!this->op_arena().IsInitialized()) return false;
  }
  if (has_arena_challenge()) {
    if (!this->arena_challenge().IsInitialized()) return false;
  }
  for (int i = 0; i < missions_size(); i++) {
    if (!this->missions(i).IsInitialized()) return false;
  }
  if (has_sign()) {
    if (!this->sign().IsInitialized()) return false;
  }
  if (has_new_sign()) {
    if (!this->new_sign().IsInitialized()) return false;
  }
  if (has_novice_guide()) {
    if (!this->novice_guide().IsInitialized()) return false;
  }
  if (has_new_user_statis()) {
    if (!this->new_user_statis().IsInitialized()) return false;
  }
  if (has_new_mail()) {
    if (!this->new_mail().IsInitialized()) return false;
  }
  for (int i = 0; i < op_friends_size(); i++) {
    if (!this->op_friends(i).IsInitialized()) return false;
  }
  if (has_op_crusade()) {
    if (!this->op_crusade().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_info_op_req::Swap(gs_dbs_user_info_op_req* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(base_info_, other->base_info_);
    std::swap(sub_task_, other->sub_task_);
    new_heros_.Swap(&other->new_heros_);
    heros_base_.Swap(&other->heros_base_);
    hero_equips_.Swap(&other->hero_equips_);
    hero_skills_.Swap(&other->hero_skills_);
    items_.Swap(&other->items_);
    op_mails_.Swap(&other->op_mails_);
    shops_.Swap(&other->shops_);
    shop_items_.Swap(&other->shop_items_);
    buy_items_.Swap(&other->buy_items_);
    std::swap(new_arena_, other->new_arena_);
    std::swap(op_arena_, other->op_arena_);
    std::swap(clear_arena_team_, other->clear_arena_team_);
    std::swap(arena_challenge_, other->arena_challenge_);
    missions_.Swap(&other->missions_);
    std::swap(sign_, other->sign_);
    std::swap(new_sign_, other->new_sign_);
    std::swap(novice_guide_, other->novice_guide_);
    std::swap(new_user_statis_, other->new_user_statis_);
    std::swap(new_mail_, other->new_mail_);
    op_friends_.Swap(&other->op_friends_);
    std::swap(op_crusade_, other->op_crusade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_info_op_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_info_op_req_descriptor_;
  metadata.reflection = gs_dbs_user_info_op_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dbs_gs_user_info_op_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

dbs_gs_user_info_op_res::dbs_gs_user_info_op_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_user_info_op_res::InitAsDefaultInstance() {
}

dbs_gs_user_info_op_res::dbs_gs_user_info_op_res(const dbs_gs_user_info_op_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_user_info_op_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_user_info_op_res::~dbs_gs_user_info_op_res() {
  SharedDtor();
}

void dbs_gs_user_info_op_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dbs_gs_user_info_op_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_user_info_op_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_user_info_op_res_descriptor_;
}

const dbs_gs_user_info_op_res& dbs_gs_user_info_op_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_user_info_op_res* dbs_gs_user_info_op_res::default_instance_ = NULL;

dbs_gs_user_info_op_res* dbs_gs_user_info_op_res::New() const {
  return new dbs_gs_user_info_op_res;
}

void dbs_gs_user_info_op_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_user_info_op_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_user_info_op_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_user_info_op_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_user_info_op_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_user_info_op_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_user_info_op_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_user_info_op_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_user_info_op_res::MergeFrom(const dbs_gs_user_info_op_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_user_info_op_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_user_info_op_res::CopyFrom(const dbs_gs_user_info_op_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_user_info_op_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void dbs_gs_user_info_op_res::Swap(dbs_gs_user_info_op_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_user_info_op_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_user_info_op_res_descriptor_;
  metadata.reflection = dbs_gs_user_info_op_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_dbs_user_new_mail_req::kSendUserIdsFieldNumber;
const int gs_dbs_user_new_mail_req::kMailFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_new_mail_req::gs_dbs_user_new_mail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_new_mail_req::InitAsDefaultInstance() {
  mail_ = const_cast< ::db_user_mail*>(&::db_user_mail::default_instance());
}

gs_dbs_user_new_mail_req::gs_dbs_user_new_mail_req(const gs_dbs_user_new_mail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_new_mail_req::SharedCtor() {
  _cached_size_ = 0;
  mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_new_mail_req::~gs_dbs_user_new_mail_req() {
  SharedDtor();
}

void gs_dbs_user_new_mail_req::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void gs_dbs_user_new_mail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_new_mail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_new_mail_req_descriptor_;
}

const gs_dbs_user_new_mail_req& gs_dbs_user_new_mail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_new_mail_req* gs_dbs_user_new_mail_req::default_instance_ = NULL;

gs_dbs_user_new_mail_req* gs_dbs_user_new_mail_req::New() const {
  return new gs_dbs_user_new_mail_req;
}

void gs_dbs_user_new_mail_req::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_mail()) {
      if (mail_ != NULL) mail_->::db_user_mail::Clear();
    }
  }
  send_user_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_new_mail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 send_user_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_user_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_send_user_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_send_user_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_send_user_ids;
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }

      // required .db_user_mail mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_new_mail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 send_user_ids = 1;
  for (int i = 0; i < this->send_user_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->send_user_ids(i), output);
  }

  // required .db_user_mail mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_new_mail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 send_user_ids = 1;
  for (int i = 0; i < this->send_user_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->send_user_ids(i), target);
  }

  // required .db_user_mail mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_new_mail_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .db_user_mail mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

  }
  // repeated uint32 send_user_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->send_user_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->send_user_ids(i));
    }
    total_size += 1 * this->send_user_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_new_mail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_new_mail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_new_mail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_new_mail_req::MergeFrom(const gs_dbs_user_new_mail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  send_user_ids_.MergeFrom(from.send_user_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mail()) {
      mutable_mail()->::db_user_mail::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_new_mail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_new_mail_req::CopyFrom(const gs_dbs_user_new_mail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_new_mail_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_new_mail_req::Swap(gs_dbs_user_new_mail_req* other) {
  if (other != this) {
    send_user_ids_.Swap(&other->send_user_ids_);
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_new_mail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_new_mail_req_descriptor_;
  metadata.reflection = gs_dbs_user_new_mail_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dbs_gs_user_new_mail_res::kErrorCodeFieldNumber;
const int dbs_gs_user_new_mail_res::kUserIdsFieldNumber;
const int dbs_gs_user_new_mail_res::kMailIdsFieldNumber;
const int dbs_gs_user_new_mail_res::kMailAttachIdsFieldNumber;
const int dbs_gs_user_new_mail_res::kMailFieldNumber;
#endif  // !_MSC_VER

dbs_gs_user_new_mail_res::dbs_gs_user_new_mail_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_user_new_mail_res::InitAsDefaultInstance() {
  mail_ = const_cast< ::db_user_mail*>(&::db_user_mail::default_instance());
}

dbs_gs_user_new_mail_res::dbs_gs_user_new_mail_res(const dbs_gs_user_new_mail_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_user_new_mail_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_user_new_mail_res::~dbs_gs_user_new_mail_res() {
  SharedDtor();
}

void dbs_gs_user_new_mail_res::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void dbs_gs_user_new_mail_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_user_new_mail_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_user_new_mail_res_descriptor_;
}

const dbs_gs_user_new_mail_res& dbs_gs_user_new_mail_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_user_new_mail_res* dbs_gs_user_new_mail_res::default_instance_ = NULL;

dbs_gs_user_new_mail_res* dbs_gs_user_new_mail_res::New() const {
  return new dbs_gs_user_new_mail_res;
}

void dbs_gs_user_new_mail_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    if (has_mail()) {
      if (mail_ != NULL) mail_->::db_user_mail::Clear();
    }
  }
  user_ids_.Clear();
  mail_ids_.Clear();
  mail_attach_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_user_new_mail_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_ids;
        break;
      }

      // repeated uint32 user_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_user_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_ids;
        if (input->ExpectTag(24)) goto parse_mail_ids;
        break;
      }

      // repeated uint32 mail_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mail_ids;
        if (input->ExpectTag(32)) goto parse_mail_attach_ids;
        break;
      }

      // repeated uint32 mail_attach_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_attach_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_mail_attach_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mail_attach_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mail_attach_ids;
        if (input->ExpectTag(42)) goto parse_mail;
        break;
      }

      // required .db_user_mail mail = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_user_new_mail_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated uint32 user_ids = 2;
  for (int i = 0; i < this->user_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->user_ids(i), output);
  }

  // repeated uint32 mail_ids = 3;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->mail_ids(i), output);
  }

  // repeated uint32 mail_attach_ids = 4;
  for (int i = 0; i < this->mail_attach_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->mail_attach_ids(i), output);
  }

  // required .db_user_mail mail = 5;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_user_new_mail_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated uint32 user_ids = 2;
  for (int i = 0; i < this->user_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->user_ids(i), target);
  }

  // repeated uint32 mail_ids = 3;
  for (int i = 0; i < this->mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->mail_ids(i), target);
  }

  // repeated uint32 mail_attach_ids = 4;
  for (int i = 0; i < this->mail_attach_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->mail_attach_ids(i), target);
  }

  // required .db_user_mail mail = 5;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_user_new_mail_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // required .db_user_mail mail = 5;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

  }
  // repeated uint32 user_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->user_ids(i));
    }
    total_size += 1 * this->user_ids_size() + data_size;
  }

  // repeated uint32 mail_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mail_ids(i));
    }
    total_size += 1 * this->mail_ids_size() + data_size;
  }

  // repeated uint32 mail_attach_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_attach_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mail_attach_ids(i));
    }
    total_size += 1 * this->mail_attach_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_user_new_mail_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_user_new_mail_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_user_new_mail_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_user_new_mail_res::MergeFrom(const dbs_gs_user_new_mail_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_ids_.MergeFrom(from.user_ids_);
  mail_ids_.MergeFrom(from.mail_ids_);
  mail_attach_ids_.MergeFrom(from.mail_attach_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_mail()) {
      mutable_mail()->::db_user_mail::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_user_new_mail_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_user_new_mail_res::CopyFrom(const dbs_gs_user_new_mail_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_user_new_mail_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void dbs_gs_user_new_mail_res::Swap(dbs_gs_user_new_mail_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    user_ids_.Swap(&other->user_ids_);
    mail_ids_.Swap(&other->mail_ids_);
    mail_attach_ids_.Swap(&other->mail_attach_ids_);
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_user_new_mail_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_user_new_mail_res_descriptor_;
  metadata.reflection = dbs_gs_user_new_mail_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arena_mail::kUserIdFieldNumber;
const int arena_mail::kMailFieldNumber;
#endif  // !_MSC_VER

arena_mail::arena_mail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arena_mail::InitAsDefaultInstance() {
  mail_ = const_cast< ::db_user_mail*>(&::db_user_mail::default_instance());
}

arena_mail::arena_mail(const arena_mail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arena_mail::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arena_mail::~arena_mail() {
  SharedDtor();
}

void arena_mail::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void arena_mail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arena_mail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arena_mail_descriptor_;
}

const arena_mail& arena_mail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

arena_mail* arena_mail::default_instance_ = NULL;

arena_mail* arena_mail::New() const {
  return new arena_mail;
}

void arena_mail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_mail()) {
      if (mail_ != NULL) mail_->::db_user_mail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arena_mail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }

      // required .db_user_mail mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arena_mail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .db_user_mail mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arena_mail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required .db_user_mail mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arena_mail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .db_user_mail mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arena_mail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arena_mail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arena_mail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arena_mail::MergeFrom(const arena_mail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_mail()) {
      mutable_mail()->::db_user_mail::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arena_mail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arena_mail::CopyFrom(const arena_mail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arena_mail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void arena_mail::Swap(arena_mail* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arena_mail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arena_mail_descriptor_;
  metadata.reflection = arena_mail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_dbs_user_new_arena_mail_req::kMailsFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_new_arena_mail_req::gs_dbs_user_new_arena_mail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_new_arena_mail_req::InitAsDefaultInstance() {
}

gs_dbs_user_new_arena_mail_req::gs_dbs_user_new_arena_mail_req(const gs_dbs_user_new_arena_mail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_new_arena_mail_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_new_arena_mail_req::~gs_dbs_user_new_arena_mail_req() {
  SharedDtor();
}

void gs_dbs_user_new_arena_mail_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_user_new_arena_mail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_new_arena_mail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_new_arena_mail_req_descriptor_;
}

const gs_dbs_user_new_arena_mail_req& gs_dbs_user_new_arena_mail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_new_arena_mail_req* gs_dbs_user_new_arena_mail_req::default_instance_ = NULL;

gs_dbs_user_new_arena_mail_req* gs_dbs_user_new_arena_mail_req::New() const {
  return new gs_dbs_user_new_arena_mail_req;
}

void gs_dbs_user_new_arena_mail_req::Clear() {
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_new_arena_mail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .arena_mail mails = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_new_arena_mail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .arena_mail mails = 1;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_new_arena_mail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .arena_mail mails = 1;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_new_arena_mail_req::ByteSize() const {
  int total_size = 0;

  // repeated .arena_mail mails = 1;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_new_arena_mail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_new_arena_mail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_new_arena_mail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_new_arena_mail_req::MergeFrom(const gs_dbs_user_new_arena_mail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_new_arena_mail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_new_arena_mail_req::CopyFrom(const gs_dbs_user_new_arena_mail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_new_arena_mail_req::IsInitialized() const {

  for (int i = 0; i < mails_size(); i++) {
    if (!this->mails(i).IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_new_arena_mail_req::Swap(gs_dbs_user_new_arena_mail_req* other) {
  if (other != this) {
    mails_.Swap(&other->mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_new_arena_mail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_new_arena_mail_req_descriptor_;
  metadata.reflection = gs_dbs_user_new_arena_mail_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dbs_gs_user_new_arena_mail_res::kErrorCodeFieldNumber;
const int dbs_gs_user_new_arena_mail_res::kMailsFieldNumber;
#endif  // !_MSC_VER

dbs_gs_user_new_arena_mail_res::dbs_gs_user_new_arena_mail_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_user_new_arena_mail_res::InitAsDefaultInstance() {
}

dbs_gs_user_new_arena_mail_res::dbs_gs_user_new_arena_mail_res(const dbs_gs_user_new_arena_mail_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_user_new_arena_mail_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_user_new_arena_mail_res::~dbs_gs_user_new_arena_mail_res() {
  SharedDtor();
}

void dbs_gs_user_new_arena_mail_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dbs_gs_user_new_arena_mail_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_user_new_arena_mail_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_user_new_arena_mail_res_descriptor_;
}

const dbs_gs_user_new_arena_mail_res& dbs_gs_user_new_arena_mail_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_user_new_arena_mail_res* dbs_gs_user_new_arena_mail_res::default_instance_ = NULL;

dbs_gs_user_new_arena_mail_res* dbs_gs_user_new_arena_mail_res::New() const {
  return new dbs_gs_user_new_arena_mail_res;
}

void dbs_gs_user_new_arena_mail_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_user_new_arena_mail_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        break;
      }

      // repeated .arena_mail mails = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_user_new_arena_mail_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // repeated .arena_mail mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_user_new_arena_mail_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // repeated .arena_mail mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_user_new_arena_mail_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  // repeated .arena_mail mails = 2;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_user_new_arena_mail_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_user_new_arena_mail_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_user_new_arena_mail_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_user_new_arena_mail_res::MergeFrom(const dbs_gs_user_new_arena_mail_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_user_new_arena_mail_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_user_new_arena_mail_res::CopyFrom(const dbs_gs_user_new_arena_mail_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_user_new_arena_mail_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mails_size(); i++) {
    if (!this->mails(i).IsInitialized()) return false;
  }
  return true;
}

void dbs_gs_user_new_arena_mail_res::Swap(dbs_gs_user_new_arena_mail_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    mails_.Swap(&other->mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_user_new_arena_mail_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_user_new_arena_mail_res_descriptor_;
  metadata.reflection = dbs_gs_user_new_arena_mail_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_dbs_edit_name_req::kUserIdFieldNumber;
const int gs_dbs_edit_name_req::kNameFieldNumber;
#endif  // !_MSC_VER

gs_dbs_edit_name_req::gs_dbs_edit_name_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_edit_name_req::InitAsDefaultInstance() {
}

gs_dbs_edit_name_req::gs_dbs_edit_name_req(const gs_dbs_edit_name_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_edit_name_req::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_edit_name_req::~gs_dbs_edit_name_req() {
  SharedDtor();
}

void gs_dbs_edit_name_req::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void gs_dbs_edit_name_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_edit_name_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_edit_name_req_descriptor_;
}

const gs_dbs_edit_name_req& gs_dbs_edit_name_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_edit_name_req* gs_dbs_edit_name_req::default_instance_ = NULL;

gs_dbs_edit_name_req* gs_dbs_edit_name_req::New() const {
  return new gs_dbs_edit_name_req;
}

void gs_dbs_edit_name_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_edit_name_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_edit_name_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_edit_name_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_edit_name_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_edit_name_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_edit_name_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_edit_name_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_edit_name_req::MergeFrom(const gs_dbs_edit_name_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_edit_name_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_edit_name_req::CopyFrom(const gs_dbs_edit_name_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_edit_name_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gs_dbs_edit_name_req::Swap(gs_dbs_edit_name_req* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_edit_name_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_edit_name_req_descriptor_;
  metadata.reflection = gs_dbs_edit_name_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dbs_gs_edit_name_res::kErrorCodeFieldNumber;
const int dbs_gs_edit_name_res::kUserIdFieldNumber;
const int dbs_gs_edit_name_res::kNameFieldNumber;
#endif  // !_MSC_VER

dbs_gs_edit_name_res::dbs_gs_edit_name_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_edit_name_res::InitAsDefaultInstance() {
}

dbs_gs_edit_name_res::dbs_gs_edit_name_res(const dbs_gs_edit_name_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_edit_name_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  user_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_edit_name_res::~dbs_gs_edit_name_res() {
  SharedDtor();
}

void dbs_gs_edit_name_res::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void dbs_gs_edit_name_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_edit_name_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_edit_name_res_descriptor_;
}

const dbs_gs_edit_name_res& dbs_gs_edit_name_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_edit_name_res* dbs_gs_edit_name_res::default_instance_ = NULL;

dbs_gs_edit_name_res* dbs_gs_edit_name_res::New() const {
  return new dbs_gs_edit_name_res;
}

void dbs_gs_edit_name_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    user_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_edit_name_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_edit_name_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_edit_name_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_edit_name_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_edit_name_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_edit_name_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_edit_name_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_edit_name_res::MergeFrom(const dbs_gs_edit_name_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_edit_name_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_edit_name_res::CopyFrom(const dbs_gs_edit_name_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_edit_name_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void dbs_gs_edit_name_res::Swap(dbs_gs_edit_name_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(user_id_, other->user_id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_edit_name_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_edit_name_res_descriptor_;
  metadata.reflection = dbs_gs_edit_name_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* gs_dbs_user_friend_op_req_OP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_friend_op_req_OP_TYPE_descriptor_;
}
bool gs_dbs_user_friend_op_req_OP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_dbs_user_friend_op_req_OP_TYPE gs_dbs_user_friend_op_req::FRIEND_GIVE_ELEMENT;
const gs_dbs_user_friend_op_req_OP_TYPE gs_dbs_user_friend_op_req::FRIEND_GIVE_UP_APPLY;
const gs_dbs_user_friend_op_req_OP_TYPE gs_dbs_user_friend_op_req::FRIEND_AFFIRM_AGREE;
const gs_dbs_user_friend_op_req_OP_TYPE gs_dbs_user_friend_op_req::FRIEND_AFFIRM_REFUSE;
const gs_dbs_user_friend_op_req_OP_TYPE gs_dbs_user_friend_op_req::FRIEND_DEL_FRIEND;
const gs_dbs_user_friend_op_req_OP_TYPE gs_dbs_user_friend_op_req::FRIEND_ADD_FRIEND;
const gs_dbs_user_friend_op_req_OP_TYPE gs_dbs_user_friend_op_req::OP_TYPE_MIN;
const gs_dbs_user_friend_op_req_OP_TYPE gs_dbs_user_friend_op_req::OP_TYPE_MAX;
const int gs_dbs_user_friend_op_req::OP_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_dbs_user_friend_op_req::kOpTypeFieldNumber;
const int gs_dbs_user_friend_op_req::kUserIdFieldNumber;
const int gs_dbs_user_friend_op_req::kFriendUserIdFieldNumber;
const int gs_dbs_user_friend_op_req::kBaseInfoFieldNumber;
#endif  // !_MSC_VER

gs_dbs_user_friend_op_req::gs_dbs_user_friend_op_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_user_friend_op_req::InitAsDefaultInstance() {
  base_info_ = const_cast< ::friend_base_info*>(&::friend_base_info::default_instance());
}

gs_dbs_user_friend_op_req::gs_dbs_user_friend_op_req(const gs_dbs_user_friend_op_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_user_friend_op_req::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  user_id_ = 0u;
  friend_user_id_ = 0u;
  base_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_user_friend_op_req::~gs_dbs_user_friend_op_req() {
  SharedDtor();
}

void gs_dbs_user_friend_op_req::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
  }
}

void gs_dbs_user_friend_op_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_user_friend_op_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_user_friend_op_req_descriptor_;
}

const gs_dbs_user_friend_op_req& gs_dbs_user_friend_op_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_user_friend_op_req* gs_dbs_user_friend_op_req::default_instance_ = NULL;

gs_dbs_user_friend_op_req* gs_dbs_user_friend_op_req::New() const {
  return new gs_dbs_user_friend_op_req;
}

void gs_dbs_user_friend_op_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    user_id_ = 0u;
    friend_user_id_ = 0u;
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::friend_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_user_friend_op_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_user_friend_op_req.OP_TYPE op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_user_friend_op_req_OP_TYPE_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_user_friend_op_req_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friend_user_id;
        break;
      }

      // optional uint32 friend_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_user_id_)));
          set_has_friend_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_base_info;
        break;
      }

      // optional .friend_base_info base_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_user_friend_op_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_user_friend_op_req.OP_TYPE op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional uint32 friend_user_id = 3;
  if (has_friend_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->friend_user_id(), output);
  }

  // optional .friend_base_info base_info = 4;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_user_friend_op_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_user_friend_op_req.OP_TYPE op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional uint32 friend_user_id = 3;
  if (has_friend_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->friend_user_id(), target);
  }

  // optional .friend_base_info base_info = 4;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->base_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_user_friend_op_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_user_friend_op_req.OP_TYPE op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 friend_user_id = 3;
    if (has_friend_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_user_id());
    }

    // optional .friend_base_info base_info = 4;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_user_friend_op_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_user_friend_op_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_user_friend_op_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_user_friend_op_req::MergeFrom(const gs_dbs_user_friend_op_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_user_id()) {
      set_friend_user_id(from.friend_user_id());
    }
    if (from.has_base_info()) {
      mutable_base_info()->::friend_base_info::MergeFrom(from.base_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_user_friend_op_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_user_friend_op_req::CopyFrom(const gs_dbs_user_friend_op_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_user_friend_op_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_user_friend_op_req::Swap(gs_dbs_user_friend_op_req* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(user_id_, other->user_id_);
    std::swap(friend_user_id_, other->friend_user_id_);
    std::swap(base_info_, other->base_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_user_friend_op_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_user_friend_op_req_descriptor_;
  metadata.reflection = gs_dbs_user_friend_op_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dbs_gs_user_friend_op_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

dbs_gs_user_friend_op_res::dbs_gs_user_friend_op_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_user_friend_op_res::InitAsDefaultInstance() {
}

dbs_gs_user_friend_op_res::dbs_gs_user_friend_op_res(const dbs_gs_user_friend_op_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_user_friend_op_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_user_friend_op_res::~dbs_gs_user_friend_op_res() {
  SharedDtor();
}

void dbs_gs_user_friend_op_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dbs_gs_user_friend_op_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_user_friend_op_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_user_friend_op_res_descriptor_;
}

const dbs_gs_user_friend_op_res& dbs_gs_user_friend_op_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_user_friend_op_res* dbs_gs_user_friend_op_res::default_instance_ = NULL;

dbs_gs_user_friend_op_res* dbs_gs_user_friend_op_res::New() const {
  return new dbs_gs_user_friend_op_res;
}

void dbs_gs_user_friend_op_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_user_friend_op_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_user_friend_op_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_user_friend_op_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_user_friend_op_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_user_friend_op_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_user_friend_op_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_user_friend_op_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_user_friend_op_res::MergeFrom(const dbs_gs_user_friend_op_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_user_friend_op_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_user_friend_op_res::CopyFrom(const dbs_gs_user_friend_op_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_user_friend_op_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void dbs_gs_user_friend_op_res::Swap(dbs_gs_user_friend_op_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_user_friend_op_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_user_friend_op_res_descriptor_;
  metadata.reflection = dbs_gs_user_friend_op_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_dbs_search_user_req::kUserIdFieldNumber;
const int gs_dbs_search_user_req::kSearchIdFieldNumber;
const int gs_dbs_search_user_req::kSearchNameFieldNumber;
#endif  // !_MSC_VER

gs_dbs_search_user_req::gs_dbs_search_user_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_search_user_req::InitAsDefaultInstance() {
}

gs_dbs_search_user_req::gs_dbs_search_user_req(const gs_dbs_search_user_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_search_user_req::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  search_id_ = 0u;
  search_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_search_user_req::~gs_dbs_search_user_req() {
  SharedDtor();
}

void gs_dbs_search_user_req::SharedDtor() {
  if (search_name_ != &::google::protobuf::internal::kEmptyString) {
    delete search_name_;
  }
  if (this != default_instance_) {
  }
}

void gs_dbs_search_user_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_search_user_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_search_user_req_descriptor_;
}

const gs_dbs_search_user_req& gs_dbs_search_user_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_search_user_req* gs_dbs_search_user_req::default_instance_ = NULL;

gs_dbs_search_user_req* gs_dbs_search_user_req::New() const {
  return new gs_dbs_search_user_req;
}

void gs_dbs_search_user_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    search_id_ = 0u;
    if (has_search_name()) {
      if (search_name_ != &::google::protobuf::internal::kEmptyString) {
        search_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_search_user_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_search_id;
        break;
      }

      // optional uint32 search_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_id_)));
          set_has_search_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_search_name;
        break;
      }

      // optional string search_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->search_name().data(), this->search_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_search_user_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional uint32 search_id = 2;
  if (has_search_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->search_id(), output);
  }

  // optional string search_name = 3;
  if (has_search_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_name().data(), this->search_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->search_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_search_user_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional uint32 search_id = 2;
  if (has_search_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->search_id(), target);
  }

  // optional string search_name = 3;
  if (has_search_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_name().data(), this->search_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->search_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_search_user_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 search_id = 2;
    if (has_search_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_id());
    }

    // optional string search_name = 3;
    if (has_search_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_search_user_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_search_user_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_search_user_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_search_user_req::MergeFrom(const gs_dbs_search_user_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_search_id()) {
      set_search_id(from.search_id());
    }
    if (from.has_search_name()) {
      set_search_name(from.search_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_search_user_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_search_user_req::CopyFrom(const gs_dbs_search_user_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_search_user_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_dbs_search_user_req::Swap(gs_dbs_search_user_req* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(search_id_, other->search_id_);
    std::swap(search_name_, other->search_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_search_user_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_search_user_req_descriptor_;
  metadata.reflection = gs_dbs_search_user_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dbs_gs_search_user_res::kErrorCodeFieldNumber;
const int dbs_gs_search_user_res::kUserIdFieldNumber;
const int dbs_gs_search_user_res::kBaseInfoFieldNumber;
#endif  // !_MSC_VER

dbs_gs_search_user_res::dbs_gs_search_user_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_search_user_res::InitAsDefaultInstance() {
  base_info_ = const_cast< ::friend_base_info*>(&::friend_base_info::default_instance());
}

dbs_gs_search_user_res::dbs_gs_search_user_res(const dbs_gs_search_user_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_search_user_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  user_id_ = 0u;
  base_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_search_user_res::~dbs_gs_search_user_res() {
  SharedDtor();
}

void dbs_gs_search_user_res::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
  }
}

void dbs_gs_search_user_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_search_user_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_search_user_res_descriptor_;
}

const dbs_gs_search_user_res& dbs_gs_search_user_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_search_user_res* dbs_gs_search_user_res::default_instance_ = NULL;

dbs_gs_search_user_res* dbs_gs_search_user_res::New() const {
  return new dbs_gs_search_user_res;
}

void dbs_gs_search_user_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    user_id_ = 0u;
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::friend_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_search_user_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_base_info;
        break;
      }

      // optional .friend_base_info base_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_search_user_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional .friend_base_info base_info = 3;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_search_user_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional .friend_base_info base_info = 3;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_search_user_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional .friend_base_info base_info = 3;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_search_user_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_search_user_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_search_user_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_search_user_res::MergeFrom(const dbs_gs_search_user_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_base_info()) {
      mutable_base_info()->::friend_base_info::MergeFrom(from.base_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_search_user_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_search_user_res::CopyFrom(const dbs_gs_search_user_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_search_user_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  return true;
}

void dbs_gs_search_user_res::Swap(dbs_gs_search_user_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(user_id_, other->user_id_);
    std::swap(base_info_, other->base_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_search_user_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_search_user_res_descriptor_;
  metadata.reflection = dbs_gs_search_user_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* gs_dbs_friend_offline_req_OP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_friend_offline_req_OP_TYPE_descriptor_;
}
bool gs_dbs_friend_offline_req_OP_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_dbs_friend_offline_req_OP_TYPE gs_dbs_friend_offline_req::ADD_FRIEND;
const gs_dbs_friend_offline_req_OP_TYPE gs_dbs_friend_offline_req::AFFIRM_AGREE1;
const gs_dbs_friend_offline_req_OP_TYPE gs_dbs_friend_offline_req::AFFIRM_AGREEN;
const gs_dbs_friend_offline_req_OP_TYPE gs_dbs_friend_offline_req::OP_TYPE_MIN;
const gs_dbs_friend_offline_req_OP_TYPE gs_dbs_friend_offline_req::OP_TYPE_MAX;
const int gs_dbs_friend_offline_req::OP_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_dbs_friend_offline_req::kOpTypeFieldNumber;
const int gs_dbs_friend_offline_req::kUserIdFieldNumber;
const int gs_dbs_friend_offline_req::kFriendIdFieldNumber;
const int gs_dbs_friend_offline_req::kFriendInfoFieldNumber;
const int gs_dbs_friend_offline_req::kMeInfoFieldNumber;
const int gs_dbs_friend_offline_req::kAffirmIdsFieldNumber;
#endif  // !_MSC_VER

gs_dbs_friend_offline_req::gs_dbs_friend_offline_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_friend_offline_req::InitAsDefaultInstance() {
  friend_info_ = const_cast< ::friend_base_info*>(&::friend_base_info::default_instance());
  me_info_ = const_cast< ::friend_base_info*>(&::friend_base_info::default_instance());
}

gs_dbs_friend_offline_req::gs_dbs_friend_offline_req(const gs_dbs_friend_offline_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_friend_offline_req::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  user_id_ = 0u;
  friend_id_ = 0u;
  friend_info_ = NULL;
  me_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_friend_offline_req::~gs_dbs_friend_offline_req() {
  SharedDtor();
}

void gs_dbs_friend_offline_req::SharedDtor() {
  if (this != default_instance_) {
    delete friend_info_;
    delete me_info_;
  }
}

void gs_dbs_friend_offline_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_friend_offline_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_friend_offline_req_descriptor_;
}

const gs_dbs_friend_offline_req& gs_dbs_friend_offline_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_friend_offline_req* gs_dbs_friend_offline_req::default_instance_ = NULL;

gs_dbs_friend_offline_req* gs_dbs_friend_offline_req::New() const {
  return new gs_dbs_friend_offline_req;
}

void gs_dbs_friend_offline_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    user_id_ = 0u;
    friend_id_ = 0u;
    if (has_friend_info()) {
      if (friend_info_ != NULL) friend_info_->::friend_base_info::Clear();
    }
    if (has_me_info()) {
      if (me_info_ != NULL) me_info_->::friend_base_info::Clear();
    }
  }
  affirm_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_friend_offline_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_friend_offline_req.OP_TYPE op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_friend_offline_req_OP_TYPE_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_friend_offline_req_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friend_id;
        break;
      }

      // optional uint32 friend_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_friend_info;
        break;
      }

      // optional .friend_base_info friend_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_me_info;
        break;
      }

      // optional .friend_base_info me_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_me_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_me_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_affirm_ids;
        break;
      }

      // repeated uint32 affirm_ids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_affirm_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_affirm_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_affirm_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_affirm_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_friend_offline_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_friend_offline_req.OP_TYPE op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional uint32 friend_id = 3;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->friend_id(), output);
  }

  // optional .friend_base_info friend_info = 4;
  if (has_friend_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->friend_info(), output);
  }

  // optional .friend_base_info me_info = 5;
  if (has_me_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->me_info(), output);
  }

  // repeated uint32 affirm_ids = 6;
  for (int i = 0; i < this->affirm_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->affirm_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_friend_offline_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_friend_offline_req.OP_TYPE op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional uint32 friend_id = 3;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->friend_id(), target);
  }

  // optional .friend_base_info friend_info = 4;
  if (has_friend_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->friend_info(), target);
  }

  // optional .friend_base_info me_info = 5;
  if (has_me_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->me_info(), target);
  }

  // repeated uint32 affirm_ids = 6;
  for (int i = 0; i < this->affirm_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->affirm_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_friend_offline_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_friend_offline_req.OP_TYPE op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 friend_id = 3;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_id());
    }

    // optional .friend_base_info friend_info = 4;
    if (has_friend_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_info());
    }

    // optional .friend_base_info me_info = 5;
    if (has_me_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->me_info());
    }

  }
  // repeated uint32 affirm_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->affirm_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->affirm_ids(i));
    }
    total_size += 1 * this->affirm_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_friend_offline_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_friend_offline_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_friend_offline_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_friend_offline_req::MergeFrom(const gs_dbs_friend_offline_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  affirm_ids_.MergeFrom(from.affirm_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_friend_info()) {
      mutable_friend_info()->::friend_base_info::MergeFrom(from.friend_info());
    }
    if (from.has_me_info()) {
      mutable_me_info()->::friend_base_info::MergeFrom(from.me_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_friend_offline_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_friend_offline_req::CopyFrom(const gs_dbs_friend_offline_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_friend_offline_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_friend_info()) {
    if (!this->friend_info().IsInitialized()) return false;
  }
  if (has_me_info()) {
    if (!this->me_info().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_friend_offline_req::Swap(gs_dbs_friend_offline_req* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(user_id_, other->user_id_);
    std::swap(friend_id_, other->friend_id_);
    std::swap(friend_info_, other->friend_info_);
    std::swap(me_info_, other->me_info_);
    affirm_ids_.Swap(&other->affirm_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_friend_offline_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_friend_offline_req_descriptor_;
  metadata.reflection = gs_dbs_friend_offline_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dbs_gs_friend_offline_res::kErrorCodeFieldNumber;
const int dbs_gs_friend_offline_res::kOpTypeFieldNumber;
const int dbs_gs_friend_offline_res::kUserIdFieldNumber;
const int dbs_gs_friend_offline_res::kInfoFieldNumber;
const int dbs_gs_friend_offline_res::kAffirmIdsFieldNumber;
#endif  // !_MSC_VER

dbs_gs_friend_offline_res::dbs_gs_friend_offline_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_friend_offline_res::InitAsDefaultInstance() {
  info_ = const_cast< ::friend_base_info*>(&::friend_base_info::default_instance());
}

dbs_gs_friend_offline_res::dbs_gs_friend_offline_res(const dbs_gs_friend_offline_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_friend_offline_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  op_type_ = 1;
  user_id_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_friend_offline_res::~dbs_gs_friend_offline_res() {
  SharedDtor();
}

void dbs_gs_friend_offline_res::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void dbs_gs_friend_offline_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_friend_offline_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_friend_offline_res_descriptor_;
}

const dbs_gs_friend_offline_res& dbs_gs_friend_offline_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_friend_offline_res* dbs_gs_friend_offline_res::default_instance_ = NULL;

dbs_gs_friend_offline_res* dbs_gs_friend_offline_res::New() const {
  return new dbs_gs_friend_offline_res;
}

void dbs_gs_friend_offline_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
    op_type_ = 1;
    user_id_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::friend_base_info::Clear();
    }
  }
  affirm_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_friend_offline_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op_type;
        break;
      }

      // required .gs_dbs_friend_offline_req.OP_TYPE op_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_friend_offline_req_OP_TYPE_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_friend_offline_req_OP_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .friend_base_info info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_affirm_ids;
        break;
      }

      // repeated uint32 affirm_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_affirm_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_affirm_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_affirm_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_affirm_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_friend_offline_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // required .gs_dbs_friend_offline_req.OP_TYPE op_type = 2;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->op_type(), output);
  }

  // required uint32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_id(), output);
  }

  // optional .friend_base_info info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  // repeated uint32 affirm_ids = 5;
  for (int i = 0; i < this->affirm_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->affirm_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_friend_offline_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // required .gs_dbs_friend_offline_req.OP_TYPE op_type = 2;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->op_type(), target);
  }

  // required uint32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_id(), target);
  }

  // optional .friend_base_info info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  // repeated uint32 affirm_ids = 5;
  for (int i = 0; i < this->affirm_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->affirm_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_friend_offline_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

    // required .gs_dbs_friend_offline_req.OP_TYPE op_type = 2;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // required uint32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional .friend_base_info info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated uint32 affirm_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->affirm_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->affirm_ids(i));
    }
    total_size += 1 * this->affirm_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_friend_offline_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_friend_offline_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_friend_offline_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_friend_offline_res::MergeFrom(const dbs_gs_friend_offline_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  affirm_ids_.MergeFrom(from.affirm_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_info()) {
      mutable_info()->::friend_base_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_friend_offline_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_friend_offline_res::CopyFrom(const dbs_gs_friend_offline_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_friend_offline_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void dbs_gs_friend_offline_res::Swap(dbs_gs_friend_offline_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(op_type_, other->op_type_);
    std::swap(user_id_, other->user_id_);
    std::swap(info_, other->info_);
    affirm_ids_.Swap(&other->affirm_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_friend_offline_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_friend_offline_res_descriptor_;
  metadata.reflection = dbs_gs_friend_offline_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

gs_dbs_rank_req::gs_dbs_rank_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_rank_req::InitAsDefaultInstance() {
}

gs_dbs_rank_req::gs_dbs_rank_req(const gs_dbs_rank_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_rank_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_rank_req::~gs_dbs_rank_req() {
  SharedDtor();
}

void gs_dbs_rank_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_rank_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_rank_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_rank_req_descriptor_;
}

const gs_dbs_rank_req& gs_dbs_rank_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_rank_req* gs_dbs_rank_req::default_instance_ = NULL;

gs_dbs_rank_req* gs_dbs_rank_req::New() const {
  return new gs_dbs_rank_req;
}

void gs_dbs_rank_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_rank_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void gs_dbs_rank_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_rank_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_rank_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_rank_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_rank_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_rank_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_rank_req::MergeFrom(const gs_dbs_rank_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_rank_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_rank_req::CopyFrom(const gs_dbs_rank_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_rank_req::IsInitialized() const {

  return true;
}

void gs_dbs_rank_req::Swap(gs_dbs_rank_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_rank_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_rank_req_descriptor_;
  metadata.reflection = gs_dbs_rank_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dbs_gs_rank_res_rank_brief_info::kRankFieldNumber;
const int dbs_gs_rank_res_rank_brief_info::kUserIdFieldNumber;
#endif  // !_MSC_VER

dbs_gs_rank_res_rank_brief_info::dbs_gs_rank_res_rank_brief_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_rank_res_rank_brief_info::InitAsDefaultInstance() {
}

dbs_gs_rank_res_rank_brief_info::dbs_gs_rank_res_rank_brief_info(const dbs_gs_rank_res_rank_brief_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_rank_res_rank_brief_info::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_rank_res_rank_brief_info::~dbs_gs_rank_res_rank_brief_info() {
  SharedDtor();
}

void dbs_gs_rank_res_rank_brief_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dbs_gs_rank_res_rank_brief_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_rank_res_rank_brief_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_rank_res_rank_brief_info_descriptor_;
}

const dbs_gs_rank_res_rank_brief_info& dbs_gs_rank_res_rank_brief_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_rank_res_rank_brief_info* dbs_gs_rank_res_rank_brief_info::default_instance_ = NULL;

dbs_gs_rank_res_rank_brief_info* dbs_gs_rank_res_rank_brief_info::New() const {
  return new dbs_gs_rank_res_rank_brief_info;
}

void dbs_gs_rank_res_rank_brief_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_rank_res_rank_brief_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_rank_res_rank_brief_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_rank_res_rank_brief_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_rank_res_rank_brief_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_rank_res_rank_brief_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_rank_res_rank_brief_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_rank_res_rank_brief_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_rank_res_rank_brief_info::MergeFrom(const dbs_gs_rank_res_rank_brief_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_rank_res_rank_brief_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_rank_res_rank_brief_info::CopyFrom(const dbs_gs_rank_res_rank_brief_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_rank_res_rank_brief_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void dbs_gs_rank_res_rank_brief_info::Swap(dbs_gs_rank_res_rank_brief_info* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_rank_res_rank_brief_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_rank_res_rank_brief_info_descriptor_;
  metadata.reflection = dbs_gs_rank_res_rank_brief_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int dbs_gs_rank_res_rank_info::kUserIdFieldNumber;
const int dbs_gs_rank_res_rank_info::kHeadIdFieldNumber;
const int dbs_gs_rank_res_rank_info::kHeadFrameIdFieldNumber;
const int dbs_gs_rank_res_rank_info::kLevelFieldNumber;
const int dbs_gs_rank_res_rank_info::kNameFieldNumber;
const int dbs_gs_rank_res_rank_info::kVipFieldNumber;
const int dbs_gs_rank_res_rank_info::kFightPowerFieldNumber;
#endif  // !_MSC_VER

dbs_gs_rank_res_rank_info::dbs_gs_rank_res_rank_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_rank_res_rank_info::InitAsDefaultInstance() {
}

dbs_gs_rank_res_rank_info::dbs_gs_rank_res_rank_info(const dbs_gs_rank_res_rank_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_rank_res_rank_info::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  head_id_ = 0u;
  head_frame_id_ = 0u;
  level_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vip_ = 0u;
  fight_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_rank_res_rank_info::~dbs_gs_rank_res_rank_info() {
  SharedDtor();
}

void dbs_gs_rank_res_rank_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void dbs_gs_rank_res_rank_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_rank_res_rank_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_rank_res_rank_info_descriptor_;
}

const dbs_gs_rank_res_rank_info& dbs_gs_rank_res_rank_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_rank_res_rank_info* dbs_gs_rank_res_rank_info::default_instance_ = NULL;

dbs_gs_rank_res_rank_info* dbs_gs_rank_res_rank_info::New() const {
  return new dbs_gs_rank_res_rank_info;
}

void dbs_gs_rank_res_rank_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    head_id_ = 0u;
    head_frame_id_ = 0u;
    level_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    vip_ = 0u;
    fight_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_rank_res_rank_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_head_id;
        break;
      }

      // required uint32 head_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_head_frame_id;
        break;
      }

      // required uint32 head_frame_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_frame_id_)));
          set_has_head_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip;
        break;
      }

      // required uint32 vip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fight_power;
        break;
      }

      // required uint32 fight_power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_rank_res_rank_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 head_id = 2;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->head_id(), output);
  }

  // required uint32 head_frame_id = 3;
  if (has_head_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->head_frame_id(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // required uint32 vip = 6;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vip(), output);
  }

  // required uint32 fight_power = 7;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fight_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_rank_res_rank_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 head_id = 2;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->head_id(), target);
  }

  // required uint32 head_frame_id = 3;
  if (has_head_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->head_frame_id(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required uint32 vip = 6;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->vip(), target);
  }

  // required uint32 fight_power = 7;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fight_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_rank_res_rank_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 head_id = 2;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // required uint32 head_frame_id = 3;
    if (has_head_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_frame_id());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 vip = 6;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

    // required uint32 fight_power = 7;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_rank_res_rank_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_rank_res_rank_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_rank_res_rank_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_rank_res_rank_info::MergeFrom(const dbs_gs_rank_res_rank_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_head_frame_id()) {
      set_head_frame_id(from.head_frame_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_rank_res_rank_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_rank_res_rank_info::CopyFrom(const dbs_gs_rank_res_rank_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_rank_res_rank_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void dbs_gs_rank_res_rank_info::Swap(dbs_gs_rank_res_rank_info* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(head_id_, other->head_id_);
    std::swap(head_frame_id_, other->head_frame_id_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(vip_, other->vip_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_rank_res_rank_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_rank_res_rank_info_descriptor_;
  metadata.reflection = dbs_gs_rank_res_rank_info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int dbs_gs_rank_res::kErrorCodeFieldNumber;
const int dbs_gs_rank_res::kLevelBriefRanksFieldNumber;
const int dbs_gs_rank_res::kFightPowerBriefRanksFieldNumber;
const int dbs_gs_rank_res::kLevelRanksFieldNumber;
const int dbs_gs_rank_res::kFightPowerRanksFieldNumber;
const int dbs_gs_rank_res::kArenaRanksFieldNumber;
#endif  // !_MSC_VER

dbs_gs_rank_res::dbs_gs_rank_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_rank_res::InitAsDefaultInstance() {
}

dbs_gs_rank_res::dbs_gs_rank_res(const dbs_gs_rank_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_rank_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_rank_res::~dbs_gs_rank_res() {
  SharedDtor();
}

void dbs_gs_rank_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dbs_gs_rank_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_rank_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_rank_res_descriptor_;
}

const dbs_gs_rank_res& dbs_gs_rank_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_rank_res* dbs_gs_rank_res::default_instance_ = NULL;

dbs_gs_rank_res* dbs_gs_rank_res::New() const {
  return new dbs_gs_rank_res;
}

void dbs_gs_rank_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0u;
  }
  level_brief_ranks_.Clear();
  fight_power_brief_ranks_.Clear();
  level_ranks_.Clear();
  fight_power_ranks_.Clear();
  arena_ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_rank_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_level_brief_ranks;
        break;
      }

      // repeated .dbs_gs_rank_res.rank_brief_info level_brief_ranks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_brief_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_brief_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_level_brief_ranks;
        if (input->ExpectTag(26)) goto parse_fight_power_brief_ranks;
        break;
      }

      // repeated .dbs_gs_rank_res.rank_brief_info fight_power_brief_ranks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_power_brief_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fight_power_brief_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fight_power_brief_ranks;
        if (input->ExpectTag(34)) goto parse_level_ranks;
        break;
      }

      // repeated .dbs_gs_rank_res.rank_info level_ranks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_level_ranks;
        if (input->ExpectTag(42)) goto parse_fight_power_ranks;
        break;
      }

      // repeated .dbs_gs_rank_res.rank_info fight_power_ranks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fight_power_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fight_power_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fight_power_ranks;
        if (input->ExpectTag(50)) goto parse_arena_ranks;
        break;
      }

      // repeated .dbs_gs_rank_res.rank_info arena_ranks = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arena_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_arena_ranks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_rank_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->error_code(), output);
  }

  // repeated .dbs_gs_rank_res.rank_brief_info level_brief_ranks = 2;
  for (int i = 0; i < this->level_brief_ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->level_brief_ranks(i), output);
  }

  // repeated .dbs_gs_rank_res.rank_brief_info fight_power_brief_ranks = 3;
  for (int i = 0; i < this->fight_power_brief_ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fight_power_brief_ranks(i), output);
  }

  // repeated .dbs_gs_rank_res.rank_info level_ranks = 4;
  for (int i = 0; i < this->level_ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->level_ranks(i), output);
  }

  // repeated .dbs_gs_rank_res.rank_info fight_power_ranks = 5;
  for (int i = 0; i < this->fight_power_ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fight_power_ranks(i), output);
  }

  // repeated .dbs_gs_rank_res.rank_info arena_ranks = 6;
  for (int i = 0; i < this->arena_ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arena_ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_rank_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->error_code(), target);
  }

  // repeated .dbs_gs_rank_res.rank_brief_info level_brief_ranks = 2;
  for (int i = 0; i < this->level_brief_ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->level_brief_ranks(i), target);
  }

  // repeated .dbs_gs_rank_res.rank_brief_info fight_power_brief_ranks = 3;
  for (int i = 0; i < this->fight_power_brief_ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fight_power_brief_ranks(i), target);
  }

  // repeated .dbs_gs_rank_res.rank_info level_ranks = 4;
  for (int i = 0; i < this->level_ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->level_ranks(i), target);
  }

  // repeated .dbs_gs_rank_res.rank_info fight_power_ranks = 5;
  for (int i = 0; i < this->fight_power_ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fight_power_ranks(i), target);
  }

  // repeated .dbs_gs_rank_res.rank_info arena_ranks = 6;
  for (int i = 0; i < this->arena_ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arena_ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_rank_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->error_code());
    }

  }
  // repeated .dbs_gs_rank_res.rank_brief_info level_brief_ranks = 2;
  total_size += 1 * this->level_brief_ranks_size();
  for (int i = 0; i < this->level_brief_ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_brief_ranks(i));
  }

  // repeated .dbs_gs_rank_res.rank_brief_info fight_power_brief_ranks = 3;
  total_size += 1 * this->fight_power_brief_ranks_size();
  for (int i = 0; i < this->fight_power_brief_ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fight_power_brief_ranks(i));
  }

  // repeated .dbs_gs_rank_res.rank_info level_ranks = 4;
  total_size += 1 * this->level_ranks_size();
  for (int i = 0; i < this->level_ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_ranks(i));
  }

  // repeated .dbs_gs_rank_res.rank_info fight_power_ranks = 5;
  total_size += 1 * this->fight_power_ranks_size();
  for (int i = 0; i < this->fight_power_ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fight_power_ranks(i));
  }

  // repeated .dbs_gs_rank_res.rank_info arena_ranks = 6;
  total_size += 1 * this->arena_ranks_size();
  for (int i = 0; i < this->arena_ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arena_ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_rank_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_rank_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_rank_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_rank_res::MergeFrom(const dbs_gs_rank_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  level_brief_ranks_.MergeFrom(from.level_brief_ranks_);
  fight_power_brief_ranks_.MergeFrom(from.fight_power_brief_ranks_);
  level_ranks_.MergeFrom(from.level_ranks_);
  fight_power_ranks_.MergeFrom(from.fight_power_ranks_);
  arena_ranks_.MergeFrom(from.arena_ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_rank_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_rank_res::CopyFrom(const dbs_gs_rank_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_rank_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < level_brief_ranks_size(); i++) {
    if (!this->level_brief_ranks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < fight_power_brief_ranks_size(); i++) {
    if (!this->fight_power_brief_ranks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < level_ranks_size(); i++) {
    if (!this->level_ranks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < fight_power_ranks_size(); i++) {
    if (!this->fight_power_ranks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < arena_ranks_size(); i++) {
    if (!this->arena_ranks(i).IsInitialized()) return false;
  }
  return true;
}

void dbs_gs_rank_res::Swap(dbs_gs_rank_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    level_brief_ranks_.Swap(&other->level_brief_ranks_);
    fight_power_brief_ranks_.Swap(&other->fight_power_brief_ranks_);
    level_ranks_.Swap(&other->level_ranks_);
    fight_power_ranks_.Swap(&other->fight_power_ranks_);
    arena_ranks_.Swap(&other->arena_ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_rank_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_rank_res_descriptor_;
  metadata.reflection = dbs_gs_rank_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_new_guild::kIdFieldNumber;
const int gs_dbs_guild_op_req_struct_new_guild::kNameFieldNumber;
const int gs_dbs_guild_op_req_struct_new_guild::kCreatorUserIdFieldNumber;
const int gs_dbs_guild_op_req_struct_new_guild::kCreateTimeFieldNumber;
const int gs_dbs_guild_op_req_struct_new_guild::kPresidentUserIdFieldNumber;
const int gs_dbs_guild_op_req_struct_new_guild::kStatusFieldNumber;
const int gs_dbs_guild_op_req_struct_new_guild::kFlagFieldNumber;
const int gs_dbs_guild_op_req_struct_new_guild::kContributionPointFieldNumber;
const int gs_dbs_guild_op_req_struct_new_guild::kCoinFieldNumber;
const int gs_dbs_guild_op_req_struct_new_guild::kAnnouncementFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_new_guild::gs_dbs_guild_op_req_struct_new_guild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_new_guild::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_new_guild::gs_dbs_guild_op_req_struct_new_guild(const gs_dbs_guild_op_req_struct_new_guild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_new_guild::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creator_user_id_ = 0u;
  create_time_ = 0u;
  president_user_id_ = 0u;
  status_ = 0;
  flag_ = 0u;
  contribution_point_ = 0u;
  coin_ = 0u;
  announcement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_new_guild::~gs_dbs_guild_op_req_struct_new_guild() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_new_guild::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (announcement_ != &::google::protobuf::internal::kEmptyString) {
    delete announcement_;
  }
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_new_guild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_new_guild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_new_guild_descriptor_;
}

const gs_dbs_guild_op_req_struct_new_guild& gs_dbs_guild_op_req_struct_new_guild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_new_guild* gs_dbs_guild_op_req_struct_new_guild::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_new_guild* gs_dbs_guild_op_req_struct_new_guild::New() const {
  return new gs_dbs_guild_op_req_struct_new_guild;
}

void gs_dbs_guild_op_req_struct_new_guild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    creator_user_id_ = 0u;
    create_time_ = 0u;
    president_user_id_ = 0u;
    status_ = 0;
    flag_ = 0u;
    contribution_point_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    coin_ = 0u;
    if (has_announcement()) {
      if (announcement_ != &::google::protobuf::internal::kEmptyString) {
        announcement_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_new_guild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_creator_user_id;
        break;
      }

      // required uint32 creator_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creator_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_user_id_)));
          set_has_creator_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_president_user_id;
        break;
      }

      // required uint32 president_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_president_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &president_user_id_)));
          set_has_president_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // required .e_apply_switch_status status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_apply_switch_status_IsValid(value)) {
            set_status(static_cast< ::e_apply_switch_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flag;
        break;
      }

      // required uint32 flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_contribution_point;
        break;
      }

      // required uint32 contribution_point = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_point_)));
          set_has_contribution_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_coin;
        break;
      }

      // required uint32 coin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_announcement;
        break;
      }

      // required string announcement = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_announcement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announcement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->announcement().data(), this->announcement().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_new_guild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 creator_user_id = 3;
  if (has_creator_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creator_user_id(), output);
  }

  // required uint32 create_time = 4;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_time(), output);
  }

  // required uint32 president_user_id = 5;
  if (has_president_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->president_user_id(), output);
  }

  // required .e_apply_switch_status status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // required uint32 flag = 7;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flag(), output);
  }

  // required uint32 contribution_point = 9;
  if (has_contribution_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->contribution_point(), output);
  }

  // required uint32 coin = 10;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->coin(), output);
  }

  // required string announcement = 11;
  if (has_announcement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->announcement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_new_guild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 creator_user_id = 3;
  if (has_creator_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->creator_user_id(), target);
  }

  // required uint32 create_time = 4;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->create_time(), target);
  }

  // required uint32 president_user_id = 5;
  if (has_president_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->president_user_id(), target);
  }

  // required .e_apply_switch_status status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  // required uint32 flag = 7;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->flag(), target);
  }

  // required uint32 contribution_point = 9;
  if (has_contribution_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->contribution_point(), target);
  }

  // required uint32 coin = 10;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->coin(), target);
  }

  // required string announcement = 11;
  if (has_announcement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->announcement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_new_guild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 creator_user_id = 3;
    if (has_creator_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_user_id());
    }

    // required uint32 create_time = 4;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // required uint32 president_user_id = 5;
    if (has_president_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->president_user_id());
    }

    // required .e_apply_switch_status status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint32 flag = 7;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required uint32 contribution_point = 9;
    if (has_contribution_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution_point());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 coin = 10;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required string announcement = 11;
    if (has_announcement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announcement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_new_guild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_new_guild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_new_guild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_new_guild::MergeFrom(const gs_dbs_guild_op_req_struct_new_guild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_creator_user_id()) {
      set_creator_user_id(from.creator_user_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_president_user_id()) {
      set_president_user_id(from.president_user_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_contribution_point()) {
      set_contribution_point(from.contribution_point());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_announcement()) {
      set_announcement(from.announcement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_new_guild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_new_guild::CopyFrom(const gs_dbs_guild_op_req_struct_new_guild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_new_guild::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_new_guild::Swap(gs_dbs_guild_op_req_struct_new_guild* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(creator_user_id_, other->creator_user_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(president_user_id_, other->president_user_id_);
    std::swap(status_, other->status_);
    std::swap(flag_, other->flag_);
    std::swap(contribution_point_, other->contribution_point_);
    std::swap(coin_, other->coin_);
    std::swap(announcement_, other->announcement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_new_guild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_new_guild_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_new_guild_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_update_guild::kGuildIdFieldNumber;
const int gs_dbs_guild_op_req_struct_update_guild::kNameFieldNumber;
const int gs_dbs_guild_op_req_struct_update_guild::kPresidentUserIdFieldNumber;
const int gs_dbs_guild_op_req_struct_update_guild::kStatusFieldNumber;
const int gs_dbs_guild_op_req_struct_update_guild::kFlagFieldNumber;
const int gs_dbs_guild_op_req_struct_update_guild::kContributionPointFieldNumber;
const int gs_dbs_guild_op_req_struct_update_guild::kCoinFieldNumber;
const int gs_dbs_guild_op_req_struct_update_guild::kAnnouncementFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_update_guild::gs_dbs_guild_op_req_struct_update_guild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_update_guild::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_update_guild::gs_dbs_guild_op_req_struct_update_guild(const gs_dbs_guild_op_req_struct_update_guild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_update_guild::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  president_user_id_ = 0u;
  status_ = 0;
  flag_ = 0u;
  contribution_point_ = 0u;
  coin_ = 0u;
  announcement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_update_guild::~gs_dbs_guild_op_req_struct_update_guild() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_update_guild::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (announcement_ != &::google::protobuf::internal::kEmptyString) {
    delete announcement_;
  }
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_update_guild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_update_guild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_update_guild_descriptor_;
}

const gs_dbs_guild_op_req_struct_update_guild& gs_dbs_guild_op_req_struct_update_guild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_update_guild* gs_dbs_guild_op_req_struct_update_guild::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_update_guild* gs_dbs_guild_op_req_struct_update_guild::New() const {
  return new gs_dbs_guild_op_req_struct_update_guild;
}

void gs_dbs_guild_op_req_struct_update_guild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    president_user_id_ = 0u;
    status_ = 0;
    flag_ = 0u;
    contribution_point_ = 0u;
    coin_ = 0u;
    if (has_announcement()) {
      if (announcement_ != &::google::protobuf::internal::kEmptyString) {
        announcement_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_update_guild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_president_user_id;
        break;
      }

      // optional uint32 president_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_president_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &president_user_id_)));
          set_has_president_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .e_apply_switch_status status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_apply_switch_status_IsValid(value)) {
            set_status(static_cast< ::e_apply_switch_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_contribution_point;
        break;
      }

      // optional uint32 contribution_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_point_)));
          set_has_contribution_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_announcement;
        break;
      }

      // optional string announcement = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_announcement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_announcement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->announcement().data(), this->announcement().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_update_guild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 president_user_id = 3;
  if (has_president_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->president_user_id(), output);
  }

  // optional .e_apply_switch_status status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional uint32 flag = 5;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flag(), output);
  }

  // optional uint32 contribution_point = 6;
  if (has_contribution_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->contribution_point(), output);
  }

  // optional uint32 coin = 7;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->coin(), output);
  }

  // optional string announcement = 8;
  if (has_announcement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->announcement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_update_guild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 president_user_id = 3;
  if (has_president_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->president_user_id(), target);
  }

  // optional .e_apply_switch_status status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional uint32 flag = 5;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->flag(), target);
  }

  // optional uint32 contribution_point = 6;
  if (has_contribution_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->contribution_point(), target);
  }

  // optional uint32 coin = 7;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->coin(), target);
  }

  // optional string announcement = 8;
  if (has_announcement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->announcement().data(), this->announcement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->announcement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_update_guild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 president_user_id = 3;
    if (has_president_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->president_user_id());
    }

    // optional .e_apply_switch_status status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 flag = 5;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional uint32 contribution_point = 6;
    if (has_contribution_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution_point());
    }

    // optional uint32 coin = 7;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional string announcement = 8;
    if (has_announcement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->announcement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_update_guild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_update_guild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_update_guild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_update_guild::MergeFrom(const gs_dbs_guild_op_req_struct_update_guild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_president_user_id()) {
      set_president_user_id(from.president_user_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_contribution_point()) {
      set_contribution_point(from.contribution_point());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_announcement()) {
      set_announcement(from.announcement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_update_guild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_update_guild::CopyFrom(const gs_dbs_guild_op_req_struct_update_guild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_update_guild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_update_guild::Swap(gs_dbs_guild_op_req_struct_update_guild* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(name_, other->name_);
    std::swap(president_user_id_, other->president_user_id_);
    std::swap(status_, other->status_);
    std::swap(flag_, other->flag_);
    std::swap(contribution_point_, other->contribution_point_);
    std::swap(coin_, other->coin_);
    std::swap(announcement_, other->announcement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_update_guild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_update_guild_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_update_guild_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_delete_guild::kGuildIdFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_delete_guild::gs_dbs_guild_op_req_struct_delete_guild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_delete_guild::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_delete_guild::gs_dbs_guild_op_req_struct_delete_guild(const gs_dbs_guild_op_req_struct_delete_guild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_delete_guild::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_delete_guild::~gs_dbs_guild_op_req_struct_delete_guild() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_delete_guild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_delete_guild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_delete_guild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_delete_guild_descriptor_;
}

const gs_dbs_guild_op_req_struct_delete_guild& gs_dbs_guild_op_req_struct_delete_guild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_delete_guild* gs_dbs_guild_op_req_struct_delete_guild::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_delete_guild* gs_dbs_guild_op_req_struct_delete_guild::New() const {
  return new gs_dbs_guild_op_req_struct_delete_guild;
}

void gs_dbs_guild_op_req_struct_delete_guild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_delete_guild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_delete_guild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_delete_guild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_delete_guild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_delete_guild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_delete_guild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_delete_guild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_delete_guild::MergeFrom(const gs_dbs_guild_op_req_struct_delete_guild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_delete_guild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_delete_guild::CopyFrom(const gs_dbs_guild_op_req_struct_delete_guild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_delete_guild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_delete_guild::Swap(gs_dbs_guild_op_req_struct_delete_guild* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_delete_guild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_delete_guild_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_delete_guild_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_new_apply::kGuildIdsFieldNumber;
const int gs_dbs_guild_op_req_struct_new_apply::kUserIdFieldNumber;
const int gs_dbs_guild_op_req_struct_new_apply::kTimeFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_new_apply::gs_dbs_guild_op_req_struct_new_apply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_new_apply::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_new_apply::gs_dbs_guild_op_req_struct_new_apply(const gs_dbs_guild_op_req_struct_new_apply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_new_apply::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_new_apply::~gs_dbs_guild_op_req_struct_new_apply() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_new_apply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_new_apply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_new_apply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_new_apply_descriptor_;
}

const gs_dbs_guild_op_req_struct_new_apply& gs_dbs_guild_op_req_struct_new_apply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_new_apply* gs_dbs_guild_op_req_struct_new_apply::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_new_apply* gs_dbs_guild_op_req_struct_new_apply::New() const {
  return new gs_dbs_guild_op_req_struct_new_apply;
}

void gs_dbs_guild_op_req_struct_new_apply::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    user_id_ = 0u;
    time_ = 0u;
  }
  guild_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_new_apply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 guild_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_guild_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_guild_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_guild_ids;
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_new_apply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 guild_ids = 1;
  for (int i = 0; i < this->guild_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->guild_ids(i), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_new_apply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 guild_ids = 1;
  for (int i = 0; i < this->guild_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->guild_ids(i), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_new_apply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  // repeated uint32 guild_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->guild_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->guild_ids(i));
    }
    total_size += 1 * this->guild_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_new_apply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_new_apply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_new_apply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_new_apply::MergeFrom(const gs_dbs_guild_op_req_struct_new_apply& from) {
  GOOGLE_CHECK_NE(&from, this);
  guild_ids_.MergeFrom(from.guild_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_new_apply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_new_apply::CopyFrom(const gs_dbs_guild_op_req_struct_new_apply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_new_apply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_new_apply::Swap(gs_dbs_guild_op_req_struct_new_apply* other) {
  if (other != this) {
    guild_ids_.Swap(&other->guild_ids_);
    std::swap(user_id_, other->user_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_new_apply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_new_apply_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_new_apply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* gs_dbs_guild_op_req_struct_delete_apply_EOPType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_delete_apply_EOPType_descriptor_;
}
bool gs_dbs_guild_op_req_struct_delete_apply_EOPType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_dbs_guild_op_req_struct_delete_apply_EOPType gs_dbs_guild_op_req_struct_delete_apply::G1_A1;
const gs_dbs_guild_op_req_struct_delete_apply_EOPType gs_dbs_guild_op_req_struct_delete_apply::G1_AN;
const gs_dbs_guild_op_req_struct_delete_apply_EOPType gs_dbs_guild_op_req_struct_delete_apply::A1_GN;
const gs_dbs_guild_op_req_struct_delete_apply_EOPType gs_dbs_guild_op_req_struct_delete_apply::EOPType_MIN;
const gs_dbs_guild_op_req_struct_delete_apply_EOPType gs_dbs_guild_op_req_struct_delete_apply::EOPType_MAX;
const int gs_dbs_guild_op_req_struct_delete_apply::EOPType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_delete_apply::kOpTypeFieldNumber;
const int gs_dbs_guild_op_req_struct_delete_apply::kGuildIdFieldNumber;
const int gs_dbs_guild_op_req_struct_delete_apply::kUserIdFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_delete_apply::gs_dbs_guild_op_req_struct_delete_apply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_delete_apply::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_delete_apply::gs_dbs_guild_op_req_struct_delete_apply(const gs_dbs_guild_op_req_struct_delete_apply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_delete_apply::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  guild_id_ = 0u;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_delete_apply::~gs_dbs_guild_op_req_struct_delete_apply() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_delete_apply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_delete_apply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_delete_apply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_delete_apply_descriptor_;
}

const gs_dbs_guild_op_req_struct_delete_apply& gs_dbs_guild_op_req_struct_delete_apply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_delete_apply* gs_dbs_guild_op_req_struct_delete_apply::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_delete_apply* gs_dbs_guild_op_req_struct_delete_apply::New() const {
  return new gs_dbs_guild_op_req_struct_delete_apply;
}

void gs_dbs_guild_op_req_struct_delete_apply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    guild_id_ = 0u;
    user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_delete_apply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_guild_op_req.struct_delete_apply.EOPType op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_guild_op_req_struct_delete_apply_EOPType_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_guild_op_req_struct_delete_apply_EOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_delete_apply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_guild_op_req.struct_delete_apply.EOPType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guild_id(), output);
  }

  // optional uint32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_delete_apply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_guild_op_req.struct_delete_apply.EOPType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional uint32 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guild_id(), target);
  }

  // optional uint32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_delete_apply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_guild_op_req.struct_delete_apply.EOPType op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional uint32 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_delete_apply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_delete_apply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_delete_apply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_delete_apply::MergeFrom(const gs_dbs_guild_op_req_struct_delete_apply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_delete_apply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_delete_apply::CopyFrom(const gs_dbs_guild_op_req_struct_delete_apply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_delete_apply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_delete_apply::Swap(gs_dbs_guild_op_req_struct_delete_apply* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_delete_apply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_delete_apply_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_delete_apply_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_new_member::kGuildIdFieldNumber;
const int gs_dbs_guild_op_req_struct_new_member::kUserIdFieldNumber;
const int gs_dbs_guild_op_req_struct_new_member::kPositionFieldNumber;
const int gs_dbs_guild_op_req_struct_new_member::kJoinTimeFieldNumber;
const int gs_dbs_guild_op_req_struct_new_member::kLeaveTimeFieldNumber;
const int gs_dbs_guild_op_req_struct_new_member::kContributionPointFieldNumber;
const int gs_dbs_guild_op_req_struct_new_member::kCoinFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_new_member::gs_dbs_guild_op_req_struct_new_member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_new_member::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_new_member::gs_dbs_guild_op_req_struct_new_member(const gs_dbs_guild_op_req_struct_new_member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_new_member::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  user_id_ = 0u;
  position_ = 0;
  join_time_ = 0u;
  leave_time_ = 0u;
  contribution_point_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_new_member::~gs_dbs_guild_op_req_struct_new_member() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_new_member::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_new_member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_new_member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_new_member_descriptor_;
}

const gs_dbs_guild_op_req_struct_new_member& gs_dbs_guild_op_req_struct_new_member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_new_member* gs_dbs_guild_op_req_struct_new_member::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_new_member* gs_dbs_guild_op_req_struct_new_member::New() const {
  return new gs_dbs_guild_op_req_struct_new_member;
}

void gs_dbs_guild_op_req_struct_new_member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0u;
    user_id_ = 0u;
    position_ = 0;
    join_time_ = 0u;
    leave_time_ = 0u;
    contribution_point_ = 0u;
    coin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_new_member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // required uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // required .e_guild_position position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_guild_position_IsValid(value)) {
            set_position(static_cast< ::e_guild_position >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_join_time;
        break;
      }

      // required uint32 join_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_time_)));
          set_has_join_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leave_time;
        break;
      }

      // required uint32 leave_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leave_time_)));
          set_has_leave_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_contribution_point;
        break;
      }

      // required uint32 contribution_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_point_)));
          set_has_contribution_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_coin;
        break;
      }

      // required uint32 coin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_new_member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // required .e_guild_position position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->position(), output);
  }

  // required uint32 join_time = 4;
  if (has_join_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->join_time(), output);
  }

  // required uint32 leave_time = 5;
  if (has_leave_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leave_time(), output);
  }

  // required uint32 contribution_point = 6;
  if (has_contribution_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->contribution_point(), output);
  }

  // required uint32 coin = 7;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_new_member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // required uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // required .e_guild_position position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->position(), target);
  }

  // required uint32 join_time = 4;
  if (has_join_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->join_time(), target);
  }

  // required uint32 leave_time = 5;
  if (has_leave_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leave_time(), target);
  }

  // required uint32 contribution_point = 6;
  if (has_contribution_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->contribution_point(), target);
  }

  // required uint32 coin = 7;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_new_member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // required uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .e_guild_position position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }

    // required uint32 join_time = 4;
    if (has_join_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->join_time());
    }

    // required uint32 leave_time = 5;
    if (has_leave_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leave_time());
    }

    // required uint32 contribution_point = 6;
    if (has_contribution_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution_point());
    }

    // required uint32 coin = 7;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_new_member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_new_member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_new_member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_new_member::MergeFrom(const gs_dbs_guild_op_req_struct_new_member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_join_time()) {
      set_join_time(from.join_time());
    }
    if (from.has_leave_time()) {
      set_leave_time(from.leave_time());
    }
    if (from.has_contribution_point()) {
      set_contribution_point(from.contribution_point());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_new_member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_new_member::CopyFrom(const gs_dbs_guild_op_req_struct_new_member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_new_member::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_new_member::Swap(gs_dbs_guild_op_req_struct_new_member* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(position_, other->position_);
    std::swap(join_time_, other->join_time_);
    std::swap(leave_time_, other->leave_time_);
    std::swap(contribution_point_, other->contribution_point_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_new_member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_new_member_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_new_member_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_update_member::kUserIdFieldNumber;
const int gs_dbs_guild_op_req_struct_update_member::kPositionFieldNumber;
const int gs_dbs_guild_op_req_struct_update_member::kJoinTimeFieldNumber;
const int gs_dbs_guild_op_req_struct_update_member::kLeaveTimeFieldNumber;
const int gs_dbs_guild_op_req_struct_update_member::kContributionPointFieldNumber;
const int gs_dbs_guild_op_req_struct_update_member::kCoinFieldNumber;
const int gs_dbs_guild_op_req_struct_update_member::kNewGuildIdFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_update_member::gs_dbs_guild_op_req_struct_update_member()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_update_member::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_update_member::gs_dbs_guild_op_req_struct_update_member(const gs_dbs_guild_op_req_struct_update_member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_update_member::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  position_ = 0;
  join_time_ = 0u;
  leave_time_ = 0u;
  contribution_point_ = 0u;
  coin_ = 0u;
  new_guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_update_member::~gs_dbs_guild_op_req_struct_update_member() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_update_member::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_update_member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_update_member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_update_member_descriptor_;
}

const gs_dbs_guild_op_req_struct_update_member& gs_dbs_guild_op_req_struct_update_member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_update_member* gs_dbs_guild_op_req_struct_update_member::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_update_member* gs_dbs_guild_op_req_struct_update_member::New() const {
  return new gs_dbs_guild_op_req_struct_update_member;
}

void gs_dbs_guild_op_req_struct_update_member::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    position_ = 0;
    join_time_ = 0u;
    leave_time_ = 0u;
    contribution_point_ = 0u;
    coin_ = 0u;
    new_guild_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_update_member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional .e_guild_position position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::e_guild_position_IsValid(value)) {
            set_position(static_cast< ::e_guild_position >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_join_time;
        break;
      }

      // optional uint32 join_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_time_)));
          set_has_join_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leave_time;
        break;
      }

      // optional uint32 leave_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leave_time_)));
          set_has_leave_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_contribution_point;
        break;
      }

      // optional uint32 contribution_point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribution_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribution_point_)));
          set_has_contribution_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_new_guild_id;
        break;
      }

      // optional uint32 new_guild_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_guild_id_)));
          set_has_new_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_update_member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional .e_guild_position position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->position(), output);
  }

  // optional uint32 join_time = 3;
  if (has_join_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->join_time(), output);
  }

  // optional uint32 leave_time = 4;
  if (has_leave_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leave_time(), output);
  }

  // optional uint32 contribution_point = 5;
  if (has_contribution_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->contribution_point(), output);
  }

  // optional uint32 coin = 6;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->coin(), output);
  }

  // optional uint32 new_guild_id = 7;
  if (has_new_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->new_guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_update_member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional .e_guild_position position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->position(), target);
  }

  // optional uint32 join_time = 3;
  if (has_join_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->join_time(), target);
  }

  // optional uint32 leave_time = 4;
  if (has_leave_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leave_time(), target);
  }

  // optional uint32 contribution_point = 5;
  if (has_contribution_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->contribution_point(), target);
  }

  // optional uint32 coin = 6;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->coin(), target);
  }

  // optional uint32 new_guild_id = 7;
  if (has_new_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->new_guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_update_member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional .e_guild_position position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }

    // optional uint32 join_time = 3;
    if (has_join_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->join_time());
    }

    // optional uint32 leave_time = 4;
    if (has_leave_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leave_time());
    }

    // optional uint32 contribution_point = 5;
    if (has_contribution_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribution_point());
    }

    // optional uint32 coin = 6;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional uint32 new_guild_id = 7;
    if (has_new_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_update_member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_update_member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_update_member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_update_member::MergeFrom(const gs_dbs_guild_op_req_struct_update_member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_join_time()) {
      set_join_time(from.join_time());
    }
    if (from.has_leave_time()) {
      set_leave_time(from.leave_time());
    }
    if (from.has_contribution_point()) {
      set_contribution_point(from.contribution_point());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_new_guild_id()) {
      set_new_guild_id(from.new_guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_update_member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_update_member::CopyFrom(const gs_dbs_guild_op_req_struct_update_member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_update_member::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_update_member::Swap(gs_dbs_guild_op_req_struct_update_member* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(position_, other->position_);
    std::swap(join_time_, other->join_time_);
    std::swap(leave_time_, other->leave_time_);
    std::swap(contribution_point_, other->contribution_point_);
    std::swap(coin_, other->coin_);
    std::swap(new_guild_id_, other->new_guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_update_member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_update_member_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_update_member_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_new_boss::kGuildIdFieldNumber;
const int gs_dbs_guild_op_req_struct_new_boss::kPositionFieldNumber;
const int gs_dbs_guild_op_req_struct_new_boss::kLoseHpFieldNumber;
const int gs_dbs_guild_op_req_struct_new_boss::kKillerUserIdFieldNumber;
const int gs_dbs_guild_op_req_struct_new_boss::kKilledNumFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_new_boss::gs_dbs_guild_op_req_struct_new_boss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_new_boss::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_new_boss::gs_dbs_guild_op_req_struct_new_boss(const gs_dbs_guild_op_req_struct_new_boss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_new_boss::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  position_ = 0u;
  lose_hp_ = 0u;
  killer_user_id_ = 0u;
  killed_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_new_boss::~gs_dbs_guild_op_req_struct_new_boss() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_new_boss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_new_boss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_new_boss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_new_boss_descriptor_;
}

const gs_dbs_guild_op_req_struct_new_boss& gs_dbs_guild_op_req_struct_new_boss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_new_boss* gs_dbs_guild_op_req_struct_new_boss::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_new_boss* gs_dbs_guild_op_req_struct_new_boss::New() const {
  return new gs_dbs_guild_op_req_struct_new_boss;
}

void gs_dbs_guild_op_req_struct_new_boss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0u;
    position_ = 0u;
    lose_hp_ = 0u;
    killer_user_id_ = 0u;
    killed_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_new_boss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required uint32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lose_hp;
        break;
      }

      // required uint32 lose_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_hp_)));
          set_has_lose_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_killer_user_id;
        break;
      }

      // required uint32 killer_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killer_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_user_id_)));
          set_has_killer_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_killed_num;
        break;
      }

      // required uint32 killed_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killed_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_num_)));
          set_has_killed_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_new_boss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // required uint32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // required uint32 lose_hp = 3;
  if (has_lose_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lose_hp(), output);
  }

  // required uint32 killer_user_id = 4;
  if (has_killer_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killer_user_id(), output);
  }

  // required uint32 killed_num = 5;
  if (has_killed_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killed_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_new_boss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // required uint32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // required uint32 lose_hp = 3;
  if (has_lose_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lose_hp(), target);
  }

  // required uint32 killer_user_id = 4;
  if (has_killer_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killer_user_id(), target);
  }

  // required uint32 killed_num = 5;
  if (has_killed_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killed_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_new_boss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // required uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // required uint32 lose_hp = 3;
    if (has_lose_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose_hp());
    }

    // required uint32 killer_user_id = 4;
    if (has_killer_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_user_id());
    }

    // required uint32 killed_num = 5;
    if (has_killed_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killed_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_new_boss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_new_boss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_new_boss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_new_boss::MergeFrom(const gs_dbs_guild_op_req_struct_new_boss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_lose_hp()) {
      set_lose_hp(from.lose_hp());
    }
    if (from.has_killer_user_id()) {
      set_killer_user_id(from.killer_user_id());
    }
    if (from.has_killed_num()) {
      set_killed_num(from.killed_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_new_boss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_new_boss::CopyFrom(const gs_dbs_guild_op_req_struct_new_boss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_new_boss::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_new_boss::Swap(gs_dbs_guild_op_req_struct_new_boss* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(position_, other->position_);
    std::swap(lose_hp_, other->lose_hp_);
    std::swap(killer_user_id_, other->killer_user_id_);
    std::swap(killed_num_, other->killed_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_new_boss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_new_boss_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_new_boss_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_update_boss::kGuildIdFieldNumber;
const int gs_dbs_guild_op_req_struct_update_boss::kPositionFieldNumber;
const int gs_dbs_guild_op_req_struct_update_boss::kLoseHpFieldNumber;
const int gs_dbs_guild_op_req_struct_update_boss::kKillerUserIdFieldNumber;
const int gs_dbs_guild_op_req_struct_update_boss::kKilledNumFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_update_boss::gs_dbs_guild_op_req_struct_update_boss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_update_boss::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_update_boss::gs_dbs_guild_op_req_struct_update_boss(const gs_dbs_guild_op_req_struct_update_boss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_update_boss::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  position_ = 0u;
  lose_hp_ = 0u;
  killer_user_id_ = 0u;
  killed_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_update_boss::~gs_dbs_guild_op_req_struct_update_boss() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_update_boss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_update_boss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_update_boss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_update_boss_descriptor_;
}

const gs_dbs_guild_op_req_struct_update_boss& gs_dbs_guild_op_req_struct_update_boss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_update_boss* gs_dbs_guild_op_req_struct_update_boss::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_update_boss* gs_dbs_guild_op_req_struct_update_boss::New() const {
  return new gs_dbs_guild_op_req_struct_update_boss;
}

void gs_dbs_guild_op_req_struct_update_boss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0u;
    position_ = 0u;
    lose_hp_ = 0u;
    killer_user_id_ = 0u;
    killed_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_update_boss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required uint32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lose_hp;
        break;
      }

      // optional uint32 lose_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lose_hp_)));
          set_has_lose_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_killer_user_id;
        break;
      }

      // optional uint32 killer_user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killer_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_user_id_)));
          set_has_killer_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_killed_num;
        break;
      }

      // optional uint32 killed_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killed_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_num_)));
          set_has_killed_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_update_boss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // required uint32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // optional uint32 lose_hp = 3;
  if (has_lose_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lose_hp(), output);
  }

  // optional uint32 killer_user_id = 4;
  if (has_killer_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killer_user_id(), output);
  }

  // optional uint32 killed_num = 5;
  if (has_killed_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killed_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_update_boss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // required uint32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // optional uint32 lose_hp = 3;
  if (has_lose_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lose_hp(), target);
  }

  // optional uint32 killer_user_id = 4;
  if (has_killer_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killer_user_id(), target);
  }

  // optional uint32 killed_num = 5;
  if (has_killed_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killed_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_update_boss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // required uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional uint32 lose_hp = 3;
    if (has_lose_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lose_hp());
    }

    // optional uint32 killer_user_id = 4;
    if (has_killer_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_user_id());
    }

    // optional uint32 killed_num = 5;
    if (has_killed_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killed_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_update_boss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_update_boss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_update_boss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_update_boss::MergeFrom(const gs_dbs_guild_op_req_struct_update_boss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_lose_hp()) {
      set_lose_hp(from.lose_hp());
    }
    if (from.has_killer_user_id()) {
      set_killer_user_id(from.killer_user_id());
    }
    if (from.has_killed_num()) {
      set_killed_num(from.killed_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_update_boss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_update_boss::CopyFrom(const gs_dbs_guild_op_req_struct_update_boss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_update_boss::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_update_boss::Swap(gs_dbs_guild_op_req_struct_update_boss* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(position_, other->position_);
    std::swap(lose_hp_, other->lose_hp_);
    std::swap(killer_user_id_, other->killer_user_id_);
    std::swap(killed_num_, other->killed_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_update_boss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_update_boss_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_update_boss_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_new_boss_attacker::kUserIdFieldNumber;
const int gs_dbs_guild_op_req_struct_new_boss_attacker::kBossPositionFieldNumber;
const int gs_dbs_guild_op_req_struct_new_boss_attacker::kBossLoseHpFieldNumber;
const int gs_dbs_guild_op_req_struct_new_boss_attacker::kLastResetTimeFieldNumber;
const int gs_dbs_guild_op_req_struct_new_boss_attacker::kLastDayResetNumFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_new_boss_attacker::gs_dbs_guild_op_req_struct_new_boss_attacker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_new_boss_attacker::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_new_boss_attacker::gs_dbs_guild_op_req_struct_new_boss_attacker(const gs_dbs_guild_op_req_struct_new_boss_attacker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_new_boss_attacker::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  boss_position_ = 0u;
  boss_lose_hp_ = 0u;
  last_reset_time_ = 0u;
  last_day_reset_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_new_boss_attacker::~gs_dbs_guild_op_req_struct_new_boss_attacker() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_new_boss_attacker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_new_boss_attacker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_new_boss_attacker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_new_boss_attacker_descriptor_;
}

const gs_dbs_guild_op_req_struct_new_boss_attacker& gs_dbs_guild_op_req_struct_new_boss_attacker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_new_boss_attacker* gs_dbs_guild_op_req_struct_new_boss_attacker::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_new_boss_attacker* gs_dbs_guild_op_req_struct_new_boss_attacker::New() const {
  return new gs_dbs_guild_op_req_struct_new_boss_attacker;
}

void gs_dbs_guild_op_req_struct_new_boss_attacker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    boss_position_ = 0u;
    boss_lose_hp_ = 0u;
    last_reset_time_ = 0u;
    last_day_reset_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_new_boss_attacker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boss_position;
        break;
      }

      // required uint32 boss_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_position_)));
          set_has_boss_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boss_lose_hp;
        break;
      }

      // required uint32 boss_lose_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_lose_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_lose_hp_)));
          set_has_boss_lose_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_reset_time;
        break;
      }

      // required uint32 last_reset_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_reset_time_)));
          set_has_last_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_day_reset_num;
        break;
      }

      // required uint32 last_day_reset_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_reset_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_day_reset_num_)));
          set_has_last_day_reset_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_new_boss_attacker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 boss_position = 2;
  if (has_boss_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boss_position(), output);
  }

  // required uint32 boss_lose_hp = 3;
  if (has_boss_lose_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->boss_lose_hp(), output);
  }

  // required uint32 last_reset_time = 4;
  if (has_last_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_reset_time(), output);
  }

  // required uint32 last_day_reset_num = 5;
  if (has_last_day_reset_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_day_reset_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_new_boss_attacker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 boss_position = 2;
  if (has_boss_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boss_position(), target);
  }

  // required uint32 boss_lose_hp = 3;
  if (has_boss_lose_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->boss_lose_hp(), target);
  }

  // required uint32 last_reset_time = 4;
  if (has_last_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_reset_time(), target);
  }

  // required uint32 last_day_reset_num = 5;
  if (has_last_day_reset_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_day_reset_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_new_boss_attacker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 boss_position = 2;
    if (has_boss_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_position());
    }

    // required uint32 boss_lose_hp = 3;
    if (has_boss_lose_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_lose_hp());
    }

    // required uint32 last_reset_time = 4;
    if (has_last_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_reset_time());
    }

    // required uint32 last_day_reset_num = 5;
    if (has_last_day_reset_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_day_reset_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_new_boss_attacker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_new_boss_attacker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_new_boss_attacker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_new_boss_attacker::MergeFrom(const gs_dbs_guild_op_req_struct_new_boss_attacker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_boss_position()) {
      set_boss_position(from.boss_position());
    }
    if (from.has_boss_lose_hp()) {
      set_boss_lose_hp(from.boss_lose_hp());
    }
    if (from.has_last_reset_time()) {
      set_last_reset_time(from.last_reset_time());
    }
    if (from.has_last_day_reset_num()) {
      set_last_day_reset_num(from.last_day_reset_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_new_boss_attacker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_new_boss_attacker::CopyFrom(const gs_dbs_guild_op_req_struct_new_boss_attacker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_new_boss_attacker::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_new_boss_attacker::Swap(gs_dbs_guild_op_req_struct_new_boss_attacker* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(boss_position_, other->boss_position_);
    std::swap(boss_lose_hp_, other->boss_lose_hp_);
    std::swap(last_reset_time_, other->last_reset_time_);
    std::swap(last_day_reset_num_, other->last_day_reset_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_new_boss_attacker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_new_boss_attacker_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_new_boss_attacker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType_descriptor_;
}
bool gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType gs_dbs_guild_op_req_struct_delete_boss_attacker::M1_B1;
const gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType gs_dbs_guild_op_req_struct_delete_boss_attacker::M1_BN;
const gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType gs_dbs_guild_op_req_struct_delete_boss_attacker::MN_B1;
const gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType gs_dbs_guild_op_req_struct_delete_boss_attacker::MN_BN;
const gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType gs_dbs_guild_op_req_struct_delete_boss_attacker::EOPType_MIN;
const gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType gs_dbs_guild_op_req_struct_delete_boss_attacker::EOPType_MAX;
const int gs_dbs_guild_op_req_struct_delete_boss_attacker::EOPType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_delete_boss_attacker::kOpTypeFieldNumber;
const int gs_dbs_guild_op_req_struct_delete_boss_attacker::kUserIdFieldNumber;
const int gs_dbs_guild_op_req_struct_delete_boss_attacker::kBossPositionFieldNumber;
const int gs_dbs_guild_op_req_struct_delete_boss_attacker::kGuildIdFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_delete_boss_attacker::gs_dbs_guild_op_req_struct_delete_boss_attacker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_delete_boss_attacker::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_delete_boss_attacker::gs_dbs_guild_op_req_struct_delete_boss_attacker(const gs_dbs_guild_op_req_struct_delete_boss_attacker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_delete_boss_attacker::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  user_id_ = 0u;
  boss_position_ = 0u;
  guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_delete_boss_attacker::~gs_dbs_guild_op_req_struct_delete_boss_attacker() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_delete_boss_attacker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_delete_boss_attacker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_delete_boss_attacker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_delete_boss_attacker_descriptor_;
}

const gs_dbs_guild_op_req_struct_delete_boss_attacker& gs_dbs_guild_op_req_struct_delete_boss_attacker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_delete_boss_attacker* gs_dbs_guild_op_req_struct_delete_boss_attacker::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_delete_boss_attacker* gs_dbs_guild_op_req_struct_delete_boss_attacker::New() const {
  return new gs_dbs_guild_op_req_struct_delete_boss_attacker;
}

void gs_dbs_guild_op_req_struct_delete_boss_attacker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    user_id_ = 0u;
    boss_position_ = 0u;
    guild_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_delete_boss_attacker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_guild_op_req.struct_delete_boss_attacker.EOPType op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_guild_op_req_struct_delete_boss_attacker_EOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boss_position;
        break;
      }

      // optional uint32 boss_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_position_)));
          set_has_boss_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_delete_boss_attacker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_guild_op_req.struct_delete_boss_attacker.EOPType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // optional uint32 boss_position = 3;
  if (has_boss_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->boss_position(), output);
  }

  // optional uint32 guild_id = 4;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_delete_boss_attacker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_guild_op_req.struct_delete_boss_attacker.EOPType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // optional uint32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // optional uint32 boss_position = 3;
  if (has_boss_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->boss_position(), target);
  }

  // optional uint32 guild_id = 4;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_delete_boss_attacker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_guild_op_req.struct_delete_boss_attacker.EOPType op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // optional uint32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 boss_position = 3;
    if (has_boss_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_position());
    }

    // optional uint32 guild_id = 4;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_delete_boss_attacker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_delete_boss_attacker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_delete_boss_attacker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_delete_boss_attacker::MergeFrom(const gs_dbs_guild_op_req_struct_delete_boss_attacker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_boss_position()) {
      set_boss_position(from.boss_position());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_delete_boss_attacker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_delete_boss_attacker::CopyFrom(const gs_dbs_guild_op_req_struct_delete_boss_attacker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_delete_boss_attacker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_delete_boss_attacker::Swap(gs_dbs_guild_op_req_struct_delete_boss_attacker* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(user_id_, other->user_id_);
    std::swap(boss_position_, other->boss_position_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_delete_boss_attacker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_delete_boss_attacker_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_delete_boss_attacker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_new_dead_hero::kUserIdFieldNumber;
const int gs_dbs_guild_op_req_struct_new_dead_hero::kBossPositionFieldNumber;
const int gs_dbs_guild_op_req_struct_new_dead_hero::kHerosIdFieldNumber;
const int gs_dbs_guild_op_req_struct_new_dead_hero::kDeadTimeFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_new_dead_hero::gs_dbs_guild_op_req_struct_new_dead_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_new_dead_hero::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_new_dead_hero::gs_dbs_guild_op_req_struct_new_dead_hero(const gs_dbs_guild_op_req_struct_new_dead_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_new_dead_hero::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  boss_position_ = 0u;
  dead_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_new_dead_hero::~gs_dbs_guild_op_req_struct_new_dead_hero() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_new_dead_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_new_dead_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_new_dead_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_new_dead_hero_descriptor_;
}

const gs_dbs_guild_op_req_struct_new_dead_hero& gs_dbs_guild_op_req_struct_new_dead_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_new_dead_hero* gs_dbs_guild_op_req_struct_new_dead_hero::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_new_dead_hero* gs_dbs_guild_op_req_struct_new_dead_hero::New() const {
  return new gs_dbs_guild_op_req_struct_new_dead_hero;
}

void gs_dbs_guild_op_req_struct_new_dead_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    boss_position_ = 0u;
    dead_time_ = 0u;
  }
  heros_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_new_dead_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boss_position;
        break;
      }

      // required uint32 boss_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_position_)));
          set_has_boss_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heros_id;
        break;
      }

      // repeated uint32 heros_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_heros_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heros_id;
        if (input->ExpectTag(32)) goto parse_dead_time;
        break;
      }

      // required uint32 dead_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dead_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dead_time_)));
          set_has_dead_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_new_dead_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 boss_position = 2;
  if (has_boss_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boss_position(), output);
  }

  // repeated uint32 heros_id = 3;
  for (int i = 0; i < this->heros_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->heros_id(i), output);
  }

  // required uint32 dead_time = 4;
  if (has_dead_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dead_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_new_dead_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 boss_position = 2;
  if (has_boss_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boss_position(), target);
  }

  // repeated uint32 heros_id = 3;
  for (int i = 0; i < this->heros_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->heros_id(i), target);
  }

  // required uint32 dead_time = 4;
  if (has_dead_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dead_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_new_dead_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 boss_position = 2;
    if (has_boss_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_position());
    }

    // required uint32 dead_time = 4;
    if (has_dead_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dead_time());
    }

  }
  // repeated uint32 heros_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros_id(i));
    }
    total_size += 1 * this->heros_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_new_dead_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_new_dead_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_new_dead_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_new_dead_hero::MergeFrom(const gs_dbs_guild_op_req_struct_new_dead_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_id_.MergeFrom(from.heros_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_boss_position()) {
      set_boss_position(from.boss_position());
    }
    if (from.has_dead_time()) {
      set_dead_time(from.dead_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_new_dead_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_new_dead_hero::CopyFrom(const gs_dbs_guild_op_req_struct_new_dead_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_new_dead_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_new_dead_hero::Swap(gs_dbs_guild_op_req_struct_new_dead_hero* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(boss_position_, other->boss_position_);
    heros_id_.Swap(&other->heros_id_);
    std::swap(dead_time_, other->dead_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_new_dead_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_new_dead_hero_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_new_dead_hero_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* gs_dbs_guild_op_req_struct_delete_dead_hero_EOPType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_delete_dead_hero_EOPType_descriptor_;
}
bool gs_dbs_guild_op_req_struct_delete_dead_hero_EOPType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gs_dbs_guild_op_req_struct_delete_dead_hero_EOPType gs_dbs_guild_op_req_struct_delete_dead_hero::M1;
const gs_dbs_guild_op_req_struct_delete_dead_hero_EOPType gs_dbs_guild_op_req_struct_delete_dead_hero::MN;
const gs_dbs_guild_op_req_struct_delete_dead_hero_EOPType gs_dbs_guild_op_req_struct_delete_dead_hero::EOPType_MIN;
const gs_dbs_guild_op_req_struct_delete_dead_hero_EOPType gs_dbs_guild_op_req_struct_delete_dead_hero::EOPType_MAX;
const int gs_dbs_guild_op_req_struct_delete_dead_hero::EOPType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gs_dbs_guild_op_req_struct_delete_dead_hero::kOpTypeFieldNumber;
const int gs_dbs_guild_op_req_struct_delete_dead_hero::kBossPositionFieldNumber;
const int gs_dbs_guild_op_req_struct_delete_dead_hero::kUserIdFieldNumber;
const int gs_dbs_guild_op_req_struct_delete_dead_hero::kGuildIdFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req_struct_delete_dead_hero::gs_dbs_guild_op_req_struct_delete_dead_hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req_struct_delete_dead_hero::InitAsDefaultInstance() {
}

gs_dbs_guild_op_req_struct_delete_dead_hero::gs_dbs_guild_op_req_struct_delete_dead_hero(const gs_dbs_guild_op_req_struct_delete_dead_hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_delete_dead_hero::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 1;
  boss_position_ = 0u;
  user_id_ = 0u;
  guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req_struct_delete_dead_hero::~gs_dbs_guild_op_req_struct_delete_dead_hero() {
  SharedDtor();
}

void gs_dbs_guild_op_req_struct_delete_dead_hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_dbs_guild_op_req_struct_delete_dead_hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req_struct_delete_dead_hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_struct_delete_dead_hero_descriptor_;
}

const gs_dbs_guild_op_req_struct_delete_dead_hero& gs_dbs_guild_op_req_struct_delete_dead_hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req_struct_delete_dead_hero* gs_dbs_guild_op_req_struct_delete_dead_hero::default_instance_ = NULL;

gs_dbs_guild_op_req_struct_delete_dead_hero* gs_dbs_guild_op_req_struct_delete_dead_hero::New() const {
  return new gs_dbs_guild_op_req_struct_delete_dead_hero;
}

void gs_dbs_guild_op_req_struct_delete_dead_hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 1;
    boss_position_ = 0u;
    user_id_ = 0u;
    guild_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req_struct_delete_dead_hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gs_dbs_guild_op_req.struct_delete_dead_hero.EOPType op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gs_dbs_guild_op_req_struct_delete_dead_hero_EOPType_IsValid(value)) {
            set_op_type(static_cast< ::gs_dbs_guild_op_req_struct_delete_dead_hero_EOPType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boss_position;
        break;
      }

      // required uint32 boss_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_position_)));
          set_has_boss_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional uint32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guild_id;
        break;
      }

      // optional uint32 guild_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req_struct_delete_dead_hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gs_dbs_guild_op_req.struct_delete_dead_hero.EOPType op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op_type(), output);
  }

  // required uint32 boss_position = 2;
  if (has_boss_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boss_position(), output);
  }

  // optional uint32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_id(), output);
  }

  // optional uint32 guild_id = 4;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req_struct_delete_dead_hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gs_dbs_guild_op_req.struct_delete_dead_hero.EOPType op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op_type(), target);
  }

  // required uint32 boss_position = 2;
  if (has_boss_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boss_position(), target);
  }

  // optional uint32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_id(), target);
  }

  // optional uint32 guild_id = 4;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req_struct_delete_dead_hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gs_dbs_guild_op_req.struct_delete_dead_hero.EOPType op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
    }

    // required uint32 boss_position = 2;
    if (has_boss_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss_position());
    }

    // optional uint32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional uint32 guild_id = 4;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req_struct_delete_dead_hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req_struct_delete_dead_hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req_struct_delete_dead_hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req_struct_delete_dead_hero::MergeFrom(const gs_dbs_guild_op_req_struct_delete_dead_hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_boss_position()) {
      set_boss_position(from.boss_position());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req_struct_delete_dead_hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req_struct_delete_dead_hero::CopyFrom(const gs_dbs_guild_op_req_struct_delete_dead_hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req_struct_delete_dead_hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gs_dbs_guild_op_req_struct_delete_dead_hero::Swap(gs_dbs_guild_op_req_struct_delete_dead_hero* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(boss_position_, other->boss_position_);
    std::swap(user_id_, other->user_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req_struct_delete_dead_hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_struct_delete_dead_hero_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_struct_delete_dead_hero_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int gs_dbs_guild_op_req::kNewGuildFieldNumber;
const int gs_dbs_guild_op_req::kUpdateGuildFieldNumber;
const int gs_dbs_guild_op_req::kDeleteGuildFieldNumber;
const int gs_dbs_guild_op_req::kNewApplyFieldNumber;
const int gs_dbs_guild_op_req::kDeleteApplyFieldNumber;
const int gs_dbs_guild_op_req::kNewMemberFieldNumber;
const int gs_dbs_guild_op_req::kUpdateMembersFieldNumber;
const int gs_dbs_guild_op_req::kNewBossFieldNumber;
const int gs_dbs_guild_op_req::kUpdateBossFieldNumber;
const int gs_dbs_guild_op_req::kNewBossAttackerFieldNumber;
const int gs_dbs_guild_op_req::kDeleteBossAttackerFieldNumber;
const int gs_dbs_guild_op_req::kNewDeadHeroFieldNumber;
const int gs_dbs_guild_op_req::kDeleteDeadHeroFieldNumber;
#endif  // !_MSC_VER

gs_dbs_guild_op_req::gs_dbs_guild_op_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_dbs_guild_op_req::InitAsDefaultInstance() {
  new_guild_ = const_cast< ::gs_dbs_guild_op_req_struct_new_guild*>(&::gs_dbs_guild_op_req_struct_new_guild::default_instance());
  update_guild_ = const_cast< ::gs_dbs_guild_op_req_struct_update_guild*>(&::gs_dbs_guild_op_req_struct_update_guild::default_instance());
  delete_guild_ = const_cast< ::gs_dbs_guild_op_req_struct_delete_guild*>(&::gs_dbs_guild_op_req_struct_delete_guild::default_instance());
  new_apply_ = const_cast< ::gs_dbs_guild_op_req_struct_new_apply*>(&::gs_dbs_guild_op_req_struct_new_apply::default_instance());
  delete_apply_ = const_cast< ::gs_dbs_guild_op_req_struct_delete_apply*>(&::gs_dbs_guild_op_req_struct_delete_apply::default_instance());
  new_member_ = const_cast< ::gs_dbs_guild_op_req_struct_new_member*>(&::gs_dbs_guild_op_req_struct_new_member::default_instance());
  new_boss_ = const_cast< ::gs_dbs_guild_op_req_struct_new_boss*>(&::gs_dbs_guild_op_req_struct_new_boss::default_instance());
  update_boss_ = const_cast< ::gs_dbs_guild_op_req_struct_update_boss*>(&::gs_dbs_guild_op_req_struct_update_boss::default_instance());
  new_boss_attacker_ = const_cast< ::gs_dbs_guild_op_req_struct_new_boss_attacker*>(&::gs_dbs_guild_op_req_struct_new_boss_attacker::default_instance());
  delete_boss_attacker_ = const_cast< ::gs_dbs_guild_op_req_struct_delete_boss_attacker*>(&::gs_dbs_guild_op_req_struct_delete_boss_attacker::default_instance());
  new_dead_hero_ = const_cast< ::gs_dbs_guild_op_req_struct_new_dead_hero*>(&::gs_dbs_guild_op_req_struct_new_dead_hero::default_instance());
  delete_dead_hero_ = const_cast< ::gs_dbs_guild_op_req_struct_delete_dead_hero*>(&::gs_dbs_guild_op_req_struct_delete_dead_hero::default_instance());
}

gs_dbs_guild_op_req::gs_dbs_guild_op_req(const gs_dbs_guild_op_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_dbs_guild_op_req::SharedCtor() {
  _cached_size_ = 0;
  new_guild_ = NULL;
  update_guild_ = NULL;
  delete_guild_ = NULL;
  new_apply_ = NULL;
  delete_apply_ = NULL;
  new_member_ = NULL;
  new_boss_ = NULL;
  update_boss_ = NULL;
  new_boss_attacker_ = NULL;
  delete_boss_attacker_ = NULL;
  new_dead_hero_ = NULL;
  delete_dead_hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_dbs_guild_op_req::~gs_dbs_guild_op_req() {
  SharedDtor();
}

void gs_dbs_guild_op_req::SharedDtor() {
  if (this != default_instance_) {
    delete new_guild_;
    delete update_guild_;
    delete delete_guild_;
    delete new_apply_;
    delete delete_apply_;
    delete new_member_;
    delete new_boss_;
    delete update_boss_;
    delete new_boss_attacker_;
    delete delete_boss_attacker_;
    delete new_dead_hero_;
    delete delete_dead_hero_;
  }
}

void gs_dbs_guild_op_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_dbs_guild_op_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_dbs_guild_op_req_descriptor_;
}

const gs_dbs_guild_op_req& gs_dbs_guild_op_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

gs_dbs_guild_op_req* gs_dbs_guild_op_req::default_instance_ = NULL;

gs_dbs_guild_op_req* gs_dbs_guild_op_req::New() const {
  return new gs_dbs_guild_op_req;
}

void gs_dbs_guild_op_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_new_guild()) {
      if (new_guild_ != NULL) new_guild_->::gs_dbs_guild_op_req_struct_new_guild::Clear();
    }
    if (has_update_guild()) {
      if (update_guild_ != NULL) update_guild_->::gs_dbs_guild_op_req_struct_update_guild::Clear();
    }
    if (has_delete_guild()) {
      if (delete_guild_ != NULL) delete_guild_->::gs_dbs_guild_op_req_struct_delete_guild::Clear();
    }
    if (has_new_apply()) {
      if (new_apply_ != NULL) new_apply_->::gs_dbs_guild_op_req_struct_new_apply::Clear();
    }
    if (has_delete_apply()) {
      if (delete_apply_ != NULL) delete_apply_->::gs_dbs_guild_op_req_struct_delete_apply::Clear();
    }
    if (has_new_member()) {
      if (new_member_ != NULL) new_member_->::gs_dbs_guild_op_req_struct_new_member::Clear();
    }
    if (has_new_boss()) {
      if (new_boss_ != NULL) new_boss_->::gs_dbs_guild_op_req_struct_new_boss::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_update_boss()) {
      if (update_boss_ != NULL) update_boss_->::gs_dbs_guild_op_req_struct_update_boss::Clear();
    }
    if (has_new_boss_attacker()) {
      if (new_boss_attacker_ != NULL) new_boss_attacker_->::gs_dbs_guild_op_req_struct_new_boss_attacker::Clear();
    }
    if (has_delete_boss_attacker()) {
      if (delete_boss_attacker_ != NULL) delete_boss_attacker_->::gs_dbs_guild_op_req_struct_delete_boss_attacker::Clear();
    }
    if (has_new_dead_hero()) {
      if (new_dead_hero_ != NULL) new_dead_hero_->::gs_dbs_guild_op_req_struct_new_dead_hero::Clear();
    }
    if (has_delete_dead_hero()) {
      if (delete_dead_hero_ != NULL) delete_dead_hero_->::gs_dbs_guild_op_req_struct_delete_dead_hero::Clear();
    }
  }
  update_members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_dbs_guild_op_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gs_dbs_guild_op_req.struct_new_guild new_guild = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_update_guild;
        break;
      }

      // optional .gs_dbs_guild_op_req.struct_update_guild update_guild = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_delete_guild;
        break;
      }

      // optional .gs_dbs_guild_op_req.struct_delete_guild delete_guild = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delete_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_guild()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_apply;
        break;
      }

      // optional .gs_dbs_guild_op_req.struct_new_apply new_apply = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_apply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_delete_apply;
        break;
      }

      // optional .gs_dbs_guild_op_req.struct_delete_apply delete_apply = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delete_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_apply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_new_member;
        break;
      }

      // optional .gs_dbs_guild_op_req.struct_new_member new_member = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_update_members;
        break;
      }

      // repeated .gs_dbs_guild_op_req.struct_update_member update_members = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_update_members;
        if (input->ExpectTag(74)) goto parse_new_boss;
        break;
      }

      // optional .gs_dbs_guild_op_req.struct_new_boss new_boss = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_update_boss;
        break;
      }

      // optional .gs_dbs_guild_op_req.struct_update_boss update_boss = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_new_boss_attacker;
        break;
      }

      // optional .gs_dbs_guild_op_req.struct_new_boss_attacker new_boss_attacker = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_boss_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_boss_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_delete_boss_attacker;
        break;
      }

      // optional .gs_dbs_guild_op_req.struct_delete_boss_attacker delete_boss_attacker = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delete_boss_attacker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_boss_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_new_dead_hero;
        break;
      }

      // optional .gs_dbs_guild_op_req.struct_new_dead_hero new_dead_hero = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_dead_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_dead_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_delete_dead_hero;
        break;
      }

      // optional .gs_dbs_guild_op_req.struct_delete_dead_hero delete_dead_hero = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delete_dead_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_dead_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_dbs_guild_op_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .gs_dbs_guild_op_req.struct_new_guild new_guild = 1;
  if (has_new_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->new_guild(), output);
  }

  // optional .gs_dbs_guild_op_req.struct_update_guild update_guild = 2;
  if (has_update_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->update_guild(), output);
  }

  // optional .gs_dbs_guild_op_req.struct_delete_guild delete_guild = 3;
  if (has_delete_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->delete_guild(), output);
  }

  // optional .gs_dbs_guild_op_req.struct_new_apply new_apply = 4;
  if (has_new_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->new_apply(), output);
  }

  // optional .gs_dbs_guild_op_req.struct_delete_apply delete_apply = 5;
  if (has_delete_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->delete_apply(), output);
  }

  // optional .gs_dbs_guild_op_req.struct_new_member new_member = 6;
  if (has_new_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->new_member(), output);
  }

  // repeated .gs_dbs_guild_op_req.struct_update_member update_members = 7;
  for (int i = 0; i < this->update_members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->update_members(i), output);
  }

  // optional .gs_dbs_guild_op_req.struct_new_boss new_boss = 9;
  if (has_new_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->new_boss(), output);
  }

  // optional .gs_dbs_guild_op_req.struct_update_boss update_boss = 10;
  if (has_update_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->update_boss(), output);
  }

  // optional .gs_dbs_guild_op_req.struct_new_boss_attacker new_boss_attacker = 11;
  if (has_new_boss_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->new_boss_attacker(), output);
  }

  // optional .gs_dbs_guild_op_req.struct_delete_boss_attacker delete_boss_attacker = 13;
  if (has_delete_boss_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->delete_boss_attacker(), output);
  }

  // optional .gs_dbs_guild_op_req.struct_new_dead_hero new_dead_hero = 14;
  if (has_new_dead_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->new_dead_hero(), output);
  }

  // optional .gs_dbs_guild_op_req.struct_delete_dead_hero delete_dead_hero = 15;
  if (has_delete_dead_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->delete_dead_hero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_dbs_guild_op_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .gs_dbs_guild_op_req.struct_new_guild new_guild = 1;
  if (has_new_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->new_guild(), target);
  }

  // optional .gs_dbs_guild_op_req.struct_update_guild update_guild = 2;
  if (has_update_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->update_guild(), target);
  }

  // optional .gs_dbs_guild_op_req.struct_delete_guild delete_guild = 3;
  if (has_delete_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->delete_guild(), target);
  }

  // optional .gs_dbs_guild_op_req.struct_new_apply new_apply = 4;
  if (has_new_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->new_apply(), target);
  }

  // optional .gs_dbs_guild_op_req.struct_delete_apply delete_apply = 5;
  if (has_delete_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->delete_apply(), target);
  }

  // optional .gs_dbs_guild_op_req.struct_new_member new_member = 6;
  if (has_new_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->new_member(), target);
  }

  // repeated .gs_dbs_guild_op_req.struct_update_member update_members = 7;
  for (int i = 0; i < this->update_members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->update_members(i), target);
  }

  // optional .gs_dbs_guild_op_req.struct_new_boss new_boss = 9;
  if (has_new_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->new_boss(), target);
  }

  // optional .gs_dbs_guild_op_req.struct_update_boss update_boss = 10;
  if (has_update_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->update_boss(), target);
  }

  // optional .gs_dbs_guild_op_req.struct_new_boss_attacker new_boss_attacker = 11;
  if (has_new_boss_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->new_boss_attacker(), target);
  }

  // optional .gs_dbs_guild_op_req.struct_delete_boss_attacker delete_boss_attacker = 13;
  if (has_delete_boss_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->delete_boss_attacker(), target);
  }

  // optional .gs_dbs_guild_op_req.struct_new_dead_hero new_dead_hero = 14;
  if (has_new_dead_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->new_dead_hero(), target);
  }

  // optional .gs_dbs_guild_op_req.struct_delete_dead_hero delete_dead_hero = 15;
  if (has_delete_dead_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->delete_dead_hero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_dbs_guild_op_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gs_dbs_guild_op_req.struct_new_guild new_guild = 1;
    if (has_new_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_guild());
    }

    // optional .gs_dbs_guild_op_req.struct_update_guild update_guild = 2;
    if (has_update_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_guild());
    }

    // optional .gs_dbs_guild_op_req.struct_delete_guild delete_guild = 3;
    if (has_delete_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_guild());
    }

    // optional .gs_dbs_guild_op_req.struct_new_apply new_apply = 4;
    if (has_new_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_apply());
    }

    // optional .gs_dbs_guild_op_req.struct_delete_apply delete_apply = 5;
    if (has_delete_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_apply());
    }

    // optional .gs_dbs_guild_op_req.struct_new_member new_member = 6;
    if (has_new_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_member());
    }

    // optional .gs_dbs_guild_op_req.struct_new_boss new_boss = 9;
    if (has_new_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_boss());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .gs_dbs_guild_op_req.struct_update_boss update_boss = 10;
    if (has_update_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_boss());
    }

    // optional .gs_dbs_guild_op_req.struct_new_boss_attacker new_boss_attacker = 11;
    if (has_new_boss_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_boss_attacker());
    }

    // optional .gs_dbs_guild_op_req.struct_delete_boss_attacker delete_boss_attacker = 13;
    if (has_delete_boss_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_boss_attacker());
    }

    // optional .gs_dbs_guild_op_req.struct_new_dead_hero new_dead_hero = 14;
    if (has_new_dead_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_dead_hero());
    }

    // optional .gs_dbs_guild_op_req.struct_delete_dead_hero delete_dead_hero = 15;
    if (has_delete_dead_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delete_dead_hero());
    }

  }
  // repeated .gs_dbs_guild_op_req.struct_update_member update_members = 7;
  total_size += 1 * this->update_members_size();
  for (int i = 0; i < this->update_members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->update_members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_dbs_guild_op_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_dbs_guild_op_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_dbs_guild_op_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_dbs_guild_op_req::MergeFrom(const gs_dbs_guild_op_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  update_members_.MergeFrom(from.update_members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_guild()) {
      mutable_new_guild()->::gs_dbs_guild_op_req_struct_new_guild::MergeFrom(from.new_guild());
    }
    if (from.has_update_guild()) {
      mutable_update_guild()->::gs_dbs_guild_op_req_struct_update_guild::MergeFrom(from.update_guild());
    }
    if (from.has_delete_guild()) {
      mutable_delete_guild()->::gs_dbs_guild_op_req_struct_delete_guild::MergeFrom(from.delete_guild());
    }
    if (from.has_new_apply()) {
      mutable_new_apply()->::gs_dbs_guild_op_req_struct_new_apply::MergeFrom(from.new_apply());
    }
    if (from.has_delete_apply()) {
      mutable_delete_apply()->::gs_dbs_guild_op_req_struct_delete_apply::MergeFrom(from.delete_apply());
    }
    if (from.has_new_member()) {
      mutable_new_member()->::gs_dbs_guild_op_req_struct_new_member::MergeFrom(from.new_member());
    }
    if (from.has_new_boss()) {
      mutable_new_boss()->::gs_dbs_guild_op_req_struct_new_boss::MergeFrom(from.new_boss());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_update_boss()) {
      mutable_update_boss()->::gs_dbs_guild_op_req_struct_update_boss::MergeFrom(from.update_boss());
    }
    if (from.has_new_boss_attacker()) {
      mutable_new_boss_attacker()->::gs_dbs_guild_op_req_struct_new_boss_attacker::MergeFrom(from.new_boss_attacker());
    }
    if (from.has_delete_boss_attacker()) {
      mutable_delete_boss_attacker()->::gs_dbs_guild_op_req_struct_delete_boss_attacker::MergeFrom(from.delete_boss_attacker());
    }
    if (from.has_new_dead_hero()) {
      mutable_new_dead_hero()->::gs_dbs_guild_op_req_struct_new_dead_hero::MergeFrom(from.new_dead_hero());
    }
    if (from.has_delete_dead_hero()) {
      mutable_delete_dead_hero()->::gs_dbs_guild_op_req_struct_delete_dead_hero::MergeFrom(from.delete_dead_hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_dbs_guild_op_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_dbs_guild_op_req::CopyFrom(const gs_dbs_guild_op_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_dbs_guild_op_req::IsInitialized() const {

  if (has_new_guild()) {
    if (!this->new_guild().IsInitialized()) return false;
  }
  if (has_update_guild()) {
    if (!this->update_guild().IsInitialized()) return false;
  }
  if (has_delete_guild()) {
    if (!this->delete_guild().IsInitialized()) return false;
  }
  if (has_new_apply()) {
    if (!this->new_apply().IsInitialized()) return false;
  }
  if (has_delete_apply()) {
    if (!this->delete_apply().IsInitialized()) return false;
  }
  if (has_new_member()) {
    if (!this->new_member().IsInitialized()) return false;
  }
  for (int i = 0; i < update_members_size(); i++) {
    if (!this->update_members(i).IsInitialized()) return false;
  }
  if (has_new_boss()) {
    if (!this->new_boss().IsInitialized()) return false;
  }
  if (has_update_boss()) {
    if (!this->update_boss().IsInitialized()) return false;
  }
  if (has_new_boss_attacker()) {
    if (!this->new_boss_attacker().IsInitialized()) return false;
  }
  if (has_delete_boss_attacker()) {
    if (!this->delete_boss_attacker().IsInitialized()) return false;
  }
  if (has_new_dead_hero()) {
    if (!this->new_dead_hero().IsInitialized()) return false;
  }
  if (has_delete_dead_hero()) {
    if (!this->delete_dead_hero().IsInitialized()) return false;
  }
  return true;
}

void gs_dbs_guild_op_req::Swap(gs_dbs_guild_op_req* other) {
  if (other != this) {
    std::swap(new_guild_, other->new_guild_);
    std::swap(update_guild_, other->update_guild_);
    std::swap(delete_guild_, other->delete_guild_);
    std::swap(new_apply_, other->new_apply_);
    std::swap(delete_apply_, other->delete_apply_);
    std::swap(new_member_, other->new_member_);
    update_members_.Swap(&other->update_members_);
    std::swap(new_boss_, other->new_boss_);
    std::swap(update_boss_, other->update_boss_);
    std::swap(new_boss_attacker_, other->new_boss_attacker_);
    std::swap(delete_boss_attacker_, other->delete_boss_attacker_);
    std::swap(new_dead_hero_, other->new_dead_hero_);
    std::swap(delete_dead_hero_, other->delete_dead_hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_dbs_guild_op_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_dbs_guild_op_req_descriptor_;
  metadata.reflection = gs_dbs_guild_op_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dbs_gs_guild_op_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

dbs_gs_guild_op_res::dbs_gs_guild_op_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dbs_gs_guild_op_res::InitAsDefaultInstance() {
}

dbs_gs_guild_op_res::dbs_gs_guild_op_res(const dbs_gs_guild_op_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dbs_gs_guild_op_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dbs_gs_guild_op_res::~dbs_gs_guild_op_res() {
  SharedDtor();
}

void dbs_gs_guild_op_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dbs_gs_guild_op_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dbs_gs_guild_op_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dbs_gs_guild_op_res_descriptor_;
}

const dbs_gs_guild_op_res& dbs_gs_guild_op_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dbs_5fgs_5fproto_2eproto();
  return *default_instance_;
}

dbs_gs_guild_op_res* dbs_gs_guild_op_res::default_instance_ = NULL;

dbs_gs_guild_op_res* dbs_gs_guild_op_res::New() const {
  return new dbs_gs_guild_op_res;
}

void dbs_gs_guild_op_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dbs_gs_guild_op_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dbs_gs_guild_op_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dbs_gs_guild_op_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dbs_gs_guild_op_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dbs_gs_guild_op_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dbs_gs_guild_op_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dbs_gs_guild_op_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dbs_gs_guild_op_res::MergeFrom(const dbs_gs_guild_op_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dbs_gs_guild_op_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dbs_gs_guild_op_res::CopyFrom(const dbs_gs_guild_op_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dbs_gs_guild_op_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void dbs_gs_guild_op_res::Swap(dbs_gs_guild_op_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dbs_gs_guild_op_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dbs_gs_guild_op_res_descriptor_;
  metadata.reflection = dbs_gs_guild_op_res_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
