// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gs_gm_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gs_gm_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* game_element_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_element_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_gs_add_item_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_gs_add_item_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_gm_add_item_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_gm_add_item_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_gs_marquee_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_gs_marquee_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gm_gs_marquee_req_MARQUEE_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_gm_marquee_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_gm_marquee_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_gs_mail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_gs_mail_req_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* gm_gs_mail_req_MAIL_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* gs_gm_mail_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_gm_mail_res_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_gs_arena_mail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_gs_arena_mail_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_gm_arena_mail_res_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_gm_arena_mail_res_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* e_gsgm_proto_version_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_msg_gm_gs_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_msg_gs_gm_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* e_gsgm_errorcode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gs_5fgm_5fproto_2eproto() {
  protobuf_AddDesc_gs_5fgm_5fproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gs_gm_proto.proto");
  GOOGLE_CHECK(file != NULL);
  game_element_descriptor_ = file->message_type(0);
  static const int game_element_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_element, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_element, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_element, num_),
  };
  game_element_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_element_descriptor_,
      game_element::default_instance_,
      game_element_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_element, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_element, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_element));
  gm_gs_add_item_req_descriptor_ = file->message_type(1);
  static const int gm_gs_add_item_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_add_item_req, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_add_item_req, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_add_item_req, num_),
  };
  gm_gs_add_item_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_gs_add_item_req_descriptor_,
      gm_gs_add_item_req::default_instance_,
      gm_gs_add_item_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_add_item_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_add_item_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_gs_add_item_req));
  gs_gm_add_item_res_descriptor_ = file->message_type(2);
  static const int gs_gm_add_item_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_gm_add_item_res, error_code_),
  };
  gs_gm_add_item_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_gm_add_item_res_descriptor_,
      gs_gm_add_item_res::default_instance_,
      gs_gm_add_item_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_gm_add_item_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_gm_add_item_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_gm_add_item_res));
  gm_gs_marquee_req_descriptor_ = file->message_type(3);
  static const int gm_gs_marquee_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_marquee_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_marquee_req, content_),
  };
  gm_gs_marquee_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_gs_marquee_req_descriptor_,
      gm_gs_marquee_req::default_instance_,
      gm_gs_marquee_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_marquee_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_marquee_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_gs_marquee_req));
  gm_gs_marquee_req_MARQUEE_TYPE_descriptor_ = gm_gs_marquee_req_descriptor_->enum_type(0);
  gs_gm_marquee_res_descriptor_ = file->message_type(4);
  static const int gs_gm_marquee_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_gm_marquee_res, error_code_),
  };
  gs_gm_marquee_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_gm_marquee_res_descriptor_,
      gs_gm_marquee_res::default_instance_,
      gs_gm_marquee_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_gm_marquee_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_gm_marquee_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_gm_marquee_res));
  gm_gs_mail_req_descriptor_ = file->message_type(5);
  static const int gm_gs_mail_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_mail_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_mail_req, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_mail_req, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_mail_req, elements_),
  };
  gm_gs_mail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_gs_mail_req_descriptor_,
      gm_gs_mail_req::default_instance_,
      gm_gs_mail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_mail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_mail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_gs_mail_req));
  gm_gs_mail_req_MAIL_TYPE_descriptor_ = gm_gs_mail_req_descriptor_->enum_type(0);
  gs_gm_mail_res_descriptor_ = file->message_type(6);
  static const int gs_gm_mail_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_gm_mail_res, error_code_),
  };
  gs_gm_mail_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_gm_mail_res_descriptor_,
      gs_gm_mail_res::default_instance_,
      gs_gm_mail_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_gm_mail_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_gm_mail_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_gm_mail_res));
  gm_gs_arena_mail_req_descriptor_ = file->message_type(7);
  static const int gm_gs_arena_mail_req_offsets_[1] = {
  };
  gm_gs_arena_mail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_gs_arena_mail_req_descriptor_,
      gm_gs_arena_mail_req::default_instance_,
      gm_gs_arena_mail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_arena_mail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_gs_arena_mail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_gs_arena_mail_req));
  gs_gm_arena_mail_res_descriptor_ = file->message_type(8);
  static const int gs_gm_arena_mail_res_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_gm_arena_mail_res, error_code_),
  };
  gs_gm_arena_mail_res_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_gm_arena_mail_res_descriptor_,
      gs_gm_arena_mail_res::default_instance_,
      gs_gm_arena_mail_res_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_gm_arena_mail_res, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_gm_arena_mail_res, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_gm_arena_mail_res));
  e_gsgm_proto_version_descriptor_ = file->enum_type(0);
  e_msg_gm_gs_descriptor_ = file->enum_type(1);
  e_msg_gs_gm_descriptor_ = file->enum_type(2);
  e_gsgm_errorcode_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gs_5fgm_5fproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_element_descriptor_, &game_element::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_gs_add_item_req_descriptor_, &gm_gs_add_item_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_gm_add_item_res_descriptor_, &gs_gm_add_item_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_gs_marquee_req_descriptor_, &gm_gs_marquee_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_gm_marquee_res_descriptor_, &gs_gm_marquee_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_gs_mail_req_descriptor_, &gm_gs_mail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_gm_mail_res_descriptor_, &gs_gm_mail_res::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_gs_arena_mail_req_descriptor_, &gm_gs_arena_mail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_gm_arena_mail_res_descriptor_, &gs_gm_arena_mail_res::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gs_5fgm_5fproto_2eproto() {
  delete game_element::default_instance_;
  delete game_element_reflection_;
  delete gm_gs_add_item_req::default_instance_;
  delete gm_gs_add_item_req_reflection_;
  delete gs_gm_add_item_res::default_instance_;
  delete gs_gm_add_item_res_reflection_;
  delete gm_gs_marquee_req::default_instance_;
  delete gm_gs_marquee_req_reflection_;
  delete gs_gm_marquee_res::default_instance_;
  delete gs_gm_marquee_res_reflection_;
  delete gm_gs_mail_req::default_instance_;
  delete gm_gs_mail_req_reflection_;
  delete gs_gm_mail_res::default_instance_;
  delete gs_gm_mail_res_reflection_;
  delete gm_gs_arena_mail_req::default_instance_;
  delete gm_gs_arena_mail_req_reflection_;
  delete gs_gm_arena_mail_res::default_instance_;
  delete gs_gm_arena_mail_res_reflection_;
}

void protobuf_AddDesc_gs_5fgm_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021gs_gm_proto.proto\"5\n\014game_element\022\014\n\004t"
    "ype\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\013\n\003num\030\003 \002(\r\"C\n\022gm"
    "_gs_add_item_req\022\017\n\007user_id\030\001 \002(\r\022\017\n\007ite"
    "m_id\030\002 \002(\r\022\013\n\003num\030\003 \002(\r\"(\n\022gs_gm_add_ite"
    "m_res\022\022\n\nerror_code\030\001 \002(\005\"u\n\021gm_gs_marqu"
    "ee_req\022-\n\004type\030\001 \002(\0162\037.gm_gs_marquee_req"
    ".MARQUEE_TYPE\022\017\n\007content\030\002 \002(\t\" \n\014MARQUE"
    "E_TYPE\022\020\n\014MARQUEE_WORD\020\006\"\'\n\021gs_gm_marque"
    "e_res\022\022\n\nerror_code\030\001 \002(\005\"\241\001\n\016gm_gs_mail"
    "_req\022\'\n\004type\030\001 \002(\0162\031.gm_gs_mail_req.MAIL"
    "_TYPE\022\r\n\005users\030\002 \003(\r\022\017\n\007content\030\003 \002(\t\022\037\n"
    "\010elements\030\004 \003(\0132\r.game_element\"%\n\tMAIL_T"
    "YPE\022\030\n\024MAIL_TYPE_SYS_NOTICE\020\006\"$\n\016gs_gm_m"
    "ail_res\022\022\n\nerror_code\030\001 \002(\005\"\026\n\024gm_gs_are"
    "na_mail_req\"*\n\024gs_gm_arena_mail_res\022\022\n\ne"
    "rror_code\030\001 \002(\005*(\n\024e_gsgm_proto_version\022"
    "\020\n\014GSGM_VERSION\020\001*\254\001\n\013e_msg_gm_gs\022\023\n\017e_m"
    "sg_gm_gs_min\020\000\022\033\n\027e_msg_gm_gs_marquee_re"
    "q\020\001\022\034\n\030e_msg_gm_gs_add_item_req\020\002\022\030\n\024e_m"
    "sg_gm_gs_mail_req\020\003\022\036\n\032e_msg_gm_gs_arena"
    "_mail_req\020\004\022\023\n\017e_msg_gm_gs_max\020\005*\254\001\n\013e_m"
    "sg_gs_gm\022\023\n\017e_msg_gs_gm_min\020\000\022\033\n\027e_msg_g"
    "s_gm_marquee_res\020\001\022\034\n\030e_msg_gs_gm_add_it"
    "em_res\020\002\022\030\n\024e_msg_gs_gm_mail_res\020\003\022\036\n\032e_"
    "msg_gs_gm_arena_mail_res\020\004\022\023\n\017e_msg_gs_g"
    "m_max\020\005*\255\001\n\020e_gsgm_errorcode\022\030\n\024e_gsgm_e"
    "rrorcode_min\020\000\022\034\n\030e_gsgm_errorcode_succe"
    "ss\020\001\022!\n\035e_gsgm_errorcode_unkown_error\020\002\022"
    "$\n e_gsgm_errorcode_user_not_online\020\003\022\030\n"
    "\024e_gsgm_errorcode_max\020\004", 1183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gs_gm_proto.proto", &protobuf_RegisterTypes);
  game_element::default_instance_ = new game_element();
  gm_gs_add_item_req::default_instance_ = new gm_gs_add_item_req();
  gs_gm_add_item_res::default_instance_ = new gs_gm_add_item_res();
  gm_gs_marquee_req::default_instance_ = new gm_gs_marquee_req();
  gs_gm_marquee_res::default_instance_ = new gs_gm_marquee_res();
  gm_gs_mail_req::default_instance_ = new gm_gs_mail_req();
  gs_gm_mail_res::default_instance_ = new gs_gm_mail_res();
  gm_gs_arena_mail_req::default_instance_ = new gm_gs_arena_mail_req();
  gs_gm_arena_mail_res::default_instance_ = new gs_gm_arena_mail_res();
  game_element::default_instance_->InitAsDefaultInstance();
  gm_gs_add_item_req::default_instance_->InitAsDefaultInstance();
  gs_gm_add_item_res::default_instance_->InitAsDefaultInstance();
  gm_gs_marquee_req::default_instance_->InitAsDefaultInstance();
  gs_gm_marquee_res::default_instance_->InitAsDefaultInstance();
  gm_gs_mail_req::default_instance_->InitAsDefaultInstance();
  gs_gm_mail_res::default_instance_->InitAsDefaultInstance();
  gm_gs_arena_mail_req::default_instance_->InitAsDefaultInstance();
  gs_gm_arena_mail_res::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gs_5fgm_5fproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gs_5fgm_5fproto_2eproto {
  StaticDescriptorInitializer_gs_5fgm_5fproto_2eproto() {
    protobuf_AddDesc_gs_5fgm_5fproto_2eproto();
  }
} static_descriptor_initializer_gs_5fgm_5fproto_2eproto_;
const ::google::protobuf::EnumDescriptor* e_gsgm_proto_version_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_gsgm_proto_version_descriptor_;
}
bool e_gsgm_proto_version_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_msg_gm_gs_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_msg_gm_gs_descriptor_;
}
bool e_msg_gm_gs_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_msg_gs_gm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_msg_gs_gm_descriptor_;
}
bool e_msg_gs_gm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* e_gsgm_errorcode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return e_gsgm_errorcode_descriptor_;
}
bool e_gsgm_errorcode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int game_element::kTypeFieldNumber;
const int game_element::kIdFieldNumber;
const int game_element::kNumFieldNumber;
#endif  // !_MSC_VER

game_element::game_element()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_element::InitAsDefaultInstance() {
}

game_element::game_element(const game_element& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_element::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_element::~game_element() {
  SharedDtor();
}

void game_element::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_element::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_element::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_element_descriptor_;
}

const game_element& game_element::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fgm_5fproto_2eproto();
  return *default_instance_;
}

game_element* game_element::default_instance_ = NULL;

game_element* game_element::New() const {
  return new game_element;
}

void game_element::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_element::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_element::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_element::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_element::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_element::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_element* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_element*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_element::MergeFrom(const game_element& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_element::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_element::CopyFrom(const game_element& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_element::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void game_element::Swap(game_element* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_element::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_element_descriptor_;
  metadata.reflection = game_element_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_gs_add_item_req::kUserIdFieldNumber;
const int gm_gs_add_item_req::kItemIdFieldNumber;
const int gm_gs_add_item_req::kNumFieldNumber;
#endif  // !_MSC_VER

gm_gs_add_item_req::gm_gs_add_item_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_gs_add_item_req::InitAsDefaultInstance() {
}

gm_gs_add_item_req::gm_gs_add_item_req(const gm_gs_add_item_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_gs_add_item_req::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  item_id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_gs_add_item_req::~gm_gs_add_item_req() {
  SharedDtor();
}

void gm_gs_add_item_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm_gs_add_item_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_gs_add_item_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_gs_add_item_req_descriptor_;
}

const gm_gs_add_item_req& gm_gs_add_item_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fgm_5fproto_2eproto();
  return *default_instance_;
}

gm_gs_add_item_req* gm_gs_add_item_req::default_instance_ = NULL;

gm_gs_add_item_req* gm_gs_add_item_req::New() const {
  return new gm_gs_add_item_req;
}

void gm_gs_add_item_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    item_id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_gs_add_item_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // required uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_gs_add_item_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_gs_add_item_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_gs_add_item_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_gs_add_item_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_gs_add_item_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_gs_add_item_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_gs_add_item_req::MergeFrom(const gm_gs_add_item_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_gs_add_item_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_gs_add_item_req::CopyFrom(const gm_gs_add_item_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_gs_add_item_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void gm_gs_add_item_req::Swap(gm_gs_add_item_req* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_gs_add_item_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_gs_add_item_req_descriptor_;
  metadata.reflection = gm_gs_add_item_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_gm_add_item_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_gm_add_item_res::gs_gm_add_item_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_gm_add_item_res::InitAsDefaultInstance() {
}

gs_gm_add_item_res::gs_gm_add_item_res(const gs_gm_add_item_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_gm_add_item_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_gm_add_item_res::~gs_gm_add_item_res() {
  SharedDtor();
}

void gs_gm_add_item_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_gm_add_item_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_gm_add_item_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_gm_add_item_res_descriptor_;
}

const gs_gm_add_item_res& gs_gm_add_item_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fgm_5fproto_2eproto();
  return *default_instance_;
}

gs_gm_add_item_res* gs_gm_add_item_res::default_instance_ = NULL;

gs_gm_add_item_res* gs_gm_add_item_res::New() const {
  return new gs_gm_add_item_res;
}

void gs_gm_add_item_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_gm_add_item_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_gm_add_item_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_gm_add_item_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_gm_add_item_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_gm_add_item_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_gm_add_item_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_gm_add_item_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_gm_add_item_res::MergeFrom(const gs_gm_add_item_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_gm_add_item_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_gm_add_item_res::CopyFrom(const gs_gm_add_item_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_gm_add_item_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_gm_add_item_res::Swap(gs_gm_add_item_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_gm_add_item_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_gm_add_item_res_descriptor_;
  metadata.reflection = gs_gm_add_item_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* gm_gs_marquee_req_MARQUEE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_gs_marquee_req_MARQUEE_TYPE_descriptor_;
}
bool gm_gs_marquee_req_MARQUEE_TYPE_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gm_gs_marquee_req_MARQUEE_TYPE gm_gs_marquee_req::MARQUEE_WORD;
const gm_gs_marquee_req_MARQUEE_TYPE gm_gs_marquee_req::MARQUEE_TYPE_MIN;
const gm_gs_marquee_req_MARQUEE_TYPE gm_gs_marquee_req::MARQUEE_TYPE_MAX;
const int gm_gs_marquee_req::MARQUEE_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gm_gs_marquee_req::kTypeFieldNumber;
const int gm_gs_marquee_req::kContentFieldNumber;
#endif  // !_MSC_VER

gm_gs_marquee_req::gm_gs_marquee_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_gs_marquee_req::InitAsDefaultInstance() {
}

gm_gs_marquee_req::gm_gs_marquee_req(const gm_gs_marquee_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_gs_marquee_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 6;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_gs_marquee_req::~gm_gs_marquee_req() {
  SharedDtor();
}

void gm_gs_marquee_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void gm_gs_marquee_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_gs_marquee_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_gs_marquee_req_descriptor_;
}

const gm_gs_marquee_req& gm_gs_marquee_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fgm_5fproto_2eproto();
  return *default_instance_;
}

gm_gs_marquee_req* gm_gs_marquee_req::default_instance_ = NULL;

gm_gs_marquee_req* gm_gs_marquee_req::New() const {
  return new gm_gs_marquee_req;
}

void gm_gs_marquee_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 6;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_gs_marquee_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gm_gs_marquee_req.MARQUEE_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gm_gs_marquee_req_MARQUEE_TYPE_IsValid(value)) {
            set_type(static_cast< ::gm_gs_marquee_req_MARQUEE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_gs_marquee_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gm_gs_marquee_req.MARQUEE_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_gs_marquee_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gm_gs_marquee_req.MARQUEE_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_gs_marquee_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gm_gs_marquee_req.MARQUEE_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_gs_marquee_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_gs_marquee_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_gs_marquee_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_gs_marquee_req::MergeFrom(const gm_gs_marquee_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_gs_marquee_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_gs_marquee_req::CopyFrom(const gm_gs_marquee_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_gs_marquee_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void gm_gs_marquee_req::Swap(gm_gs_marquee_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_gs_marquee_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_gs_marquee_req_descriptor_;
  metadata.reflection = gm_gs_marquee_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_gm_marquee_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_gm_marquee_res::gs_gm_marquee_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_gm_marquee_res::InitAsDefaultInstance() {
}

gs_gm_marquee_res::gs_gm_marquee_res(const gs_gm_marquee_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_gm_marquee_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_gm_marquee_res::~gs_gm_marquee_res() {
  SharedDtor();
}

void gs_gm_marquee_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_gm_marquee_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_gm_marquee_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_gm_marquee_res_descriptor_;
}

const gs_gm_marquee_res& gs_gm_marquee_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fgm_5fproto_2eproto();
  return *default_instance_;
}

gs_gm_marquee_res* gs_gm_marquee_res::default_instance_ = NULL;

gs_gm_marquee_res* gs_gm_marquee_res::New() const {
  return new gs_gm_marquee_res;
}

void gs_gm_marquee_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_gm_marquee_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_gm_marquee_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_gm_marquee_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_gm_marquee_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_gm_marquee_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_gm_marquee_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_gm_marquee_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_gm_marquee_res::MergeFrom(const gs_gm_marquee_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_gm_marquee_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_gm_marquee_res::CopyFrom(const gs_gm_marquee_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_gm_marquee_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_gm_marquee_res::Swap(gs_gm_marquee_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_gm_marquee_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_gm_marquee_res_descriptor_;
  metadata.reflection = gs_gm_marquee_res_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* gm_gs_mail_req_MAIL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_gs_mail_req_MAIL_TYPE_descriptor_;
}
bool gm_gs_mail_req_MAIL_TYPE_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const gm_gs_mail_req_MAIL_TYPE gm_gs_mail_req::MAIL_TYPE_SYS_NOTICE;
const gm_gs_mail_req_MAIL_TYPE gm_gs_mail_req::MAIL_TYPE_MIN;
const gm_gs_mail_req_MAIL_TYPE gm_gs_mail_req::MAIL_TYPE_MAX;
const int gm_gs_mail_req::MAIL_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int gm_gs_mail_req::kTypeFieldNumber;
const int gm_gs_mail_req::kUsersFieldNumber;
const int gm_gs_mail_req::kContentFieldNumber;
const int gm_gs_mail_req::kElementsFieldNumber;
#endif  // !_MSC_VER

gm_gs_mail_req::gm_gs_mail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_gs_mail_req::InitAsDefaultInstance() {
}

gm_gs_mail_req::gm_gs_mail_req(const gm_gs_mail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_gs_mail_req::SharedCtor() {
  _cached_size_ = 0;
  type_ = 6;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_gs_mail_req::~gm_gs_mail_req() {
  SharedDtor();
}

void gm_gs_mail_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void gm_gs_mail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_gs_mail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_gs_mail_req_descriptor_;
}

const gm_gs_mail_req& gm_gs_mail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fgm_5fproto_2eproto();
  return *default_instance_;
}

gm_gs_mail_req* gm_gs_mail_req::default_instance_ = NULL;

gm_gs_mail_req* gm_gs_mail_req::New() const {
  return new gm_gs_mail_req;
}

void gm_gs_mail_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 6;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  users_.Clear();
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_gs_mail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gm_gs_mail_req.MAIL_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gm_gs_mail_req_MAIL_TYPE_IsValid(value)) {
            set_type(static_cast< ::gm_gs_mail_req_MAIL_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_users;
        break;
      }

      // repeated uint32 users = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_users())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_users())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_users;
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_elements;
        break;
      }

      // repeated .game_element elements = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_elements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_gs_mail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .gm_gs_mail_req.MAIL_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated uint32 users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->users(i), output);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // repeated .game_element elements = 4;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->elements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_gs_mail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .gm_gs_mail_req.MAIL_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated uint32 users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->users(i), target);
  }

  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // repeated .game_element elements = 4;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->elements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_gs_mail_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gm_gs_mail_req.MAIL_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // repeated uint32 users = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->users_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->users(i));
    }
    total_size += 1 * this->users_size() + data_size;
  }

  // repeated .game_element elements = 4;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_gs_mail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_gs_mail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_gs_mail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_gs_mail_req::MergeFrom(const gm_gs_mail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  elements_.MergeFrom(from.elements_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_gs_mail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_gs_mail_req::CopyFrom(const gm_gs_mail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_gs_mail_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  return true;
}

void gm_gs_mail_req::Swap(gm_gs_mail_req* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    users_.Swap(&other->users_);
    std::swap(content_, other->content_);
    elements_.Swap(&other->elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_gs_mail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_gs_mail_req_descriptor_;
  metadata.reflection = gm_gs_mail_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_gm_mail_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_gm_mail_res::gs_gm_mail_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_gm_mail_res::InitAsDefaultInstance() {
}

gs_gm_mail_res::gs_gm_mail_res(const gs_gm_mail_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_gm_mail_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_gm_mail_res::~gs_gm_mail_res() {
  SharedDtor();
}

void gs_gm_mail_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_gm_mail_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_gm_mail_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_gm_mail_res_descriptor_;
}

const gs_gm_mail_res& gs_gm_mail_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fgm_5fproto_2eproto();
  return *default_instance_;
}

gs_gm_mail_res* gs_gm_mail_res::default_instance_ = NULL;

gs_gm_mail_res* gs_gm_mail_res::New() const {
  return new gs_gm_mail_res;
}

void gs_gm_mail_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_gm_mail_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_gm_mail_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_gm_mail_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_gm_mail_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_gm_mail_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_gm_mail_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_gm_mail_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_gm_mail_res::MergeFrom(const gs_gm_mail_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_gm_mail_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_gm_mail_res::CopyFrom(const gs_gm_mail_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_gm_mail_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_gm_mail_res::Swap(gs_gm_mail_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_gm_mail_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_gm_mail_res_descriptor_;
  metadata.reflection = gs_gm_mail_res_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

gm_gs_arena_mail_req::gm_gs_arena_mail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_gs_arena_mail_req::InitAsDefaultInstance() {
}

gm_gs_arena_mail_req::gm_gs_arena_mail_req(const gm_gs_arena_mail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_gs_arena_mail_req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_gs_arena_mail_req::~gm_gs_arena_mail_req() {
  SharedDtor();
}

void gm_gs_arena_mail_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm_gs_arena_mail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_gs_arena_mail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_gs_arena_mail_req_descriptor_;
}

const gm_gs_arena_mail_req& gm_gs_arena_mail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fgm_5fproto_2eproto();
  return *default_instance_;
}

gm_gs_arena_mail_req* gm_gs_arena_mail_req::default_instance_ = NULL;

gm_gs_arena_mail_req* gm_gs_arena_mail_req::New() const {
  return new gm_gs_arena_mail_req;
}

void gm_gs_arena_mail_req::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_gs_arena_mail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void gm_gs_arena_mail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_gs_arena_mail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_gs_arena_mail_req::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_gs_arena_mail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_gs_arena_mail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_gs_arena_mail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_gs_arena_mail_req::MergeFrom(const gm_gs_arena_mail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_gs_arena_mail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_gs_arena_mail_req::CopyFrom(const gm_gs_arena_mail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_gs_arena_mail_req::IsInitialized() const {

  return true;
}

void gm_gs_arena_mail_req::Swap(gm_gs_arena_mail_req* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_gs_arena_mail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_gs_arena_mail_req_descriptor_;
  metadata.reflection = gm_gs_arena_mail_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_gm_arena_mail_res::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

gs_gm_arena_mail_res::gs_gm_arena_mail_res()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_gm_arena_mail_res::InitAsDefaultInstance() {
}

gs_gm_arena_mail_res::gs_gm_arena_mail_res(const gs_gm_arena_mail_res& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_gm_arena_mail_res::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_gm_arena_mail_res::~gs_gm_arena_mail_res() {
  SharedDtor();
}

void gs_gm_arena_mail_res::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_gm_arena_mail_res::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_gm_arena_mail_res::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_gm_arena_mail_res_descriptor_;
}

const gs_gm_arena_mail_res& gs_gm_arena_mail_res::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gs_5fgm_5fproto_2eproto();
  return *default_instance_;
}

gs_gm_arena_mail_res* gs_gm_arena_mail_res::default_instance_ = NULL;

gs_gm_arena_mail_res* gs_gm_arena_mail_res::New() const {
  return new gs_gm_arena_mail_res;
}

void gs_gm_arena_mail_res::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_gm_arena_mail_res::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_gm_arena_mail_res::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_gm_arena_mail_res::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_gm_arena_mail_res::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_gm_arena_mail_res::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_gm_arena_mail_res* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_gm_arena_mail_res*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_gm_arena_mail_res::MergeFrom(const gs_gm_arena_mail_res& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_gm_arena_mail_res::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_gm_arena_mail_res::CopyFrom(const gs_gm_arena_mail_res& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_gm_arena_mail_res::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void gs_gm_arena_mail_res::Swap(gs_gm_arena_mail_res* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_gm_arena_mail_res::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_gm_arena_mail_res_descriptor_;
  metadata.reflection = gs_gm_arena_mail_res_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
